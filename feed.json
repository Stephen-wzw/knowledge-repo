{
  "version": "https://jsonfeed.org/version/1.1",
  "title": "",
  "home_page_url": "https://dribble-njr.github.io/blog/blog/",
  "feed_url": "https://dribble-njr.github.io/blog/blog/feed.json",
  "description": "Personal frontend knowledge base",
  "favicon": "https://dribble-njr.github.io/blog/blog/favicon.ico",
  "items": [
    {
      "title": "SEO",
      "url": "https://dribble-njr.github.io/blog/blog/frontend/basic/html/013-seo.html",
      "id": "https://dribble-njr.github.io/blog/blog/frontend/basic/html/013-seo.html",
      "summary": "什么是 SEO SEO（Search Engine Optimization，搜索引擎优化）。这是一套指导原则，旨在使网站在搜索结果中的排名高于其他网站。特别是针对有机（未付费）搜索结果。 提示 谷歌是迄今为止全球最主要的搜索引擎。作为行业领导者，谷歌为其他搜索引擎定下了基调。 过去 在 2000 年代，搜索引擎优化意味着通过一系列肮脏的手段来提高网站...",
      "content_html": "<h2>什么是 SEO</h2>\n<p>SEO（Search Engine Optimization，搜索引擎优化）。这是一套指导原则，旨在使网站在搜索结果中的排名高于其他网站。特别是针对有机（未付费）搜索结果。</p>\n<div class=\"hint-container tip\">\n<p class=\"hint-container-title\">提示</p>\n<p>谷歌是迄今为止全球最主要的搜索引擎。作为行业领导者，谷歌为其他搜索引擎定下了基调。</p>\n</div>\n<h2>过去</h2>\n<p>在 2000 年代，搜索引擎优化意味着通过一系列肮脏的手段来提高网站在谷歌上的排名。</p>\n<p>例如，人们在网页底部放置大量关键词列表。有时，他们还会将关键词重复 1000 次，并将其放在白色区域或隐形 <code>div</code> 内。谷歌被欺骗了，从而提高了他们的排名。</p>\n<p>这种时代已经一去不复返了。谷歌聘请了世界上最优秀的人才，确保用户只能搜索到最有用的网页。</p>\n<p>上述漏洞以及更多漏洞在 <a href=\"https://support.google.com/webmasters/topic/6001971\" target=\"_blank\" rel=\"noopener noreferrer\">谷歌质量指南</a> 中都有详细说明。</p>\n<p>如果您的产品出于某种原因包含任何违反这些指南的内容，即使它们是不小心出现的，我也强烈建议将其删除，因为谷歌现在会对违反指南的网站进行惩罚。</p>\n<h2>搜索引擎优化</h2>\n<p>谷歌的排名算法非常复杂。谷歌的专家多年来一直在研究这些算法。如今，谷歌每天都会进行更新，更大的更新每年发布一到两次。</p>\n<p>有关 Google 如何对网页进行排名的信息一直在发布，有时还会有额外的信息泄露。一些网站试图跟踪这些更新，了解更新对搜索引擎优化的影响。</p>\n<p>对于开发人员来说，许多工具都可以抓取网站，并生成一份可以改进的网站技术方面的清单。例如，如果你没有使用正确的标题或状态代码。以下是其中几种工具：</p>\n<ul>\n<li><a href=\"https://www.checkbot.io/\" target=\"_blank\" rel=\"noopener noreferrer\">checkbot</a></li>\n<li><a href=\"https://seositecheckup.com/\" target=\"_blank\" rel=\"noopener noreferrer\">SEO Site Checkup</a></li>\n<li><a href=\"https://www.woorank.com/\" target=\"_blank\" rel=\"noopener noreferrer\">woorank</a></li>\n<li><a href=\"https://suite.seotesteronline.com/\" target=\"_blank\" rel=\"noopener noreferrer\">SEO Tester Online</a></li>\n<li><a href=\"https://freetools.seobility.net/\" target=\"_blank\" rel=\"noopener noreferrer\">seobility</a></li>\n<li><a href=\"https://www.screamingfrog.co.uk/seo-spider/\" target=\"_blank\" rel=\"noopener noreferrer\">screamingfrog</a></li>\n<li><a href=\"https://gtmetrix.com/\" target=\"_blank\" rel=\"noopener noreferrer\">GTmetrix</a></li>\n</ul>\n<h2>最佳实践</h2>\n<p>作为开发人员，应该考虑：快速，可访问性，使用正确的语义 <code>html</code> 标签，包括正确的结构化数据，移动友好，使用 <code>https</code>， <code>url</code> 清晰，等等。</p>\n<p><a href=\"https://developers.google.com/search/docs/fundamentals/seo-starter-guide?visit_id=638468790764088645-267844796&amp;rd=1&amp;hl=zh-cn\" target=\"_blank\" rel=\"noopener noreferrer\">谷歌 SEO 指南</a> 有详细介绍，下面是一些较为重要的最佳实践。</p>\n<ul>\n<li><code>&lt;title&gt;</code> 和 <code>&lt;meta name=\"description\"&gt;</code> 是控制网页在 Google 结果页面上显示方式的标签。</li>\n<li>HTML 标签（如标题标签 <code>h1</code>、<code>h2</code>）和 HTML 属性（如 <code>&lt;img&gt;</code> 标签上的 <code>alt</code> 属性）可帮助创建网页结构，以便爬虫更好地解读内容。</li>\n<li>结构化数据将网页中的信息，如排名、位置、营业时间和价格等，显示在谷歌搜索页面上。搜索页面上出现的信息越多，网页被点击的几率就越高。</li>\n<li>使网站对移动设备友好。</li>\n<li>使用 HTTPS 协议。</li>\n<li>让残疾人也能访问您的网站。这样不仅能让更多人访问你的网站，谷歌也会给你更高的排名。</li>\n<li>使用合理且有意义的网站分层。<code>example.com/RunningShoes/Womens</code>而不是 <code>example.com/123123/123123</code></li>\n<li>注意你的 <code>&lt;a href&gt;</code> 链接\n<ul>\n<li>每个链接都必须包含有意义的文本。</li>\n<li>使用 <code>&lt;a&gt;</code> 标签上的额外属性告诉谷歌你的外部网站链接的性质。例如，<code>rel=\"nofollow\"</code> 用于让谷歌知道你与链接的网站没有关联。</li>\n<li>确保您希望谷歌抓取的每个页面都通过 <code>&lt;a href&gt;</code> 从主页链接（可能通过多个链接）。</li>\n</ul>\n</li>\n<li>确保不同版本之间的内容不重复，以免相互竞争：\n<ul>\n<li>如果您对网站进行了结构调整，请使用 301 重定向，这样两个版本就不会被分别收录，也不会相互竞争。</li>\n<li>坚持使用一个版本的网站链接：</li>\n<li>使用 <code>&lt;meta rel=\"canonical\"&gt;</code> 标签来表示不同的页面和 URL 包含相同的内容。</li>\n</ul>\n</li>\n<li>本地化——使用 <code>hreflang meta</code> 标签告诉谷歌一个网页在不同语言中有不同的版本。</li>\n<li>提高网站速度，在 <a href=\"https://pagespeed.web.dev/?utm_source=psi&amp;utm_medium=redirect\" target=\"_blank\" rel=\"noopener noreferrer\">Google PageSpeed Insights</a> 上获得高分。</li>\n</ul>\n<div class=\"hint-container tip\">\n<p class=\"hint-container-title\">提示</p>\n<p>网站响应速度会影响搜索引擎排名，这一部分涉及到性能优化。</p>\n</div>\n",
      "date_published": "2024-03-24T00:00:00.000Z",
      "date_modified": "2024-03-24T12:23:26.000Z",
      "authors": [],
      "tags": [
        "HTML"
      ]
    },
    {
      "title": "表单数据校验",
      "url": "https://dribble-njr.github.io/blog/blog/frontend/basic/html/012-form-validation.html",
      "id": "https://dribble-njr.github.io/blog/blog/frontend/basic/html/012-form-validation.html",
      "summary": "表单校验帮助我们确保用户以正确格式填写表单数据，确保提交的数据能使我们的应用程序正常工作。 什么是表单数据校验 表单校验——验证你输入表单的数据是否正确。 该字段是必填的 请输入你的电话号码，它的格式是：xxx-xxxx 请输入一个合法的邮箱地址 你的密码长度应该是 8 至 30 位的，并且至少应该包含一个大写字母、一个符号以及一个数字 不同类型的表单...",
      "content_html": "<p>表单校验帮助我们确保用户以正确格式填写表单数据，确保提交的数据能使我们的应用程序正常工作。</p>\n<h2>什么是表单数据校验</h2>\n<p>表单校验——验证你输入表单的数据是否正确。</p>\n<ul>\n<li>该字段是必填的</li>\n<li>请输入你的电话号码，它的格式是：xxx-xxxx</li>\n<li>请输入一个合法的邮箱地址</li>\n<li>你的密码长度应该是 8 至 30 位的，并且至少应该包含一个大写字母、一个符号以及一个数字</li>\n</ul>\n<h2>不同类型的表单数据校验</h2>\n<p>在 Web 中，你可能会遇见各种不同的表单校验：</p>\n<ul>\n<li>「客户端校验」：这种类型的校验可以进一步细分成下面这些方式：\n<ul>\n<li>JavaScript 校验，这是可以完全自定义的实现方式；</li>\n<li>HTML5 内置校验，这不需要 JavaScript，而且性能更好，但是不能像 JavaScript 那样可自定义。</li>\n</ul>\n</li>\n<li>「服务器端校验」：通常服务器端校验都是发生在将数据写入数据库之前，如果数据没通过校验，则会直接从服务器端返回错误消息。</li>\n</ul>\n<p>在真实的项目开发过程中，开发者一般都倾向于使用客户端校验与服务器端校验的组合校验方式以更好的保证数据的正确性与安全性。</p>\n<h2>HTML5 内置校验</h2>\n<p>HTML5 可以通过表单元素的 <a href=\"https://developer.mozilla.org/zh-CN/docs/Web/HTML/Constraint_validation\" target=\"_blank\" rel=\"noopener noreferrer\">校验属性</a> 实现对用户的输入进行数据校验。</p>\n<p>这些属性可以让你定义一些规则，用于限定用户的输入，比如某个输入框是否必须输入，或者某个输入框的字符串的最小最大长度限制，或者某个输入框必须输入一个数字、邮箱地址等；还有数据必须匹配的模式。</p>\n<p>如果表单中输入的数据都符合这些限定规则，那么表示这个表单校验通过，否则则认为校验未通过。</p>\n<p>当一个元素校验通过时：</p>\n<ul>\n<li>该元素将可以通过 CSS 伪类 <code>:valid</code> 进行特殊的样式化；</li>\n<li>如果用户尝试提交表单，如果没有其他的控制来阻止该操作（比如 JavaScript 即可阻止提交），那么该表单的数据会被提交。</li>\n</ul>\n<p>如果一个元素未校验通过：</p>\n<ul>\n<li>该元素将可以通过 CSS 伪类 <code>:invalid</code> 进行特殊的样式化；</li>\n<li>如果用户尝试提交表单，浏览器会展示出错误消息，并停止表单的提交。</li>\n</ul>\n<h3>required 属性</h3>\n<p>最简单的 HTML5 校验功能是 <code>required</code> 属性 — 如果要使输入成为必需的，则可以使用此属性标记元素。</p>\n<p>当设置此属性时，如果输入为空，该表单将不会提交（并将显示错误消息），输入也将被视为无效。</p>\n<p>在校验失败时输入框会有一个亮红色的虚线边框，在校验通过时会有一个黄色边框。</p>\n\n<h3>正则表达式</h3>\n<p>另一个常用的校验功能是 <code>pattern</code> 属性，以正则表达式作为 <code>value</code> 值。</p>\n<div class=\"language-html\" data-ext=\"html\" data-title=\"html\"><pre class=\"language-html\"><code><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>form</span><span class=\"token punctuation\">&gt;</span></span>\n  <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>label</span> <span class=\"token attr-name\">for</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>choose<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">&gt;</span></span>Would you prefer a banana or a cherry?<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>label</span><span class=\"token punctuation\">&gt;</span></span>\n  <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>input</span> <span class=\"token attr-name\">id</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>choose<span class=\"token punctuation\">\"</span></span> <span class=\"token attr-name\">name</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>i_like<span class=\"token punctuation\">\"</span></span> <span class=\"token attr-name\">required</span> <span class=\"token attr-name\">pattern</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>banana|cherry<span class=\"token punctuation\">\"</span></span> <span class=\"token punctuation\">/&gt;</span></span>\n  <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>button</span><span class=\"token punctuation\">&gt;</span></span>Submit<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>button</span><span class=\"token punctuation\">&gt;</span></span>\n<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>form</span><span class=\"token punctuation\">&gt;</span></span>\n</code></pre></div>\n<h3>demo</h3>\n<p>这里展示一个较为完整的例子：</p>\n\n<h3>自定义错误信息</h3>\n<p>每次我们提交无效的表单数据时，浏览器总会显示错误信息。但是显示的信息取决于你所使用的浏览器。</p>\n<p>这些自动生成的错误有两个缺点：</p>\n<ul>\n<li>没有标准可以让 CSS 来改变他们的界面外观。</li>\n<li>这依赖于他们使用的浏览器环境，意味着你可能在这种语言的页面里得到另一种语言的错误提示。</li>\n</ul>\n<figure><img src=\"https://raw.githubusercontent.com/dribble-njr/typora-njr/master/img/20240320183034.png\" alt=\"错误信息\" tabindex=\"0\" loading=\"lazy\"><figcaption>错误信息</figcaption></figure>\n<p>要自定义这些消息的外观和文本，你必须使用 JavaScript; 不能使用 HTML 和 CSS 来改变。</p>\n<p>HTML5 提供 <a href=\"https://html.spec.whatwg.org/multipage/forms.html#the-constraint-validation-api\" target=\"_blank\" rel=\"noopener noreferrer\">constraint validation API</a> 来检测和自定义表单元素的状态。</p>\n<p>除此之外，它可以改变错误信息的文本。让我们快速的看一个例子：</p>\n\n<h2>JavaScript 校验</h2>\n<h3>约束校验的 API</h3>\n<p>越来越多的浏览器支持限制校验 API，并且这逐渐变得可靠。这些 API 由成组的方法和属性构成，可在特定的表单元素接口上调用：</p>\n<ul>\n<li>HTMLButtonElement</li>\n<li>HTMLFieldSetElement</li>\n<li>HTMLInputElement</li>\n<li>HTMLOutputElement</li>\n<li>HTMLSelectElement</li>\n<li>HTMLTextAreaElement</li>\n</ul>\n<div class=\"hint-container info\">\n<p class=\"hint-container-title\">相关信息</p>\n<p>具体属性见 <a href=\"https://developer.mozilla.org/zh-CN/docs/Learn/Forms/Form_validation#%E4%BD%BF%E7%94%A8_javascript_%E6%A0%A1%E9%AA%8C%E8%A1%A8%E5%8D%95\" target=\"_blank\" rel=\"noopener noreferrer\">约束校验的 API</a></p>\n</div>\n<h3>demo</h3>\n<p>这个简单的表单使用 <code>novalidate</code> 属性关闭浏览器的自动校验；这允许我们使用脚本控制表单校验。</p>\n<p>但是，这并不禁止对约束校验 API 的支持或是以下 CSS 伪类：<code>:valid</code>、<code>:invalid</code>、<code>:in-range</code> 、<code>:out-of-range</code> 的应用。</p>\n<p>这意味着，即使浏览器在发送数据之前没有自动检查表单的有效性，你仍然可以自己做，并相应地设置表单的样式。</p>\n\n<div class=\"hint-container info\">\n<p class=\"hint-container-title\">一些校验库</p>\n<ul>\n<li><a href=\"https://github.com/rickharrison/validate.js\" target=\"_blank\" rel=\"noopener noreferrer\">Validate.js</a></li>\n<li><a href=\"https://github.com/react-component/field-form\" target=\"_blank\" rel=\"noopener noreferrer\">rc-field-form</a></li>\n</ul>\n</div>\n",
      "image": "https://raw.githubusercontent.com/dribble-njr/typora-njr/master/img/20240320183034.png",
      "date_published": "2024-03-19T00:00:00.000Z",
      "date_modified": "2024-03-24T07:43:55.000Z",
      "authors": [],
      "tags": [
        "HTML"
      ]
    },
    {
      "title": "Style Props",
      "url": "https://dribble-njr.github.io/blog/blog/frontend/framework/chakra/02-style-props.html",
      "id": "https://dribble-njr.github.io/blog/blog/frontend/framework/chakra/02-style-props.html",
      "summary": "Style Props 是一种通过简单传递 prop 来改变组件样式的方法。它通过提供有用的速记方法来改变组件的样式，从而节省时间。 提示 完整 prop 别名见：Chakra UI - Style Props。 类似 Tailwind 和 驼峰 CSS。 margin and padding color and background-color Gr...",
      "content_html": "<p>Style Props 是一种通过简单传递 <code>prop</code> 来改变组件样式的方法。它通过提供有用的速记方法来改变组件的样式，从而节省时间。</p>\n<div class=\"hint-container tip\">\n<p class=\"hint-container-title\">提示</p>\n<p>完整 <code>prop</code> 别名见：<a href=\"https://chakra-ui.com/docs/styled-system/style-props\" target=\"_blank\" rel=\"noopener noreferrer\">Chakra UI - Style Props</a>。</p>\n<p>类似 Tailwind 和 驼峰 CSS。</p>\n</div>\n<h2>margin and padding</h2>\n<div class=\"language-jsx\" data-ext=\"jsx\" data-title=\"jsx\"><pre class=\"language-jsx\"><code><span class=\"token keyword\">import</span> <span class=\"token punctuation\">{</span> Box <span class=\"token punctuation\">}</span> <span class=\"token keyword\">from</span> <span class=\"token string\">\"@chakra-ui/react\"</span>\n\n<span class=\"token comment\">// m={2} refers to the value of `theme.space[2]`</span>\n<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">Box</span></span> <span class=\"token attr-name\">m</span><span class=\"token script language-javascript\"><span class=\"token script-punctuation punctuation\">=</span><span class=\"token punctuation\">{</span><span class=\"token number\">2</span><span class=\"token punctuation\">}</span></span><span class=\"token punctuation\">&gt;</span></span><span class=\"token plain-text\">Tomato</span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span><span class=\"token class-name\">Box</span></span><span class=\"token punctuation\">&gt;</span></span>\n\n<span class=\"token comment\">// You can also use custom values</span>\n<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">Box</span></span> <span class=\"token attr-name\">maxW</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>960px<span class=\"token punctuation\">\"</span></span> <span class=\"token attr-name\">mx</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>auto<span class=\"token punctuation\">\"</span></span> <span class=\"token punctuation\">/&gt;</span></span>\n\n<span class=\"token comment\">// sets margin `8px` on all viewports and `12px` from the first breakpoint and up</span>\n<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">Box</span></span> <span class=\"token attr-name\">m</span><span class=\"token script language-javascript\"><span class=\"token script-punctuation punctuation\">=</span><span class=\"token punctuation\">{</span><span class=\"token punctuation\">[</span><span class=\"token number\">2</span><span class=\"token punctuation\">,</span> <span class=\"token number\">3</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">}</span></span> <span class=\"token punctuation\">/&gt;</span></span>\n</code></pre></div><h2>color and background-color</h2>\n<div class=\"language-jsx\" data-ext=\"jsx\" data-title=\"jsx\"><pre class=\"language-jsx\"><code><span class=\"token keyword\">import</span> <span class=\"token punctuation\">{</span> Box <span class=\"token punctuation\">}</span> <span class=\"token keyword\">from</span> <span class=\"token string\">\"@chakra-ui/react\"</span>\n\n<span class=\"token comment\">// picks up a nested color value using dot notation</span>\n<span class=\"token comment\">// =&gt; `theme.colors.gray[50]`</span>\n<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">Box</span></span> <span class=\"token attr-name\">color</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">'</span>gray.50<span class=\"token punctuation\">'</span></span> <span class=\"token punctuation\">/&gt;</span></span>\n\n<span class=\"token comment\">// raw CSS color value</span>\n<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">Box</span></span> <span class=\"token attr-name\">color</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">'</span>#f00<span class=\"token punctuation\">'</span></span> <span class=\"token punctuation\">/&gt;</span></span>\n\n<span class=\"token comment\">// background colors</span>\n<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">Box</span></span> <span class=\"token attr-name\">bg</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">'</span>tomato<span class=\"token punctuation\">'</span></span> <span class=\"token punctuation\">/&gt;</span></span>\n\n<span class=\"token comment\">// verbose prop</span>\n<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">Box</span></span> <span class=\"token attr-name\">backgroundColor</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">'</span>tomato<span class=\"token punctuation\">'</span></span> <span class=\"token punctuation\">/&gt;</span></span>\n</code></pre></div><h2>Gradient</h2>\n<div class=\"language-jsx\" data-ext=\"jsx\" data-title=\"jsx\"><pre class=\"language-jsx\"><code><span class=\"token keyword\">import</span> <span class=\"token punctuation\">{</span> Box<span class=\"token punctuation\">,</span> Text <span class=\"token punctuation\">}</span> <span class=\"token keyword\">from</span> <span class=\"token string\">\"@chakra-ui/react\"</span>\n\n<span class=\"token comment\">// adding linear gradient and color transitions</span>\n<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">Box</span></span> <span class=\"token attr-name\">w</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>100%<span class=\"token punctuation\">\"</span></span> <span class=\"token attr-name\">h</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>200px<span class=\"token punctuation\">\"</span></span> <span class=\"token attr-name\">bgGradient</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>linear(to-t, green.200, pink.500)<span class=\"token punctuation\">\"</span></span> <span class=\"token punctuation\">/&gt;</span></span>\n\n<span class=\"token comment\">// adding radial gradient and color transitions</span>\n<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">Box</span></span> <span class=\"token attr-name\">w</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>100%<span class=\"token punctuation\">\"</span></span> <span class=\"token attr-name\">h</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>200px<span class=\"token punctuation\">\"</span></span> <span class=\"token attr-name\">bgGradient</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>radial(gray.300, yellow.400, pink.200)<span class=\"token punctuation\">\"</span></span> <span class=\"token punctuation\">/&gt;</span></span>\n\n<span class=\"token comment\">// adding the text gradient</span>\n<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">Text</span></span>\n  <span class=\"token attr-name\">bgGradient</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>linear(to-l, #7928CA, #FF0080)<span class=\"token punctuation\">\"</span></span>\n  <span class=\"token attr-name\">bgClip</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>text<span class=\"token punctuation\">\"</span></span>\n  <span class=\"token attr-name\">fontSize</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>6xl<span class=\"token punctuation\">\"</span></span>\n  <span class=\"token attr-name\">fontWeight</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>extrabold<span class=\"token punctuation\">\"</span></span>\n<span class=\"token punctuation\">&gt;</span></span><span class=\"token plain-text\">\n  Welcome to Chakra UI\n</span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span><span class=\"token class-name\">Text</span></span><span class=\"token punctuation\">&gt;</span></span>\n</code></pre></div><h2>Typography</h2>\n<div class=\"language-jsx\" data-ext=\"jsx\" data-title=\"jsx\"><pre class=\"language-jsx\"><code><span class=\"token keyword\">import</span> <span class=\"token punctuation\">{</span> Text <span class=\"token punctuation\">}</span> <span class=\"token keyword\">from</span> <span class=\"token string\">\"@chakra-ui/react\"</span>\n\n<span class=\"token comment\">// font-size of `theme.fontSizes.md`</span>\n<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">Text</span></span> <span class=\"token attr-name\">fontSize</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>md<span class=\"token punctuation\">\"</span></span> <span class=\"token punctuation\">/&gt;</span></span>\n\n<span class=\"token comment\">// font-size `32px`</span>\n<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">Text</span></span> <span class=\"token attr-name\">fontSize</span><span class=\"token script language-javascript\"><span class=\"token script-punctuation punctuation\">=</span><span class=\"token punctuation\">{</span><span class=\"token number\">32</span><span class=\"token punctuation\">}</span></span> <span class=\"token punctuation\">/&gt;</span></span>\n\n<span class=\"token comment\">// font-size `'2em'`</span>\n<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">Text</span></span> <span class=\"token attr-name\">fontSize</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">'</span>2em<span class=\"token punctuation\">'</span></span> <span class=\"token punctuation\">/&gt;</span></span>\n\n<span class=\"token comment\">// text-align `left` on all viewports and `center` from the first breakpoint and up</span>\n<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">Text</span></span> <span class=\"token attr-name\">textAlign</span><span class=\"token script language-javascript\"><span class=\"token script-punctuation punctuation\">=</span><span class=\"token punctuation\">{</span><span class=\"token punctuation\">[</span> <span class=\"token string\">'left'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'center'</span> <span class=\"token punctuation\">]</span><span class=\"token punctuation\">}</span></span> <span class=\"token punctuation\">/&gt;</span></span>\n</code></pre></div><h2>Layout, width and height</h2>\n<div class=\"language-jsx\" data-ext=\"jsx\" data-title=\"jsx\"><pre class=\"language-jsx\"><code><span class=\"token keyword\">import</span> <span class=\"token punctuation\">{</span> Box <span class=\"token punctuation\">}</span> <span class=\"token keyword\">from</span> <span class=\"token string\">\"@chakra-ui/react\"</span>\n\n<span class=\"token comment\">// verbose</span>\n<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">Box</span></span> <span class=\"token attr-name\">width</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>100%<span class=\"token punctuation\">\"</span></span> <span class=\"token attr-name\">height</span><span class=\"token script language-javascript\"><span class=\"token script-punctuation punctuation\">=</span><span class=\"token punctuation\">{</span><span class=\"token number\">32</span><span class=\"token punctuation\">}</span></span> <span class=\"token punctuation\">/&gt;</span></span>\n\n<span class=\"token comment\">// shorthand</span>\n<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">Box</span></span> <span class=\"token attr-name\">w</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>100%<span class=\"token punctuation\">\"</span></span> <span class=\"token attr-name\">h</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>32px<span class=\"token punctuation\">\"</span></span> <span class=\"token punctuation\">/&gt;</span></span>\n\n<span class=\"token comment\">// use theme sizing</span>\n<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">Box</span></span> <span class=\"token attr-name\">boxSize</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>sm<span class=\"token punctuation\">\"</span></span> <span class=\"token punctuation\">/&gt;</span></span>\n\n<span class=\"token comment\">// width `256px`</span>\n<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">Box</span></span> <span class=\"token attr-name\">w</span><span class=\"token script language-javascript\"><span class=\"token script-punctuation punctuation\">=</span><span class=\"token punctuation\">{</span><span class=\"token number\">256</span><span class=\"token punctuation\">}</span></span> <span class=\"token punctuation\">/&gt;</span></span>\n\n<span class=\"token comment\">// width `'40px'`</span>\n<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">Box</span></span> <span class=\"token attr-name\">w</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">'</span>40px<span class=\"token punctuation\">'</span></span> <span class=\"token punctuation\">/&gt;</span></span>\n</code></pre></div><h2>Display</h2>\n<div class=\"language-jsx\" data-ext=\"jsx\" data-title=\"jsx\"><pre class=\"language-jsx\"><code><span class=\"token keyword\">import</span> <span class=\"token punctuation\">{</span> Box <span class=\"token punctuation\">}</span> <span class=\"token keyword\">from</span> <span class=\"token string\">'@chakra-ui/react'</span>\n\n<span class=\"token comment\">// hide the element on all viewports</span>\n<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">Box</span></span> <span class=\"token attr-name\">display</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">'</span>none<span class=\"token punctuation\">'</span></span> <span class=\"token punctuation\">/&gt;</span></span>\n\n<span class=\"token comment\">// hide the element by default, and show from 'md' up</span>\n<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">Box</span></span> <span class=\"token attr-name\">display</span><span class=\"token script language-javascript\"><span class=\"token script-punctuation punctuation\">=</span><span class=\"token punctuation\">{</span><span class=\"token punctuation\">{</span> <span class=\"token literal-property property\">base</span><span class=\"token operator\">:</span> <span class=\"token string\">\"none\"</span><span class=\"token punctuation\">,</span> <span class=\"token literal-property property\">md</span><span class=\"token operator\">:</span> <span class=\"token string\">\"block\"</span> <span class=\"token punctuation\">}</span><span class=\"token punctuation\">}</span></span> <span class=\"token punctuation\">/&gt;</span></span>\n\n<span class=\"token comment\">// shorthand</span>\n<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">Box</span></span> <span class=\"token attr-name\">hideBelow</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">'</span>md<span class=\"token punctuation\">'</span></span> <span class=\"token punctuation\">/&gt;</span></span>\n\n<span class=\"token comment\">// hide the element from 'md' up</span>\n<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">Box</span></span> <span class=\"token attr-name\">display</span><span class=\"token script language-javascript\"><span class=\"token script-punctuation punctuation\">=</span><span class=\"token punctuation\">{</span><span class=\"token punctuation\">{</span> <span class=\"token literal-property property\">base</span><span class=\"token operator\">:</span> <span class=\"token string\">\"block\"</span><span class=\"token punctuation\">,</span> <span class=\"token literal-property property\">md</span><span class=\"token operator\">:</span> <span class=\"token string\">\"none\"</span> <span class=\"token punctuation\">}</span><span class=\"token punctuation\">}</span></span> <span class=\"token punctuation\">/&gt;</span></span>\n\n<span class=\"token comment\">// shorthand</span>\n<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">Box</span></span> <span class=\"token attr-name\">hideFrom</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">'</span>md<span class=\"token punctuation\">'</span></span> <span class=\"token punctuation\">/&gt;</span></span>\n</code></pre></div><h2>Flexbox</h2>\n<div class=\"language-jsx\" data-ext=\"jsx\" data-title=\"jsx\"><pre class=\"language-jsx\"><code><span class=\"token keyword\">import</span> <span class=\"token punctuation\">{</span> Box<span class=\"token punctuation\">,</span> Flex <span class=\"token punctuation\">}</span> <span class=\"token keyword\">from</span> <span class=\"token string\">\"@chakra-ui/react\"</span>\n\n<span class=\"token comment\">// verbose</span>\n<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">Box</span></span> <span class=\"token attr-name\">display</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>flex<span class=\"token punctuation\">\"</span></span> <span class=\"token attr-name\">alignItems</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>center<span class=\"token punctuation\">\"</span></span> <span class=\"token attr-name\">justifyContent</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>space-between<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">&gt;</span></span><span class=\"token plain-text\">\n  Box with Flex props\n</span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span><span class=\"token class-name\">Box</span></span><span class=\"token punctuation\">&gt;</span></span>\n\n<span class=\"token comment\">// shorthand using the `Flex` component</span>\n<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">Flex</span></span> <span class=\"token attr-name\">align</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>center<span class=\"token punctuation\">\"</span></span> <span class=\"token attr-name\">justify</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>center<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">&gt;</span></span><span class=\"token plain-text\">\n  Flex Container\n</span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span><span class=\"token class-name\">Flex</span></span><span class=\"token punctuation\">&gt;</span></span>\n</code></pre></div><h2>Grid Layout</h2>\n<div class=\"language-jsx\" data-ext=\"jsx\" data-title=\"jsx\"><pre class=\"language-jsx\"><code><span class=\"token keyword\">import</span> <span class=\"token punctuation\">{</span> Box<span class=\"token punctuation\">,</span> Grid <span class=\"token punctuation\">}</span> <span class=\"token keyword\">from</span> <span class=\"token string\">\"@chakra-ui/react\"</span>\n\n<span class=\"token comment\">// verbose</span>\n<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">Box</span></span> <span class=\"token attr-name\">display</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>grid<span class=\"token punctuation\">\"</span></span> <span class=\"token attr-name\">gridGap</span><span class=\"token script language-javascript\"><span class=\"token script-punctuation punctuation\">=</span><span class=\"token punctuation\">{</span><span class=\"token number\">2</span><span class=\"token punctuation\">}</span></span> <span class=\"token attr-name\">gridAutoFlow</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>row dense<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">&gt;</span></span><span class=\"token plain-text\">\n  Grid\n</span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span><span class=\"token class-name\">Box</span></span><span class=\"token punctuation\">&gt;</span></span>\n\n<span class=\"token comment\">// shorthand using the `Grid` component</span>\n<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">Grid</span></span> <span class=\"token attr-name\">gap</span><span class=\"token script language-javascript\"><span class=\"token script-punctuation punctuation\">=</span><span class=\"token punctuation\">{</span><span class=\"token number\">2</span><span class=\"token punctuation\">}</span></span> <span class=\"token attr-name\">autoFlow</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>row dense<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">&gt;</span></span><span class=\"token plain-text\">\n  Grid\n</span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span><span class=\"token class-name\">Grid</span></span><span class=\"token punctuation\">&gt;</span></span>\n</code></pre></div><h2>Background</h2>\n<div class=\"language-jsx\" data-ext=\"jsx\" data-title=\"jsx\"><pre class=\"language-jsx\"><code><span class=\"token keyword\">import</span> <span class=\"token punctuation\">{</span> Box <span class=\"token punctuation\">}</span> <span class=\"token keyword\">from</span> <span class=\"token string\">\"@chakra-ui/react\"</span>\n\n<span class=\"token comment\">// verbose</span>\n<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">Box</span></span>\n  <span class=\"token attr-name\">backgroundImage</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>url('/images/kyuubi.png')<span class=\"token punctuation\">\"</span></span>\n  <span class=\"token attr-name\">backgroundPosition</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>center<span class=\"token punctuation\">\"</span></span>\n  <span class=\"token attr-name\">backgroundRepeat</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>no-repeat<span class=\"token punctuation\">\"</span></span>\n<span class=\"token punctuation\">/&gt;</span></span>\n\n<span class=\"token comment\">// shorthand</span>\n<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">Box</span></span>\n  <span class=\"token attr-name\">bgImage</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>url('/images/gaara.png')<span class=\"token punctuation\">\"</span></span>\n  <span class=\"token attr-name\">bgPosition</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>center<span class=\"token punctuation\">\"</span></span>\n  <span class=\"token attr-name\">bgRepeat</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>no-repeat<span class=\"token punctuation\">\"</span></span>\n<span class=\"token punctuation\">/&gt;</span></span>\n</code></pre></div><h2>Border</h2>\n<div class=\"language-jsx\" data-ext=\"jsx\" data-title=\"jsx\"><pre class=\"language-jsx\"><code><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">Box</span></span> <span class=\"token attr-name\">border</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>1px<span class=\"token punctuation\">\"</span></span> <span class=\"token attr-name\">borderColor</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>gray.200<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">&gt;</span></span><span class=\"token plain-text\">\n  Card\n</span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span><span class=\"token class-name\">Box</span></span><span class=\"token punctuation\">&gt;</span></span>\n</code></pre></div><h2>Border Radius</h2>\n<div class=\"language-jsx\" data-ext=\"jsx\" data-title=\"jsx\"><pre class=\"language-jsx\"><code><span class=\"token keyword\">import</span> <span class=\"token punctuation\">{</span> Button <span class=\"token punctuation\">}</span> <span class=\"token keyword\">from</span> <span class=\"token string\">\"@chakra-ui/react\"</span>\n\n<span class=\"token comment\">// This button will have no right borderRadius</span>\n<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">Button</span></span> <span class=\"token attr-name\">borderRightRadius</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>0<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">&gt;</span></span><span class=\"token plain-text\">Button 1</span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span><span class=\"token class-name\">Button</span></span><span class=\"token punctuation\">&gt;</span></span>\n\n<span class=\"token comment\">// This button will have no left borderRadius*/</span>\n<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">Button</span></span> <span class=\"token attr-name\">borderLeftRadius</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>0<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">&gt;</span></span><span class=\"token plain-text\">Button 2</span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span><span class=\"token class-name\">Button</span></span><span class=\"token punctuation\">&gt;</span></span>\n\n<span class=\"token comment\">// top left and top right radius will be `theme.radii.md` =&gt; 4px</span>\n<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">Button</span></span> <span class=\"token attr-name\">borderTopRadius</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>md<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">&gt;</span></span><span class=\"token plain-text\">Button 2</span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span><span class=\"token class-name\">Button</span></span><span class=\"token punctuation\">&gt;</span></span>\n</code></pre></div><h2>Position</h2>\n<div class=\"language-jsx\" data-ext=\"jsx\" data-title=\"jsx\"><pre class=\"language-jsx\"><code><span class=\"token keyword\">import</span> <span class=\"token punctuation\">{</span> Box <span class=\"token punctuation\">}</span> <span class=\"token keyword\">from</span> <span class=\"token string\">\"@chakra-ui/react\"</span>\n\n<span class=\"token comment\">// verbose</span>\n<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">Box</span></span> <span class=\"token attr-name\">position</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>absolute<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">&gt;</span></span><span class=\"token plain-text\">Cover</span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span><span class=\"token class-name\">Box</span></span><span class=\"token punctuation\">&gt;</span></span>\n\n<span class=\"token comment\">// shorthand</span>\n<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">Box</span></span> <span class=\"token attr-name\">pos</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>absolute<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">&gt;</span></span><span class=\"token plain-text\">Cover</span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span><span class=\"token class-name\">Box</span></span><span class=\"token punctuation\">&gt;</span></span>\n<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">Box</span></span> <span class=\"token attr-name\">pos</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>absolute<span class=\"token punctuation\">\"</span></span> <span class=\"token attr-name\">top</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>0<span class=\"token punctuation\">\"</span></span> <span class=\"token attr-name\">left</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>0<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">&gt;</span></span><span class=\"token plain-text\">\n  Absolute with top and left\n</span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span><span class=\"token class-name\">Box</span></span><span class=\"token punctuation\">&gt;</span></span>\n<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">Box</span></span> <span class=\"token attr-name\">pos</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>fixed<span class=\"token punctuation\">\"</span></span> <span class=\"token attr-name\">w</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>100%<span class=\"token punctuation\">\"</span></span> <span class=\"token attr-name\">zIndex</span><span class=\"token script language-javascript\"><span class=\"token script-punctuation punctuation\">=</span><span class=\"token punctuation\">{</span><span class=\"token number\">2</span><span class=\"token punctuation\">}</span></span><span class=\"token punctuation\">&gt;</span></span><span class=\"token plain-text\">\n  Fixed with zIndex\n</span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span><span class=\"token class-name\">Box</span></span><span class=\"token punctuation\">&gt;</span></span>\n</code></pre></div><h2>Shadow</h2>\n<figure><img src=\"https://raw.githubusercontent.com/dribble-njr/typora-njr/master/img/20240307183600.png\" alt=\"Shadow\" tabindex=\"0\" loading=\"lazy\"><figcaption>Shadow</figcaption></figure>\n<div class=\"language-jsx\" data-ext=\"jsx\" data-title=\"jsx\"><pre class=\"language-jsx\"><code><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">SimpleGrid</span></span>\n  <span class=\"token attr-name\">bg</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>gray.50<span class=\"token punctuation\">\"</span></span>\n  <span class=\"token attr-name\">columns</span><span class=\"token script language-javascript\"><span class=\"token script-punctuation punctuation\">=</span><span class=\"token punctuation\">{</span><span class=\"token punctuation\">{</span> <span class=\"token literal-property property\">sm</span><span class=\"token operator\">:</span> <span class=\"token number\">2</span><span class=\"token punctuation\">,</span> <span class=\"token literal-property property\">md</span><span class=\"token operator\">:</span> <span class=\"token number\">4</span> <span class=\"token punctuation\">}</span><span class=\"token punctuation\">}</span></span>\n  <span class=\"token attr-name\">spacing</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>8<span class=\"token punctuation\">\"</span></span>\n  <span class=\"token attr-name\">p</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>10<span class=\"token punctuation\">\"</span></span>\n  <span class=\"token attr-name\">textAlign</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>center<span class=\"token punctuation\">\"</span></span>\n  <span class=\"token attr-name\">rounded</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>lg<span class=\"token punctuation\">\"</span></span>\n  <span class=\"token attr-name\">color</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>gray.400<span class=\"token punctuation\">\"</span></span>\n<span class=\"token punctuation\">&gt;</span></span><span class=\"token plain-text\">\n  </span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">Box</span></span> <span class=\"token attr-name\">boxShadow</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>xs<span class=\"token punctuation\">\"</span></span> <span class=\"token attr-name\">p</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>6<span class=\"token punctuation\">\"</span></span> <span class=\"token attr-name\">rounded</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>md<span class=\"token punctuation\">\"</span></span> <span class=\"token attr-name\">bg</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>white<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">&gt;</span></span><span class=\"token plain-text\">\n    xs\n  </span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span><span class=\"token class-name\">Box</span></span><span class=\"token punctuation\">&gt;</span></span><span class=\"token plain-text\">\n  </span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">Box</span></span> <span class=\"token attr-name\">boxShadow</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>sm<span class=\"token punctuation\">\"</span></span> <span class=\"token attr-name\">p</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>6<span class=\"token punctuation\">\"</span></span> <span class=\"token attr-name\">rounded</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>md<span class=\"token punctuation\">\"</span></span> <span class=\"token attr-name\">bg</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>white<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">&gt;</span></span><span class=\"token plain-text\">\n    sm\n  </span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span><span class=\"token class-name\">Box</span></span><span class=\"token punctuation\">&gt;</span></span><span class=\"token plain-text\">\n  </span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">Box</span></span> <span class=\"token attr-name\">boxShadow</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>base<span class=\"token punctuation\">\"</span></span> <span class=\"token attr-name\">p</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>6<span class=\"token punctuation\">\"</span></span> <span class=\"token attr-name\">rounded</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>md<span class=\"token punctuation\">\"</span></span> <span class=\"token attr-name\">bg</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>white<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">&gt;</span></span><span class=\"token plain-text\">\n    Base\n  </span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span><span class=\"token class-name\">Box</span></span><span class=\"token punctuation\">&gt;</span></span><span class=\"token plain-text\">\n  </span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">Box</span></span> <span class=\"token attr-name\">boxShadow</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>md<span class=\"token punctuation\">\"</span></span> <span class=\"token attr-name\">p</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>6<span class=\"token punctuation\">\"</span></span> <span class=\"token attr-name\">rounded</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>md<span class=\"token punctuation\">\"</span></span> <span class=\"token attr-name\">bg</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>white<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">&gt;</span></span><span class=\"token plain-text\">\n    md\n  </span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span><span class=\"token class-name\">Box</span></span><span class=\"token punctuation\">&gt;</span></span><span class=\"token plain-text\">\n  </span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">Box</span></span> <span class=\"token attr-name\">boxShadow</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>lg<span class=\"token punctuation\">\"</span></span> <span class=\"token attr-name\">p</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>6<span class=\"token punctuation\">\"</span></span> <span class=\"token attr-name\">rounded</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>md<span class=\"token punctuation\">\"</span></span> <span class=\"token attr-name\">bg</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>white<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">&gt;</span></span><span class=\"token plain-text\">\n    lg\n  </span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span><span class=\"token class-name\">Box</span></span><span class=\"token punctuation\">&gt;</span></span><span class=\"token plain-text\">\n  </span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">Box</span></span> <span class=\"token attr-name\">boxShadow</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>xl<span class=\"token punctuation\">\"</span></span> <span class=\"token attr-name\">p</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>6<span class=\"token punctuation\">\"</span></span> <span class=\"token attr-name\">rounded</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>md<span class=\"token punctuation\">\"</span></span> <span class=\"token attr-name\">bg</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>white<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">&gt;</span></span><span class=\"token plain-text\">\n    xl\n  </span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span><span class=\"token class-name\">Box</span></span><span class=\"token punctuation\">&gt;</span></span><span class=\"token plain-text\">\n  </span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">Box</span></span> <span class=\"token attr-name\">boxShadow</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>2xl<span class=\"token punctuation\">\"</span></span> <span class=\"token attr-name\">p</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>6<span class=\"token punctuation\">\"</span></span> <span class=\"token attr-name\">rounded</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>md<span class=\"token punctuation\">\"</span></span> <span class=\"token attr-name\">bg</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>white<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">&gt;</span></span><span class=\"token plain-text\">\n    2xl\n  </span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span><span class=\"token class-name\">Box</span></span><span class=\"token punctuation\">&gt;</span></span><span class=\"token plain-text\">\n  </span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">Box</span></span> <span class=\"token attr-name\">boxShadow</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>dark-lg<span class=\"token punctuation\">\"</span></span> <span class=\"token attr-name\">p</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>6<span class=\"token punctuation\">\"</span></span> <span class=\"token attr-name\">rounded</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>md<span class=\"token punctuation\">\"</span></span> <span class=\"token attr-name\">bg</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>white<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">&gt;</span></span><span class=\"token plain-text\">\n    Dark lg\n  </span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span><span class=\"token class-name\">Box</span></span><span class=\"token punctuation\">&gt;</span></span><span class=\"token plain-text\">\n  </span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">Box</span></span> <span class=\"token attr-name\">boxShadow</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>outline<span class=\"token punctuation\">\"</span></span> <span class=\"token attr-name\">p</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>6<span class=\"token punctuation\">\"</span></span> <span class=\"token attr-name\">rounded</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>md<span class=\"token punctuation\">\"</span></span> <span class=\"token attr-name\">bg</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>white<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">&gt;</span></span><span class=\"token plain-text\">\n    Outline\n  </span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span><span class=\"token class-name\">Box</span></span><span class=\"token punctuation\">&gt;</span></span><span class=\"token plain-text\">\n  </span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">Box</span></span> <span class=\"token attr-name\">boxShadow</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>inner<span class=\"token punctuation\">\"</span></span> <span class=\"token attr-name\">p</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>6<span class=\"token punctuation\">\"</span></span> <span class=\"token attr-name\">rounded</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>md<span class=\"token punctuation\">\"</span></span> <span class=\"token attr-name\">bg</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>white<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">&gt;</span></span><span class=\"token plain-text\">\n    Inner\n  </span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span><span class=\"token class-name\">Box</span></span><span class=\"token punctuation\">&gt;</span></span><span class=\"token plain-text\">\n</span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span><span class=\"token class-name\">SimpleGrid</span></span><span class=\"token punctuation\">&gt;</span></span>\n</code></pre></div><h2>Filter</h2>\n<figure><img src=\"https://raw.githubusercontent.com/dribble-njr/typora-njr/master/img/20240307183703.png\" alt=\"Filter\" tabindex=\"0\" loading=\"lazy\"><figcaption>Filter</figcaption></figure>\n<div class=\"language-jsx\" data-ext=\"jsx\" data-title=\"jsx\"><pre class=\"language-jsx\"><code><span class=\"token keyword\">function</span> <span class=\"token function\">Filters</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">const</span> basicBoxStyles <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token literal-property property\">display</span><span class=\"token operator\">:</span> <span class=\"token string\">'flex'</span><span class=\"token punctuation\">,</span>\n    <span class=\"token literal-property property\">alignItems</span><span class=\"token operator\">:</span> <span class=\"token string\">'center'</span><span class=\"token punctuation\">,</span>\n    <span class=\"token literal-property property\">justifyContent</span><span class=\"token operator\">:</span> <span class=\"token string\">'center'</span><span class=\"token punctuation\">,</span>\n    <span class=\"token literal-property property\">textAlign</span><span class=\"token operator\">:</span> <span class=\"token string\">'center'</span><span class=\"token punctuation\">,</span>\n    <span class=\"token literal-property property\">boxSize</span><span class=\"token operator\">:</span> <span class=\"token string\">'250px'</span><span class=\"token punctuation\">,</span>\n    <span class=\"token literal-property property\">color</span><span class=\"token operator\">:</span> <span class=\"token string\">'white'</span><span class=\"token punctuation\">,</span>\n    <span class=\"token literal-property property\">textShadow</span><span class=\"token operator\">:</span> <span class=\"token string\">'0 0 20px black'</span><span class=\"token punctuation\">,</span>\n    <span class=\"token literal-property property\">fontWeight</span><span class=\"token operator\">:</span> <span class=\"token string\">'bold'</span><span class=\"token punctuation\">,</span>\n    <span class=\"token literal-property property\">fontSize</span><span class=\"token operator\">:</span> <span class=\"token string\">'20px'</span><span class=\"token punctuation\">,</span>\n    <span class=\"token literal-property property\">px</span><span class=\"token operator\">:</span> <span class=\"token number\">4</span><span class=\"token punctuation\">,</span>\n    <span class=\"token literal-property property\">background</span><span class=\"token operator\">:</span>\n      <span class=\"token string\">'url(https://picsum.photos/id/1080/200/300) center/cover no-repeat'</span>\n  <span class=\"token punctuation\">}</span>\n  <span class=\"token keyword\">return</span> <span class=\"token punctuation\">(</span>\n    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">Flex</span></span> <span class=\"token attr-name\">flexWrap</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>wrap<span class=\"token punctuation\">\"</span></span> <span class=\"token attr-name\">gap</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>24px<span class=\"token punctuation\">\"</span></span> <span class=\"token attr-name\">justifyContent</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>space-evenly<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">&gt;</span></span><span class=\"token plain-text\">\n      </span><span class=\"token punctuation\">{</span><span class=\"token comment\">/* adding filter property to the element */</span><span class=\"token punctuation\">}</span><span class=\"token plain-text\">\n      </span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">Box</span></span> <span class=\"token attr-name\">sx</span><span class=\"token script language-javascript\"><span class=\"token script-punctuation punctuation\">=</span><span class=\"token punctuation\">{</span>basicBoxStyles<span class=\"token punctuation\">}</span></span> <span class=\"token attr-name\">filter</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>grayscale(80%)<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">&gt;</span></span><span class=\"token plain-text\">\n        Box with Filter\n      </span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span><span class=\"token class-name\">Box</span></span><span class=\"token punctuation\">&gt;</span></span><span class=\"token plain-text\">\n      </span><span class=\"token punctuation\">{</span><span class=\"token comment\">/* adding blur property to the element */</span><span class=\"token punctuation\">}</span><span class=\"token plain-text\">\n      </span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">Box</span></span> <span class=\"token attr-name\">sx</span><span class=\"token script language-javascript\"><span class=\"token script-punctuation punctuation\">=</span><span class=\"token punctuation\">{</span>basicBoxStyles<span class=\"token punctuation\">}</span></span> <span class=\"token attr-name\">filter</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>auto<span class=\"token punctuation\">\"</span></span> <span class=\"token attr-name\">blur</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>2px<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">&gt;</span></span><span class=\"token plain-text\">\n        Box with Blur\n      </span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span><span class=\"token class-name\">Box</span></span><span class=\"token punctuation\">&gt;</span></span><span class=\"token plain-text\">\n      </span><span class=\"token punctuation\">{</span><span class=\"token comment\">/* adding brightness property to the element */</span><span class=\"token punctuation\">}</span><span class=\"token plain-text\">\n      </span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">Box</span></span> <span class=\"token attr-name\">sx</span><span class=\"token script language-javascript\"><span class=\"token script-punctuation punctuation\">=</span><span class=\"token punctuation\">{</span>basicBoxStyles<span class=\"token punctuation\">}</span></span> <span class=\"token attr-name\">filter</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>auto<span class=\"token punctuation\">\"</span></span> <span class=\"token attr-name\">brightness</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>40%<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">&gt;</span></span><span class=\"token plain-text\">\n        Box with Brightness\n      </span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span><span class=\"token class-name\">Box</span></span><span class=\"token punctuation\">&gt;</span></span><span class=\"token plain-text\">\n    </span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span><span class=\"token class-name\">Flex</span></span><span class=\"token punctuation\">&gt;</span></span>\n  <span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">}</span>\n</code></pre></div><h2>伪类</h2>\n<div class=\"language-jsx\" data-ext=\"jsx\" data-title=\"jsx\"><pre class=\"language-jsx\"><code><span class=\"token keyword\">import</span> <span class=\"token punctuation\">{</span> Button <span class=\"token punctuation\">}</span> <span class=\"token keyword\">from</span> <span class=\"token string\">\"@chakra-ui/react\"</span>\n\n<span class=\"token comment\">// :hover style</span>\n<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">Button</span></span>\n  <span class=\"token attr-name\">colorScheme</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>teal<span class=\"token punctuation\">\"</span></span>\n  <span class=\"token attr-name\">_hover</span><span class=\"token script language-javascript\"><span class=\"token script-punctuation punctuation\">=</span><span class=\"token punctuation\">{</span><span class=\"token punctuation\">{</span>\n    <span class=\"token literal-property property\">background</span><span class=\"token operator\">:</span> <span class=\"token string\">\"white\"</span><span class=\"token punctuation\">,</span>\n    <span class=\"token literal-property property\">color</span><span class=\"token operator\">:</span> <span class=\"token string\">\"teal.500\"</span><span class=\"token punctuation\">,</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">}</span></span>\n<span class=\"token punctuation\">&gt;</span></span><span class=\"token plain-text\">\n  Hover me\n</span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span><span class=\"token class-name\">Button</span></span><span class=\"token punctuation\">&gt;</span></span>\n\n<span class=\"token comment\">// apply :hover over parent element</span>\n<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">Box</span></span>\n  <span class=\"token attr-name\">role</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>group<span class=\"token punctuation\">\"</span></span>\n<span class=\"token punctuation\">&gt;</span></span><span class=\"token plain-text\">\n  </span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">Box</span></span>\n    <span class=\"token attr-name\">_hover</span><span class=\"token script language-javascript\"><span class=\"token script-punctuation punctuation\">=</span><span class=\"token punctuation\">{</span><span class=\"token punctuation\">{</span> <span class=\"token literal-property property\">fontWeight</span><span class=\"token operator\">:</span> <span class=\"token string\">'semibold'</span> <span class=\"token punctuation\">}</span><span class=\"token punctuation\">}</span></span>\n    <span class=\"token attr-name\">_groupHover</span><span class=\"token script language-javascript\"><span class=\"token script-punctuation punctuation\">=</span><span class=\"token punctuation\">{</span><span class=\"token punctuation\">{</span> <span class=\"token literal-property property\">color</span><span class=\"token operator\">:</span> <span class=\"token string\">'tomato'</span> <span class=\"token punctuation\">}</span><span class=\"token punctuation\">}</span></span>\n  <span class=\"token punctuation\">&gt;</span></span><span class=\"token plain-text\">\n  </span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span><span class=\"token class-name\">Box</span></span><span class=\"token punctuation\">&gt;</span></span><span class=\"token plain-text\">\n</span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span><span class=\"token class-name\">Box</span></span><span class=\"token punctuation\">&gt;</span></span>\n\n<span class=\"token comment\">// add ::before pseudo element</span>\n<span class=\"token comment\">// Note: the content value needs an extra set of quotes!</span>\n<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">Box</span></span>\n  <span class=\"token attr-name\">_before</span><span class=\"token script language-javascript\"><span class=\"token script-punctuation punctuation\">=</span><span class=\"token punctuation\">{</span><span class=\"token punctuation\">{</span> <span class=\"token literal-property property\">content</span><span class=\"token operator\">:</span> <span class=\"token string\">'\"🙂\"'</span><span class=\"token punctuation\">,</span> <span class=\"token literal-property property\">display</span><span class=\"token operator\">:</span> <span class=\"token string\">'inline-block'</span><span class=\"token punctuation\">,</span> <span class=\"token literal-property property\">mr</span><span class=\"token operator\">:</span> <span class=\"token string\">'5px'</span> <span class=\"token punctuation\">}</span><span class=\"token punctuation\">}</span></span>\n<span class=\"token punctuation\">&gt;</span></span><span class=\"token plain-text\">\n  A pseudo element\n</span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span><span class=\"token class-name\">Box</span></span><span class=\"token punctuation\">&gt;</span></span>\n</code></pre></div><h2><code>as</code></h2>\n<p><code>as</code> prop 是所有组件中的一项功能，它允许您传递要呈现的 HTML 标记或组件。</p>\n<p>例如，您正在使用一个 Button 组件，但需要将其转换为一个链接。您可以像这样组成一个和 Button：</p>\n<div class=\"language-jsx\" data-ext=\"jsx\" data-title=\"jsx\"><pre class=\"language-jsx\"><code><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">Button</span></span> <span class=\"token attr-name\">as</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>a<span class=\"token punctuation\">\"</span></span> <span class=\"token attr-name\">target</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>_blank<span class=\"token punctuation\">\"</span></span> <span class=\"token attr-name\">variant</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>outline<span class=\"token punctuation\">\"</span></span> <span class=\"token attr-name\">href</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>https://chakra-ui.com<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">&gt;</span></span><span class=\"token plain-text\">\n  Hello\n</span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span><span class=\"token class-name\">Button</span></span><span class=\"token punctuation\">&gt;</span></span>\n</code></pre></div>",
      "image": "https://raw.githubusercontent.com/dribble-njr/typora-njr/master/img/20240307183600.png",
      "date_published": "2024-03-07T00:00:00.000Z",
      "date_modified": "2024-03-07T10:41:37.000Z",
      "authors": [],
      "tags": [
        "chakra"
      ]
    },
    {
      "title": "快速开始",
      "url": "https://dribble-njr.github.io/blog/blog/frontend/framework/chakra/01-getting-started.html",
      "id": "https://dribble-njr.github.io/blog/blog/frontend/framework/chakra/01-getting-started.html",
      "summary": "Chakra UI 是一个简单、模块化和可访问的组件库，可提供构建 React 应用程序所需的组件。 总结 非常灵活自由，但有一定上手门槛。 设计原则 Chakra UI 建立在保持组件一致性的原则之上。了解这些概念将有助于您更好地为 Chakra UI 做出贡献。 我们的目标是设计简单、可组合的组件，以解决现实生活中的用户界面设计问题。为此，我们制定...",
      "content_html": "<p><a href=\"https://chakra-ui.com/\" target=\"_blank\" rel=\"noopener noreferrer\">Chakra UI</a> 是一个简单、模块化和可访问的组件库，可提供构建 React 应用程序所需的组件。</p>\n<div class=\"hint-container tip\">\n<p class=\"hint-container-title\">总结</p>\n<p>非常灵活自由，但有一定上手门槛。</p>\n</div>\n<h2>设计原则</h2>\n<p>Chakra UI 建立在保持组件一致性的原则之上。了解这些概念将有助于您更好地为 Chakra UI 做出贡献。</p>\n<p>我们的目标是设计简单、可组合的组件，以解决现实生活中的用户界面设计问题。为此，我们制定了一系列原则，帮助我们始终沿着这条道路前进。</p>\n<ul>\n<li>Style Props：所有组件的样式都可以通过 <code>style props</code> 覆盖或扩展，以减少 <code>css prop</code> 或 <code>styled()</code> 的使用。从 Box 中组合新组件。</li>\n<li>简单：努力保持组件应用程序接口（API）相当简单，并展示组件在现实世界中的使用场景。</li>\n<li>组合：将组件分解成具有最小道具的较小部分，以降低复杂性，并将它们组合在一起。这将确保样式和功能的灵活性和可扩展性。</li>\n<li>可访问性：创建组件时，应将可访问性放在首位。这包括键盘导航、焦点管理、色彩对比、语音播报以及正确的 <code>aria-*</code> 属性。</li>\n<li>暗色模式：使组件兼容暗色模式。使用 <code>useColorMode</code> 钩子处理样式。了解有关 <a href=\"https://chakra-ui.com/docs/styled-system/color-mode\" target=\"_blank\" rel=\"noopener noreferrer\">暗色模式</a> 的更多信息。</li>\n<li><code>Naming Props</code>：命名是最难的事情。一般来说，要确保 <code>prop name</code> 能说明其作用。<code>Boolean prop</code> 应使用助动词命名，如 <code>does</code>、<code>has</code>、<code>is</code> 和 <code>should</code>。例如，按钮使用 <code>isDisabled</code>、<code>isLoading</code> 等。</li>\n</ul>\n<h2>对比</h2>\n<h3>Tailwind CSS</h3>\n<h4>总览</h4>\n<p><a href=\"https://tailwindcss.com/\" target=\"_blank\" rel=\"noopener noreferrer\">Tailwind CSS</a>：CSS 框架，提供原子 CSS 类，帮助你为组件设计样式、可访问性、组件组成、键盘导航、样式重写等。</p>\n<p>Chakra UI：一个由精心创建的 React 组件组成的库，具有 Tailwind 的所有样式优势，并能处理所有细节。</p>\n<h4>学习曲线</h4>\n<p>Tailwind CSS：如果你有过 Bootstrap 或 Bulma CSS 背景，你可能会发现学习 Tailwind 非常容易。但是，如果你是 <code>styled-components</code> 或 <code>emotion</code> 背景，学习曲线可能会相当陡峭。</p>\n<p>Chakra UI：Chakra UI 采用非常直观、类似 CSS 和基于 <code>prop</code> 的组件样式模型，因此很容易上手。组件名称和 <code>prop</code> 名称也非常容易理解。</p>\n<h4>响应式</h4>\n<p>Tailwind CSS：在 Tailwind 中创建响应式样式需要结合伪类。随着项目的增长，这可能会变得相当冗长。</p>\n<div class=\"language-html\" data-ext=\"html\" data-title=\"html\"><pre class=\"language-html\"><code><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>img</span> <span class=\"token attr-name\">class</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>w-16 md:w-32 lg:w-48<span class=\"token punctuation\">\"</span></span> <span class=\"token attr-name\">src</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>...<span class=\"token punctuation\">\"</span></span> <span class=\"token punctuation\">/&gt;</span></span>\n</code></pre></div><p>Chakra UI：以非常简单直观的方式创建响应式样式。可以使用数组或对象符号：</p>\n<div class=\"language-jsx\" data-ext=\"jsx\" data-title=\"jsx\"><pre class=\"language-jsx\"><code><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">Img</span></span> <span class=\"token attr-name\">w</span><span class=\"token script language-javascript\"><span class=\"token script-punctuation punctuation\">=</span><span class=\"token punctuation\">{</span><span class=\"token punctuation\">[</span><span class=\"token number\">16</span><span class=\"token punctuation\">,</span> <span class=\"token number\">32</span><span class=\"token punctuation\">,</span> <span class=\"token number\">48</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">}</span></span> <span class=\"token attr-name\">src</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>...<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">&gt;</span></span><span class=\"token plain-text\">\n</span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">Img</span></span> <span class=\"token attr-name\">w</span><span class=\"token script language-javascript\"><span class=\"token script-punctuation punctuation\">=</span><span class=\"token punctuation\">{</span><span class=\"token punctuation\">{</span> base：<span class=\"token number\">16</span><span class=\"token punctuation\">,</span> md：<span class=\"token number\">32</span><span class=\"token punctuation\">,</span> lg：<span class=\"token number\">48</span> <span class=\"token punctuation\">}</span><span class=\"token punctuation\">}</span></span> <span class=\"token attr-name\">src</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>...<span class=\"token punctuation\">\"</span></span> <span class=\"token punctuation\">/&gt;</span></span><span class=\"token plain-text\">\n</span></code></pre></div><h4>样式覆盖</h4>\n<p>在大多数应用中，为满足设计要求而覆盖特定上下文的样式是一项常见的挑战。</p>\n<p>Tailwind CSS：鉴于 Tailwind 是一个 CSS 实用框架，你可能需要找出覆盖特定 classNames 或编写自定义 CSS 的最佳方法。</p>\n<p>Chakra UI：Chakra UI 的样式是基于 <code>prop</code> 的，因此覆盖就像传递 <code>prop</code> 一样简单。</p>\n<h4>可访问性</h4>\n<p>如前所述，Tailwind CSS 只是一个 CSS 框架，类似于 Bootstrap 或 Bulma CSS。这样，用户就可以处理语义 html 结构、满足 WAI-ARIA 要求、键盘导航等。</p>\n<p>Chakra 不仅提供了 Tailwind 的便利性，还具有其他所有优点。</p>\n<h4>暗色模式</h4>\n<p>Tailwind CSS：所有组件均与暗色模式兼容。</p>\n<p>Chakra UI：所有组件均兼容明暗模式。还可以在整个应用程序中创建自己的明暗模式体验。</p>\n<h3>Theme UI</h3>\n<p>Chakra UI 深受 Theme UI 的启发，并遵循系统 UI 规范。</p>\n<p>与 Theme UI 相比，Chakra UI 提供了更多组件、改进的样式 API、可访问性和直观的组件 API。</p>\n<p>可以将 Chakra 视为更强大的 Theme UI 版本，它充分利用了 <code>styled-system</code> 的全部功能，提供更好的组件样式和主题。</p>\n<h3>Material UI</h3>\n<p>Material UI React 库为用户提供了大量 UI 布局工具，但其最著名的地方在于它提供了大量预设样式的 UI 组件，开发人员可以在这些组件上应用自定义样式来覆盖开箱即用的基础样式。</p>\n<p>Chakra UI 是一个更强大、更注重布局的库，它也为开发人员提供了与 Material UI 类似的 UI 组件，但更注重创建灵活、可组合和可扩展的代码。</p>\n<p>在比较这两个框架时，需要考虑的一个核心概念是 \"易于修改\"。</p>\n<p>相比之下，Material UI 为与导出组件和布局相关的单个 HTML 标签添加了更多的类，这迫使开发人员在定制界面时不得不与基本样式作斗争。</p>\n<p>Chakra 为开发人员提供了更大的自由度来操作导出组件和布局的 CSS 类，而且通常只需较少的代码即可完成。</p>\n<p>例如，Material UI 需要单独的代码来控制基于视口变化的响应式样式，而 Chakra 提供了内置的响应式样式支持，无需创建 CSS 类或媒体查询。</p>\n<p>如果自定义样式并不是项目的主要关注点，Material UI 则是有益的，因为您可以避免创建该库所提供的自定义组件。</p>\n<p>如果可扩展的自定义设计对您的项目很重要（很多时候确实如此），Chakra 对开发人员的便利性比 Material UI 更为突出，尤其是在项目随时间扩展的情况下。</p>\n<h3>Ant Design</h3>\n<p>Ant Design React 库是 ant.design 设计语言的实现。这意味着组件遵循现有的设计规则和值，只允许在有限的范围内自定义某些变量。</p>\n<p>Chakra 不受任何设计系统的束缚，可以更自由地定制组件，实现自己的设计。</p>\n<h4>样式组件</h4>\n<p>Ant Design 组件是为开箱即用而构建的，因此它们的特定样式 <code>prop</code> 和自定义功能非常有限。</p>\n<p>另一方面，Chakra 组件的主要风格化方式是将样式作为 <code>prop</code>。</p>\n<p>以按钮组件为例。Chakra Button 的 <code>colorScheme</code>（色彩主题）道具在默认情况下有许多不同的值，您可以对其进行自定义和/或扩展，以应用自己的设计。</p>\n<p>相比之下，您需要记住，Antd Design 按钮只有在拥有 <code>primary prop</code> 和 <code>danger prop</code> 的情况下才能着色，而不能因为 Ant Design 的现有设计值而着色。</p>\n<p>同样的模式也可以在布局、表单和排版等其他组件中看到。</p>\n<h4>设置和自定义</h4>\n<p>Ant Design 有一长串可修改的默认变量，包括颜色、页边距、边距、动画、阴影、边框、屏幕尺寸、尺寸等，有些是通用变量，有些则是用户界面组件的特定变量。为了尊重底层设计规范，除修改这些现有变量外，不建议进行其他自定义操作。</p>\n<p>Chakra 的特点是所有全局和组件样式默认值都可以轻松定制/扩展。可以为每个组件定义新的尺寸或变体。此外，您还可以使用 Chakra Factory 从现有组件甚至非 Chakra 组件中组合出新的组件。</p>\n",
      "date_published": "2024-03-07T00:00:00.000Z",
      "date_modified": "2024-03-07T10:41:37.000Z",
      "authors": [],
      "tags": [
        "chakra"
      ]
    },
    {
      "title": "chakra",
      "url": "https://dribble-njr.github.io/blog/blog/frontend/framework/chakra/",
      "id": "https://dribble-njr.github.io/blog/blog/frontend/framework/chakra/",
      "content_html": "",
      "date_published": "2024-03-07T09:35:01.000Z",
      "date_modified": "2024-03-07T09:35:01.000Z",
      "authors": [],
      "tags": []
    },
    {
      "title": "页面和布局",
      "url": "https://dribble-njr.github.io/blog/blog/frontend/framework/next/pages-router/01-pages-layouts.html",
      "id": "https://dribble-njr.github.io/blog/blog/frontend/framework/next/pages-router/01-pages-layouts.html",
      "summary": "pages router 是基于文件系统的路由器，以页面概念为基础。 当一个文件被添加到 pages 目录时，它就会自动成为一个路由。 在 Next.js 中，页面是从页面目录中的 .js、.jsx、.ts 或 .tsx 文件导出的 React 组件。每个页面都根据其文件名与路由相关联。 例如如果创建的 pages/about.js 导出了一个 Rea...",
      "content_html": "<p><code>pages router</code> 是基于文件系统的路由器，以页面概念为基础。</p>\n<p>当一个文件被添加到 <code>pages</code> 目录时，它就会自动成为一个路由。</p>\n<p>在 Next.js 中，页面是从页面目录中的 <code>.js</code>、<code>.jsx</code>、<code>.ts</code> 或 <code>.tsx</code> 文件导出的 React 组件。每个页面都根据其文件名与路由相关联。</p>\n<p>例如如果创建的 <code>pages/about.js</code> 导出了一个 React 组件（如下所示），则可通过 <code>/about</code> 访问该组件。</p>\n<div class=\"language-javascript\" data-ext=\"js\" data-title=\"js\"><pre class=\"language-javascript\"><code><span class=\"token keyword\">export</span> <span class=\"token keyword\">default</span> <span class=\"token keyword\">function</span> <span class=\"token function\">About</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">return</span> <span class=\"token operator\">&lt;</span>div<span class=\"token operator\">&gt;</span>About<span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>div<span class=\"token operator\">&gt;</span>\n<span class=\"token punctuation\">}</span>\n</code></pre></div><h2>根路由</h2>\n<p>路由器会自动将名为 <code>index</code> 的文件路由到目录根目录。</p>\n<ul>\n<li><code>pages/index.js</code> → <code>/</code></li>\n<li><code>pages/blog/index.js</code> → <code>/blog</code></li>\n</ul>\n<h2>嵌套路由</h2>\n<p>路由器支持嵌套文件。如果创建了嵌套文件夹结构，文件仍会自动以相同方式路由。</p>\n<ul>\n<li><code>pages/blog/first-post.js</code> → <code>/blog/first-post</code></li>\n<li><code>pages/dashboard/settings/username.js</code> → <code>/dashboard/settings/username</code></li>\n</ul>\n<h2>带有动态路由的页面</h2>\n<p>Next.js 支持带有动态路由的页面。例如，如果你创建了一个名为 <code>pages/posts/[id].js</code> 的文件，那么就可以通过 <code>posts/1</code>、<code>posts/2</code> 等路径访问该文件。</p>\n<h2>布局模式</h2>\n<p>React 模型允许我们将页面解构为一系列组件。其中许多组件通常会在页面之间重复使用。例如，您可能会在每个页面上使用相同的导航栏和页脚。</p>\n<p><strong><code>components/layout.js</code></strong></p>\n<div class=\"language-javascript\" data-ext=\"js\" data-title=\"js\"><pre class=\"language-javascript\"><code><span class=\"token keyword\">import</span> Navbar <span class=\"token keyword\">from</span> <span class=\"token string\">'./navbar'</span>\n<span class=\"token keyword\">import</span> Footer <span class=\"token keyword\">from</span> <span class=\"token string\">'./footer'</span>\n\n<span class=\"token keyword\">export</span> <span class=\"token keyword\">default</span> <span class=\"token keyword\">function</span> <span class=\"token function\">Layout</span><span class=\"token punctuation\">(</span><span class=\"token parameter\"><span class=\"token punctuation\">{</span> children <span class=\"token punctuation\">}</span></span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">return</span> <span class=\"token punctuation\">(</span>\n    <span class=\"token operator\">&lt;</span><span class=\"token operator\">&gt;</span>\n      <span class=\"token operator\">&lt;</span>Navbar <span class=\"token operator\">/</span><span class=\"token operator\">&gt;</span>\n      <span class=\"token operator\">&lt;</span>main<span class=\"token operator\">&gt;</span><span class=\"token punctuation\">{</span>children<span class=\"token punctuation\">}</span><span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>main<span class=\"token operator\">&gt;</span>\n      <span class=\"token operator\">&lt;</span>Footer <span class=\"token operator\">/</span><span class=\"token operator\">&gt;</span>\n    <span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span><span class=\"token operator\">&gt;</span>\n  <span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">}</span>\n</code></pre></div><h2>例子</h2>\n<h3>使用自定义应用程序的单一共享布局</h3>\n<p>如果您的整个应用程序只有一个布局，您可以创建一个自定义应用程序，并用该布局包装您的应用程序。</p>\n<p>由于 <code>&lt;Layout /&gt;</code> 组件在更改页面时会被重复使用，因此其组件状态（如输入值）会被保留。</p>\n<p><strong><code>pages/_app.js</code></strong></p>\n<div class=\"language-javascript\" data-ext=\"js\" data-title=\"js\"><pre class=\"language-javascript\"><code><span class=\"token keyword\">import</span> Layout <span class=\"token keyword\">from</span> <span class=\"token string\">'../components/layout'</span>\n\n<span class=\"token keyword\">export</span> <span class=\"token keyword\">default</span> <span class=\"token keyword\">function</span> <span class=\"token function\">MyApp</span><span class=\"token punctuation\">(</span><span class=\"token parameter\"><span class=\"token punctuation\">{</span> Component<span class=\"token punctuation\">,</span> pageProps <span class=\"token punctuation\">}</span></span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">return</span> <span class=\"token punctuation\">(</span>\n    <span class=\"token operator\">&lt;</span>Layout<span class=\"token operator\">&gt;</span>\n      <span class=\"token operator\">&lt;</span>Component <span class=\"token punctuation\">{</span><span class=\"token operator\">...</span>pageProps<span class=\"token punctuation\">}</span> <span class=\"token operator\">/</span><span class=\"token operator\">&gt;</span>\n    <span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>Layout<span class=\"token operator\">&gt;</span>\n  <span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">}</span>\n</code></pre></div><h3>按页面布局</h3>\n<p>如果需要多种布局，可以在页面中添加 <code>getLayout</code> 属性，这样就可以返回布局的 React 组件，可以实现按页面定义布局。</p>\n<p>由于我们返回的是一个函数，因此如果需要，我们可以使用复杂的嵌套布局。</p>\n<p><strong><code>pages/index.js</code></strong></p>\n<div class=\"language-javascript\" data-ext=\"js\" data-title=\"js\"><pre class=\"language-javascript\"><code><span class=\"token keyword\">import</span> Layout <span class=\"token keyword\">from</span> <span class=\"token string\">'../components/layout'</span>\n<span class=\"token keyword\">import</span> NestedLayout <span class=\"token keyword\">from</span> <span class=\"token string\">'../components/nested-layout'</span>\n\n<span class=\"token keyword\">export</span> <span class=\"token keyword\">default</span> <span class=\"token keyword\">function</span> <span class=\"token function\">Page</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">return</span> <span class=\"token punctuation\">(</span>\n    <span class=\"token doc-comment comment\">/** Your content */</span>\n  <span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">}</span>\n\nPage<span class=\"token punctuation\">.</span><span class=\"token function-variable function\">getLayout</span> <span class=\"token operator\">=</span> <span class=\"token keyword\">function</span> <span class=\"token function\">getLayout</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">page</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">return</span> <span class=\"token punctuation\">(</span>\n    <span class=\"token operator\">&lt;</span>Layout<span class=\"token operator\">&gt;</span>\n      <span class=\"token operator\">&lt;</span>NestedLayout<span class=\"token operator\">&gt;</span><span class=\"token punctuation\">{</span>page<span class=\"token punctuation\">}</span><span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>NestedLayout<span class=\"token operator\">&gt;</span>\n    <span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>Layout<span class=\"token operator\">&gt;</span>\n  <span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">}</span>\n</code></pre></div><p><strong><code>pages/_app.js</code></strong></p>\n<div class=\"language-javascript\" data-ext=\"js\" data-title=\"js\"><pre class=\"language-javascript\"><code><span class=\"token keyword\">export</span> <span class=\"token keyword\">default</span> <span class=\"token keyword\">function</span> <span class=\"token function\">MyApp</span><span class=\"token punctuation\">(</span><span class=\"token parameter\"><span class=\"token punctuation\">{</span> Component<span class=\"token punctuation\">,</span> pageProps <span class=\"token punctuation\">}</span></span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token comment\">// Use the layout defined at the page level, if available</span>\n  <span class=\"token keyword\">const</span> getLayout <span class=\"token operator\">=</span> Component<span class=\"token punctuation\">.</span>getLayout <span class=\"token operator\">??</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">page</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=&gt;</span> page<span class=\"token punctuation\">)</span>\n\n  <span class=\"token keyword\">return</span> <span class=\"token function\">getLayout</span><span class=\"token punctuation\">(</span><span class=\"token operator\">&lt;</span>Component <span class=\"token punctuation\">{</span><span class=\"token operator\">...</span>pageProps<span class=\"token punctuation\">}</span> <span class=\"token operator\">/</span><span class=\"token operator\">&gt;</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">}</span>\n</code></pre></div><p>在页面之间导航时，我们希望持久保存页面状态（输入值、滚动位置等），以获得单页面应用程序 (SPA) 体验。</p>\n<p>这种布局模式可以实现状态持久化，因为 React 组件树会在页面转换之间保持不变。通过组件树，React 可以了解哪些元素发生了变化，从而保持状态。</p>\n<h3>使用 TypeScript</h3>\n<p>使用 TypeScript 时，首先必须为页面创建一个包含 <code>getLayout</code> 函数的新类型。然后，您必须为您的 <code>AppProps</code> 创建一个新类型，重载 <code>Component</code> 属性以使用之前创建的类型。</p>\n<p><strong><code>pages/index.tsx</code></strong></p>\n<div class=\"language-typescript\" data-ext=\"ts\" data-title=\"ts\"><pre class=\"language-typescript\"><code><span class=\"token keyword\">import</span> <span class=\"token keyword\">type</span> <span class=\"token punctuation\">{</span> ReactElement <span class=\"token punctuation\">}</span> <span class=\"token keyword\">from</span> <span class=\"token string\">'react'</span>\n<span class=\"token keyword\">import</span> Layout <span class=\"token keyword\">from</span> <span class=\"token string\">'../components/layout'</span>\n<span class=\"token keyword\">import</span> NestedLayout <span class=\"token keyword\">from</span> <span class=\"token string\">'../components/nested-layout'</span>\n<span class=\"token keyword\">import</span> <span class=\"token keyword\">type</span> <span class=\"token punctuation\">{</span> NextPageWithLayout <span class=\"token punctuation\">}</span> <span class=\"token keyword\">from</span> <span class=\"token string\">'./_app'</span>\n\n<span class=\"token keyword\">const</span> Page<span class=\"token operator\">:</span> <span class=\"token function-variable function\">NextPageWithLayout</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=&gt;</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">return</span> <span class=\"token operator\">&lt;</span>p<span class=\"token operator\">&gt;</span>hello world<span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>p<span class=\"token operator\">&gt;</span>\n<span class=\"token punctuation\">}</span>\n\nPage<span class=\"token punctuation\">.</span><span class=\"token function-variable function\">getLayout</span> <span class=\"token operator\">=</span> <span class=\"token keyword\">function</span> <span class=\"token function\">getLayout</span><span class=\"token punctuation\">(</span>page<span class=\"token operator\">:</span> ReactElement<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">return</span> <span class=\"token punctuation\">(</span>\n    <span class=\"token operator\">&lt;</span>Layout<span class=\"token operator\">&gt;</span>\n      <span class=\"token operator\">&lt;</span>NestedLayout<span class=\"token operator\">&gt;</span><span class=\"token punctuation\">{</span>page<span class=\"token punctuation\">}</span><span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>NestedLayout<span class=\"token operator\">&gt;</span>\n    <span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>Layout<span class=\"token operator\">&gt;</span>\n  <span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">export</span> <span class=\"token keyword\">default</span> Page\n</code></pre></div><p><strong><code>pages/_app.tsx</code></strong></p>\n<div class=\"language-typescript\" data-ext=\"ts\" data-title=\"ts\"><pre class=\"language-typescript\"><code><span class=\"token keyword\">import</span> <span class=\"token keyword\">type</span> <span class=\"token punctuation\">{</span> ReactElement<span class=\"token punctuation\">,</span> ReactNode <span class=\"token punctuation\">}</span> <span class=\"token keyword\">from</span> <span class=\"token string\">'react'</span>\n<span class=\"token keyword\">import</span> <span class=\"token keyword\">type</span> <span class=\"token punctuation\">{</span> NextPage <span class=\"token punctuation\">}</span> <span class=\"token keyword\">from</span> <span class=\"token string\">'next'</span>\n<span class=\"token keyword\">import</span> <span class=\"token keyword\">type</span> <span class=\"token punctuation\">{</span> AppProps <span class=\"token punctuation\">}</span> <span class=\"token keyword\">from</span> <span class=\"token string\">'next/app'</span>\n\n<span class=\"token keyword\">export</span> <span class=\"token keyword\">type</span> <span class=\"token class-name\">NextPageWithLayout<span class=\"token operator\">&lt;</span><span class=\"token constant\">P</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span> <span class=\"token constant\">IP</span> <span class=\"token operator\">=</span> <span class=\"token constant\">P</span><span class=\"token operator\">&gt;</span></span> <span class=\"token operator\">=</span> NextPage<span class=\"token operator\">&lt;</span><span class=\"token constant\">P</span><span class=\"token punctuation\">,</span> <span class=\"token constant\">IP</span><span class=\"token operator\">&gt;</span> <span class=\"token operator\">&amp;</span> <span class=\"token punctuation\">{</span>\n  getLayout<span class=\"token operator\">?</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">(</span>page<span class=\"token operator\">:</span> ReactElement<span class=\"token punctuation\">)</span> <span class=\"token operator\">=&gt;</span> ReactNode\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">type</span> <span class=\"token class-name\">AppPropsWithLayout</span> <span class=\"token operator\">=</span> AppProps <span class=\"token operator\">&amp;</span> <span class=\"token punctuation\">{</span>\n  Component<span class=\"token operator\">:</span> NextPageWithLayout\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">export</span> <span class=\"token keyword\">default</span> <span class=\"token keyword\">function</span> <span class=\"token function\">MyApp</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span> Component<span class=\"token punctuation\">,</span> pageProps <span class=\"token punctuation\">}</span><span class=\"token operator\">:</span> AppPropsWithLayout<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token comment\">// Use the layout defined at the page level, if available</span>\n  <span class=\"token keyword\">const</span> getLayout <span class=\"token operator\">=</span> Component<span class=\"token punctuation\">.</span>getLayout <span class=\"token operator\">??</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span>page<span class=\"token punctuation\">)</span> <span class=\"token operator\">=&gt;</span> page<span class=\"token punctuation\">)</span>\n\n  <span class=\"token keyword\">return</span> <span class=\"token function\">getLayout</span><span class=\"token punctuation\">(</span><span class=\"token operator\">&lt;</span>Component <span class=\"token punctuation\">{</span><span class=\"token operator\">...</span>pageProps<span class=\"token punctuation\">}</span> <span class=\"token operator\">/</span><span class=\"token operator\">&gt;</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">}</span>\n</code></pre></div><h3>获取数据</h3>\n<p>在布局中，您可以使用 <code>useEffect</code> 或类似 <a href=\"https://swr.vercel.app/zh-CN\" target=\"_blank\" rel=\"noopener noreferrer\">SWR</a> 的库在客户端获取数据。由于该文件不是页面，因此目前无法使用 <code>getStaticProps</code> 或 <code>getServerSideProps</code>。</p>\n<div class=\"language-javascript\" data-ext=\"js\" data-title=\"js\"><pre class=\"language-javascript\"><code><span class=\"token keyword\">import</span> useSWR <span class=\"token keyword\">from</span> <span class=\"token string\">'swr'</span>\n<span class=\"token keyword\">import</span> Navbar <span class=\"token keyword\">from</span> <span class=\"token string\">'./navbar'</span>\n<span class=\"token keyword\">import</span> Footer <span class=\"token keyword\">from</span> <span class=\"token string\">'./footer'</span>\n\n<span class=\"token keyword\">export</span> <span class=\"token keyword\">default</span> <span class=\"token keyword\">function</span> <span class=\"token function\">Layout</span><span class=\"token punctuation\">(</span><span class=\"token parameter\"><span class=\"token punctuation\">{</span> children <span class=\"token punctuation\">}</span></span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">const</span> <span class=\"token punctuation\">{</span> data<span class=\"token punctuation\">,</span> error <span class=\"token punctuation\">}</span> <span class=\"token operator\">=</span> <span class=\"token function\">useSWR</span><span class=\"token punctuation\">(</span><span class=\"token string\">'/api/navigation'</span><span class=\"token punctuation\">,</span> fetcher<span class=\"token punctuation\">)</span>\n\n  <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>error<span class=\"token punctuation\">)</span> <span class=\"token keyword\">return</span> <span class=\"token operator\">&lt;</span>div<span class=\"token operator\">&gt;</span>Failed to load<span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>div<span class=\"token operator\">&gt;</span>\n  <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token operator\">!</span>data<span class=\"token punctuation\">)</span> <span class=\"token keyword\">return</span> <span class=\"token operator\">&lt;</span>div<span class=\"token operator\">&gt;</span>Loading<span class=\"token operator\">...</span><span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>div<span class=\"token operator\">&gt;</span>\n\n  <span class=\"token keyword\">return</span> <span class=\"token punctuation\">(</span>\n    <span class=\"token operator\">&lt;</span><span class=\"token operator\">&gt;</span>\n      <span class=\"token operator\">&lt;</span>Navbar links<span class=\"token operator\">=</span><span class=\"token punctuation\">{</span>data<span class=\"token punctuation\">.</span>links<span class=\"token punctuation\">}</span> <span class=\"token operator\">/</span><span class=\"token operator\">&gt;</span>\n      <span class=\"token operator\">&lt;</span>main<span class=\"token operator\">&gt;</span><span class=\"token punctuation\">{</span>children<span class=\"token punctuation\">}</span><span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>main<span class=\"token operator\">&gt;</span>\n      <span class=\"token operator\">&lt;</span>Footer <span class=\"token operator\">/</span><span class=\"token operator\">&gt;</span>\n    <span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span><span class=\"token operator\">&gt;</span>\n  <span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">}</span>\n</code></pre></div>",
      "date_published": "2024-03-05T00:00:00.000Z",
      "date_modified": "2024-03-05T05:06:40.000Z",
      "authors": [],
      "tags": [
        "next"
      ]
    },
    {
      "title": "defer 和 async 的区别",
      "url": "https://dribble-njr.github.io/blog/blog/frontend/basic/html/011-defer-vs-async.html",
      "id": "https://dribble-njr.github.io/blog/blog/frontend/basic/html/011-defer-vs-async.html",
      "summary": "HTML 中在页面插入 JavaScript 的主要方式就是使用 <script> 元素，可以直接在页面中嵌入 JavaScript 代码，但是一般来说，通常会通过 src 属性来引入外部脚本。 在 中提到了 src 会暂停当前页面的加载，直到获取、解析并执行完这个 JS 文件。这样就会阻塞后续文档的加载。 而使用 defer 和 async 都可以 ...",
      "content_html": "<p>HTML 中在页面插入 JavaScript 的主要方式就是使用 <code>&lt;script&gt;</code> 元素，可以直接在页面中嵌入 JavaScript 代码，但是一般来说，通常会通过 <code>src</code> 属性来引入外部脚本。</p>\n<p>在  中提到了 <code>src</code> 会暂停当前页面的加载，直到获取、解析并执行完这个 JS 文件。这样就会阻塞后续文档的加载。</p>\n<p>而使用 <code>defer</code> 和 <code>async</code> 都可以 <strong>异步加载</strong> 外部的 JavaScript 脚本，主要区别如下：</p>\n<ul>\n<li><strong>执行顺序</strong>：多个带 <code>async</code> 属性的标签，不能保证加载的顺序；多个带 <code>defer</code> 属性的标签，按照加载顺序执行；</li>\n<li><strong>脚本何时执行</strong>：<code>async</code> 属性表示脚本加载完成后立即执行，不会等到文档解析完成。<code>defer</code> 属性表示脚本加载完成后还需等到所有元素解析完成，即 <code>DOMContentLoaded</code> 事件触发前完成。</li>\n</ul>\n",
      "date_published": "2022-07-25T00:00:00.000Z",
      "date_modified": "2024-03-04T11:59:34.000Z",
      "authors": [],
      "tags": [
        "HTML"
      ]
    },
    {
      "title": "HTML5 新特性",
      "url": "https://dribble-njr.github.io/blog/blog/frontend/basic/html/010-html5.html",
      "id": "https://dribble-njr.github.io/blog/blog/frontend/basic/html/010-html5.html",
      "summary": "HTML5 总共以下新特性，但不支持 IE8 及以下版本浏览器。 语义化标签 增强型表单 视频和音频 Canvas 绘图 SVG 绘图 地理定位 API 拖拽 API WebWorker WebStorage WebSocket 选择器 query.selector 和 query.selectorAll ",
      "content_html": "<p>HTML5 总共以下新特性，但不支持 IE8 及以下版本浏览器。</p>\n<ol>\n<li>语义化标签</li>\n<li>增强型表单</li>\n<li>视频和音频</li>\n<li>Canvas 绘图</li>\n<li>SVG 绘图</li>\n<li>地理定位 API</li>\n<li>拖拽 API</li>\n<li>WebWorker</li>\n<li>WebStorage</li>\n<li>WebSocket</li>\n<li>选择器 <code>query.selector</code> 和 <code>query.selectorAll</code></li>\n</ol>\n",
      "date_published": "2022-04-30T00:00:00.000Z",
      "date_modified": "2024-03-04T11:54:28.000Z",
      "authors": [],
      "tags": [
        "HTML"
      ]
    },
    {
      "title": "src 和 href 的区别",
      "url": "https://dribble-njr.github.io/blog/blog/frontend/basic/html/009-src-vs-href.html",
      "id": "https://dribble-njr.github.io/blog/blog/frontend/basic/html/009-src-vs-href.html",
      "summary": "src 和 href 之间存在区别，不能互换使用。 src：表示对资源的 引入，它指向的内容会被浏览器替换，嵌入到当前标签所在的位置； href：表示对资源的 引用，建立当前元素或当前文档和外部资源之间的链接关系。 src src(Source) 属性仅仅表示会在此文档当前元素的位置上嵌入资源，它会 暂停其他资源的下载和处理。比如，当浏览器读到： 那么...",
      "content_html": "<p><code>src</code> 和 <code>href</code> 之间存在区别，不能互换使用。</p>\n<ul>\n<li><code>src</code>：表示对资源的 <strong>引入</strong>，它指向的内容会被浏览器替换，嵌入到当前标签所在的位置；</li>\n<li><code>href</code>：表示对资源的 <strong>引用</strong>，建立当前元素或当前文档和外部资源之间的链接关系。</li>\n</ul>\n<h2>src</h2>\n<p><code>src</code>(Source) 属性仅仅表示会在此文档当前元素的位置上嵌入资源，它会 <strong>暂停其他资源的下载和处理</strong>。比如，当浏览器读到：</p>\n<div class=\"language-javascript\" data-ext=\"js\" data-title=\"js\"><pre class=\"language-javascript\"><code><span class=\"token operator\">&lt;</span>script src<span class=\"token operator\">=</span><span class=\"token string\">\"script.js\"</span><span class=\"token operator\">&gt;</span><span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>script<span class=\"token operator\">&gt;</span>\n</code></pre></div><p>那么浏览器会暂停当前页面的加载，直到获取、解析并执行完这个 JS 文件。它类似于将 JS 文件的内容转存到 <code>&lt;script&gt;</code> 标签中。</p>\n<div class=\"hint-container tip\">\n<p class=\"hint-container-title\">提示</p>\n<p>这就是为什么需要将 <code>&lt;script&gt;</code> 标签放到最后。</p>\n</div>\n<p><code>&lt;img&gt;</code> 标签也类似，它是一个空标签，包含的内容由 <code>src</code> 属性定义，当遇到这个标签，浏览器也会停止加载页面，直到获取并加载这个图片。</p>\n<p>类似的，<code>&lt;iframe&gt;</code> 标签也一样。</p>\n<h2>href</h2>\n<p><code>href</code>(Hypertext Reference) 属性即超文本引用，它会指定 Web 资源的位置，从而定义当前链接（<code>&lt;a&gt;</code> 标签）或当前文档（<code>link</code> 标签）与目标之间的联系，<strong>不会暂停对当前文档的解析</strong>。</p>\n<p>比如：</p>\n<div class=\"language-html\" data-ext=\"html\" data-title=\"html\"><pre class=\"language-html\"><code><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>link</span> <span class=\"token attr-name\">href</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>style.css<span class=\"token punctuation\">\"</span></span> <span class=\"token attr-name\">rel</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>stylesheet<span class=\"token punctuation\">\"</span></span> <span class=\"token punctuation\">/&gt;</span></span>\n</code></pre></div><p>浏览器会知道这是个 CSS 文件，HTML 的解析 <strong>不会</strong> 暂停，但是渲染有可能暂停，因为浏览器需要知道样式规则。</p>\n",
      "date_published": "2022-04-28T00:00:00.000Z",
      "date_modified": "2024-03-04T11:50:03.000Z",
      "authors": [],
      "tags": [
        "HTML"
      ]
    },
    {
      "title": "怎样实现响应式网页布局",
      "url": "https://dribble-njr.github.io/blog/blog/frontend/basic/css/016-how-to-responsive.html",
      "id": "https://dribble-njr.github.io/blog/blog/frontend/basic/css/016-how-to-responsive.html",
      "summary": "设置响应式断点 tailwind 典型的断点如下： Bootstrap 断点如下： 用百分比确定布局元素的大小或创建 CSS 网格布局 布局容器的数量取决于设计，但大多数网站都将重点放在以下元素上： Wrapper or Container Header Content Sidebar Footer Common layoutCommon layout...",
      "content_html": "<h2>设置响应式断点</h2>\n<p><a href=\"https://tailwindcss.com/docs/responsive-design\" target=\"_blank\" rel=\"noopener noreferrer\"><code>tailwind</code></a> 典型的断点如下：</p>\n<div class=\"language-css\" data-ext=\"css\" data-title=\"css\"><pre class=\"language-css\"><code><span class=\"token atrule\"><span class=\"token rule\">@media</span> <span class=\"token punctuation\">(</span><span class=\"token property\">min-width</span><span class=\"token punctuation\">:</span> 640px<span class=\"token punctuation\">)</span></span> <span class=\"token punctuation\">{</span>\n  <span class=\"token comment\">/* ... */</span>\n<span class=\"token punctuation\">}</span>\n<span class=\"token atrule\"><span class=\"token rule\">@media</span> <span class=\"token punctuation\">(</span><span class=\"token property\">min-width</span><span class=\"token punctuation\">:</span> 768px<span class=\"token punctuation\">)</span></span> <span class=\"token punctuation\">{</span>\n  <span class=\"token comment\">/* ... */</span>\n<span class=\"token punctuation\">}</span>\n<span class=\"token atrule\"><span class=\"token rule\">@media</span> <span class=\"token punctuation\">(</span><span class=\"token property\">min-width</span><span class=\"token punctuation\">:</span> 1024px<span class=\"token punctuation\">)</span></span> <span class=\"token punctuation\">{</span>\n  <span class=\"token comment\">/* ... */</span>\n<span class=\"token punctuation\">}</span>\n<span class=\"token atrule\"><span class=\"token rule\">@media</span> <span class=\"token punctuation\">(</span><span class=\"token property\">min-width</span><span class=\"token punctuation\">:</span> 1280px<span class=\"token punctuation\">)</span></span> <span class=\"token punctuation\">{</span>\n  <span class=\"token comment\">/* ... */</span>\n<span class=\"token punctuation\">}</span>\n<span class=\"token atrule\"><span class=\"token rule\">@media</span> <span class=\"token punctuation\">(</span><span class=\"token property\">min-width</span><span class=\"token punctuation\">:</span> 1536px<span class=\"token punctuation\">)</span></span> <span class=\"token punctuation\">{</span>\n  <span class=\"token comment\">/* ... */</span>\n<span class=\"token punctuation\">}</span>\n</code></pre></div><p><a href=\"\">Bootstrap</a> 断点如下：</p>\n<div class=\"language-css\" data-ext=\"css\" data-title=\"css\"><pre class=\"language-css\"><code><span class=\"token atrule\"><span class=\"token rule\">@media</span> <span class=\"token punctuation\">(</span><span class=\"token property\">min-width</span><span class=\"token punctuation\">:</span> 576px<span class=\"token punctuation\">)</span></span> <span class=\"token punctuation\">{</span>\n  <span class=\"token comment\">/* ... */</span>\n<span class=\"token punctuation\">}</span>\n<span class=\"token atrule\"><span class=\"token rule\">@media</span> <span class=\"token punctuation\">(</span><span class=\"token property\">min-width</span><span class=\"token punctuation\">:</span> 768px<span class=\"token punctuation\">)</span></span> <span class=\"token punctuation\">{</span>\n  <span class=\"token comment\">/* ... */</span>\n<span class=\"token punctuation\">}</span>\n<span class=\"token atrule\"><span class=\"token rule\">@media</span> <span class=\"token punctuation\">(</span><span class=\"token property\">min-width</span><span class=\"token punctuation\">:</span> 992px<span class=\"token punctuation\">)</span></span> <span class=\"token punctuation\">{</span>\n  <span class=\"token comment\">/* ... */</span>\n<span class=\"token punctuation\">}</span>\n<span class=\"token atrule\"><span class=\"token rule\">@media</span> <span class=\"token punctuation\">(</span><span class=\"token property\">min-width</span><span class=\"token punctuation\">:</span> 1200px<span class=\"token punctuation\">)</span></span> <span class=\"token punctuation\">{</span>\n  <span class=\"token comment\">/* ... */</span>\n<span class=\"token punctuation\">}</span>\n<span class=\"token atrule\"><span class=\"token rule\">@media</span> <span class=\"token punctuation\">(</span><span class=\"token property\">min-width</span><span class=\"token punctuation\">:</span> 1400px<span class=\"token punctuation\">)</span></span> <span class=\"token punctuation\">{</span>\n  <span class=\"token comment\">/* ... */</span>\n<span class=\"token punctuation\">}</span>\n</code></pre></div><h2>用百分比确定布局元素的大小或创建 CSS 网格布局</h2>\n<p>布局容器的数量取决于设计，但大多数网站都将重点放在以下元素上：</p>\n<ul>\n<li>Wrapper or Container</li>\n<li>Header</li>\n<li>Content</li>\n<li>Sidebar</li>\n<li>Footer</li>\n</ul>\n<figure><img src=\"https://raw.githubusercontent.com/dribble-njr/typora-njr/master/img/20240304183547.png\" alt=\"Common layout\" tabindex=\"0\" loading=\"lazy\"><figcaption>Common layout</figcaption></figure>\n<p>根据 ，你可以像这样设计主要布局元素的样式（针对手机的基本样式不使用媒体查询）：</p>\n<div class=\"language-css\" data-ext=\"css\" data-title=\"css\"><pre class=\"language-css\"><code><span class=\"token selector\">#wrapper</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token property\">width</span><span class=\"token punctuation\">:</span> 95%<span class=\"token punctuation\">;</span>\n  <span class=\"token property\">margin</span><span class=\"token punctuation\">:</span> 0 auto<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token selector\">#header</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token property\">width</span><span class=\"token punctuation\">:</span> 100%<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token selector\">#content</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token property\">width</span><span class=\"token punctuation\">:</span> 100%<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token selector\">#sidebar</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token property\">width</span><span class=\"token punctuation\">:</span> 100%<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token selector\">#footer</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token property\">width</span><span class=\"token punctuation\">:</span> 100%<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token comment\">/* Small devices (landscape phones, 576px and up) */</span>\n\n<span class=\"token atrule\"><span class=\"token rule\">@media</span> <span class=\"token punctuation\">(</span><span class=\"token property\">min-width</span><span class=\"token punctuation\">:</span> 576px<span class=\"token punctuation\">)</span></span> <span class=\"token punctuation\">{</span>\n  <span class=\"token comment\">/* ... */</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token comment\">/* Medium devices (tablets, 768px and up) */</span>\n\n<span class=\"token atrule\"><span class=\"token rule\">@media</span> <span class=\"token punctuation\">(</span><span class=\"token property\">min-width</span><span class=\"token punctuation\">:</span> 768px<span class=\"token punctuation\">)</span></span> <span class=\"token punctuation\">{</span>\n  <span class=\"token selector\">#wrapper</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token property\">width</span><span class=\"token punctuation\">:</span> 90%<span class=\"token punctuation\">;</span>\n    <span class=\"token property\">margin</span><span class=\"token punctuation\">:</span> 0 auto<span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span>\n\n  <span class=\"token selector\">#content</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token property\">width</span><span class=\"token punctuation\">:</span> 70%<span class=\"token punctuation\">;</span>\n    <span class=\"token property\">float</span><span class=\"token punctuation\">:</span> left<span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span>\n\n  <span class=\"token selector\">#sidebar</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token property\">width</span><span class=\"token punctuation\">:</span> 30%<span class=\"token punctuation\">;</span>\n    <span class=\"token property\">float</span><span class=\"token punctuation\">:</span> right<span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token comment\">/* Large devices (desktops, 992px and up) */</span>\n\n<span class=\"token atrule\"><span class=\"token rule\">@media</span> <span class=\"token punctuation\">(</span><span class=\"token property\">min-width</span><span class=\"token punctuation\">:</span> 992px<span class=\"token punctuation\">)</span></span> <span class=\"token punctuation\">{</span>\n  <span class=\"token comment\">/* ... */</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token comment\">/* Extra large devices (large desktops, 1200px and up) */</span>\n\n<span class=\"token atrule\"><span class=\"token rule\">@media</span> <span class=\"token punctuation\">(</span><span class=\"token property\">min-width</span><span class=\"token punctuation\">:</span> 1200px<span class=\"token punctuation\">)</span></span> <span class=\"token punctuation\">{</span>\n  <span class=\"token selector\">#wrapper</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token property\">width</span><span class=\"token punctuation\">:</span> 90%<span class=\"token punctuation\">;</span>\n    <span class=\"token property\">margin</span><span class=\"token punctuation\">:</span> 0 auto<span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n</code></pre></div><p>在基于百分比的方法中， 属性控制元素显示在屏幕的左侧或右侧。</p>\n<p>如果要完成响应式设计，还需要熟悉 CSS 的  布局及其它属性，如 。</p>\n<h2>响应式图片</h2>\n<p>见 。</p>\n<h2>响应式文字</h2>\n<p>响应式网页设计的重点在于布局块、元素和媒体的响应性。文字往往是事后才考虑的问题。</p>\n<p>但要实现真正的响应式设计，还应该根据屏幕尺寸适当调整字体大小。</p>\n<p>最简单的方法是为字体大小设置一个静态值，如 <code>22px</code>，并在每个媒体查询中进行调整。</p>\n<figure><img src=\"https://raw.githubusercontent.com/dribble-njr/typora-njr/master/img/20240304184534.png\" alt=\"Font size vs view size scatter points\" tabindex=\"0\" loading=\"lazy\"><figcaption>Font size vs view size scatter points</figcaption></figure>\n<div class=\"hint-container tip\">\n<p class=\"hint-container-title\">提示</p>\n<p>一般设置 <code>html</code> 字体大小，并使用 <code>rem</code> 单位，或使用插件转换为「视口」单位。</p>\n<p>相关阅读：</p>\n<ul>\n<li></li>\n<li></li>\n</ul>\n</div>\n",
      "image": "https://raw.githubusercontent.com/dribble-njr/typora-njr/master/img/20240304183547.png",
      "date_published": "2024-03-04T00:00:00.000Z",
      "date_modified": "2024-03-04T10:51:20.000Z",
      "authors": [],
      "tags": [
        "CSS"
      ]
    },
    {
      "title": "响应式设计介绍",
      "url": "https://dribble-njr.github.io/blog/blog/frontend/basic/css/014-responsive-design-intro.html",
      "id": "https://dribble-njr.github.io/blog/blog/frontend/basic/css/014-responsive-design-intro.html",
      "summary": "响应式设计是一种使网页内容适应各种设备的不同屏幕和窗口尺寸的网页设计方法。 它并不是设计网站的第一种方法。在采用响应式设计之前的几年里，网页设计师和开发人员尝试过许多不同的技术。 固定宽度设计 20 世纪 90 年代初，当网络开始流行时，大多数显示器的屏幕尺寸为宽 640 像素、高 480 像素。这些显示器是凸面阴极射线管，与现在的平面液晶显示器不同。...",
      "content_html": "<p>响应式设计是一种使网页内容适应各种设备的不同屏幕和窗口尺寸的网页设计方法。</p>\n<p>它并不是设计网站的第一种方法。在采用响应式设计之前的几年里，网页设计师和开发人员尝试过许多不同的技术。</p>\n<h2>固定宽度设计</h2>\n<p>20 世纪 90 年代初，当网络开始流行时，大多数显示器的屏幕尺寸为宽 <code>640</code> 像素、高 <code>480</code> 像素。这些显示器是凸面阴极射线管，与现在的平面液晶显示器不同。</p>\n<p>在早期网页设计的雏形时期，设计宽度为 <code>640</code> 像素的网页是比较安全的。但是，在手机和相机等其他技术不断微型化的同时，屏幕却越来越大（最终变得越来越扁平）。</p>\n<p>不久之后，大多数屏幕的尺寸都达到了 <code>800 x 600</code> 像素。网页设计也随之改变。设计师和开发人员开始认为 <code>800</code> 像素是一个安全的默认值。</p>\n<p>后来，屏幕又变大了。<code>1024 x 768</code> 成为默认值。这感觉就像是网页设计师和硬件制造商之间的军备竞赛。</p>\n<p>无论是 <code>640</code>、<code>800</code> 还是 <code>1024</code> 像素，选择一种特定宽度进行设计被称为「固定宽度设计」。</p>\n<p>如果你为布局指定了一个固定的宽度，那么你的布局只能在这个特定的宽度下才好看。如果访问者的屏幕比你选择的宽度更宽，那么屏幕上就会出现浪费的空间。你可以将页面内容居中，使空间分布更均匀（而不是一边空着），但你仍然无法充分利用可用空间。</p>\n<p>同样，如果访客的屏幕比您选择的宽度窄，那么您的内容就无法横向显示。浏览器会生成一个爬行条--相当于水平滚动条，用户必须左右移动整个页面才能看到所有内容。</p>\n\n<h2>流体布局</h2>\n<p>虽然大多数设计者都使用固定宽度布局，但也有一些设计者选择流体布局。与使用固定宽度的布局相比，你可以使用百分比作为列宽来制作流体布局。与只能在特定尺寸下看起来合适的固定宽度布局相比，这些设计适用于更多情况。</p>\n<p>这就是所谓的流体布局。不过，虽然液态布局在各种宽度下都很美观，但在极端情况下就会开始恶化。在宽屏幕上，布局看起来被拉伸。而在窄屏幕上，布局则显得拥挤。这两种情况都不理想。</p>\n<p>使用 <code>min-width</code> 和 <code>max-width</code> 布局可以缓解这些问题。但是，在 <code>min-width</code> 以下或 <code>max-width</code> 以上的任何尺寸下，都会出现与固定宽度布局相同的问题。在宽屏幕上，未使用的空间会被浪费。在窄屏幕上，用户必须左右移动整个页面才能看到所有内容。</p>\n\n<h2>自适应布局</h2>\n<p>当 CSS 出现媒体查询时，可以实现更灵活的布局。</p>\n<p>其中一种技术就是在指定宽度的几个固定宽度布局之间切换。有人称之为「自适应设计」。</p>\n<p>自适应设计允许设计人员提供在几种不同尺寸下看起来都不错的布局，但在这些尺寸之间查看时，设计看起来总是不太合适。空间过大的问题依然存在，尽管不像固定宽度布局那样严重。</p>\n<p>使用 CSS 媒体查询，可以为用户提供最接近其浏览器宽度的布局。但鉴于设备尺寸的多样性，对于大多数人来说，这种布局很可能看起来并不完美。</p>\n\n<h2>响应式布局</h2>\n<p>如果说自适应布局是媒体查询和固定宽度布局的混合体，那么响应式网页设计就是媒体查询和液体布局的混合体。</p>\n\n",
      "date_published": "2024-03-04T00:00:00.000Z",
      "date_modified": "2024-03-04T10:51:20.000Z",
      "authors": [],
      "tags": [
        "CSS"
      ]
    },
    {
      "title": "响应式设计",
      "url": "https://dribble-njr.github.io/blog/blog/frontend/basic/css/015-responsive-design.html",
      "id": "https://dribble-njr.github.io/blog/blog/frontend/basic/css/015-responsive-design.html",
      "summary": "概念 响应式网页设计可让网页在所有设备上都美观大方。 响应式网页设计只使用 HTML 和 CSS。 响应式网页设计不是一个程序或 JavaScript。 网页可以通过多种不同设备浏览：台式电脑、平板电脑和手机。无论使用何种设备，您的网页都应美观大方，易于使用。 网页不应为了适应较小的设备而遗漏信息，而应调整内容以适应任何设备： 适应任何设备适应任何设备...",
      "content_html": "<h2>概念</h2>\n<ul>\n<li>响应式网页设计可让网页在所有设备上都美观大方。</li>\n<li>响应式网页设计只使用 HTML 和 CSS。</li>\n<li>响应式网页设计不是一个程序或 JavaScript。</li>\n</ul>\n<p>网页可以通过多种不同设备浏览：台式电脑、平板电脑和手机。无论使用何种设备，您的网页都应美观大方，易于使用。</p>\n<p>网页不应为了适应较小的设备而遗漏信息，而应调整内容以适应任何设备：</p>\n<figure><img src=\"https://raw.githubusercontent.com/dribble-njr/typora-njr/master/img/20240228125357.png\" alt=\"适应任何设备\" tabindex=\"0\" loading=\"lazy\"><figcaption>适应任何设备</figcaption></figure>\n<p>如果使用 CSS 和 HTML 来调整、隐藏、缩小、放大或移动内容，使其在任何屏幕上看起来都很美观，这就是所谓的响应式网页设计。</p>\n\n<p>接下来会逐步介绍相关概念并实现这个例子。</p>\n<h2>视口 <code>viewport</code></h2>\n<h3>概念</h3>\n<p>视口是用户在网页上的可见区域。</p>\n<p>视口因设备而异，手机上的视口会比电脑屏幕上的小。</p>\n<p>在平板电脑和手机出现之前，网页只针对电脑屏幕设计，网页通常采用静态设计和固定尺寸。</p>\n<p>后来，当我们开始使用平板电脑和手机上网时，固定尺寸的网页太大，无法适应视口。为了解决这个问题，这些设备上的浏览器缩小了整个网页以适应屏幕。</p>\n<h3>设置视口</h3>\n<p>HTML5 引入了一种方法，让网页设计师通过 <code>&lt;meta&gt;</code> 标签来控制视口。</p>\n<p>应在所有网页中包含以下 <code>&lt;meta&gt;</code> 视口元素：</p>\n<div class=\"language-html\" data-ext=\"html\" data-title=\"html\"><pre class=\"language-html\"><code><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>meta</span> <span class=\"token attr-name\">name</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>viewport<span class=\"token punctuation\">\"</span></span> <span class=\"token attr-name\">content</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>width=device-width, initial-scale=1.0<span class=\"token punctuation\">\"</span></span> <span class=\"token punctuation\">/&gt;</span></span>\n</code></pre></div><p>这就为浏览器提供了如何控制页面尺寸和缩放比例的说明。</p>\n<p><code>width=device-width</code> 部分将页面宽度设置为设备的屏幕宽度（因设备而异）。</p>\n<p><code>initial-scale=1.0</code> 部分设置浏览器首次加载页面时的初始缩放级别。</p>\n<p>下面是一个未使用视口 <code>&lt;meta&gt;</code> 标签的网页和使用视口 <code>&lt;meta&gt;</code> 标签的网页的示例：</p>\n<figure><img src=\"https://raw.githubusercontent.com/dribble-njr/typora-njr/master/img/20240228184703.png\" alt=\"未使用视口元标签\" tabindex=\"0\" loading=\"lazy\"><figcaption>未使用视口元标签</figcaption></figure>\n<figure><img src=\"https://raw.githubusercontent.com/dribble-njr/typora-njr/master/img/20240228184730.png\" alt=\"使用视口元标签\" tabindex=\"0\" loading=\"lazy\"><figcaption>使用视口元标签</figcaption></figure>\n<h3>根据视口调整内容大小</h3>\n<p>用户习惯在台式机和移动设备上垂直滚动网站，但不习惯水平滚动！</p>\n<p>因此，如果用户被迫水平滚动或缩放才能看到整个网页，就会造成糟糕的用户体验。</p>\n<p>需要遵循的其他一些规则：</p>\n<ol>\n<li>切勿使用固定宽度的大型元素 —— 例如，如果显示的图片宽度大于视口宽度，就会导致视口水平滚动。切记调整这些内容，使其适合视口宽度。</li>\n<li>不要让内容依赖特定的视口宽度来呈现 —— 由于不同设备的屏幕尺寸和 CSS 像素宽度差异很大，因此内容不应依赖特定的视口宽度来呈现。</li>\n<li>使用 CSS 媒体查询为大屏幕和小屏幕应用不同的样式 —— 为页面元素设置较大的绝对 CSS 宽度会导致元素对于较小设备的视口来说过宽。取而代之的是，考虑使用相对宽度值，如 width: 100%。此外，使用较大的绝对定位值也要小心。它可能会导致元素在小型设备上超出视口。</li>\n</ol>\n<h2>网格</h2>\n<h3>概念</h3>\n<p>许多网页都采用网格视图，即把网页分成几列：</p>\n<p>在设计网页时，使用网格视图非常有帮助。它能让你更轻松地在页面上放置元素。</p>\n<p>响应式网格视图通常有 12 列，总宽度为 100%，会随着浏览器窗口大小的调整而缩小或展开。</p>\n<h3>建立响应式网格视图</h3>\n<p>首先确保所有 HTML 元素的框大小属性都设置为 <code>border-box</code>。这样就能确保元素的总宽度和高度中包含 <code>padding</code> 和 <code>border</code>。</p>\n<p>在 CSS 中添加以下代码：</p>\n<div class=\"language-css\" data-ext=\"css\" data-title=\"css\"><pre class=\"language-css\"><code><span class=\"token selector\">*</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token property\">box-sizing</span><span class=\"token punctuation\">:</span> border-box；<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n</code></pre></div><p>有关 <code>box-sizing</code> 属性的更多信息，请参阅 。</p>\n<p>下面的示例展示了一个简单的响应式网页，有两列：</p>\n\n<p>如果网页只包含两列，上面的示例就没问题。</p>\n<p>但是，我们希望使用有 12 列的响应式网格视图，以便对网页有更多的控制。</p>\n<p>首先，我们必须计算一列的百分比：100% / 12 列 = 8.33%。</p>\n<p>然后，我们为 12 列中的每一列创建一个类，<code>class=\"col-\"</code>，并用一个数字定义该部分应跨越多少列：</p>\n<div class=\"language-css\" data-ext=\"css\" data-title=\"css\"><pre class=\"language-css\"><code><span class=\"token selector\">.col-1</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token property\">width</span><span class=\"token punctuation\">:</span> 8.33%<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n<span class=\"token selector\">.col-2</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token property\">width</span><span class=\"token punctuation\">:</span> 16.66%<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n<span class=\"token selector\">.col-3</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token property\">width</span><span class=\"token punctuation\">:</span> 25%<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n<span class=\"token selector\">.col-4</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token property\">width</span><span class=\"token punctuation\">:</span> 33.33%<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n<span class=\"token selector\">.col-5</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token property\">width</span><span class=\"token punctuation\">:</span> 41.66%<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n<span class=\"token selector\">.col-6</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token property\">width</span><span class=\"token punctuation\">:</span> 50%<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n<span class=\"token selector\">.col-7</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token property\">width</span><span class=\"token punctuation\">:</span> 58.33%<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n<span class=\"token selector\">.col-8</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token property\">width</span><span class=\"token punctuation\">:</span> 66.66%<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n<span class=\"token selector\">.col-9</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token property\">width</span><span class=\"token punctuation\">:</span> 75%<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n<span class=\"token selector\">.col-10</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token property\">width</span><span class=\"token punctuation\">:</span> 83.33%<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n<span class=\"token selector\">.col-11</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token property\">width</span><span class=\"token punctuation\">:</span> 91.66%<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n<span class=\"token selector\">.col-12</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token property\">width</span><span class=\"token punctuation\">:</span> 100%<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n</code></pre></div><p>所有这些列都应向左浮动，并有 <code>15px</code> 的边距：</p>\n<div class=\"language-css\" data-ext=\"css\" data-title=\"css\"><pre class=\"language-css\"><code><span class=\"token selector\">[class*='col-']</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token property\">float</span><span class=\"token punctuation\">:</span> left<span class=\"token punctuation\">;</span>\n  <span class=\"token property\">padding</span><span class=\"token punctuation\">:</span> 15px<span class=\"token punctuation\">;</span>\n  <span class=\"token property\">border</span><span class=\"token punctuation\">:</span> 1px solid red<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n</code></pre></div><p>每一行都应包裹在 <code>&lt;div&gt;</code> 中。一行内的列数相加应为 12：</p>\n<div class=\"language-html\" data-ext=\"html\" data-title=\"html\"><pre class=\"language-html\"><code><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>div</span> <span class=\"token attr-name\">class</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>row<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">&gt;</span></span>\n  <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>div</span> <span class=\"token attr-name\">class</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>col-3<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">&gt;</span></span>...<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>div</span><span class=\"token punctuation\">&gt;</span></span>\n  <span class=\"token comment\">&lt;!-- 25% --&gt;</span>\n  <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>div</span> <span class=\"token attr-name\">class</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>col-9<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">&gt;</span></span>...<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>div</span><span class=\"token punctuation\">&gt;</span></span>\n  <span class=\"token comment\">&lt;!-- 75% --&gt;</span>\n<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>div</span><span class=\"token punctuation\">&gt;</span></span>\n</code></pre></div><p>行内的列都会向左浮动，因此会脱离页面的流程，其他元素的放置就好像这些列不存在一样。为了避免这种情况，添加一种样式来 ：</p>\n<div class=\"language-css\" data-ext=\"css\" data-title=\"css\"><pre class=\"language-css\"><code><span class=\"token selector\">.row::after</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token property\">content</span><span class=\"token punctuation\">:</span> <span class=\"token string\">''</span><span class=\"token punctuation\">;</span>\n  <span class=\"token property\">clear</span><span class=\"token punctuation\">:</span> both<span class=\"token punctuation\">;</span>\n  <span class=\"token property\">display</span><span class=\"token punctuation\">:</span> table<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n</code></pre></div><p>最后添加一些样式：</p>\n\n<div class=\"hint-container tip\">\n<p class=\"hint-container-title\">注意</p>\n<p>将浏览器窗口调整到非常小的宽度时，示例中的网页看起来并不好。在下一章中，你将学习如何解决这个问题。</p>\n</div>\n<h2>媒体查询</h2>\n<h3>概念</h3>\n<p>媒体查询是 CSS3 中引入的一种 CSS 技术。</p>\n<p>它使用 <code>@media</code> 规则，只有在特定条件为真的情况下才会包含 CSS 属性块。</p>\n\n<h3>添加手机断点</h3>\n<p>前面制作了一个有行和列的网页，它是响应式的，但在小屏幕上看起来并不好。</p>\n<p>媒体查询可以帮助我们解决这个问题。我们可以添加一个断点，在断点两侧，设计的某些部分会有不同的表现。</p>\n<figure><img src=\"https://raw.githubusercontent.com/dribble-njr/typora-njr/master/img/20240228205102.png\" alt=\"desktop\" tabindex=\"0\" loading=\"lazy\"><figcaption>desktop</figcaption></figure>\n<figure><img src=\"https://raw.githubusercontent.com/dribble-njr/typora-njr/master/img/20240228205114.png\" alt=\"phone\" tabindex=\"0\" loading=\"lazy\"><figcaption>phone</figcaption></figure>\n<p>使用媒体查询在 <code>768px</code> 处添加断点：</p>\n<p>当屏幕（浏览器窗口）小于 <code>768px</code> 时，每列的宽度应为 <code>100%</code>：</p>\n<div class=\"language-css\" data-ext=\"css\" data-title=\"css\"><pre class=\"language-css\"><code><span class=\"token comment\">/* For desktop: */</span>\n<span class=\"token selector\">.col-1</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token property\">width</span><span class=\"token punctuation\">:</span> 8.33%<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n<span class=\"token selector\">.col-2</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token property\">width</span><span class=\"token punctuation\">:</span> 16.66%<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n<span class=\"token selector\">.col-3</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token property\">width</span><span class=\"token punctuation\">:</span> 25%<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n<span class=\"token selector\">.col-4</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token property\">width</span><span class=\"token punctuation\">:</span> 33.33%<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n<span class=\"token selector\">.col-5</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token property\">width</span><span class=\"token punctuation\">:</span> 41.66%<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n<span class=\"token selector\">.col-6</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token property\">width</span><span class=\"token punctuation\">:</span> 50%<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n<span class=\"token selector\">.col-7</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token property\">width</span><span class=\"token punctuation\">:</span> 58.33%<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n<span class=\"token selector\">.col-8</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token property\">width</span><span class=\"token punctuation\">:</span> 66.66%<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n<span class=\"token selector\">.col-9</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token property\">width</span><span class=\"token punctuation\">:</span> 75%<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n<span class=\"token selector\">.col-10</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token property\">width</span><span class=\"token punctuation\">:</span> 83.33%<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n<span class=\"token selector\">.col-11</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token property\">width</span><span class=\"token punctuation\">:</span> 91.66%<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n<span class=\"token selector\">.col-12</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token property\">width</span><span class=\"token punctuation\">:</span> 100%<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token atrule\"><span class=\"token rule\">@media</span> <span class=\"token keyword\">only</span> screen <span class=\"token keyword\">and</span> <span class=\"token punctuation\">(</span><span class=\"token property\">max-width</span><span class=\"token punctuation\">:</span> 768px<span class=\"token punctuation\">)</span></span> <span class=\"token punctuation\">{</span>\n  <span class=\"token comment\">/* For mobile phones: */</span>\n  <span class=\"token selector\">[class*='col-']</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token property\">width</span><span class=\"token punctuation\">:</span> 100%<span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n</code></pre></div>\n<h3>始终坚持移动端优先的设计理念</h3>\n<p>移动优先是指在为台式机或其他设备设计之前，先为移动设备设计（这将使页面在较小的设备上显示更快）。</p>\n<p>这意味着我们必须对 CSS 进行一些修改。</p>\n<p>我们不应在宽度小于 <code>768px</code> 时更改样式，而应在宽度大于 <code>768px</code> 时更改设计。这将使我们的设计成为 「移动端优先」：</p>\n<div class=\"language-css\" data-ext=\"css\" data-title=\"css\"><pre class=\"language-css\"><code><span class=\"token comment\">/* For mobile phones: */</span>\n<span class=\"token selector\">[class*='col-']</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token property\">width</span><span class=\"token punctuation\">:</span> 100%<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token atrule\"><span class=\"token rule\">@media</span> <span class=\"token keyword\">only</span> screen <span class=\"token keyword\">and</span> <span class=\"token punctuation\">(</span><span class=\"token property\">min-width</span><span class=\"token punctuation\">:</span> 768px<span class=\"token punctuation\">)</span></span> <span class=\"token punctuation\">{</span>\n  <span class=\"token comment\">/* For desktop: */</span>\n  <span class=\"token selector\">.col-1</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token property\">width</span><span class=\"token punctuation\">:</span> 8.33%<span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span>\n  <span class=\"token selector\">.col-2</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token property\">width</span><span class=\"token punctuation\">:</span> 16.66%<span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span>\n  <span class=\"token selector\">.col-3</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token property\">width</span><span class=\"token punctuation\">:</span> 25%<span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span>\n  <span class=\"token selector\">.col-4</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token property\">width</span><span class=\"token punctuation\">:</span> 33.33%<span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span>\n  <span class=\"token selector\">.col-5</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token property\">width</span><span class=\"token punctuation\">:</span> 41.66%<span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span>\n  <span class=\"token selector\">.col-6</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token property\">width</span><span class=\"token punctuation\">:</span> 50%<span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span>\n  <span class=\"token selector\">.col-7</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token property\">width</span><span class=\"token punctuation\">:</span> 58.33%<span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span>\n  <span class=\"token selector\">.col-8</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token property\">width</span><span class=\"token punctuation\">:</span> 66.66%<span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span>\n  <span class=\"token selector\">.col-9</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token property\">width</span><span class=\"token punctuation\">:</span> 75%<span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span>\n  <span class=\"token selector\">.col-10</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token property\">width</span><span class=\"token punctuation\">:</span> 83.33%<span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span>\n  <span class=\"token selector\">.col-11</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token property\">width</span><span class=\"token punctuation\">:</span> 91.66%<span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span>\n  <span class=\"token selector\">.col-12</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token property\">width</span><span class=\"token punctuation\">:</span> 100%<span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n</code></pre></div><h3>添加平板电脑断点</h3>\n<p>我们可以随意添加断点。</p>\n<p>我们还将在平板电脑和手机之间插入一个断点。</p>\n<figure><img src=\"https://raw.githubusercontent.com/dribble-njr/typora-njr/master/img/20240228205615.png\" alt=\"平板电脑\" tabindex=\"0\" loading=\"lazy\"><figcaption>平板电脑</figcaption></figure>\n<p>为此，我们增加了一个媒体查询（<code>600px</code>），并为大于 <code>600px</code>（但小于 <code>768px</code>）的设备增加了一组新的类：</p>\n<div class=\"language-css\" data-ext=\"css\" data-title=\"css\"><pre class=\"language-css\"><code><span class=\"token comment\">/* For mobile phones: */</span>\n<span class=\"token selector\">[class*='col-']</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token property\">width</span><span class=\"token punctuation\">:</span> 100%<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token atrule\"><span class=\"token rule\">@media</span> <span class=\"token keyword\">only</span> screen <span class=\"token keyword\">and</span> <span class=\"token punctuation\">(</span><span class=\"token property\">min-width</span><span class=\"token punctuation\">:</span> 600px<span class=\"token punctuation\">)</span></span> <span class=\"token punctuation\">{</span>\n  <span class=\"token comment\">/* For tablets: */</span>\n  <span class=\"token selector\">.col-s-1</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token property\">width</span><span class=\"token punctuation\">:</span> 8.33%<span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span>\n  <span class=\"token selector\">.col-s-2</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token property\">width</span><span class=\"token punctuation\">:</span> 16.66%<span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span>\n  <span class=\"token selector\">.col-s-3</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token property\">width</span><span class=\"token punctuation\">:</span> 25%<span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span>\n  <span class=\"token selector\">.col-s-4</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token property\">width</span><span class=\"token punctuation\">:</span> 33.33%<span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span>\n  <span class=\"token selector\">.col-s-5</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token property\">width</span><span class=\"token punctuation\">:</span> 41.66%<span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span>\n  <span class=\"token selector\">.col-s-6</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token property\">width</span><span class=\"token punctuation\">:</span> 50%<span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span>\n  <span class=\"token selector\">.col-s-7</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token property\">width</span><span class=\"token punctuation\">:</span> 58.33%<span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span>\n  <span class=\"token selector\">.col-s-8</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token property\">width</span><span class=\"token punctuation\">:</span> 66.66%<span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span>\n  <span class=\"token selector\">.col-s-9</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token property\">width</span><span class=\"token punctuation\">:</span> 75%<span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span>\n  <span class=\"token selector\">.col-s-10</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token property\">width</span><span class=\"token punctuation\">:</span> 83.33%<span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span>\n  <span class=\"token selector\">.col-s-11</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token property\">width</span><span class=\"token punctuation\">:</span> 91.66%<span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span>\n  <span class=\"token selector\">.col-s-12</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token property\">width</span><span class=\"token punctuation\">:</span> 100%<span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token atrule\"><span class=\"token rule\">@media</span> <span class=\"token keyword\">only</span> screen <span class=\"token keyword\">and</span> <span class=\"token punctuation\">(</span><span class=\"token property\">min-width</span><span class=\"token punctuation\">:</span> 768px<span class=\"token punctuation\">)</span></span> <span class=\"token punctuation\">{</span>\n  <span class=\"token comment\">/* For desktop: */</span>\n  <span class=\"token selector\">.col-1</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token property\">width</span><span class=\"token punctuation\">:</span> 8.33%<span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span>\n  <span class=\"token selector\">.col-2</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token property\">width</span><span class=\"token punctuation\">:</span> 16.66%<span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span>\n  <span class=\"token selector\">.col-3</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token property\">width</span><span class=\"token punctuation\">:</span> 25%<span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span>\n  <span class=\"token selector\">.col-4</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token property\">width</span><span class=\"token punctuation\">:</span> 33.33%<span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span>\n  <span class=\"token selector\">.col-5</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token property\">width</span><span class=\"token punctuation\">:</span> 41.66%<span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span>\n  <span class=\"token selector\">.col-6</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token property\">width</span><span class=\"token punctuation\">:</span> 50%<span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span>\n  <span class=\"token selector\">.col-7</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token property\">width</span><span class=\"token punctuation\">:</span> 58.33%<span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span>\n  <span class=\"token selector\">.col-8</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token property\">width</span><span class=\"token punctuation\">:</span> 66.66%<span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span>\n  <span class=\"token selector\">.col-9</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token property\">width</span><span class=\"token punctuation\">:</span> 75%<span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span>\n  <span class=\"token selector\">.col-10</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token property\">width</span><span class=\"token punctuation\">:</span> 83.33%<span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span>\n  <span class=\"token selector\">.col-11</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token property\">width</span><span class=\"token punctuation\">:</span> 91.66%<span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span>\n  <span class=\"token selector\">.col-12</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token property\">width</span><span class=\"token punctuation\">:</span> 100%<span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n</code></pre></div><p>我们有两组完全相同的类，这似乎有点奇怪，但这给了我们在 HTML 中决定在每个断点处如何处理列的机会：</p>\n<div class=\"hint-container tip\">\n<p class=\"hint-container-title\">提示</p>\n<p><strong>用于电脑：</strong></p>\n<p>第一部分和第三部分各占 3 列。中间部分将横跨 6 列。</p>\n<p><strong>平板电脑：</strong></p>\n<p>第一部分跨 3 列，第二部分跨 9 列，第三部分显示在前两个部分的下方，跨 12 列：</p>\n</div>\n\n<h3>典型设备断点</h3>\n<p>屏幕和设备的高度和宽度各不相同，因此很难为每种设备创建精确的断点。为了简单起见，可以将目标锁定为五组：</p>\n<div class=\"language-css\" data-ext=\"css\" data-title=\"css\"><pre class=\"language-css\"><code><span class=\"token comment\">/* Extra small devices (phones, 600px and down) */</span>\n<span class=\"token atrule\"><span class=\"token rule\">@media</span> <span class=\"token keyword\">only</span> screen <span class=\"token keyword\">and</span> <span class=\"token punctuation\">(</span><span class=\"token property\">max-width</span><span class=\"token punctuation\">:</span> 600px<span class=\"token punctuation\">)</span></span> <span class=\"token punctuation\">{</span>\n  ...<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token comment\">/* Small devices (portrait tablets and large phones, 600px and up) */</span>\n<span class=\"token atrule\"><span class=\"token rule\">@media</span> <span class=\"token keyword\">only</span> screen <span class=\"token keyword\">and</span> <span class=\"token punctuation\">(</span><span class=\"token property\">min-width</span><span class=\"token punctuation\">:</span> 600px<span class=\"token punctuation\">)</span></span> <span class=\"token punctuation\">{</span>\n  ...<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token comment\">/* Medium devices (landscape tablets, 768px and up) */</span>\n<span class=\"token atrule\"><span class=\"token rule\">@media</span> <span class=\"token keyword\">only</span> screen <span class=\"token keyword\">and</span> <span class=\"token punctuation\">(</span><span class=\"token property\">min-width</span><span class=\"token punctuation\">:</span> 768px<span class=\"token punctuation\">)</span></span> <span class=\"token punctuation\">{</span>\n  ...<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token comment\">/* Large devices (laptops/desktops, 992px and up) */</span>\n<span class=\"token atrule\"><span class=\"token rule\">@media</span> <span class=\"token keyword\">only</span> screen <span class=\"token keyword\">and</span> <span class=\"token punctuation\">(</span><span class=\"token property\">min-width</span><span class=\"token punctuation\">:</span> 992px<span class=\"token punctuation\">)</span></span> <span class=\"token punctuation\">{</span>\n  ...<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token comment\">/* Extra large devices (large laptops and desktops, 1200px and up) */</span>\n<span class=\"token atrule\"><span class=\"token rule\">@media</span> <span class=\"token keyword\">only</span> screen <span class=\"token keyword\">and</span> <span class=\"token punctuation\">(</span><span class=\"token property\">min-width</span><span class=\"token punctuation\">:</span> 1200px<span class=\"token punctuation\">)</span></span> <span class=\"token punctuation\">{</span>\n  ...<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n</code></pre></div><h3>方向纵向/横向</h3>\n<p>媒体查询还可用于根据浏览器的方向改变页面布局。</p>\n<p>您可以设置一组 CSS 属性，只有当浏览器窗口的宽度大于高度（即所谓的「横向」方向）时才适用：</p>\n<div class=\"language-css\" data-ext=\"css\" data-title=\"css\"><pre class=\"language-css\"><code><span class=\"token atrule\"><span class=\"token rule\">@media</span> <span class=\"token keyword\">only</span> screen <span class=\"token keyword\">and</span> <span class=\"token punctuation\">(</span><span class=\"token property\">orientation</span><span class=\"token punctuation\">:</span> landscape<span class=\"token punctuation\">)</span></span> <span class=\"token punctuation\">{</span>\n  <span class=\"token selector\">body</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token property\">background-color</span><span class=\"token punctuation\">:</span> lightblue<span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n</code></pre></div><h3>使用媒体查询隐藏元素</h3>\n<p>媒体查询的另一个常见用途是在不同尺寸的屏幕上隐藏元素：</p>\n<div class=\"language-css\" data-ext=\"css\" data-title=\"css\"><pre class=\"language-css\"><code><span class=\"token comment\">/* If the screen size is 600px wide or less, hide the element */</span>\n<span class=\"token atrule\"><span class=\"token rule\">@media</span> <span class=\"token keyword\">only</span> screen <span class=\"token keyword\">and</span> <span class=\"token punctuation\">(</span><span class=\"token property\">max-width</span><span class=\"token punctuation\">:</span> 600px<span class=\"token punctuation\">)</span></span> <span class=\"token punctuation\">{</span>\n  <span class=\"token selector\">div.example</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token property\">display</span><span class=\"token punctuation\">:</span> none<span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n</code></pre></div>\n<div class=\"hint-container tip\">\n<p class=\"hint-container-title\">提示</p>\n<p>实际上可以使用这实现侧边栏。</p>\n<p>屏幕宽度小于 900px 时显示菜单按钮，并隐藏菜单项。</p>\n<div class=\"language-css\" data-ext=\"css\" data-title=\"css\"><pre class=\"language-css\"><code><span class=\"token selector\">.menu-content.active</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token property\">transform</span><span class=\"token punctuation\">:</span> <span class=\"token function\">translateX</span><span class=\"token punctuation\">(</span>0<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token atrule\"><span class=\"token rule\">@media</span> <span class=\"token keyword\">only</span> screen <span class=\"token keyword\">and</span> <span class=\"token punctuation\">(</span><span class=\"token property\">max-width</span><span class=\"token punctuation\">:</span> 900px<span class=\"token punctuation\">)</span></span> <span class=\"token punctuation\">{</span>\n  <span class=\"token selector\">.menu-content</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token property\">z-index</span><span class=\"token punctuation\">:</span> 125<span class=\"token punctuation\">;</span>\n    <span class=\"token property\">box-shadow</span><span class=\"token punctuation\">:</span> none<span class=\"token punctuation\">;</span>\n    <span class=\"token property\">transform</span><span class=\"token punctuation\">:</span> <span class=\"token function\">translateX</span><span class=\"token punctuation\">(</span>-100%<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token selector\">.menu-button</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token property\">display</span><span class=\"token punctuation\">:</span> none<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token atrule\"><span class=\"token rule\">@media</span> <span class=\"token keyword\">only</span> screen <span class=\"token keyword\">and</span> <span class=\"token punctuation\">(</span><span class=\"token property\">max-width</span><span class=\"token punctuation\">:</span> 900px<span class=\"token punctuation\">)</span></span> <span class=\"token punctuation\">{</span>\n  <span class=\"token selector\">.menu-button</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token property\">display</span><span class=\"token punctuation\">:</span> block<span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n</code></pre></div></div>\n\n<h3>通过媒体查询改变字体大小</h3>\n<p>还可以使用媒体查询来改变元素在不同屏幕尺寸下的字体大小：</p>\n<div class=\"language-css\" data-ext=\"css\" data-title=\"css\"><pre class=\"language-css\"><code><span class=\"token comment\">/* If the screen size is 601px or more, set the font-size of &lt;div&gt; to 80px */</span>\n<span class=\"token atrule\"><span class=\"token rule\">@media</span> <span class=\"token keyword\">only</span> screen <span class=\"token keyword\">and</span> <span class=\"token punctuation\">(</span><span class=\"token property\">min-width</span><span class=\"token punctuation\">:</span> 601px<span class=\"token punctuation\">)</span></span> <span class=\"token punctuation\">{</span>\n  <span class=\"token selector\">div.example</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token property\">font-size</span><span class=\"token punctuation\">:</span> 80px<span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token comment\">/* If the screen size is 600px or less, set the font-size of &lt;div&gt; to 30px */</span>\n<span class=\"token atrule\"><span class=\"token rule\">@media</span> <span class=\"token keyword\">only</span> screen <span class=\"token keyword\">and</span> <span class=\"token punctuation\">(</span><span class=\"token property\">max-width</span><span class=\"token punctuation\">:</span> 600px<span class=\"token punctuation\">)</span></span> <span class=\"token punctuation\">{</span>\n  <span class=\"token selector\">div.example</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token property\">font-size</span><span class=\"token punctuation\">:</span> 30px<span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n</code></pre></div><div class=\"hint-container tip\">\n<p class=\"hint-container-title\">提示</p>\n<p>实际上可以使用媒体查询改变 HTML 字体大小，并使用 <code>rem</code> 单位设置其他字体大小。</p>\n<p>相关阅读：。</p>\n</div>\n<h2>响应式图片</h2>\n<h3>使用 <code>width</code> 属性</h3>\n<p>如果将 <code>width</code> 属性设置为百分比，而 <code>height</code> 属性设置为 <code>auto</code>，图像就会响应并上下缩放。</p>\n<div class=\"language-css\" data-ext=\"css\" data-title=\"css\"><pre class=\"language-css\"><code><span class=\"token selector\">img</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token property\">width</span><span class=\"token punctuation\">:</span> 100%<span class=\"token punctuation\">;</span>\n  <span class=\"token property\">height</span><span class=\"token punctuation\">:</span> auto<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n</code></pre></div>\n<div class=\"hint-container warning\">\n<p class=\"hint-container-title\">注意</p>\n<p>在上面的示例中，图片可以按比例放大到比原始尺寸更大。在许多情况下，更好的解决方案是使用 <code>max-width</code> 属性。</p>\n</div>\n<h3>使用 <code>max-width</code> 属性</h3>\n<p>如果 <code>max-width</code> 属性设置为 100%，图片会在必要时缩小，但绝不会放大到大于原始尺寸：</p>\n<div class=\"language-css\" data-ext=\"css\" data-title=\"css\"><pre class=\"language-css\"><code><span class=\"token selector\">img</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token property\">max-width</span><span class=\"token punctuation\">:</span> 100%<span class=\"token punctuation\">;</span>\n  <span class=\"token property\">height</span><span class=\"token punctuation\">:</span> auto<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n</code></pre></div><h3>背景图片</h3>\n<p>背景图片还可以对大小和比例进行调整。</p>\n<ol>\n<li>如果 <code>background-size</code> 属性设置为 <code>contain</code>，背景图片就会缩放，并尽量适应内容区域。不过，图像将保持其宽高比（图像宽度和高度之间的比例关系）：</li>\n</ol>\n\n<ol start=\"2\">\n<li>如果 <code>background-size</code> 属性设置为 <code>100% 100%</code>，背景图片就会拉伸以覆盖整个内容区域：</li>\n</ol>\n\n<ol start=\"3\">\n<li>如果 <code>background-size</code> 属性设置为 <code>cover</code>，背景图片将按比例覆盖整个内容区域。请注意，<code>cover</code> 将保持纵横比，背景图片的某些部分可能会被剪切：</li>\n</ol>\n\n<h3>不同设备使用不同图像</h3>\n<p>大尺寸图片在电脑大屏幕上可能非常完美，但在小设备上却毫无用处。既然要缩小图片，为什么还要加载大图片呢？为了减少加载或出于其他原因，您可以使用媒体查询在不同设备上显示不同的图片。</p>\n<p>下面是将在不同设备上显示的一张大图和一张小图：</p>\n<figure><img src=\"https://raw.githubusercontent.com/dribble-njr/typora-njr/master/img/20240229125238.png\" alt=\"不同设备使用不同图像\" tabindex=\"0\" loading=\"lazy\"><figcaption>不同设备使用不同图像</figcaption></figure>\n<div class=\"language-css\" data-ext=\"css\" data-title=\"css\"><pre class=\"language-css\"><code><span class=\"token comment\">/* For width smaller than 400px: */</span>\n<span class=\"token selector\">body</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token property\">background-image</span><span class=\"token punctuation\">:</span> <span class=\"token url\"><span class=\"token function\">url</span><span class=\"token punctuation\">(</span><span class=\"token string url\">'img_smallflower.jpg'</span><span class=\"token punctuation\">)</span></span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token comment\">/* For width 400px and larger: */</span>\n<span class=\"token atrule\"><span class=\"token rule\">@media</span> <span class=\"token keyword\">only</span> screen <span class=\"token keyword\">and</span> <span class=\"token punctuation\">(</span><span class=\"token property\">min-width</span><span class=\"token punctuation\">:</span> 400px<span class=\"token punctuation\">)</span></span> <span class=\"token punctuation\">{</span>\n  <span class=\"token selector\">body</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token property\">background-image</span><span class=\"token punctuation\">:</span> <span class=\"token url\"><span class=\"token function\">url</span><span class=\"token punctuation\">(</span><span class=\"token string url\">'img_flowers.jpg'</span><span class=\"token punctuation\">)</span></span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n</code></pre></div><p>可以使用媒体查询 <code>min-device-width</code> 代替 <code>min-width</code>，后者检查的是设备宽度，而不是浏览器宽度。这样，当调整浏览器窗口大小时，图片就不会改变：</p>\n<div class=\"language-css\" data-ext=\"css\" data-title=\"css\"><pre class=\"language-css\"><code><span class=\"token comment\">/* For devices smaller than 400px: */</span>\n<span class=\"token selector\">body</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token property\">background-image</span><span class=\"token punctuation\">:</span> <span class=\"token url\"><span class=\"token function\">url</span><span class=\"token punctuation\">(</span><span class=\"token string url\">'img_smallflower.jpg'</span><span class=\"token punctuation\">)</span></span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token comment\">/* For devices 400px and larger: */</span>\n<span class=\"token atrule\"><span class=\"token rule\">@media</span> <span class=\"token keyword\">only</span> screen <span class=\"token keyword\">and</span> <span class=\"token punctuation\">(</span><span class=\"token property\">min-device-width</span><span class=\"token punctuation\">:</span> 400px<span class=\"token punctuation\">)</span></span> <span class=\"token punctuation\">{</span>\n  <span class=\"token selector\">body</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token property\">background-image</span><span class=\"token punctuation\">:</span> <span class=\"token url\"><span class=\"token function\">url</span><span class=\"token punctuation\">(</span><span class=\"token string url\">'img_flowers.jpg'</span><span class=\"token punctuation\">)</span></span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n</code></pre></div><h3>HTML <code>&lt;picture&gt;</code> 元素</h3>\n<p>HTML <code>&lt;picture&gt;</code> 元素为网络开发人员指定图像资源提供了更大的灵活性。</p>\n<p><code>&lt;picture&gt;</code> 元素最常用于响应式设计中使用的图像。与根据视口宽度放大或缩小一张图片的做法不同，可以设计多张图片，以便更好地填充浏览器视口。</p>\n<p><code>&lt;picture&gt;</code> 元素的工作原理与 <code>&lt;video&gt;</code> 和 <code>&lt;audio&gt;</code> 元素类似。可以设置不同的来源，符合偏好的第一个来源就是正在使用的来源：</p>\n<div class=\"language-css\" data-ext=\"css\" data-title=\"css\"><pre class=\"language-css\"><code>&lt;picture&gt;\n  &lt;source srcset=<span class=\"token string\">\"img_small_flower.jpg\"</span> media=<span class=\"token string\">\"(max-width: 400px)\"</span>&gt;\n  &lt;source srcset=<span class=\"token string\">\"img_flowers.jpg\"</span>&gt;\n  &lt;img src=<span class=\"token string\">\"img_flowers.jpg\"</span> alt=<span class=\"token string\">\"Flowers\"</span>&gt;\n&lt;/picture&gt;\n</code></pre></div><p><code>srcset</code> 属性为必填项，用于定义图像的来源。</p>\n<p><code>media</code> 属性是可选属性，可接受 CSS <code>@media</code> 规则中的媒体查询。</p>\n<p>还应为不支持 <code>&lt;picture&gt;</code> 元素的浏览器定义 <code>&lt;img&gt;</code> 元素。</p>\n<h2>响应式视频</h2>\n<h3>使用 <code>width</code> 属性</h3>\n<p>如果将 <code>width</code> 属性设置为 <code>100%</code>，视频播放器就会响应并上下缩放：</p>\n<div class=\"language-css\" data-ext=\"css\" data-title=\"css\"><pre class=\"language-css\"><code><span class=\"token selector\">video</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token property\">width</span><span class=\"token punctuation\">:</span> 100%<span class=\"token punctuation\">;</span>\n  <span class=\"token property\">height</span><span class=\"token punctuation\">:</span> auto<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n</code></pre></div><h3>使用 <code>max-width</code> 属性</h3>\n<p>和 <a href=\"#%E5%93%8D%E5%BA%94%E5%BC%8F%E5%9B%BE%E7%89%87\">响应式图片</a> 一样，最好使用 <code>max-width</code> 属性，视频会在必要时缩小，但绝不会放大到大于原始尺寸：</p>\n<div class=\"language-css\" data-ext=\"css\" data-title=\"css\"><pre class=\"language-css\"><code><span class=\"token selector\">video</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token property\">max-width</span><span class=\"token punctuation\">:</span> 100%<span class=\"token punctuation\">;</span>\n  <span class=\"token property\">height</span><span class=\"token punctuation\">:</span> auto<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n</code></pre></div><h3>HTML <code>&lt;video&gt;</code> 元素</h3>\n<p><code>&lt;video&gt;</code> 元素的工作原理与 <a href=\"#html-picture-%E5%85%83%E7%B4%A0\"><code>&lt;picture&gt;</code></a> 元素类似。可以设置不同的来源，符合偏好的第一个来源就是正在使用的来源：</p>\n<div class=\"language-html\" data-ext=\"html\" data-title=\"html\"><pre class=\"language-html\"><code><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>video</span> <span class=\"token attr-name\">width</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>400<span class=\"token punctuation\">\"</span></span> <span class=\"token attr-name\">controls</span><span class=\"token punctuation\">&gt;</span></span>\n  <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>source</span> <span class=\"token attr-name\">src</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>mov_bbb.mp4<span class=\"token punctuation\">\"</span></span> <span class=\"token attr-name\">type</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>video/mp4<span class=\"token punctuation\">\"</span></span> <span class=\"token punctuation\">/&gt;</span></span>\n  <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>source</span> <span class=\"token attr-name\">src</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>mov_bbb.ogg<span class=\"token punctuation\">\"</span></span> <span class=\"token attr-name\">type</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>video/ogg<span class=\"token punctuation\">\"</span></span> <span class=\"token punctuation\">/&gt;</span></span>\n  Your browser does not support HTML5 video.\n<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>video</span><span class=\"token punctuation\">&gt;</span></span>\n</code></pre></div><h2>参考</h2>\n<ul>\n<li><a href=\"https://www.w3schools.com/css/css_rwd_intro.asp\" target=\"_blank\" rel=\"noopener noreferrer\">Responsive Web Design</a></li>\n</ul>\n",
      "image": "https://raw.githubusercontent.com/dribble-njr/typora-njr/master/img/20240228125357.png",
      "date_published": "2024-02-28T00:00:00.000Z",
      "date_modified": "2024-03-04T09:14:57.000Z",
      "authors": [],
      "tags": [
        "CSS"
      ]
    },
    {
      "title": "Vuepress Plugin Ordered Header",
      "url": "https://dribble-njr.github.io/blog/blog/project/plugin/01.vuepress-plugin-ordered-header.html",
      "id": "https://dribble-njr.github.io/blog/blog/project/plugin/01.vuepress-plugin-ordered-header.html",
      "summary": " 提示 该插件已经发布至：GitHub | npm。 如有帮助可以点个 star 支持一下~。 VuePress 默认不支持生成有序目录，比如想要下面这种效果： 目录将显示为： 于是花了一点时间研究了 VuePress 的插件系统。 VuePress 架构 提示 以下内容来自 VuePress - 架构 概览 VuePress 的简要架构： Node ...",
      "content_html": "<div class=\"hint-container tip\">\n<p class=\"hint-container-title\">提示</p>\n<p>该插件已经发布至：<a href=\"https://github.com/dribble-njr/vuepress-plugin-ordered-header\" target=\"_blank\" rel=\"noopener noreferrer\">GitHub</a> | <a href=\"https://www.npmjs.com/package/vuepress-plugin-ordered-heade\" target=\"_blank\" rel=\"noopener noreferrer\">npm</a>。</p>\n<p>如有帮助可以点个 star 支持一下~。</p>\n</div>\n<p><a href=\"https://v2.vuepress.vuejs.org/zh/\" target=\"_blank\" rel=\"noopener noreferrer\">VuePress</a> 默认不支持生成有序目录，比如想要下面这种效果：</p>\n<div class=\"language-markdown\" data-ext=\"md\" data-title=\"md\"><pre class=\"language-markdown\"><code><span class=\"token title important\"><span class=\"token punctuation\">#</span> 标题 1</span>\n\n<span class=\"token title important\"><span class=\"token punctuation\">##</span> 标题 1-1</span>\n\n<span class=\"token title important\"><span class=\"token punctuation\">###</span> 标题 1-1-1</span>\n\n<span class=\"token title important\"><span class=\"token punctuation\">##</span> 标题 1-2</span>\n\n<span class=\"token title important\"><span class=\"token punctuation\">#</span> 标题 2</span>\n</code></pre></div><p>目录将显示为：</p>\n<div class=\"language-text\" data-ext=\"text\" data-title=\"text\"><pre class=\"language-text\"><code>1 header 1\n\n1.1 header 1-1\n\n1.1.1 header 1-1-1\n\n1.2 header 1-2\n\n2 header 2\n</code></pre></div><p>于是花了一点时间研究了 VuePress 的插件系统。</p>\n<h2>VuePress 架构</h2>\n<div class=\"hint-container tip\">\n<p class=\"hint-container-title\">提示</p>\n<p>以下内容来自 <a href=\"https://v2.vuepress.vuejs.org/zh/advanced/architecture.html\" target=\"_blank\" rel=\"noopener noreferrer\">VuePress - 架构</a></p>\n</div>\n<h3>概览</h3>\n<p>VuePress 的简要架构：</p>\n<ul>\n<li>Node App 会生成临时文件，包括页面、路由等。</li>\n<li>Bundler 会将 Client App 和临时文件一起进行打包，就像处理一个普通的 Vue App 一样。</li>\n</ul>\n<p>VuePress 分为两个主要部分： Node App 和 Client App：</p>\n<ul>\n<li>插件或者主题的入口文件会在 Node App 中被加载。</li>\n<li>客户端文件会在 Client App 中被加载，也就是会被 Bundler 处理。比如组件、客户端配置文件等。</li>\n</ul>\n<figure><img src=\"https://raw.githubusercontent.com/dribble-njr/typora-njr/master/img/20240229181754.png\" alt=\"架构\" tabindex=\"0\" loading=\"lazy\"><figcaption>架构</figcaption></figure>\n<h3>核心流程和 Hooks</h3>\n<p>VuePress 的核心流程以及 插件 API 的 Hooks ：</p>\n<ul>\n<li>在 <code>init</code> 阶段：\n<ul>\n<li>主题和插件会被加载。这意味着插件需要在初始化之前使用。</li>\n<li>由于我们要使用 <code>markdown-it</code> 来解析 Markdown 文件，因此需要在加载页面文件之前创建 <code>markdown-it</code> 实例：\n<ul>\n<li><code>extendsMarkdownOptions</code> Hook 会被调用，用以创建 <code>markdown-it</code> 实例。</li>\n<li><code>extendsMarkdown</code> Hook 会被调用，用以扩展 <code>markdown-it</code> 实例。</li>\n</ul>\n</li>\n<li>页面文件会被加载：\n<ul>\n<li><code>extendsPageOptions</code> Hook 会被调用，用以创建页面。</li>\n<li><code>extendsPage</code> Hook 会被调用，用以扩展页面对象。</li>\n</ul>\n</li>\n</ul>\n</li>\n<li>在 <code>prepare</code> 阶段：\n<ul>\n<li>临时文件会被生成，因此所有和客户端文件相关的 Hooks 会在此处调用。</li>\n</ul>\n</li>\n<li>在 <code>dev / build</code> 阶段：\n<ul>\n<li>Bundler 会被加载：</li>\n<li><code>extendsBundlerOptions</code> Hook 会被调用，用以生成 Bundler 的配置。</li>\n<li><code>alias</code> Hook 和 <code>define</code> Hook 会被用在 Bundler 的配置中，所以它们会在此处调用。</li>\n</ul>\n</li>\n</ul>\n<figure><img src=\"https://raw.githubusercontent.com/dribble-njr/typora-njr/master/img/20240229181843.png\" alt=\"核心流程和 Hooks\" tabindex=\"0\" loading=\"lazy\"><figcaption>核心流程和 Hooks</figcaption></figure>\n<h2>开发插件</h2>\n<p>开发插件只需要导出一个插件对象，并在对应 Hooks 中实现自己想要的逻辑。</p>\n<p>比如要实现有序标题，那么可以在 <a href=\"https://v2.vuepress.vuejs.org/zh/reference/plugin-api.html#extendspage\" target=\"_blank\" rel=\"noopener noreferrer\"><code>extendsPage</code></a> Hooks 中扩展 <a href=\"https://v2.vuepress.vuejs.org/zh/reference/node-api.html#page-%E5%B1%9E%E6%80%A7\" target=\"_blank\" rel=\"noopener noreferrer\"><code>Page</code></a> 实例的 <a href=\"https://v2.vuepress.vuejs.org/zh/reference/node-api.html#headers\" target=\"_blank\" rel=\"noopener noreferrer\"><code>headers</code></a> 属性。</p>\n<div class=\"hint-container tip\">\n<p class=\"hint-container-title\">提示</p>\n<p><code>extendsPage</code>：</p>\n<ul>\n<li>类型： <code>(page: Page, app: App) =&gt; void | Promise&lt;void&gt;</code></li>\n<li>详情：<br>\n页面扩展。<br>\n该 Hook 接收一个函数，在参数中会收到一个 Page 实例。<br>\n该 Hook 可以用来在 <code>Page</code> 对象上添加额外的属性，或修改现有的属性等。<br>\n值得一提的是，针对 <code>page.data</code> 和 <code>page.routeMeta</code> 的改动可以在客户端代码中使用。</li>\n</ul>\n</div>\n<div class=\"language-javascript\" data-ext=\"js\" data-title=\"js\"><pre class=\"language-javascript\"><code>module<span class=\"token punctuation\">.</span><span class=\"token function-variable function\">exports</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=&gt;</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">return</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token literal-property property\">name</span><span class=\"token operator\">:</span> <span class=\"token string\">'vuepress-plugin-ordered-header'</span><span class=\"token punctuation\">,</span>\n    <span class=\"token function-variable function\">extendsPage</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\">page</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=&gt;</span> <span class=\"token punctuation\">{</span>\n      <span class=\"token comment\">// 实现扩展逻辑</span>\n    <span class=\"token punctuation\">}</span>\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n</code></pre></div><h2>实现功能</h2>\n<p><code>headers: PageHeader[]</code> 数据结构如下：</p>\n<div class=\"language-typescript\" data-ext=\"ts\" data-title=\"ts\"><pre class=\"language-typescript\"><code><span class=\"token keyword\">interface</span> <span class=\"token class-name\">PageHeader</span> <span class=\"token punctuation\">{</span>\n  level<span class=\"token operator\">:</span> <span class=\"token builtin\">number</span>\n  title<span class=\"token operator\">:</span> <span class=\"token builtin\">string</span>\n  slug<span class=\"token operator\">:</span> <span class=\"token builtin\">string</span>\n  children<span class=\"token operator\">:</span> PageHeader<span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span>\n<span class=\"token punctuation\">}</span>\n</code></pre></div><p>每个标题下的子标题会被放入 <code>children</code> 数组，因此需要利用递归实现。</p>\n<ol>\n<li>首先初始化一个计数数组 <code>counter</code>，代表 <code>h1</code> ~ <code>h6</code> 6 个标题层级。</li>\n<li>在每个标题层级上，首先将对应的层级计数器加一（即 <code>counter[level] = (counter[level] || 0) + 1</code>）。</li>\n<li>然后对于比当前层级更深的计数器（即该标题的子标题）进行重置（即 counter[i] = undefined）。</li>\n<li>再利用 <code>counter</code> 数组给标题增加序号。</li>\n<li>最后返回处理好的 <code>page</code> 对象。</li>\n</ol>\n<div class=\"language-javascript\" data-ext=\"js\" data-title=\"js\"><pre class=\"language-javascript\"><code>module<span class=\"token punctuation\">.</span><span class=\"token function-variable function\">exports</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=&gt;</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">return</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token literal-property property\">name</span><span class=\"token operator\">:</span> <span class=\"token string\">'vuepress-plugin-ordered-header'</span><span class=\"token punctuation\">,</span>\n    <span class=\"token function-variable function\">extendsPage</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\">page</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=&gt;</span> <span class=\"token punctuation\">{</span>\n      <span class=\"token keyword\">const</span> counter <span class=\"token operator\">=</span> <span class=\"token function\">Array</span><span class=\"token punctuation\">(</span><span class=\"token number\">6</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">fill</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">undefined</span><span class=\"token punctuation\">)</span>\n\n      <span class=\"token keyword\">const</span> <span class=\"token function-variable function\">reorderHeaders</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\">headers</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=&gt;</span> <span class=\"token punctuation\">{</span>\n        headers<span class=\"token punctuation\">.</span><span class=\"token function\">forEach</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">header</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=&gt;</span> <span class=\"token punctuation\">{</span>\n          <span class=\"token keyword\">const</span> level <span class=\"token operator\">=</span> header<span class=\"token punctuation\">.</span>level <span class=\"token operator\">-</span> <span class=\"token number\">1</span>\n\n          counter<span class=\"token punctuation\">[</span>level<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span>counter<span class=\"token punctuation\">[</span>level<span class=\"token punctuation\">]</span> <span class=\"token operator\">||</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">+</span> <span class=\"token number\">1</span>\n\n          <span class=\"token comment\">// reset level</span>\n          <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">let</span> i <span class=\"token operator\">=</span> level <span class=\"token operator\">+</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span> i <span class=\"token operator\">&lt;</span> counter<span class=\"token punctuation\">.</span>length<span class=\"token punctuation\">;</span> i<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n            counter<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token keyword\">undefined</span>\n          <span class=\"token punctuation\">}</span>\n\n          header<span class=\"token punctuation\">.</span>title <span class=\"token operator\">=</span> <span class=\"token template-string\"><span class=\"token template-punctuation string\">`</span><span class=\"token interpolation\"><span class=\"token interpolation-punctuation punctuation\">${</span>counter<span class=\"token punctuation\">.</span><span class=\"token function\">filter</span><span class=\"token punctuation\">(</span>Number<span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">join</span><span class=\"token punctuation\">(</span><span class=\"token string\">'.'</span><span class=\"token punctuation\">)</span><span class=\"token interpolation-punctuation punctuation\">}</span></span><span class=\"token string\"> </span><span class=\"token interpolation\"><span class=\"token interpolation-punctuation punctuation\">${</span>header<span class=\"token punctuation\">.</span>title<span class=\"token interpolation-punctuation punctuation\">}</span></span><span class=\"token template-punctuation string\">`</span></span>\n\n          <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>header<span class=\"token punctuation\">.</span>children<span class=\"token punctuation\">)</span> <span class=\"token function\">reorderHeaders</span><span class=\"token punctuation\">(</span>header<span class=\"token punctuation\">.</span>children<span class=\"token punctuation\">)</span>\n        <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span>\n      <span class=\"token punctuation\">}</span>\n\n      <span class=\"token function\">reorderHeaders</span><span class=\"token punctuation\">(</span>page<span class=\"token punctuation\">.</span>headers<span class=\"token punctuation\">)</span>\n\n      <span class=\"token keyword\">return</span> page\n    <span class=\"token punctuation\">}</span>\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n</code></pre></div>",
      "image": "https://raw.githubusercontent.com/dribble-njr/typora-njr/master/img/20240229181754.png",
      "date_published": "2024-02-19T00:00:00.000Z",
      "date_modified": "2024-02-29T11:17:41.000Z",
      "authors": [],
      "tags": [
        "Project"
      ]
    },
    {
      "title": "Plugin",
      "url": "https://dribble-njr.github.io/blog/blog/project/plugin/",
      "id": "https://dribble-njr.github.io/blog/blog/project/plugin/",
      "summary": " ",
      "content_html": "<ul>\n<li></li>\n</ul>\n",
      "date_published": "2024-02-29T11:17:41.000Z",
      "date_modified": "2024-02-29T11:17:41.000Z",
      "authors": [],
      "tags": []
    },
    {
      "title": "静态站点生成器",
      "url": "https://dribble-njr.github.io/blog/blog/project/ssg/",
      "id": "https://dribble-njr.github.io/blog/blog/project/ssg/",
      "summary": "静态站点生成器（static site generation, ssg）。 VuePress Docusaurus Docusaurus 是一款静态网站生成器。 它利用 React 的全部功能来构建具有快速客户端导航功能的单页应用程序，从而使您的网站具有交互性。 它提供开箱即用的文档功能，但也可用于创建任何类型的网站（个人网站、产品、博客、营销登陆页面...",
      "content_html": "<p>静态站点生成器（static site generation, ssg）。</p>\n<h2>VuePress</h2>\n<h2>Docusaurus</h2>\n<p><a href=\"https://docusaurus.io/\" target=\"_blank\" rel=\"noopener noreferrer\">Docusaurus</a> 是一款静态网站生成器。</p>\n<p>它利用 React 的全部功能来构建具有快速客户端导航功能的单页应用程序，从而使您的网站具有交互性。</p>\n<p>它提供开箱即用的文档功能，但也可用于创建任何类型的网站（个人网站、产品、博客、营销登陆页面等）。</p>\n<h3>对比</h3>\n<h4>Gatsby​</h4>\n<p><a href=\"https://www.gatsbyjs.com/\" target=\"_blank\" rel=\"noopener noreferrer\">Gatsby</a> 功能丰富，拥有丰富的插件生态系统，可以实现 Docusaurus 的所有功能。</p>\n<p>当然，这带来了较陡的学习曲线。 Gatsby 在许多方面做得都很出色，适合构建许多类型的网站。另一方面，Docusaurus 力图将一件事做到尽善尽美——成为最好的内容撰写与发布工具。</p>\n<p>GraphQL 是 Gatsby 的核心，但搭建 Gatsby 网站不一定要用到它。 而在大多数静态网站中，你更不需要 GraphQL 所提供的灵活性。</p>\n<p>Docusaurus v2+ 的许多方面都被 Gatsby 的出色之处所启发，这是一个优秀的替代品。</p>\n<p>Docz is a Gatsby theme to build documentation websites. 它的功能与 Docusaurus 相比要匮乏。</p>\n<h4>VuePress</h4>\n<p>VuePress 与 Docusaurus 有许多相似之处--两者都非常重视以内容为中心的网站，并提供开箱即用的定制文档功能。</p>\n<p>但是，VuePress 是 Vue 驱动的，而 Docusaurus 则是 React 驱动的。</p>\n<p>如果你想要一个基于 Vue 的解决方案，VuePress 是个不错的选择。</p>\n",
      "date_published": "2024-02-29T00:00:00.000Z",
      "date_modified": "2024-02-29T11:17:41.000Z",
      "authors": [],
      "tags": [
        "Project"
      ]
    },
    {
      "title": "基础工具",
      "url": "https://dribble-njr.github.io/blog/blog/reading/pragmatic-programmer/03-basic-tool.html",
      "id": "https://dribble-njr.github.io/blog/blog/reading/pragmatic-programmer/03-basic-tool.html",
      "summary": "让需求来驱使你不断选购新的工具。 纯文本的威力 用纯文本保存知识。 shell 游戏 发挥 shell 命令的优势。花费一些精力熟悉 shell。 加强编辑器能力 熟悉编辑器： 当编辑文本时，以字符、单词、行、段落为单位移动光标及进行选择。 当编辑代码时，在各种语法单元（配对的分隔符、函数、模块……）之间移动。 做完修改后，重新缩进代码。 用单个指令完...",
      "content_html": "<p>让需求来驱使你不断选购新的工具。</p>\n<h2>纯文本的威力</h2>\n<p>用纯文本保存知识。</p>\n<h2>shell 游戏</h2>\n<p>发挥 shell 命令的优势。花费一些精力熟悉 shell。</p>\n<h2>加强编辑器能力</h2>\n<p>熟悉编辑器：</p>\n<ul>\n<li>当编辑文本时，以字符、单词、行、段落为单位移动光标及进行选择。</li>\n<li>当编辑代码时，在各种语法单元（配对的分隔符、函数、模块……）之间移动。</li>\n<li>做完修改后，重新缩进代码。</li>\n<li>用单个指令完成代码块的注释或取消注释。</li>\n<li>Undo 并 Redo 变更。</li>\n<li>把编辑窗口切割成多个面板，然后在它们之间跳转。</li>\n<li>跳转到特定的行号。</li>\n<li>对选出的多行进行排序。</li>\n<li>搜索普通字符串，或用正则表达式搜索，然后重复上一次的搜索。</li>\n<li>基于框选或某个模式匹配的结果，临时创建多个光标，并行地在多个光标处编辑文本。</li>\n<li>显示当前项目的编译错误。</li>\n<li>跑一下当前项目的测试。</li>\n</ul>\n<p>编辑时要自省。每次发现自己又在重复做某件事情的时候，要习惯性地想到「或许有更好的方法」，然后找到这个方法。</p>\n<p>一旦你发掘出一个新的有用的特性，需要尽快把它内化成一种肌肉记忆，这样在使用的时候就能不假思索。</p>\n<p>当你在使用编辑器过程中遇到明显的限制时，可以四处找找有什么扩展可以解决问题。</p>\n<p>更进一步，深入研究一下编辑器的扩展语言。搞明白怎样用它来将一些重复工作自动化——通常也就是一两行代码的事情。</p>\n<p>有时你还会走得更远，不知不觉就写出一个完整的扩展。那么，不妨发布出去：你需要它，其他人也会需要的。</p>\n<h2>版本控制</h2>\n<p>永远使用版本控制。</p>\n<h2>调试</h2>\n<ul>\n<li>复现</li>\n<li>阅读错误信息</li>\n</ul>\n<h2>文本处理</h2>\n<p>学习一门文本处理语言，<code>py</code>、<code>js</code>、<code>ruby</code>。</p>\n<h2>工程日记</h2>\n<p>记录所做的事情、所学的东西、想法的草图——基本上都是各种与工作有关的东西。</p>\n",
      "date_published": "2024-02-20T00:00:00.000Z",
      "date_modified": "2024-02-29T06:16:22.000Z",
      "authors": [],
      "tags": [
        "READING"
      ]
    },
    {
      "title": "useEffect",
      "url": "https://dribble-njr.github.io/blog/blog/frontend/framework/react/02-useEffect.html",
      "id": "https://dribble-njr.github.io/blog/blog/frontend/framework/react/02-useEffect.html",
      "summary": "useEffect 可以将组件与外部系统同步。 相关信息 外部系统，包括网络、浏览器 API (setTimeout...）、第三方库或浏览器 DOM。 useEffect(setup, dependencies?) setup 包含 Effect 逻辑的函数。该 设置函数 可以返回一个 清理函数。大致运行逻辑如下： 当组件添加到 DOM 时，Reac...",
      "content_html": "<p><code>useEffect</code> 可以将组件与外部系统同步。</p>\n<div class=\"hint-container info\">\n<p class=\"hint-container-title\">相关信息</p>\n<p>外部系统，包括网络、浏览器 API (<code>setTimeout</code>...）、第三方库或浏览器 DOM。</p>\n</div>\n<h2>useEffect(setup, dependencies?)</h2>\n<h3><code>setup</code></h3>\n<p>包含 Effect 逻辑的函数。该 <strong>设置函数</strong> 可以返回一个 <strong>清理函数</strong>。大致运行逻辑如下：</p>\n<ol>\n<li>当组件添加到 DOM 时，React 将运行「设置函数」。</li>\n<li>在每次重新渲染依赖关系发生变化后：\n<ul>\n<li>React 将首先使用 <strong>旧值</strong> 运行「清理函数」；</li>\n<li>然后使用 <strong>新值</strong> 运行「设置函数」。</li>\n</ul>\n</li>\n<li>从 DOM 中移除组件后，React 将最后一次运行「清理函数」。</li>\n</ol>\n<h3><code>dependencies</code></h3>\n<p><code>setup</code> 代码中依赖的所有响应值的列表。</p>\n<p>响应值包括 <code>props</code>、<code>state</code> 以及直接在组件主体中声明的所有变量和函数。</p>\n<div class=\"hint-container tip\">\n<p class=\"hint-container-title\">提示</p>\n<p>如果为 React 配置了 <a href=\"https://react.dev/learn/editor-setup#linting\" target=\"_blank\" rel=\"noopener noreferrer\">linter</a>，它就会验证是否将每个反应值都正确指定为依赖项。</p>\n</div>\n<p>依赖项列表必须具有恒定的项数，并以 <code>[dep1、dep2、dep3]</code> 这样的内联方式书写。</p>\n<p>React 会使用 <a href=\"https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/Object/is\" target=\"_blank\" rel=\"noopener noreferrer\"><code>Object.is</code></a> 比较法将每个依赖项与其前一个值进行比较。</p>\n<p>如果省略此参数，每次重新渲染组件后，Effect 都会重新运行。</p>\n\n<h2>useEffect 完整指南</h2>\n<p><a href=\"https://overreacted.io/a-complete-guide-to-useeffect/\" target=\"_blank\" rel=\"noopener noreferrer\">useEffect 完整指南</a></p>\n<h3>每一次渲染都有自己的 props 和 state</h3>\n<p>和 Vue 不同，Vue 的基本原理是数据绑定、观察者模式、proxy。</p>\n<p>React 在状态变更时会重新渲染组件，状态并没有任何的数据绑定。</p>\n<p>每一次组件调用引起的渲染，props 和 state 都独立于其他渲染。</p>\n<h3>每一次渲染都有自己的事件处理程序</h3>\n<p>事件处理函数会记住当前渲染的 <code>props</code> 和 <code>state</code>，从这个角度来说可以印证第一点。</p>\n<h3>每一次渲染都有自己的 Effects</h3>\n<p>每次渲染都是一个 <em>不同的函数</em> ，每一个 effect 版本「看到」的 <code>props</code> 和 <code>state</code> 值都来自于它属于的那次特定渲染。</p>\n<p>从官方文档中的描述中也可以确认这一点：<strong>在每次重新渲染依赖关系发生变化后，React 将首先使用旧值运行清理函数，然后使用新值运行设置函数。</strong></p>\n<p>每一次渲染的任何东西都是独立的。**在组件内什么时候去读取 props 或者 state 是无关紧要的。**因为在单次渲染的范围内，props 和 state 始终保持不变。</p>\n",
      "date_published": "2024-02-27T00:00:00.000Z",
      "date_modified": "2024-04-02T03:14:43.000Z",
      "authors": [],
      "tags": [
        "react"
      ]
    },
    {
      "title": "useState",
      "url": "https://dribble-njr.github.io/blog/blog/frontend/framework/react/01-useState.html",
      "id": "https://dribble-njr.github.io/blog/blog/frontend/framework/react/01-useState.html",
      "summary": "useState 声明一个可以直接更新的状态变量。 一般在组件 最顶层 调用 useState 给组件添加状态变量，一般使用数组解构来命名状态变量，如 [something, setSomething]。 useState(initialState) 参数： initialState：初始状态，可以是任何类型的值，初始渲染后，该参数将被忽略。 如果传递...",
      "content_html": "<p><code>useState</code> 声明一个可以直接更新的状态变量。</p>\n<p>一般在组件 <strong>最顶层</strong> 调用 <code>useState</code> 给组件添加状态变量，一般使用数组解构来命名状态变量，如 <code>[something, setSomething]</code>。</p>\n<div class=\"language-javascript\" data-ext=\"js\" data-title=\"js\"><pre class=\"language-javascript\"><code><span class=\"token keyword\">import</span> <span class=\"token punctuation\">{</span> useState <span class=\"token punctuation\">}</span> <span class=\"token keyword\">from</span> <span class=\"token string\">'react'</span>\n\n<span class=\"token keyword\">function</span> <span class=\"token function\">MyComponent</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">const</span> <span class=\"token punctuation\">[</span>age<span class=\"token punctuation\">,</span> setAge<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token function\">useState</span><span class=\"token punctuation\">(</span><span class=\"token number\">28</span><span class=\"token punctuation\">)</span>\n  <span class=\"token keyword\">const</span> <span class=\"token punctuation\">[</span>name<span class=\"token punctuation\">,</span> setName<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token function\">useState</span><span class=\"token punctuation\">(</span><span class=\"token string\">'Taylor'</span><span class=\"token punctuation\">)</span>\n  <span class=\"token keyword\">const</span> <span class=\"token punctuation\">[</span>todos<span class=\"token punctuation\">,</span> setTodos<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token function\">useState</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=&gt;</span> <span class=\"token function\">createTodos</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n  <span class=\"token comment\">// ...</span>\n<span class=\"token punctuation\">}</span>\n</code></pre></div><h2>useState(initialState)</h2>\n<p><strong>参数：</strong></p>\n<p><code>initialState</code>：初始状态，可以是任何类型的值，初始渲染后，该参数将被忽略。</p>\n<p>如果传递一个函数作为 <code>initialState</code>，它将被视为「初始化函数」。</p>\n<p>它应该：</p>\n<ul>\n<li>是 <strong>纯函数</strong></li>\n<li>不带参数</li>\n<li>返回任意类型的值</li>\n</ul>\n<p>React 将在初始化组件时调用初始化函数，并将其返回值存储为初始状态。</p>\n\n<div class=\"hint-container warning\">\n<p class=\"hint-container-title\">注意</p>\n<p>尽管 <code>createInitialTodos()</code> 的结果仅用于初始渲染，但你仍然在每次渲染时调用此函数。如果它创建大数组或执行昂贵的计算，这可能会浪费资源。</p>\n<p>所以对于大型数组的创建，一般传入初始化函数。</p>\n</div>\n<p><strong>返回值：</strong></p>\n<p><code>useState</code> 返回一个数组，使用数组解构接收，其中包含两个值：</p>\n<ol>\n<li>当前状态。在第一次渲染时，它将与传递的初始状态 <code>initialState</code> 相匹配。</li>\n<li><code>set</code> 函数，用于 <strong>状态更新</strong> 并 <strong>触发重新渲染</strong>。</li>\n</ol>\n<p><strong>注意：</strong></p>\n<ul>\n<li><code>useState</code> 是一个钩子，所以 <strong>只能</strong> 在组件的顶层或者你自己的钩子中调用它，<strong>不能</strong> 在循环或条件中调用它。</li>\n<li>在严格模式下，React 会 <strong>调用两次初始化函数</strong>，其中一次调用的结果将被忽略，以帮助你找到意外的杂质。这是开发专用行为，不会影响生产环境。如果初始化函数是纯函数，就不会影响应用实际行为（因此初始化函数必须是纯函数）。</li>\n</ul>\n<div class=\"hint-container warning\">\n<p class=\"hint-container-title\">注意</p>\n<p>若循环调用，则可能造成状态管理混乱、组件不一致、难以调试的问题。</p>\n</div>\n<h2>setSomething(nextState)</h2>\n<p><code>set</code> 函数会 <strong>更新状态并触发重新渲染</strong>，可以直接传入 <code>next state</code>，或者传入一个纯函数。<code>set</code> 函数没有返回值。</p>\n<p><code>setSomething()</code> 是一个异步函数，如下所示，<code>handleClick1</code> 点击一次后，年龄将变为 <code>43</code> 岁，而不是 <code>45</code> 岁。</p>\n<p>这是因为调用 <code>set</code> 函数 <strong>不会同步</strong> 更新已运行代码中的年龄状态变量。</p>\n<p>因此，每次调用 <code>setAge(age + 1)</code> 都会变成 <code>setAge(43)</code>。</p>\n<div class=\"language-javascript\" data-ext=\"js\" data-title=\"js\"><pre class=\"language-javascript\"><code><span class=\"token keyword\">function</span> <span class=\"token function\">handleClick1</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token function\">setAge</span><span class=\"token punctuation\">(</span>age <span class=\"token operator\">+</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span> <span class=\"token comment\">// setAge(42 + 1)</span>\n  <span class=\"token function\">setAge</span><span class=\"token punctuation\">(</span>age <span class=\"token operator\">+</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span> <span class=\"token comment\">// setAge(42 + 1)</span>\n  <span class=\"token function\">setAge</span><span class=\"token punctuation\">(</span>age <span class=\"token operator\">+</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span> <span class=\"token comment\">// setAge(42 + 1)</span>\n<span class=\"token punctuation\">}</span>\n</code></pre></div><div class=\"hint-container tip\">\n<p class=\"hint-container-title\">提示</p>\n<p><a href=\"https://github.com/facebook/react/issues/11527\" target=\"_blank\" rel=\"noopener noreferrer\">RFClarification: why is setState asynchronous?</a></p>\n</div>\n<p>如果传递一个函数作为 <code>nextState</code>，它将被视为一个更新函数。它必须是「纯函数」，应将待处理状态作为唯一参数，并返回下一个状态。</p>\n<p>React 会将更新函数 <strong>放入队列</strong>，然后重新渲染组件。</p>\n<p>在下一次渲染中，React 将通过将所有队列中的更新器 <strong>应用上一个状态来计算下一个状态(<code>previous state</code> to <code>next state</code>)</strong>。</p>\n<div class=\"language-javascript\" data-ext=\"js\" data-title=\"js\"><pre class=\"language-javascript\"><code><span class=\"token keyword\">function</span> <span class=\"token function\">handleClick2</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token function\">setAge</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">a</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=&gt;</span> a <span class=\"token operator\">+</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span> <span class=\"token comment\">// setAge(42 =&gt; 43)</span>\n  <span class=\"token function\">setAge</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">a</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=&gt;</span> a <span class=\"token operator\">+</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span> <span class=\"token comment\">// setAge(43 =&gt; 44)</span>\n  <span class=\"token function\">setAge</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">a</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=&gt;</span> a <span class=\"token operator\">+</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span> <span class=\"token comment\">// setAge(44 =&gt; 45)</span>\n<span class=\"token punctuation\">}</span>\n</code></pre></div><p>上述代码的处理过程如下：</p>\n<ol>\n<li><code>a =&gt; a + 1</code> 将接收 <code>42</code> 作为待处理状态，并返回 <code>43</code> 作为下一状态。</li>\n<li><code>a =&gt; a + 1</code> 将接收 <code>43</code> 作为待处理状态，并返回 <code>44</code> 作为下一个状态。</li>\n<li><code>a =&gt; a + 1</code> 将接收 <code>44</code> 作为待处理状态，并返回 <code>45</code> 作为下一个状态。</li>\n</ol>\n<p>没有其他队列更新，所以 React 会将 <code>45</code> 作为当前状态保存。</p>\n<div class=\"hint-container tip\">\n<p class=\"hint-container-title\">提示</p>\n<p>按照惯例，通常以状态变量名称的首字母来命名待处理状态参数，如年龄的 <code>a</code>，也可以使用更加清晰的名称 <code>prevAge</code>。</p>\n</div>\n<div class=\"hint-container warning\">\n<p class=\"hint-container-title\">注意</p>\n<ul>\n<li><code>set</code> 函数只更新 <strong>下一次渲染</strong> 的状态变量。如果在调用 <code>set</code> 函数后读取状态变量，您仍然会得到调用前屏幕上的旧值。</li>\n<li>如果提供的新值与当前状态相同（由 <code>Object.is</code> 比较确定），React 将 <strong>跳过重新渲染组件及其子代</strong>。</li>\n<li>React 会批量更新状态。它会 <strong>在所有事件处理程序运行并调用其设置函数后更新屏幕</strong>。这可以防止在单个事件中多次重新渲染。在极少数情况下，需要强制 React 提前更新屏幕，例如访问 DOM，可以使用 <code>flushSync</code>。</li>\n<li>与初始化函数类似，在严格模式下，React 会调用更新器函数 <strong>两次</strong>，以验证它们是否纯粹。</li>\n</ul>\n</div>\n<h2>Usage</h2>\n<ul>\n<li><a href=\"https://react.dev/reference/react/useState#adding-state-to-a-component\" target=\"_blank\" rel=\"noopener noreferrer\">Adding state to a component</a></li>\n<li><a href=\"https://react.dev/reference/react/useState#updating-state-based-on-the-previous-state\" target=\"_blank\" rel=\"noopener noreferrer\">Updating state based on the previous state</a></li>\n<li><a href=\"https://react.dev/reference/react/useState#updating-objects-and-arrays-in-state\" target=\"_blank\" rel=\"noopener noreferrer\">Updating objects and arrays in state</a></li>\n<li><a href=\"https://react.dev/reference/react/useState#avoiding-recreating-the-initial-state\" target=\"_blank\" rel=\"noopener noreferrer\">Avoiding recreating the initial state</a></li>\n<li><a href=\"https://react.dev/reference/react/useState#resetting-state-with-a-key\" target=\"_blank\" rel=\"noopener noreferrer\">Resetting state with a key</a></li>\n<li><a href=\"https://react.dev/reference/react/useState#storing-information-from-previous-renders\" target=\"_blank\" rel=\"noopener noreferrer\">Storing information from previous renders</a></li>\n</ul>\n",
      "date_published": "2024-02-27T00:00:00.000Z",
      "date_modified": "2024-03-25T07:44:17.000Z",
      "authors": [],
      "tags": [
        "react"
      ]
    },
    {
      "title": "高级数据库模型",
      "url": "https://dribble-njr.github.io/blog/blog/backend/database/basic/004-advanced-db-model.html",
      "id": "https://dribble-njr.github.io/blog/blog/backend/database/basic/004-advanced-db-model.html",
      "summary": "数据库建立的过程从设计阶段开始，需要提出并回答存储什么信息，信息元素之间如何关联，假定有什么样的约束，诸如键或者参考的完整性等等。 有几种用符号表达设计的方法。 实体-关系图（E-R 图） UML（统一建模语言） ODL（对象描述语言） E/R 模型 在「实体-联系（entity-relationship model）」 E/R 模型中，数据的结构使用...",
      "content_html": "<p>数据库建立的过程从设计阶段开始，需要提出并回答存储什么信息，信息元素之间如何关联，假定有什么样的约束，诸如键或者参考的完整性等等。</p>\n<div class=\"language-text\" data-ext=\"text\" data-title=\"text\"><pre class=\"language-text\"><code>思考 </code></pre></div>",
      "image": "https://raw.githubusercontent.com/dribble-njr/typora-njr/master/img/20240225223249.png",
      "date_published": "2024-01-24T00:00:00.000Z",
      "date_modified": "2024-02-27T08:39:09.000Z",
      "authors": [],
      "tags": [
        "database"
      ]
    },
    {
      "title": "集中管理碎片化知识",
      "url": "https://dribble-njr.github.io/blog/blog/project/RSSHub/",
      "id": "https://dribble-njr.github.io/blog/blog/project/RSSHub/",
      "summary": "将不同平台的信息汇总到一个平台中。 信息获取的问题 信息多而杂 无法形成有效阅读 信息多而杂 信息来自不同平台，需要打开不同的软件，知乎、掘金、公众号、B 站、GitHub 等等。 每个平台都充斥着各种你不需要的信息，很容易被其他信息分散注意力。 有时候为了刷到想要的信息，需要长时间停留。 无法形成有效阅读 以微信公众号为例，除了一些技术公众号，大部分...",
      "content_html": "<p>将不同平台的信息汇总到一个平台中。</p>\n<h2>信息获取的问题</h2>\n<ul>\n<li>信息多而杂</li>\n<li>无法形成有效阅读</li>\n</ul>\n<h3>信息多而杂</h3>\n<p>信息来自不同平台，需要打开不同的软件，知乎、掘金、公众号、B 站、GitHub 等等。</p>\n<p>每个平台都充斥着各种你不需要的信息，很容易被其他信息分散注意力。</p>\n<p>有时候为了刷到想要的信息，需要长时间停留。</p>\n<h3>无法形成有效阅读</h3>\n<p>以微信公众号为例，除了一些技术公众号，大部分关注的还是非技术类的，对技术知识获取是一种干扰。</p>\n<p>同时由于我们基本都在手机上阅读公众号的文章，难以进行信息提取、标注等，无法形成有效的知识积累。</p>\n<figure><img src=\"https://raw.githubusercontent.com/dribble-njr/typora-njr/master/img/20240224191619.png\" alt=\"微信公众号\" tabindex=\"0\" loading=\"lazy\"><figcaption>微信公众号</figcaption></figure>\n<h2>RSS(RDF Site Summary)</h2>\n<p>内容共享通常发生在特定网站和聚合网站之间。这种交流是以基本的 XML 形式进行的，人和机器都可以读取。要为网站设置 RSS，必须创建一个 XML 文件，即 RSS 文档或 RSS Feed。发明人为「阿龙·斯沃茨」。</p>\n<figure><img src=\"https://raw.githubusercontent.com/dribble-njr/typora-njr/master/img/20240224190921.png\" alt=\"Aaron Swartz\" tabindex=\"0\" loading=\"lazy\"><figcaption>Aaron Swartz</figcaption></figure>\n<p>下面是一个 RSS 文档示例。</p>\n<div class=\"language-xml\" data-ext=\"xml\" data-title=\"xml\"><pre class=\"language-xml\"><code><span class=\"token prolog\">&lt;?xml version=\"1.0\" encoding=\"UTF-8\" ?&gt;</span>\n<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>rss</span> <span class=\"token attr-name\">version</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>2.0<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">&gt;</span></span>\n\n<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>channel</span><span class=\"token punctuation\">&gt;</span></span>\n  <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>title</span><span class=\"token punctuation\">&gt;</span></span>RSS title<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>title</span><span class=\"token punctuation\">&gt;</span></span>\n  <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>link</span><span class=\"token punctuation\">&gt;</span></span> https://mywebsitename/index.html <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>link</span><span class=\"token punctuation\">&gt;</span></span>\n  <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>description</span><span class=\"token punctuation\">&gt;</span></span>My Blog<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>description</span><span class=\"token punctuation\">&gt;</span></span>\n  <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>item</span><span class=\"token punctuation\">&gt;</span></span>\n    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>title</span><span class=\"token punctuation\">&gt;</span></span>My First Feed<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>title</span><span class=\"token punctuation\">&gt;</span></span>\n    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>link</span><span class=\"token punctuation\">&gt;</span></span>http://mywebsitename/blog/article/1.html<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>link</span><span class=\"token punctuation\">&gt;</span></span>\n    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>description</span><span class=\"token punctuation\">&gt;</span></span>My new article<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>description</span><span class=\"token punctuation\">&gt;</span></span>\n  <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>item</span><span class=\"token punctuation\">&gt;</span></span>\n  <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>item</span><span class=\"token punctuation\">&gt;</span></span>\n    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>title</span><span class=\"token punctuation\">&gt;</span></span>My Second Feed<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>title</span><span class=\"token punctuation\">&gt;</span></span>\n    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>link</span><span class=\"token punctuation\">&gt;</span></span>http://mywebsitename/blog/article/2.html<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>link</span><span class=\"token punctuation\">&gt;</span></span>\n    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>description</span><span class=\"token punctuation\">&gt;</span></span>Another new article<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>description</span><span class=\"token punctuation\">&gt;</span></span>\n  <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>item</span><span class=\"token punctuation\">&gt;</span></span>\n<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>channel</span><span class=\"token punctuation\">&gt;</span></span>\n\n<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>rss</span><span class=\"token punctuation\">&gt;</span></span>\n</code></pre></div><ul>\n<li>首先是 XML 标签、其版本和编码方案。</li>\n<li>下面一行标志着 RSS 标签的开始及其使用的版本。</li>\n<li>接下来的几行显示了频道标签，它标志着 RSS Feed 的开始。它包含频道标题、超链接和频道描述。</li>\n<li>在频道标签中定义了一个或多个项目，基本上就是内容或故事，每个项目都有自己的标题、链接和说明。</li>\n<li>频道可以容纳任何形式的数据--图片、gifs、音频等。</li>\n<li>每个项目都有自己独特的 XML 标签。</li>\n</ul>\n<h2>如何获取 RSS</h2>\n<h3>提供 RSS 的网站</h3>\n<p>最直接的方法就是看网站的底部或侧边栏是否有 RSS 图标。</p>\n<p>大多数情况下，支持 RSS 订阅的网站都会将 RSS 图标展示出来。不过总有例外，这时候你也可以尝试在网站域名后面加上 <code>/feed</code> 或 <code>/rss</code> 或许可以碰巧猜中，比如少数派的 RSS 订阅链接就是 <a href=\"https://sspai.com/feed%E3%80%82\" target=\"_blank\" rel=\"noopener noreferrer\">https://sspai.com/feed。</a></p>\n<figure><img src=\"https://raw.githubusercontent.com/dribble-njr/typora-njr/master/img/20240225111610.png\" alt=\"RSS 图标\" tabindex=\"0\" loading=\"lazy\"><figcaption>RSS 图标</figcaption></figure>\n<p>当然，你也可以直接通过搜索引擎通过 网站名 + RSS 的关键字进行搜索，往往都能找到支持网站的 RSS 链接。</p>\n<figure><img src=\"https://raw.githubusercontent.com/dribble-njr/typora-njr/master/img/20240225111905.png\" alt=\"搜索引擎\" tabindex=\"0\" loading=\"lazy\"><figcaption>搜索引擎</figcaption></figure>\n<h3>未提供 RSS 的网站 —— RSSHub</h3>\n<p><a href=\"https://docs.rsshub.app/\" target=\"_blank\" rel=\"noopener noreferrer\">RSSHub</a> 目前提供了 4461 规则，适配了绝大部分网站。</p>\n<figure><img src=\"https://raw.githubusercontent.com/dribble-njr/typora-njr/master/img/20240225110516.png\" alt=\"RSSHub\" tabindex=\"0\" loading=\"lazy\"><figcaption>RSSHub</figcaption></figure>\n<p>添加订阅时，只需要将举例中的 UID 换成你想要订阅博主的 UID 即可。（划线部分为 UID）</p>\n<figure><img src=\"https://raw.githubusercontent.com/dribble-njr/typora-njr/master/img/20240227103514.pngv\" alt=\"添加路由\" tabindex=\"0\" loading=\"lazy\"><figcaption>添加路由</figcaption></figure>\n<h3>检测订阅源 —— RSSHub Radar</h3>\n<p><a href=\"https://github.com/DIYgod/RSSHub-Radar\" target=\"_blank\" rel=\"noopener noreferrer\">RSSHub Radar</a> 是 RSSHub 官方提供了检测订阅源的工具，当一个网站有 RSS 规则时，会自动显示出来。</p>\n<figure><img src=\"https://raw.githubusercontent.com/dribble-njr/typora-njr/master/img/20240225111133.png\" alt=\"RSSHub Radar\" tabindex=\"0\" loading=\"lazy\"><figcaption>RSSHub Radar</figcaption></figure>\n<h3>公众号 RSS 源</h3>\n<p>由于微信公众号的严格限制，需要使用第三方工具比如 <a href=\"http://www.jintiankansha.me/\" target=\"_blank\" rel=\"noopener noreferrer\">今天看啥</a>，该站目前提供的服务较为稳定，收费如下。</p>\n<figure><img src=\"https://raw.githubusercontent.com/dribble-njr/typora-njr/master/img/20240227103836.png\" alt=\"今天看啥\" tabindex=\"0\" loading=\"lazy\"><figcaption>今天看啥</figcaption></figure>\n<h3>RSS 阅读工具</h3>\n<p>一些较好的 RSS 阅读工具如下：</p>\n<ul>\n<li>macOS：Reeder 4</li>\n<li>iOS：lire</li>\n<li>Windows：RSS 追踪</li>\n<li>Android：FeedMe</li>\n<li>浏览器：Innoreader</li>\n</ul>\n<figure><img src=\"https://raw.githubusercontent.com/dribble-njr/typora-njr/master/img/20240227104627.png\" alt=\"inoreader\" tabindex=\"0\" loading=\"lazy\"><figcaption>inoreader</figcaption></figure>\n<h2>自建 RSSHub 服务</h2>\n<p>对于一些需要 cookie 的网站，需要自建 RSSHub 服务。</p>\n<figure><img src=\"https://raw.githubusercontent.com/dribble-njr/typora-njr/master/img/20240227104754.png\" alt=\"Medium\" tabindex=\"0\" loading=\"lazy\"><figcaption>Medium</figcaption></figure>\n<h3>Vercel</h3>\n<p><a href=\"https://vercel.com\" target=\"_blank\" rel=\"noopener noreferrer\">Vercel</a> 可以免费托管。</p>\n<p>第一步，打开 <a href=\"https://vercel.com\" target=\"_blank\" rel=\"noopener noreferrer\">Vercel</a>，然后使用 Github 帐号登陆。</p>\n<figure><img src=\"https://raw.githubusercontent.com/dribble-njr/typora-njr/master/img/20240227104926.png\" alt=\"vercel\" tabindex=\"0\" loading=\"lazy\"><figcaption>vercel</figcaption></figure>\n<h3><a class=\"header-anchor\" href=\"#create\"><span></span></a><a href=\"https://vercel.com/import/project?template=https://github.com/DIYgod/RSSHub\" target=\"_blank\" rel=\"noopener noreferrer\">Create</a></h3>\n<p><a href=\"https://github.com/DIYgod/RSSHub/fork\" target=\"_blank\" rel=\"noopener noreferrer\">Fork RSSHub</a> 到 GitHub。</p>\n<p>更新一些必要的配置如 <code>cookie</code> 等。</p>\n<p>使用你的 RSSHub 项目创建并部署一个新的 Vercel 项目.</p>\n<figure><img src=\"https://raw.githubusercontent.com/dribble-njr/typora-njr/master/img/20240227105036.png\" alt=\"create\" tabindex=\"0\" loading=\"lazy\"><figcaption>create</figcaption></figure>\n<h3>获取服务地址</h3>\n<p>获取部署好的服务地址，并在 RSSHub Radar 中配置即可。</p>\n<figure><img src=\"https://raw.githubusercontent.com/dribble-njr/typora-njr/master/img/20240227105421.png\" alt=\"获取服务地址\" tabindex=\"0\" loading=\"lazy\"><figcaption>获取服务地址</figcaption></figure>\n<h2>贡献 RSSHub</h2>\n<p>如果 RSSHub 提供的订阅源有缺陷，那么我们可以贡献 RSSHub。</p>\n<p><a href=\"https://docs.rsshub.app/zh/joinus/quick-start\" target=\"_blank\" rel=\"noopener noreferrer\">官方文档</a> 比较详细，按照步骤来即可。</p>\n<h3>安装开发环境</h3>\n<ul>\n<li><code>fork</code> 然后将你的项目 <code>git clone</code> 到本地。</li>\n<li>给你的项目增加上游：<div class=\"language-bash\" data-ext=\"sh\" data-title=\"sh\"><pre class=\"language-bash\"><code><span class=\"token function\">git</span> remote <span class=\"token function\">add</span> upstream https://github.com/DIYgod/RSSHub\n</code></pre></div></li>\n<li>安装 <code>pnpm</code><div class=\"language-bash\" data-ext=\"sh\" data-title=\"sh\"><pre class=\"language-bash\"><code><span class=\"token function\">npm</span> <span class=\"token function\">install</span> <span class=\"token function\">pnpm</span> <span class=\"token parameter variable\">-g</span>\n</code></pre></div></li>\n<li>安装依赖并启动项目<div class=\"language-bash\" data-ext=\"sh\" data-title=\"sh\"><pre class=\"language-bash\"><code><span class=\"token function\">pnpm</span> <span class=\"token function\">install</span>\n<span class=\"token function\">pnpm</span> dev\n</code></pre></div></li>\n</ul>\n<h3>添加脚本路由</h3>\n<p><code>lib/v2/juejin/router.js</code></p>\n<div class=\"language-javascript\" data-ext=\"js\" data-title=\"js\"><pre class=\"language-javascript\"><code>module<span class=\"token punctuation\">.</span><span class=\"token function-variable function\">exports</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\">router</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=&gt;</span> <span class=\"token punctuation\">{</span>\n  router<span class=\"token punctuation\">.</span><span class=\"token function\">get</span><span class=\"token punctuation\">(</span><span class=\"token string\">'/collections/:userId'</span><span class=\"token punctuation\">,</span> <span class=\"token function\">require</span><span class=\"token punctuation\">(</span><span class=\"token string\">'./favorites'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">}</span>\n</code></pre></div><h3>获取收藏夹数据</h3>\n<p><code>lib/v2/juejin/favorites.js</code></p>\n<div class=\"language-javascript\" data-ext=\"js\" data-title=\"js\"><pre class=\"language-javascript\"><code><span class=\"token doc-comment comment\">/**\n * Get all collection by loop\n * <span class=\"token keyword\">@param</span> <span class=\"token class-name\"><span class=\"token punctuation\">{</span>String<span class=\"token punctuation\">}</span></span> <span class=\"token parameter\">user_id</span>\n * <span class=\"token keyword\">@return</span> <span class=\"token class-name\"><span class=\"token punctuation\">{</span>any<span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">}</span></span> collectionSet\n */</span>\n<span class=\"token keyword\">const</span> <span class=\"token function-variable function\">getCollectionList</span> <span class=\"token operator\">=</span> <span class=\"token keyword\">async</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\">user_id</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=&gt;</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">const</span> collectionList <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span>\n  <span class=\"token keyword\">let</span> cursor <span class=\"token operator\">=</span> <span class=\"token string\">'0'</span>\n\n  <span class=\"token keyword\">let</span> has_more <span class=\"token operator\">=</span> <span class=\"token boolean\">true</span>\n  <span class=\"token keyword\">while</span> <span class=\"token punctuation\">(</span>has_more<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token comment\">// eslint-disable-next-line no-await-in-loop</span>\n    <span class=\"token keyword\">const</span> res <span class=\"token operator\">=</span> <span class=\"token keyword\">await</span> <span class=\"token function\">got</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span>\n      <span class=\"token literal-property property\">method</span><span class=\"token operator\">:</span> <span class=\"token string\">'post'</span><span class=\"token punctuation\">,</span>\n      <span class=\"token literal-property property\">url</span><span class=\"token operator\">:</span> <span class=\"token template-string\"><span class=\"token template-punctuation string\">`</span><span class=\"token string\">https://api.juejin.cn/interact_api/v2/collectionset/list?spider=0</span><span class=\"token template-punctuation string\">`</span></span><span class=\"token punctuation\">,</span>\n      <span class=\"token literal-property property\">json</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">{</span>\n        user_id<span class=\"token punctuation\">,</span>\n        cursor<span class=\"token punctuation\">,</span>\n        <span class=\"token literal-property property\">limit</span><span class=\"token operator\">:</span> <span class=\"token number\">20</span>\n      <span class=\"token punctuation\">}</span>\n    <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">json</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n\n    collectionList<span class=\"token punctuation\">.</span><span class=\"token function\">push</span><span class=\"token punctuation\">(</span><span class=\"token operator\">...</span>res<span class=\"token punctuation\">.</span>data<span class=\"token punctuation\">)</span>\n\n    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>res<span class=\"token punctuation\">.</span>has_more<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n      cursor <span class=\"token operator\">=</span> res<span class=\"token punctuation\">.</span>cursor\n    <span class=\"token punctuation\">}</span> <span class=\"token keyword\">else</span> <span class=\"token punctuation\">{</span>\n      has_more <span class=\"token operator\">=</span> <span class=\"token boolean\">false</span>\n      <span class=\"token keyword\">break</span>\n    <span class=\"token punctuation\">}</span>\n  <span class=\"token punctuation\">}</span>\n\n  <span class=\"token keyword\">return</span> collectionList\n<span class=\"token punctuation\">}</span>\n</code></pre></div><h3>获取文章数据</h3>\n<div class=\"language-javascript\" data-ext=\"js\" data-title=\"js\"><pre class=\"language-javascript\"><code><span class=\"token doc-comment comment\">/**\n * Get all posts by collection_id\n * <span class=\"token keyword\">@param</span> <span class=\"token class-name\"><span class=\"token punctuation\">{</span>String<span class=\"token punctuation\">}</span></span> <span class=\"token parameter\">collection_id</span>\n * <span class=\"token keyword\">@returns</span> <span class=\"token class-name\"><span class=\"token punctuation\">{</span>any<span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">}</span></span> posts\n */</span>\n<span class=\"token keyword\">const</span> <span class=\"token function-variable function\">getPostList</span> <span class=\"token operator\">=</span> <span class=\"token keyword\">async</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\">collection_id</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=&gt;</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">const</span> postList <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span>\n  <span class=\"token keyword\">let</span> cursor <span class=\"token operator\">=</span> <span class=\"token string\">'0'</span>\n\n  <span class=\"token keyword\">let</span> has_more <span class=\"token operator\">=</span> <span class=\"token boolean\">true</span>\n  <span class=\"token keyword\">while</span> <span class=\"token punctuation\">(</span>has_more<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token comment\">// eslint-disable-next-line no-await-in-loop</span>\n    <span class=\"token keyword\">const</span> res <span class=\"token operator\">=</span> <span class=\"token keyword\">await</span> <span class=\"token function\">got</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span>\n      <span class=\"token literal-property property\">method</span><span class=\"token operator\">:</span> <span class=\"token string\">'post'</span><span class=\"token punctuation\">,</span>\n      <span class=\"token literal-property property\">url</span><span class=\"token operator\">:</span> <span class=\"token template-string\"><span class=\"token template-punctuation string\">`</span><span class=\"token string\">https://api.juejin.cn/interact_api/v2/collectionset/detail?spider=0</span><span class=\"token template-punctuation string\">`</span></span><span class=\"token punctuation\">,</span>\n      <span class=\"token literal-property property\">json</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">{</span>\n        collection_id<span class=\"token punctuation\">,</span>\n        cursor<span class=\"token punctuation\">,</span>\n        <span class=\"token literal-property property\">limit</span><span class=\"token operator\">:</span> <span class=\"token number\">10</span>\n      <span class=\"token punctuation\">}</span>\n    <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">json</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n\n    postList<span class=\"token punctuation\">.</span><span class=\"token function\">push</span><span class=\"token punctuation\">(</span><span class=\"token operator\">...</span>res<span class=\"token punctuation\">.</span>data<span class=\"token punctuation\">.</span>articles<span class=\"token punctuation\">)</span>\n\n    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>res<span class=\"token punctuation\">.</span>has_more<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n      cursor <span class=\"token operator\">=</span> res<span class=\"token punctuation\">.</span>cursor\n    <span class=\"token punctuation\">}</span> <span class=\"token keyword\">else</span> <span class=\"token punctuation\">{</span>\n      has_more <span class=\"token operator\">=</span> <span class=\"token boolean\">false</span>\n      <span class=\"token keyword\">break</span>\n    <span class=\"token punctuation\">}</span>\n  <span class=\"token punctuation\">}</span>\n\n  <span class=\"token keyword\">return</span> postList\n<span class=\"token punctuation\">}</span>\n</code></pre></div><h3>生成 RSS 源</h3>\n<p>获取数据后，只需将相关数据赋值给 <code>ctx.state.data</code> 对象。</p>\n<div class=\"language-javascript\" data-ext=\"js\" data-title=\"js\"><pre class=\"language-javascript\"><code>module<span class=\"token punctuation\">.</span><span class=\"token function-variable function\">exports</span> <span class=\"token operator\">=</span> <span class=\"token keyword\">async</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\">ctx</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=&gt;</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">const</span> <span class=\"token punctuation\">{</span> userId <span class=\"token punctuation\">}</span> <span class=\"token operator\">=</span> ctx<span class=\"token punctuation\">.</span>params\n\n  <span class=\"token comment\">// 获取用户所有收藏夹id</span>\n  <span class=\"token keyword\">const</span> collectionList <span class=\"token operator\">=</span> <span class=\"token keyword\">await</span> <span class=\"token function\">getCollectionList</span><span class=\"token punctuation\">(</span>userId<span class=\"token punctuation\">)</span>\n  <span class=\"token keyword\">const</span> collectionIds <span class=\"token operator\">=</span> collectionList<span class=\"token punctuation\">.</span><span class=\"token function\">map</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">item</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=&gt;</span> item<span class=\"token punctuation\">.</span>collection_id<span class=\"token punctuation\">)</span>\n\n  <span class=\"token comment\">// 获取所有收藏夹文章内容</span>\n  <span class=\"token keyword\">const</span> posts <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">await</span> Promise<span class=\"token punctuation\">.</span><span class=\"token function\">all</span><span class=\"token punctuation\">(</span>collectionIds<span class=\"token punctuation\">.</span><span class=\"token function\">map</span><span class=\"token punctuation\">(</span>getPostList<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">flat</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n\n  <span class=\"token keyword\">const</span> result <span class=\"token operator\">=</span> <span class=\"token keyword\">await</span> util<span class=\"token punctuation\">.</span><span class=\"token function\">ProcessFeed</span><span class=\"token punctuation\">(</span>posts<span class=\"token punctuation\">,</span> ctx<span class=\"token punctuation\">.</span>cache<span class=\"token punctuation\">)</span>\n\n  ctx<span class=\"token punctuation\">.</span>state<span class=\"token punctuation\">.</span>data <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token literal-property property\">title</span><span class=\"token operator\">:</span> <span class=\"token string\">'掘金 - 收藏集'</span><span class=\"token punctuation\">,</span>\n    <span class=\"token literal-property property\">link</span><span class=\"token operator\">:</span> <span class=\"token template-string\"><span class=\"token template-punctuation string\">`</span><span class=\"token string\">https://juejin.im/user/</span><span class=\"token interpolation\"><span class=\"token interpolation-punctuation punctuation\">${</span>userId<span class=\"token interpolation-punctuation punctuation\">}</span></span><span class=\"token string\">/collections</span><span class=\"token template-punctuation string\">`</span></span><span class=\"token punctuation\">,</span>\n    <span class=\"token literal-property property\">description</span><span class=\"token operator\">:</span> <span class=\"token string\">'掘金，指定用户整个收藏集'</span><span class=\"token punctuation\">,</span>\n    <span class=\"token literal-property property\">item</span><span class=\"token operator\">:</span> result<span class=\"token punctuation\">,</span>\n    <span class=\"token literal-property property\">allowEmpty</span><span class=\"token operator\">:</span> <span class=\"token boolean\">true</span>\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n</code></pre></div><h3>调试</h3>\n<p>运行 <code>pnpm dev</code> 命令：</p>\n<figure><img src=\"https://raw.githubusercontent.com/dribble-njr/typora-njr/master/img/20240225115649.png\" alt=\"debug\" tabindex=\"0\" loading=\"lazy\"><figcaption>debug</figcaption></figure>\n<p>输入对应路由：</p>\n<figure><img src=\"https://raw.githubusercontent.com/dribble-njr/typora-njr/master/img/20240225115815.png\" alt=\"router\" tabindex=\"0\" loading=\"lazy\"><figcaption>router</figcaption></figure>\n",
      "image": "https://raw.githubusercontent.com/dribble-njr/typora-njr/master/img/20240224191619.png",
      "date_published": "2024-02-24T00:00:00.000Z",
      "date_modified": "2024-02-27T03:18:09.000Z",
      "authors": [],
      "tags": [
        "Project"
      ]
    },
    {
      "title": "务实的哲学",
      "url": "https://dribble-njr.github.io/blog/blog/reading/pragmatic-programmer/01-a-pragmatic-philosophy.html",
      "id": "https://dribble-njr.github.io/blog/blog/reading/pragmatic-programmer/01-a-pragmatic-philosophy.html",
      "summary": "人生是你的 我活着不是为了满足你的期望，正如你活着也不是为了满足我的期望。——李小龙 你有权选择。 工作无聊，技术过时，尝试主动改变，为此而加班才是合理的。 这个行业给了你一系列非凡的机遇。积极主动点，掌控这些机遇。 我的源码被猫吃了 为问题负责，提供解决方案。 增强自己在团队中的信任力。 软件的熵 破窗——糟糕的设计、错误的决定、低劣的代码。 不要容...",
      "content_html": "<h2>人生是你的</h2>\n<blockquote>\n<p>我活着不是为了满足你的期望，正如你活着也不是为了满足我的期望。——李小龙</p>\n</blockquote>\n<p>你有权选择。</p>\n<ul>\n<li>工作无聊，技术过时，尝试主动改变，为此而加班才是合理的。</li>\n<li>这个行业给了你一系列非凡的机遇。积极主动点，掌控这些机遇。</li>\n</ul>\n<h2>我的源码被猫吃了</h2>\n<ul>\n<li>为问题负责，提供解决方案。</li>\n<li>增强自己在团队中的信任力。</li>\n</ul>\n<h2>软件的熵</h2>\n<p>破窗——糟糕的设计、错误的决定、低劣的代码。</p>\n<ul>\n<li>不要容忍破窗。</li>\n<li>不要打破窗户。</li>\n</ul>\n<h2>石头汤与煮青蛙</h2>\n<ul>\n<li>主动 Own 一件事情，做变革的催化剂。</li>\n<li>留意大局，持续观察周围的事情，不局限于自己的工作。</li>\n</ul>\n<h2>够好即可的软件</h2>\n<p>写出够好的软件即可。</p>\n<ul>\n<li>让质量成为需求问题（先交付再持续根据用户反馈进行优化）。</li>\n<li>不要过度设计。</li>\n</ul>\n<h2>知识资产</h2>\n<p>经营你的资产：</p>\n<ul>\n<li>不断学习，不断提升自己的技能。</li>\n<li>保持学习的广度。</li>\n<li>在新的技术流行之前学习。</li>\n</ul>\n<p>目标：</p>\n<ul>\n<li>每年至少学习一种新语言（或框架）。</li>\n<li>每季度阅读一本技术书籍。</li>\n<li>也要阅读一些非技术类的书籍。</li>\n<li>上课。</li>\n<li>参加技术会议。</li>\n<li>试验不同的环境。</li>\n<li>订阅技术杂志，与时俱进。</li>\n</ul>\n<p>在学习时，需要批判地进行思考，不要盲目地接受。</p>\n<ul>\n<li>问「五个为什么」。</li>\n<li>谁从中受益。</li>\n<li>有什么背景。</li>\n<li>什么时候在哪里可以工作。</li>\n<li>为什么这是个问题。</li>\n</ul>\n<h2>交流</h2>\n<p>作为开发人员，我们必须在多个层次上进行交流。</p>\n<ul>\n<li>知道你要说什么。</li>\n<li>了解你的听众。</li>\n<li>选择时机。</li>\n<li>选择风格。</li>\n<li>让文档美观。</li>\n<li>让听众参与。</li>\n<li>做倾听者，如果你不听观众说话，那观众也不会听你说话。</li>\n<li>记得回复他人。</li>\n</ul>\n<p>注释源码，建议给模块和导出函数都加上注释，这能在其他开发者使用的时候，给他们很大的助力。</p>\n",
      "date_published": "2024-02-18T00:00:00.000Z",
      "date_modified": "2024-02-20T02:22:03.000Z",
      "authors": [],
      "tags": [
        "READING"
      ]
    },
    {
      "title": "务实的方法",
      "url": "https://dribble-njr.github.io/blog/blog/reading/pragmatic-programmer/02-a-pragmatic-approach.html",
      "id": "https://dribble-njr.github.io/blog/blog/reading/pragmatic-programmer/02-a-pragmatic-approach.html",
      "summary": "优秀设计的精髓 ETC 原则（Easier To Change）： 解耦：隔离关注焦点，可以更容易地进行修改。 单一职责原则：一个需求的变化只会影响一个模块。 命名：良好的命名可以使代码更容易阅读。 DRY——邪恶的重复 DRY（Don't Repeat Yourself）原则： 代码中的重复。 文档中的重复。 数据中的重复。 正交性 对于两个或多个事...",
      "content_html": "<h2>优秀设计的精髓</h2>\n<p>ETC 原则（Easier To Change）：</p>\n<ul>\n<li>解耦：隔离关注焦点，可以更容易地进行修改。</li>\n<li>单一职责原则：一个需求的变化只会影响一个模块。</li>\n<li>命名：良好的命名可以使代码更容易阅读。</li>\n</ul>\n<h2>DRY——邪恶的重复</h2>\n<p>DRY（Don't Repeat Yourself）原则：</p>\n<ul>\n<li>代码中的重复。</li>\n<li>文档中的重复。</li>\n<li>数据中的重复。</li>\n</ul>\n<h2>正交性</h2>\n<p>对于两个或多个事物，如果它们的行为不会相互影响，那么它们就是正交的。</p>\n<p>象征着独立性和解耦。</p>\n<ul>\n<li>保持代码解耦。</li>\n<li>避免全局数据。</li>\n<li>避免相似的函数，每个函数都有不同的中心算法，可以使用「策略模式」进行优化。</li>\n<li>编写单元测试。</li>\n</ul>\n<h2>可逆性</h2>\n<ul>\n<li>将第三方的 API 隐藏在自己的抽象层之后。</li>\n<li>将代码分解为多个组件。</li>\n</ul>\n<h2>曳光弹</h2>\n<p>先实现最小可行产品（MVP）。</p>\n<h2>原型与便签</h2>\n<p>你可以为下列事物做原型：</p>\n<ul>\n<li>架构</li>\n<li>已存在的系统中的新功能</li>\n<li>数据结构或外部数据的内容</li>\n<li>第三方工具或组件</li>\n<li>性能问题</li>\n<li>用户界面设计</li>\n</ul>\n<p>当制作一个原型时，下面几个方面可以忽略：</p>\n<ul>\n<li>正确性：你可以在适当的地方使用替代数据。</li>\n<li>完整性：原型只需要满足有限的功能，可能只有一个预先选好的输入数据片段及单个菜单选项。</li>\n<li>健壮性：错误检查可以不完整，甚至完全没有都行。如果你偏离了预定的航线，原型机很可能烧毁在绚丽的烟火中——那又如何！</li>\n<li>格式：原型代码可能并不需要太多注释和文档（尽管围绕从原型中获取的经验，可能会产生大量文档，但是相对而言，原型系统本身的文档要少得多）。</li>\n</ul>\n<p>制作架构原型：</p>\n<ul>\n<li>主要组件的职责是否恰当，有没有定义清晰？</li>\n<li>主要组件之间的协作是否定义清晰？</li>\n<li>耦合度最小化了吗？</li>\n<li>你能确定重复的潜在来源吗？</li>\n<li>接口的定义和约束能否接受？</li>\n<li>在执行过程中是否每个模块都有访问所需数据的途径？在需要数据的时候，能访问到吗？</li>\n</ul>\n<h2>领域语言</h2>\n<p>计算机的语言会影响你怎样思考问题，影响你怎样看待信息的传播。</p>\n<p>每一门语言都有一个特性列表——比如这些时髦的术语：静态类型还是动态类型，早期绑定还是晚期绑定，函数式还是面向对象，继承模型，mixin，宏机制——所有这些对问题的解决方案，既可能提供建议也可能扰乱视听。</p>\n<p>同样是设计解决方案，用 C++ 的方式和用 Haskell 的思想，得到的结果会大为不同，反之亦然。</p>\n<h2>估算</h2>\n<p>通过估算来避免意外。</p>\n<p>估算项目进度，根据代码不断迭代项目进度表。（TODO 看板？）</p>\n",
      "date_published": "2024-02-19T00:00:00.000Z",
      "date_modified": "2024-02-19T14:34:11.000Z",
      "authors": [],
      "tags": [
        "READING"
      ]
    },
    {
      "title": "数组",
      "url": "https://dribble-njr.github.io/blog/blog/computer-science/algorithm/01-array.html",
      "id": "https://dribble-njr.github.io/blog/blog/computer-science/algorithm/01-array.html",
      "summary": "JavaScript 中数组是一种特殊的对象，用于存储多个值。数组的每个元素都有一个数字索引，用于访问数组中的元素。 常见初始化数组的方式： 数组是一种线性表数据结构，它用一组连续的内存空间，来存储一组具有相同类型的数据。 常见的解题思路有： 二分查找 双指针 滑动窗口 暴力解法 n 数之和 一般思路为使用哈希表、双指针、排序等方法。 两数之和 原题链...",
      "content_html": "<p><code>JavaScript</code> 中数组是一种特殊的对象，用于存储多个值。数组的每个元素都有一个数字索引，用于访问数组中的元素。</p>\n<p>常见初始化数组的方式：</p>\n<div class=\"language-typescript\" data-ext=\"ts\" data-title=\"ts\"><pre class=\"language-typescript\"><code><span class=\"token keyword\">const</span> arr <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token number\">2</span><span class=\"token punctuation\">,</span> <span class=\"token number\">3</span><span class=\"token punctuation\">]</span>\n<span class=\"token keyword\">const</span> arr <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\"><span class=\"token builtin\">Array</span></span><span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token number\">2</span><span class=\"token punctuation\">,</span> <span class=\"token number\">3</span><span class=\"token punctuation\">)</span>\n<span class=\"token keyword\">const</span> arr <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\"><span class=\"token builtin\">Array</span></span><span class=\"token punctuation\">(</span>n<span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">fill</span><span class=\"token punctuation\">(</span><span class=\"token number\">0</span><span class=\"token punctuation\">)</span>\n</code></pre></div><p>数组是一种线性表数据结构，它用一组连续的内存空间，来存储一组具有相同类型的数据。</p>\n<p>常见的解题思路有：</p>\n<ul>\n<li>二分查找</li>\n<li>双指针</li>\n<li>滑动窗口</li>\n<li>暴力解法</li>\n</ul>\n<h2>n 数之和</h2>\n<p>一般思路为使用哈希表、双指针、排序等方法。</p>\n<h3>两数之和</h3>\n<div class=\"hint-container tip\">\n<p class=\"hint-container-title\">原题链接</p>\n<p><a href=\"https://leetcode-cn.com/problems/two-sum\" target=\"_blank\" rel=\"noopener noreferrer\">1. 两数之和</a></p>\n</div>\n<p>思路：使用哈希表存储遍历过的元素，每次遍历时，判断哈希表中是否存在 <code>target - nums[i]</code>，如果存在则返回结果。</p>\n<div class=\"language-typescript\" data-ext=\"ts\" data-title=\"ts\"><pre class=\"language-typescript\"><code><span class=\"token keyword\">function</span> <span class=\"token function\">twoSum</span><span class=\"token punctuation\">(</span>nums<span class=\"token operator\">:</span> <span class=\"token builtin\">number</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span> target<span class=\"token operator\">:</span> <span class=\"token builtin\">number</span><span class=\"token punctuation\">)</span><span class=\"token operator\">:</span> <span class=\"token builtin\">number</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">const</span> map <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Map</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n\n  <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">let</span> i <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> i <span class=\"token operator\">&lt;</span> nums<span class=\"token punctuation\">.</span>length<span class=\"token punctuation\">;</span> i<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">const</span> diff <span class=\"token operator\">=</span> target <span class=\"token operator\">-</span> nums<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span>\n\n    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>map<span class=\"token punctuation\">.</span><span class=\"token function\">has</span><span class=\"token punctuation\">(</span>diff<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n      <span class=\"token keyword\">return</span> <span class=\"token punctuation\">[</span>map<span class=\"token punctuation\">.</span><span class=\"token function\">get</span><span class=\"token punctuation\">(</span>diff<span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> i<span class=\"token punctuation\">]</span>\n    <span class=\"token punctuation\">}</span>\n\n    map<span class=\"token punctuation\">.</span><span class=\"token function\">set</span><span class=\"token punctuation\">(</span>nums<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span> i<span class=\"token punctuation\">)</span>\n  <span class=\"token punctuation\">}</span>\n\n  <span class=\"token keyword\">return</span> <span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span>\n<span class=\"token punctuation\">}</span>\n</code></pre></div><h3>三数之和</h3>\n<div class=\"hint-container tip\">\n<p class=\"hint-container-title\">原题链接</p>\n<p><a href=\"https://leetcode-cn.com/problems/3sum\" target=\"_blank\" rel=\"noopener noreferrer\">15. 三数之和</a></p>\n</div>\n<p>思路：使用双指针，先对数组进行排序，然后遍历数组，使用双指针分别指向当前元素的下一个元素和数组的最后一个元素，计算三数之和，然后移动指针。</p>\n<div class=\"hint-container tip\">\n<p class=\"hint-container-title\">提示</p>\n<p>本题不能无脑使用 <code>for</code> 循环套两数之和哈希表，因为会有重复的结果。</p>\n</div>\n<div class=\"language-typescript\" data-ext=\"ts\" data-title=\"ts\"><pre class=\"language-typescript\"><code><span class=\"token keyword\">function</span> <span class=\"token function\">threeSum</span><span class=\"token punctuation\">(</span>nums<span class=\"token operator\">:</span> <span class=\"token builtin\">number</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token operator\">:</span> <span class=\"token builtin\">number</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">const</span> res <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span>\n  <span class=\"token keyword\">const</span> len <span class=\"token operator\">=</span> nums<span class=\"token punctuation\">.</span>length\n\n  <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>len <span class=\"token operator\">&lt;</span> <span class=\"token number\">3</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">return</span> res\n  <span class=\"token punctuation\">}</span>\n\n  nums<span class=\"token punctuation\">.</span><span class=\"token function\">sort</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span>a<span class=\"token punctuation\">,</span> b<span class=\"token punctuation\">)</span> <span class=\"token operator\">=&gt;</span> a <span class=\"token operator\">-</span> b<span class=\"token punctuation\">)</span>\n\n  <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">let</span> i <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> i <span class=\"token operator\">&lt;</span> len<span class=\"token punctuation\">;</span> i<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token comment\">// 因为排序过，若大于 0 ，则后面不可能有三个数和等于 0</span>\n    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>nums<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span> <span class=\"token operator\">&gt;</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">return</span> res\n\n    <span class=\"token comment\">// 如果和前一个数相等，因为不能出现重复的答案，因此跳过这个元素</span>\n    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>i <span class=\"token operator\">&gt;</span> <span class=\"token number\">0</span> <span class=\"token operator\">&amp;&amp;</span> nums<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span> <span class=\"token operator\">===</span> nums<span class=\"token punctuation\">[</span>i <span class=\"token operator\">-</span> <span class=\"token number\">1</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n      <span class=\"token keyword\">continue</span>\n    <span class=\"token punctuation\">}</span>\n\n    <span class=\"token keyword\">let</span> left <span class=\"token operator\">=</span> i <span class=\"token operator\">+</span> <span class=\"token number\">1</span>\n    <span class=\"token keyword\">let</span> right <span class=\"token operator\">=</span> len <span class=\"token operator\">-</span> <span class=\"token number\">1</span>\n\n    <span class=\"token keyword\">while</span> <span class=\"token punctuation\">(</span>left <span class=\"token operator\">&lt;</span> right<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n      <span class=\"token keyword\">const</span> sum <span class=\"token operator\">=</span> nums<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span> <span class=\"token operator\">+</span> nums<span class=\"token punctuation\">[</span>left<span class=\"token punctuation\">]</span> <span class=\"token operator\">+</span> nums<span class=\"token punctuation\">[</span>right<span class=\"token punctuation\">]</span>\n\n      <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>sum <span class=\"token operator\">===</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        res<span class=\"token punctuation\">.</span><span class=\"token function\">push</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">[</span>nums<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span> nums<span class=\"token punctuation\">[</span>left<span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span> nums<span class=\"token punctuation\">[</span>right<span class=\"token punctuation\">]</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span>\n\n        <span class=\"token comment\">// 若左指针与下一位相等，为了去除重复，则将 left 加 1</span>\n        <span class=\"token keyword\">while</span> <span class=\"token punctuation\">(</span>left <span class=\"token operator\">&lt;</span> right <span class=\"token operator\">&amp;&amp;</span> nums<span class=\"token punctuation\">[</span>left<span class=\"token punctuation\">]</span> <span class=\"token operator\">===</span> nums<span class=\"token punctuation\">[</span>left <span class=\"token operator\">+</span> <span class=\"token number\">1</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n          left<span class=\"token operator\">++</span>\n        <span class=\"token punctuation\">}</span>\n\n        <span class=\"token comment\">// 若右指针与上一位相等，为了去除重复，则将 right 减 1</span>\n        <span class=\"token keyword\">while</span> <span class=\"token punctuation\">(</span>left <span class=\"token operator\">&lt;</span> right <span class=\"token operator\">&amp;&amp;</span> nums<span class=\"token punctuation\">[</span>right<span class=\"token punctuation\">]</span> <span class=\"token operator\">===</span> nums<span class=\"token punctuation\">[</span>right <span class=\"token operator\">-</span> <span class=\"token number\">1</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n          right<span class=\"token operator\">--</span>\n        <span class=\"token punctuation\">}</span>\n\n        <span class=\"token comment\">// 若左右没有与下一位相等，则继续寻找</span>\n        left<span class=\"token operator\">++</span>\n        right<span class=\"token operator\">--</span>\n      <span class=\"token punctuation\">}</span> <span class=\"token keyword\">else</span> <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>sum <span class=\"token operator\">&lt;</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token comment\">// 若和大于 0，说明 nums[r] 太大，right 左移</span>\n        left<span class=\"token operator\">++</span>\n      <span class=\"token punctuation\">}</span> <span class=\"token keyword\">else</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token comment\">// 若和小于 0，说明 nums[L] 太小，left 右移</span>\n        right<span class=\"token operator\">--</span>\n      <span class=\"token punctuation\">}</span>\n    <span class=\"token punctuation\">}</span>\n  <span class=\"token punctuation\">}</span>\n\n  <span class=\"token keyword\">return</span> res\n<span class=\"token punctuation\">}</span>\n</code></pre></div><h3>最接近的三数之和</h3>\n<div class=\"hint-container tip\">\n<p class=\"hint-container-title\">原题链接</p>\n<p><a href=\"https://leetcode-cn.com/problems/3sum-closest\" target=\"_blank\" rel=\"noopener noreferrer\">16. 最接近的三数之和</a></p>\n</div>\n<h4>暴力解法</h4>\n<p>思路：使用三重循环，遍历数组，计算三数之和，然后比较与目标值的差值，找到最接近的结果。</p>\n<div class=\"language-typescript\" data-ext=\"ts\" data-title=\"ts\"><pre class=\"language-typescript\"><code><span class=\"token keyword\">function</span> <span class=\"token function\">threeSumClosest</span><span class=\"token punctuation\">(</span>nums<span class=\"token operator\">:</span> <span class=\"token builtin\">number</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span> target<span class=\"token operator\">:</span> <span class=\"token builtin\">number</span><span class=\"token punctuation\">)</span><span class=\"token operator\">:</span> <span class=\"token builtin\">number</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">let</span> res <span class=\"token operator\">=</span> nums<span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">+</span> nums<span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">+</span> nums<span class=\"token punctuation\">[</span><span class=\"token number\">2</span><span class=\"token punctuation\">]</span>\n\n  <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">let</span> i <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> i <span class=\"token operator\">&lt;</span> nums<span class=\"token punctuation\">.</span>length<span class=\"token punctuation\">;</span> i<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">let</span> j <span class=\"token operator\">=</span> i <span class=\"token operator\">+</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span> j <span class=\"token operator\">&lt;</span> nums<span class=\"token punctuation\">.</span>length<span class=\"token punctuation\">;</span> j<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n      <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">let</span> k <span class=\"token operator\">=</span> j <span class=\"token operator\">+</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span> k <span class=\"token operator\">&lt;</span> nums<span class=\"token punctuation\">.</span>length<span class=\"token punctuation\">;</span> k<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">const</span> sum <span class=\"token operator\">=</span> nums<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span> <span class=\"token operator\">+</span> nums<span class=\"token punctuation\">[</span>j<span class=\"token punctuation\">]</span> <span class=\"token operator\">+</span> nums<span class=\"token punctuation\">[</span>k<span class=\"token punctuation\">]</span>\n\n        <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>Math<span class=\"token punctuation\">.</span><span class=\"token function\">abs</span><span class=\"token punctuation\">(</span>sum <span class=\"token operator\">-</span> target<span class=\"token punctuation\">)</span> <span class=\"token operator\">&lt;</span> Math<span class=\"token punctuation\">.</span><span class=\"token function\">abs</span><span class=\"token punctuation\">(</span>res <span class=\"token operator\">-</span> target<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n          res <span class=\"token operator\">=</span> sum\n        <span class=\"token punctuation\">}</span>\n      <span class=\"token punctuation\">}</span>\n    <span class=\"token punctuation\">}</span>\n  <span class=\"token punctuation\">}</span>\n\n  <span class=\"token keyword\">return</span> res\n<span class=\"token punctuation\">}</span>\n</code></pre></div><h4>双指针</h4>\n<p>思路：使用双指针，先对数组进行排序，然后遍历数组，使用双指针分别指向当前元素的下一个元素和数组的最后一个元素，计算三数之和，然后移动指针。</p>\n<div class=\"language-typescript\" data-ext=\"ts\" data-title=\"ts\"><pre class=\"language-typescript\"><code><span class=\"token keyword\">function</span> <span class=\"token function\">threeSumClosest</span><span class=\"token punctuation\">(</span>nums<span class=\"token operator\">:</span> <span class=\"token builtin\">number</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span> target<span class=\"token operator\">:</span> <span class=\"token builtin\">number</span><span class=\"token punctuation\">)</span><span class=\"token operator\">:</span> <span class=\"token builtin\">number</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">let</span> res <span class=\"token operator\">=</span> nums<span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">+</span> nums<span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">+</span> nums<span class=\"token punctuation\">[</span><span class=\"token number\">2</span><span class=\"token punctuation\">]</span>\n\n  nums<span class=\"token punctuation\">.</span><span class=\"token function\">sort</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span>a<span class=\"token punctuation\">,</span> b<span class=\"token punctuation\">)</span> <span class=\"token operator\">=&gt;</span> a <span class=\"token operator\">-</span> b<span class=\"token punctuation\">)</span>\n\n  <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">let</span> i <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> i <span class=\"token operator\">&lt;</span> nums<span class=\"token punctuation\">.</span>length<span class=\"token punctuation\">;</span> i<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">let</span> left <span class=\"token operator\">=</span> i <span class=\"token operator\">+</span> <span class=\"token number\">1</span>\n    <span class=\"token keyword\">let</span> right <span class=\"token operator\">=</span> nums<span class=\"token punctuation\">.</span>length <span class=\"token operator\">-</span> <span class=\"token number\">1</span>\n\n    <span class=\"token keyword\">while</span> <span class=\"token punctuation\">(</span>left <span class=\"token operator\">&lt;</span> right<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n      <span class=\"token keyword\">const</span> sum <span class=\"token operator\">=</span> nums<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span> <span class=\"token operator\">+</span> nums<span class=\"token punctuation\">[</span>left<span class=\"token punctuation\">]</span> <span class=\"token operator\">+</span> nums<span class=\"token punctuation\">[</span>right<span class=\"token punctuation\">]</span>\n\n      <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>Math<span class=\"token punctuation\">.</span><span class=\"token function\">abs</span><span class=\"token punctuation\">(</span>sum <span class=\"token operator\">-</span> target<span class=\"token punctuation\">)</span> <span class=\"token operator\">&lt;</span> Math<span class=\"token punctuation\">.</span><span class=\"token function\">abs</span><span class=\"token punctuation\">(</span>res <span class=\"token operator\">-</span> target<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        res <span class=\"token operator\">=</span> sum\n      <span class=\"token punctuation\">}</span>\n\n      <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>sum <span class=\"token operator\">&gt;</span> target<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        right<span class=\"token operator\">--</span>\n      <span class=\"token punctuation\">}</span> <span class=\"token keyword\">else</span> <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>sum <span class=\"token operator\">&lt;</span> target<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        left<span class=\"token operator\">++</span>\n      <span class=\"token punctuation\">}</span> <span class=\"token keyword\">else</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">return</span> res\n      <span class=\"token punctuation\">}</span>\n    <span class=\"token punctuation\">}</span>\n  <span class=\"token punctuation\">}</span>\n\n  <span class=\"token keyword\">return</span> res\n<span class=\"token punctuation\">}</span>\n</code></pre></div><h3>四数之和</h3>\n<div class=\"hint-container tip\">\n<p class=\"hint-container-title\">原题链接</p>\n<p><a href=\"https://leetcode-cn.com/problems/4sum\" target=\"_blank\" rel=\"noopener noreferrer\">18. 四数之和</a></p>\n</div>\n<p>思路：参照 <a href=\"#%E4%B8%89%E6%95%B0%E4%B9%8B%E5%92%8C\">三数之和</a>，使用双指针，先对数组进行排序，然后遍历数组，使用双指针分别指向当前元素的下一个元素和数组的最后一个元素，计算四数之和，然后移动指针。</p>\n<div class=\"hint-container warning\">\n<p class=\"hint-container-title\">易错提示</p>\n<ul>\n<li>在遍历数组时，需要判断是否和前一个元素相等，如果相等则跳过。</li>\n<li><code>i</code> 从 0 开始，<code>j</code> 从 <code>i + 1</code> 开始，<code>left</code> 从 <code>j + 1</code> 开始，<code>right</code> 从 <code>nums.length - 1</code> 开始。</li>\n</ul>\n</div>\n<div class=\"language-typescript\" data-ext=\"ts\" data-title=\"ts\"><pre class=\"language-typescript\"><code><span class=\"token keyword\">function</span> <span class=\"token function\">fourSum</span><span class=\"token punctuation\">(</span>nums<span class=\"token operator\">:</span> <span class=\"token builtin\">number</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span> target<span class=\"token operator\">:</span> <span class=\"token builtin\">number</span><span class=\"token punctuation\">)</span><span class=\"token operator\">:</span> <span class=\"token builtin\">number</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">const</span> res <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span>\n  nums<span class=\"token punctuation\">.</span><span class=\"token function\">sort</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span>a<span class=\"token punctuation\">,</span> b<span class=\"token punctuation\">)</span> <span class=\"token operator\">=&gt;</span> a <span class=\"token operator\">-</span> b<span class=\"token punctuation\">)</span>\n\n  <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">let</span> i <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> i <span class=\"token operator\">&lt;</span> nums<span class=\"token punctuation\">.</span>length<span class=\"token punctuation\">;</span> i<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>i <span class=\"token operator\">&gt;</span> <span class=\"token number\">0</span> <span class=\"token operator\">&amp;&amp;</span> nums<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span> <span class=\"token operator\">===</span> nums<span class=\"token punctuation\">[</span>i <span class=\"token operator\">-</span> <span class=\"token number\">1</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">continue</span>\n\n    <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">let</span> j <span class=\"token operator\">=</span> i <span class=\"token operator\">+</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span> j <span class=\"token operator\">&lt;</span> nums<span class=\"token punctuation\">.</span>length<span class=\"token punctuation\">;</span> j<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n      <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>j <span class=\"token operator\">&gt;</span> i <span class=\"token operator\">+</span> <span class=\"token number\">1</span> <span class=\"token operator\">&amp;&amp;</span> nums<span class=\"token punctuation\">[</span>j<span class=\"token punctuation\">]</span> <span class=\"token operator\">===</span> nums<span class=\"token punctuation\">[</span>j <span class=\"token operator\">-</span> <span class=\"token number\">1</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">continue</span>\n\n      <span class=\"token keyword\">let</span> left <span class=\"token operator\">=</span> j <span class=\"token operator\">+</span> <span class=\"token number\">1</span><span class=\"token punctuation\">,</span>\n        right <span class=\"token operator\">=</span> nums<span class=\"token punctuation\">.</span>length <span class=\"token operator\">-</span> <span class=\"token number\">1</span>\n\n      <span class=\"token keyword\">while</span> <span class=\"token punctuation\">(</span>left <span class=\"token operator\">&lt;</span> right<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">const</span> sum <span class=\"token operator\">=</span> nums<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span> <span class=\"token operator\">+</span> nums<span class=\"token punctuation\">[</span>j<span class=\"token punctuation\">]</span> <span class=\"token operator\">+</span> nums<span class=\"token punctuation\">[</span>left<span class=\"token punctuation\">]</span> <span class=\"token operator\">+</span> nums<span class=\"token punctuation\">[</span>right<span class=\"token punctuation\">]</span>\n\n        <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>sum <span class=\"token operator\">&gt;</span> target<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n          right<span class=\"token operator\">--</span>\n        <span class=\"token punctuation\">}</span> <span class=\"token keyword\">else</span> <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>sum <span class=\"token operator\">&lt;</span> target<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n          left<span class=\"token operator\">++</span>\n        <span class=\"token punctuation\">}</span> <span class=\"token keyword\">else</span> <span class=\"token punctuation\">{</span>\n          res<span class=\"token punctuation\">.</span><span class=\"token function\">push</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">[</span>nums<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span> nums<span class=\"token punctuation\">[</span>j<span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span> nums<span class=\"token punctuation\">[</span>left<span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span> nums<span class=\"token punctuation\">[</span>right<span class=\"token punctuation\">]</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span>\n\n          <span class=\"token keyword\">while</span> <span class=\"token punctuation\">(</span>left <span class=\"token operator\">&lt;</span> right <span class=\"token operator\">&amp;&amp;</span> nums<span class=\"token punctuation\">[</span>left<span class=\"token punctuation\">]</span> <span class=\"token operator\">===</span> nums<span class=\"token punctuation\">[</span>left <span class=\"token operator\">+</span> <span class=\"token number\">1</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span> left<span class=\"token operator\">++</span>\n          <span class=\"token keyword\">while</span> <span class=\"token punctuation\">(</span>left <span class=\"token operator\">&lt;</span> right <span class=\"token operator\">&amp;&amp;</span> nums<span class=\"token punctuation\">[</span>right<span class=\"token punctuation\">]</span> <span class=\"token operator\">===</span> nums<span class=\"token punctuation\">[</span>right <span class=\"token operator\">-</span> <span class=\"token number\">1</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span> right<span class=\"token operator\">--</span>\n\n          left<span class=\"token operator\">++</span>\n          right<span class=\"token operator\">--</span>\n        <span class=\"token punctuation\">}</span>\n      <span class=\"token punctuation\">}</span>\n    <span class=\"token punctuation\">}</span>\n  <span class=\"token punctuation\">}</span>\n\n  <span class=\"token keyword\">return</span> res\n<span class=\"token punctuation\">}</span>\n</code></pre></div><h2>双指针</h2>\n<h3>接雨水</h3>\n<div class=\"hint-container tip\">\n<p class=\"hint-container-title\">原题链接</p>\n<p><a href=\"https://leetcode.cn/problems/container-with-most-water\" target=\"_blank\" rel=\"noopener noreferrer\">11. 盛最多水的容器</a></p>\n<p><a href=\"https://leetcode-cn.com/problems/trapping-rain-water\" target=\"_blank\" rel=\"noopener noreferrer\">42. 接雨水</a></p>\n</div>\n<p>思路：使用双指针，分别指向数组的头尾，计算当前面积，然后移动高度较小的指针。</p>\n<div class=\"language-typescript\" data-ext=\"ts\" data-title=\"ts\"><pre class=\"language-typescript\"><code><span class=\"token keyword\">function</span> <span class=\"token function\">maxArea</span><span class=\"token punctuation\">(</span>height<span class=\"token operator\">:</span> <span class=\"token builtin\">number</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token operator\">:</span> <span class=\"token builtin\">number</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">let</span> res <span class=\"token operator\">=</span> <span class=\"token number\">0</span>\n  <span class=\"token keyword\">let</span> left <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">,</span>\n    right <span class=\"token operator\">=</span> height<span class=\"token punctuation\">.</span>length <span class=\"token operator\">-</span> <span class=\"token number\">1</span>\n\n  <span class=\"token keyword\">while</span> <span class=\"token punctuation\">(</span>left <span class=\"token operator\">&lt;=</span> right<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">const</span> weight <span class=\"token operator\">=</span> right <span class=\"token operator\">-</span> left\n\n    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>height<span class=\"token punctuation\">[</span>left<span class=\"token punctuation\">]</span> <span class=\"token operator\">&lt;</span> height<span class=\"token punctuation\">[</span>right<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n      res <span class=\"token operator\">=</span> Math<span class=\"token punctuation\">.</span><span class=\"token function\">max</span><span class=\"token punctuation\">(</span>height<span class=\"token punctuation\">[</span>left<span class=\"token punctuation\">]</span> <span class=\"token operator\">*</span> weight<span class=\"token punctuation\">,</span> res<span class=\"token punctuation\">)</span>\n      left<span class=\"token operator\">++</span>\n    <span class=\"token punctuation\">}</span> <span class=\"token keyword\">else</span> <span class=\"token punctuation\">{</span>\n      res <span class=\"token operator\">=</span> Math<span class=\"token punctuation\">.</span><span class=\"token function\">max</span><span class=\"token punctuation\">(</span>height<span class=\"token punctuation\">[</span>right<span class=\"token punctuation\">]</span> <span class=\"token operator\">*</span> weight<span class=\"token punctuation\">,</span> res<span class=\"token punctuation\">)</span>\n      right<span class=\"token operator\">--</span>\n    <span class=\"token punctuation\">}</span>\n  <span class=\"token punctuation\">}</span>\n\n  <span class=\"token keyword\">return</span> res\n<span class=\"token punctuation\">}</span>\n</code></pre></div><h3>删除有序数组中的重复项</h3>\n<div class=\"hint-container tip\">\n<p class=\"hint-container-title\">原题链接</p>\n<p><a href=\"https://leetcode-cn.com/problems/remove-duplicates-from-sorted-array\" target=\"_blank\" rel=\"noopener noreferrer\">26. 删除有序数组中的重复项</a></p>\n</div>\n<p>思路：使用双指针，一个指针用于遍历数组，另一个指针用于指向不重复的元素。</p>\n<div class=\"language-typescript\" data-ext=\"ts\" data-title=\"ts\"><pre class=\"language-typescript\"><code><span class=\"token keyword\">function</span> <span class=\"token function\">removeDuplicates</span><span class=\"token punctuation\">(</span>nums<span class=\"token operator\">:</span> <span class=\"token builtin\">number</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token operator\">:</span> <span class=\"token builtin\">number</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>nums<span class=\"token punctuation\">.</span>length <span class=\"token operator\">===</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">return</span> <span class=\"token number\">0</span>\n\n  <span class=\"token keyword\">let</span> slow <span class=\"token operator\">=</span> <span class=\"token number\">0</span>\n\n  <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">let</span> fast <span class=\"token operator\">=</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span> fast <span class=\"token operator\">&lt;</span> nums<span class=\"token punctuation\">.</span>length<span class=\"token punctuation\">;</span> fast<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>nums<span class=\"token punctuation\">[</span>slow<span class=\"token punctuation\">]</span> <span class=\"token operator\">!==</span> nums<span class=\"token punctuation\">[</span>fast<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n      slow<span class=\"token operator\">++</span>\n      nums<span class=\"token punctuation\">[</span>slow<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> nums<span class=\"token punctuation\">[</span>fast<span class=\"token punctuation\">]</span>\n    <span class=\"token punctuation\">}</span>\n  <span class=\"token punctuation\">}</span>\n\n  <span class=\"token keyword\">return</span> slow <span class=\"token operator\">+</span> <span class=\"token number\">1</span>\n<span class=\"token punctuation\">}</span>\n</code></pre></div><h3>移除元素</h3>\n<div class=\"hint-container tip\">\n<p class=\"hint-container-title\">原题链接</p>\n<p><a href=\"https://leetcode-cn.com/problems/remove-element\" target=\"_blank\" rel=\"noopener noreferrer\">27. 移除元素</a></p>\n</div>\n<p>思路：使用双指针，一个指针用于遍历数组，另一个指针用于指向不等于目标值的元素。</p>\n<div class=\"language-typescript\" data-ext=\"ts\" data-title=\"ts\"><pre class=\"language-typescript\"><code><span class=\"token keyword\">function</span> <span class=\"token function\">removeElement</span><span class=\"token punctuation\">(</span>nums<span class=\"token operator\">:</span> <span class=\"token builtin\">number</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span> val<span class=\"token operator\">:</span> <span class=\"token builtin\">number</span><span class=\"token punctuation\">)</span><span class=\"token operator\">:</span> <span class=\"token builtin\">number</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">let</span> slow <span class=\"token operator\">=</span> <span class=\"token number\">0</span>\n\n  <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">let</span> fast <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> fast <span class=\"token operator\">&lt;</span> nums<span class=\"token punctuation\">.</span>length<span class=\"token punctuation\">;</span> fast<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>nums<span class=\"token punctuation\">[</span>fast<span class=\"token punctuation\">]</span> <span class=\"token operator\">!==</span> val<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n      nums<span class=\"token punctuation\">[</span>slow<span class=\"token operator\">++</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> nums<span class=\"token punctuation\">[</span>fast<span class=\"token punctuation\">]</span>\n    <span class=\"token punctuation\">}</span>\n  <span class=\"token punctuation\">}</span>\n\n  <span class=\"token keyword\">return</span> slow\n<span class=\"token punctuation\">}</span>\n</code></pre></div><h3>下一个排列</h3>\n<div class=\"hint-container tip\">\n<p class=\"hint-container-title\">原题链接</p>\n<p><a href=\"https://leetcode.cn/problems/next-permutation/description/\" target=\"_blank\" rel=\"noopener noreferrer\">31. 下一个排列</a></p>\n</div>\n<p>思路：关键找到「较小数」与「较大数」。</p>\n<ol>\n<li>我们需要将一个左边的「较小数」与一个右边的「较大数」交换，以能够让当前排列变大，从而得到下一个排列。</li>\n<li>同时我们要让这个「较小数」尽量靠右，而「较大数」尽可能小。当交换完成后，「较大数」右边的数需要按照升序重新排列。这样可以在保证新排列大于原来排列的情况下，使变大的幅度尽可能小。</li>\n</ol>\n<p>以排列 <code>[4,5,2,6,3,1]</code> 为例：</p>\n<ul>\n<li>我们能找到的符合条件的一对「较小数」与「较大数」的组合为 <code>2</code> 与 <code>3</code>，满足「较小数」尽量靠右，而「较大数」尽可能小。</li>\n<li>当我们完成交换后排列变为 <code>[4,5,3,6,2,1]</code>，此时我们可以重排「较小数」右边的序列，序列变为 <code>[4,5,3,1,2,6]</code>。</li>\n</ul>\n<div class=\"language-typescript\" data-ext=\"ts\" data-title=\"ts\"><pre class=\"language-typescript\"><code><span class=\"token doc-comment comment\">/**\n Do not return anything, modify nums in-place instead.\n */</span>\n<span class=\"token keyword\">function</span> <span class=\"token function\">nextPermutation</span><span class=\"token punctuation\">(</span>nums<span class=\"token operator\">:</span> <span class=\"token builtin\">number</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token operator\">:</span> <span class=\"token keyword\">void</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">let</span> i <span class=\"token operator\">=</span> nums<span class=\"token punctuation\">.</span>length <span class=\"token operator\">-</span> <span class=\"token number\">2</span>\n\n  <span class=\"token comment\">// find smaller num</span>\n  <span class=\"token keyword\">while</span> <span class=\"token punctuation\">(</span>i <span class=\"token operator\">&gt;=</span> <span class=\"token number\">0</span> <span class=\"token operator\">&amp;&amp;</span> nums<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span> <span class=\"token operator\">&gt;=</span> nums<span class=\"token punctuation\">[</span>i <span class=\"token operator\">+</span> <span class=\"token number\">1</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    i<span class=\"token operator\">--</span>\n  <span class=\"token punctuation\">}</span>\n\n  <span class=\"token comment\">// now [i + 1, end) is decreasing</span>\n\n  <span class=\"token comment\">// find bigger num</span>\n  <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>i <span class=\"token operator\">&gt;=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">let</span> j <span class=\"token operator\">=</span> nums<span class=\"token punctuation\">.</span>length <span class=\"token operator\">-</span> <span class=\"token number\">1</span>\n    <span class=\"token keyword\">while</span> <span class=\"token punctuation\">(</span>j <span class=\"token operator\">&gt;</span> <span class=\"token number\">0</span> <span class=\"token operator\">&amp;&amp;</span> nums<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span> <span class=\"token operator\">&gt;=</span> nums<span class=\"token punctuation\">[</span>j<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n      j<span class=\"token operator\">--</span>\n    <span class=\"token punctuation\">}</span>\n    <span class=\"token comment\">// swap</span>\n    <span class=\"token punctuation\">;</span><span class=\"token punctuation\">[</span>nums<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span> nums<span class=\"token punctuation\">[</span>j<span class=\"token punctuation\">]</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span>nums<span class=\"token punctuation\">[</span>j<span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span> nums<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">]</span>\n  <span class=\"token punctuation\">}</span>\n\n  <span class=\"token comment\">// reverse [i, end)</span>\n  <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">let</span> l <span class=\"token operator\">=</span> i <span class=\"token operator\">+</span> <span class=\"token number\">1</span><span class=\"token punctuation\">,</span> r <span class=\"token operator\">=</span> nums<span class=\"token punctuation\">.</span>length <span class=\"token operator\">-</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span> l <span class=\"token operator\">&lt;</span> r<span class=\"token punctuation\">;</span> l<span class=\"token operator\">++</span><span class=\"token punctuation\">,</span> r<span class=\"token operator\">--</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token punctuation\">;</span><span class=\"token punctuation\">[</span>nums<span class=\"token punctuation\">[</span>l<span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span> nums<span class=\"token punctuation\">[</span>r<span class=\"token punctuation\">]</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span>nums<span class=\"token punctuation\">[</span>r<span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span> nums<span class=\"token punctuation\">[</span>l<span class=\"token punctuation\">]</span><span class=\"token punctuation\">]</span>\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n</code></pre></div>",
      "date_published": "2024-02-15T00:00:00.000Z",
      "date_modified": "2024-03-03T15:27:41.000Z",
      "authors": [],
      "tags": [
        "algorithm"
      ]
    },
    {
      "title": "使用 Actions 自动点亮 GitHub 热点图",
      "url": "https://dribble-njr.github.io/blog/blog/project/github-auto-commit/",
      "id": "https://dribble-njr.github.io/blog/blog/project/github-auto-commit/",
      "summary": "灵感来源：某天在 GitHub 上看到一个用户的热点图，发现他每天都有提交记录，非常帅！ 于是先搜搜有没有自动提交的工具，但是找到的结果有些需要在本地运行；有些则没有检查当天是否有提交记录，如果有提交当然不希望有一个虚拟的提交。 于是就有了这个项目，使用 GitHub Actions 自动提交代码，保持 GitHub 热点图常绿。 项目地址：githu...",
      "content_html": "<p>灵感来源：某天在 GitHub 上看到一个用户的热点图，发现他每天都有提交记录，非常帅！</p>\n<p>于是先搜搜有没有自动提交的工具，但是找到的结果有些需要在本地运行；有些则没有检查当天是否有提交记录，如果有提交当然不希望有一个虚拟的提交。</p>\n<p>于是就有了这个项目，使用 GitHub Actions 自动提交代码，保持 GitHub 热点图常绿。</p>\n<p>项目地址：<a href=\"https://github.com/dribble-njr/github-auto-commit\" target=\"_blank\" rel=\"noopener noreferrer\">github-auto-commit</a>。</p>\n<h2>功能特点</h2>\n<ul>\n<li><strong>自动提交与推送</strong>: 如果所有代码仓库今天没有任何提交，工作流程将自动提交一个虚拟的提交，并将其推送到代码仓库。</li>\n<li><strong>支持配置</strong>: 可以根据自己的需求进行配置，包括调整定时任务时间、更改 Git 设置信息以及自定义提交信息等。</li>\n</ul>\n<h2>使用方法</h2>\n<ol>\n<li><strong>Fork 本仓库</strong>: 首先，将本仓库 Fork 到你自己的 GitHub 账号下。</li>\n<li><strong>生成个人访问令牌（PAT）</strong>: 在 GitHub 设置中生成一个具有 <code>repo</code> 权限范围的个人访问令牌。</li>\n<li><strong>设置仓库 Secrets</strong>: 在仓库的设置中，添加一个名为 <code>TOKEN</code> 的 Secrets，将在步骤 2 中生成的 PAT 值作为其值。</li>\n</ol>\n<h2>配置</h2>\n<p>可以根据自己的需求对工作流程进行以下配置：</p>\n<ol>\n<li><strong>调整定时任务时间</strong>: 可以在工作流程文件中修改 <code>schedule</code> 部分的 cron 表达式，以更改工作流程的触发时间。</li>\n<li><strong>更改 Git 设置信息</strong>: 在工作流程文件中的 <code>Set up Git</code> 步骤中，更改 Git 的用户邮箱和用户名。</li>\n<li><strong>自定义提交信息</strong>: 在工作流程文件的最后一步中，根据需要修改 <code>date_today</code>、<code>time_start</code>、<code>time_end</code>、<code>repo</code> 和 <code>commit_message</code> 等变量，以调整自动提交的内容和提交信息。</li>\n</ol>\n<h2>实现</h2>\n<p>整体工作原理是使用 GitHub Actions 实现定时触发任务。</p>\n<p>使用 GitHub 提供的 API 来获取用户所有的代码仓库，并获取取每个仓库的提交信息。</p>\n<p>如果在所有仓库中都没有找到今天的提交记录，工作流程会自动创建一个虚拟的提交并推送到代码仓库中。</p>\n<p>完整代码如下：</p>\n<div class=\"language-yaml\" data-ext=\"yml\" data-title=\"yml\"><pre class=\"language-yaml\"><code><span class=\"token key atrule\">name</span><span class=\"token punctuation\">:</span> Auto Commit\n\n<span class=\"token key atrule\">on</span><span class=\"token punctuation\">:</span>\n  <span class=\"token key atrule\">schedule</span><span class=\"token punctuation\">:</span>\n    <span class=\"token punctuation\">-</span> <span class=\"token key atrule\">cron</span><span class=\"token punctuation\">:</span> <span class=\"token string\">'50 15 * * *'</span> <span class=\"token comment\"># run at 23:50 in China time</span>\n  <span class=\"token key atrule\">workflow_dispatch</span><span class=\"token punctuation\">:</span>\n\n<span class=\"token key atrule\">jobs</span><span class=\"token punctuation\">:</span>\n  <span class=\"token key atrule\">check_commits</span><span class=\"token punctuation\">:</span>\n    <span class=\"token key atrule\">runs-on</span><span class=\"token punctuation\">:</span> ubuntu<span class=\"token punctuation\">-</span>latest\n    <span class=\"token key atrule\">steps</span><span class=\"token punctuation\">:</span>\n      <span class=\"token punctuation\">-</span> <span class=\"token key atrule\">name</span><span class=\"token punctuation\">:</span> Checkout this repository\n        <span class=\"token key atrule\">uses</span><span class=\"token punctuation\">:</span> actions/checkout@v2\n\n      <span class=\"token punctuation\">-</span> <span class=\"token key atrule\">name</span><span class=\"token punctuation\">:</span> Set up Git\n        <span class=\"token key atrule\">run</span><span class=\"token punctuation\">:</span> <span class=\"token punctuation\">|</span><span class=\"token scalar string\">\n          # You should set your email and name here.</span>\n\n          git config <span class=\"token punctuation\">-</span><span class=\"token punctuation\">-</span>global user.email \"wzw15292257101@163.com\"\n          git config <span class=\"token punctuation\">-</span><span class=\"token punctuation\">-</span>global user.name \"dribble<span class=\"token punctuation\">-</span>njr\"\n\n      <span class=\"token punctuation\">-</span> <span class=\"token key atrule\">name</span><span class=\"token punctuation\">:</span> Get all repositories\n        <span class=\"token key atrule\">id</span><span class=\"token punctuation\">:</span> get<span class=\"token punctuation\">-</span>repos\n        <span class=\"token key atrule\">run</span><span class=\"token punctuation\">:</span> <span class=\"token punctuation\">|</span><span class=\"token scalar string\">\n          echo \"Fetching all repositories...\"\n          response=$(curl -s -w \"\\n%{http_code}\" -H \"Authorization: token ${{ secrets.TOKEN }}\" \"https://api.github.com/user/repos?type=all\")\n          http_code=$(echo \"$response\" | tail -n1)\n          response_body=$(echo \"$response\" | sed '$d')</span>\n\n          echo \"<span class=\"token punctuation\">[</span>HTTP status code<span class=\"token punctuation\">]</span><span class=\"token punctuation\">:</span> $http_code\"\n\n          contained_repos=$(echo \"$response_body\" <span class=\"token punctuation\">|</span> jq <span class=\"token punctuation\">-</span>r '.<span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> <span class=\"token punctuation\">|</span> .full_name')\n          <span class=\"token key atrule\">echo \"Contained repositories</span><span class=\"token punctuation\">:</span> $contained_repos\"\n\n          echo \"<span class=\"token punctuation\">:</span><span class=\"token punctuation\">:</span>set<span class=\"token punctuation\">-</span>output name=repos<span class=\"token punctuation\">:</span><span class=\"token punctuation\">:</span>$(echo \"$contained_repos\" <span class=\"token punctuation\">|</span> tr '\\n' '<span class=\"token punctuation\">,</span>')\" <span class=\"token comment\"># output repos</span>\n\n      <span class=\"token punctuation\">-</span> <span class=\"token key atrule\">name</span><span class=\"token punctuation\">:</span> Read repositories list and check commits\n        <span class=\"token key atrule\">run</span><span class=\"token punctuation\">:</span> <span class=\"token punctuation\">|</span><span class=\"token scalar string\">\n          # Set custom timezone and other config by yourself.</span>\n\n          date_today=$(TZ='Asia/Shanghai' date <span class=\"token punctuation\">-</span>I) <span class=\"token comment\"># Date part</span>\n          time_start=\"$<span class=\"token punctuation\">{</span>date_today<span class=\"token punctuation\">}</span>T00<span class=\"token punctuation\">:</span>00<span class=\"token punctuation\">:</span>00\"\n          time_end=\"$<span class=\"token punctuation\">{</span>date_today<span class=\"token punctuation\">}</span>T23<span class=\"token punctuation\">:</span>55<span class=\"token punctuation\">:</span>00\"\n          repo=\"https<span class=\"token punctuation\">:</span>//github.com/dribble<span class=\"token punctuation\">-</span>njr/github<span class=\"token punctuation\">-</span>auto<span class=\"token punctuation\">-</span>commit.git\"\n          commit_message=\"Auto commit on $(TZ='Asia/Shanghai' date '+%Y<span class=\"token punctuation\">-</span>%m<span class=\"token punctuation\">-</span>%d %H<span class=\"token punctuation\">:</span>%M<span class=\"token punctuation\">:</span>%S')\"\n\n          commits_exist=false\n          echo \"Checking commits between $time_start and $time_end\"\n\n          IFS='<span class=\"token punctuation\">,</span> ' read <span class=\"token punctuation\">-</span>r <span class=\"token punctuation\">-</span>a repos &lt;&lt;&lt; \"$<span class=\"token punctuation\">{</span><span class=\"token punctuation\">{</span> steps.get<span class=\"token punctuation\">-</span>repos.outputs.repos <span class=\"token punctuation\">}</span><span class=\"token punctuation\">}</span>\"\n          for repo in \"$<span class=\"token punctuation\">{</span>repos<span class=\"token punctuation\">[</span>@<span class=\"token punctuation\">]</span><span class=\"token punctuation\">}</span>\"; do\n            echo \"Checking commits for $repo\"\n            <span class=\"token key atrule\">commit_today=$(curl -H \"Authorization</span><span class=\"token punctuation\">:</span> token $<span class=\"token punctuation\">{</span><span class=\"token punctuation\">{</span> secrets.TOKEN <span class=\"token punctuation\">}</span><span class=\"token punctuation\">}</span>\" <span class=\"token punctuation\">-</span>s \"https<span class=\"token punctuation\">:</span>//api.github.com/repos/$repo/commits<span class=\"token punctuation\">?</span>since=$time_start<span class=\"token important\">&amp;until=$time_end\")</span>\n            if echo \"$commit_today\" <span class=\"token punctuation\">|</span> jq <span class=\"token punctuation\">-</span>e '.<span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span>' <span class=\"token punctuation\">&gt;</span> /dev/null; then\n                echo \"Commits today in $repo<span class=\"token punctuation\">:</span>\"\n                echo \"$commit_today\"\n                commits_exist=true\n                break\n            fi\n          done\n\n          if <span class=\"token punctuation\">[</span><span class=\"token punctuation\">[</span> \"$commits_exist\" == \"false\" <span class=\"token punctuation\">]</span><span class=\"token punctuation\">]</span>; then\n            echo \"No commits found today across all repositories. Creating a dummy commit<span class=\"token punctuation\">...</span>\"\n            git clone $repo\n            cd github<span class=\"token punctuation\">-</span>auto<span class=\"token punctuation\">-</span>commit\n            echo \"$date_today No commits found today<span class=\"token punctuation\">,</span> auto commited.\" <span class=\"token punctuation\">&gt;</span><span class=\"token punctuation\">&gt;</span> dummy.txt\n            git add dummy.txt\n            git commit <span class=\"token punctuation\">-</span>m \"$commit_message\"\n            git push https<span class=\"token punctuation\">:</span>//$<span class=\"token punctuation\">{</span><span class=\"token punctuation\">{</span> secrets.TOKEN <span class=\"token punctuation\">}</span><span class=\"token punctuation\">}</span>@github.com/$<span class=\"token punctuation\">{</span><span class=\"token punctuation\">{</span> github.repository <span class=\"token punctuation\">}</span><span class=\"token punctuation\">}</span>.git\n          else\n            echo \"Commits found today.\"\n          fi\n</code></pre></div>",
      "date_published": "2024-02-10T00:00:00.000Z",
      "date_modified": "2024-02-10T09:01:00.000Z",
      "authors": [],
      "tags": [
        "Project"
      ]
    },
    {
      "title": "服务器上的 Git",
      "url": "https://dribble-njr.github.io/blog/blog/reading/pro-git/04-git-server.html",
      "id": "https://dribble-njr.github.io/blog/blog/reading/pro-git/04-git-server.html",
      "summary": " 提示 PRO Git 原文 直接看实战： ",
      "content_html": "<div class=\"hint-container tip\">\n<p class=\"hint-container-title\">提示</p>\n<p><a href=\"https://git-scm.com/book/zh/v2/%E6%9C%8D%E5%8A%A1%E5%99%A8%E4%B8%8A%E7%9A%84-Git-%E5%8D%8F%E8%AE%AE\" target=\"_blank\" rel=\"noopener noreferrer\">PRO Git 原文</a></p>\n</div>\n<p>直接看实战：</p>\n<ul>\n<li></li>\n<li></li>\n</ul>\n",
      "date_published": "2024-02-07T00:00:00.000Z",
      "date_modified": "2024-02-07T09:12:42.000Z",
      "authors": [],
      "tags": [
        "READING"
      ]
    },
    {
      "title": "Git 分支",
      "url": "https://dribble-njr.github.io/blog/blog/reading/pro-git/03-git-branch.html",
      "id": "https://dribble-njr.github.io/blog/blog/reading/pro-git/03-git-branch.html",
      "summary": "分支简介 Git 仓库中有五个对象：三个 blob 对象（保存着文件快照）、一个 树 对象 （记录着目录结构和 blob 对象索引）以及一个 提交 对象（包含着指向前述树对象的指针和所有提交信息）。 做些修改后再次提交，那么这次产生的提交对象会包含一个指向上次提交对象（父对象）的指针。 提交对象及其父对象提交对象及其父对象 Git 的分支，其实本质上仅...",
      "content_html": "<h2>分支简介</h2>\n<p>Git 仓库中有五个对象：三个 <em>blob</em> 对象（保存着文件快照）、一个 <strong>树</strong> 对象 （记录着目录结构和 blob 对象索引）以及一个 <strong>提交</strong> 对象（包含着指向前述树对象的指针和所有提交信息）。</p>\n<p>做些修改后再次提交，那么这次产生的提交对象会包含一个指向上次提交对象（父对象）的指针。</p>\n<figure><img src=\"https://raw.githubusercontent.com/dribble-njr/typora-njr/master/img/image-20231012172546292.png\" alt=\"提交对象及其父对象\" tabindex=\"0\" loading=\"lazy\"><figcaption>提交对象及其父对象</figcaption></figure>\n<p>Git 的分支，其实本质上仅仅是指向提交对象的可变指针。 Git 的默认分支名字是 <code>master</code>。 在多次提交操作之后，你其实已经有一个指向最后那个提交对象的 <code>master</code> 分支。 <code>master</code> 分支会在每次提交时自动向前移动。</p>\n<figure><img src=\"https://raw.githubusercontent.com/dribble-njr/typora-njr/master/img/image-20231012172739646.png\" alt=\"分支及其提交历史\" tabindex=\"0\" loading=\"lazy\"><figcaption>分支及其提交历史</figcaption></figure>\n<h3>新建分支</h3>\n<p>Git 在新建分支时创建了一个可以移动的新的指针。 比如，创建一个 testing 分支， 你需要使用 <code>git branch</code> 命令：</p>\n<div class=\"language-bash\" data-ext=\"sh\" data-title=\"sh\"><pre class=\"language-bash\"><code>$ <span class=\"token function\">git</span> branch testing\n</code></pre></div><p>这会在当前所在的提交对象上创建一个指针。</p>\n<figure><img src=\"https://raw.githubusercontent.com/dribble-njr/typora-njr/master/img/two-branches.png\" alt=\"两个指向相同提交历史的分支\" tabindex=\"0\" loading=\"lazy\"><figcaption>两个指向相同提交历史的分支</figcaption></figure>\n<p>Git 使用 Head 指针确定当前在哪一个分支上，指向当前所在的本地分支。在本例中，你仍然在 <code>master</code> 分支上。 因为 <code>git branch</code> 命令仅仅 <strong>创建</strong> 一个新分支，并不会自动切换到新分支中去。</p>\n<figure><img src=\"https://raw.githubusercontent.com/dribble-njr/typora-njr/master/img/head-to-master.png\" alt=\"HEAD 指向当前所在的分支\" tabindex=\"0\" loading=\"lazy\"><figcaption>HEAD 指向当前所在的分支</figcaption></figure>\n<h3>分支切换</h3>\n<div class=\"hint-container tip\">\n<p class=\"hint-container-title\">提示</p>\n<p>新版本使用 <code>git switch</code> 进行分支切换。</p>\n</div>\n<p>要切换到一个已存在的分支，你需要使用 <code>git checkout</code> 命令。 我们现在切换到新创建的 <code>testing</code> 分支去：</p>\n<div class=\"language-bash\" data-ext=\"sh\" data-title=\"sh\"><pre class=\"language-bash\"><code>$ <span class=\"token function\">git</span> checkout testing\n</code></pre></div><p>这样 <code>HEAD</code> 就指向 <code>testing</code> 分支了。</p>\n<figure><img src=\"https://raw.githubusercontent.com/dribble-njr/typora-njr/master/img/head-to-testing.png\" alt=\"HEAD 指向当前所在的分支。\" tabindex=\"0\" loading=\"lazy\"><figcaption>HEAD 指向当前所在的分支。</figcaption></figure>\n<p>现在不妨再提交一次：</p>\n<div class=\"language-bash\" data-ext=\"sh\" data-title=\"sh\"><pre class=\"language-bash\"><code>$ <span class=\"token function\">vim</span> test.rb\n$ <span class=\"token function\">git</span> commit <span class=\"token parameter variable\">-a</span> <span class=\"token parameter variable\">-m</span> <span class=\"token string\">'made a change'</span>\n</code></pre></div><figure><img src=\"https://raw.githubusercontent.com/dribble-njr/typora-njr/master/img/advance-testing-20231016151948599.png\" alt=\"HEAD 分支随着提交操作自动向前移动\" tabindex=\"0\" loading=\"lazy\"><figcaption>HEAD 分支随着提交操作自动向前移动</figcaption></figure>\n<p>如图所示，你的 <code>testing</code> 分支向前移动了，但是 <code>master</code> 分支却没有，它仍然指向运行 <code>git checkout</code> 时所指的对象。 这就有意思了，现在我们切换回 <code>master</code> 分支看看：</p>\n<div class=\"language-bash\" data-ext=\"sh\" data-title=\"sh\"><pre class=\"language-bash\"><code>$ <span class=\"token function\">git</span> checkout master\n</code></pre></div><figure><img src=\"https://raw.githubusercontent.com/dribble-njr/typora-njr/master/img/checkout-master.png\" alt=\"检出时 HEAD 随之移动\" tabindex=\"0\" loading=\"lazy\"><figcaption>检出时 HEAD 随之移动</figcaption></figure>\n<p>这条命令做了两件事。 一是使 HEAD 指回 <code>master</code> 分支，二是将工作目录恢复成 <code>master</code> 分支所指向的快照内容。 也就是说，你现在做修改的话，项目将始于一个较旧的版本。 本质上来讲，这就是忽略 <code>testing</code> 分支所做的修改，以便于向另一个方向进行开发。</p>\n<div class=\"hint-container tip\">\n<p class=\"hint-container-title\">分支新建与切换</p>\n<p><code>git checkout -b branch_name</code> 可以快速创建新分支并切换到该分支上。</p>\n</div>\n<div class=\"hint-container tip\">\n<p class=\"hint-container-title\">分支切换会改变你工作目录中的文件</p>\n<p>在切换分支时，一定要注意你工作目录里的文件会被改变。 如果是切换到一个较旧的分支，你的工作目录会恢复到该分支最后一次提交时的样子。 如果 Git 不能干净利落地完成这个任务，它将禁止切换分支。</p>\n</div>\n<p>我们不妨再稍微做些修改并提交：</p>\n<div class=\"language-console\" data-ext=\"console\" data-title=\"console\"><pre class=\"language-console\"><code>$ vim test.rb\n$ git commit -a -m 'made other changes'\n</code></pre></div><p>现在，这个项目的提交历史已经产生了分叉（参见 <a href=\"https://git-scm.com/book/zh/v2/ch00/divergent_history\" target=\"_blank\" rel=\"noopener noreferrer\">项目分叉历史</a>）。 因为刚才你创建了一个新分支，并切换过去进行了一些工作，随后又切换回 master 分支进行了另外一些工作。 上述两次改动针对的是不同分支：你可以在不同分支间不断地来回切换和工作，并在时机成熟时将它们合并起来。 而所有这些工作，你需要的命令只有 <code>branch</code>、<code>checkout</code> 和 <code>commit</code>。</p>\n<figure><img src=\"https://raw.githubusercontent.com/dribble-njr/typora-njr/master/img/advance-master.png\" alt=\"项目分叉历史。\" tabindex=\"0\" loading=\"lazy\"><figcaption>项目分叉历史。</figcaption></figure>\n<div class=\"hint-container tip\">\n<p class=\"hint-container-title\">提示</p>\n<p>由于 Git 的分支实质上仅是包含所指对象校验和（长度为 40 的 SHA-1 值字符串）的文件，所以它的创建和销毁都异常高效。创建一个新分支就相当于往一个文件中写入 41 个字节（40 个字符和 1 个换行符），<br>\n如此的简单能不快吗？</p>\n</div>\n<h2>分支合并</h2>\n<p>让我们来看一个简单的分支新建与分支合并的例子，实际工作中你可能会用到类似的工作流。 你将经历如下步骤：</p>\n<ol>\n<li>开发某个网站。</li>\n<li>为实现某个新的用户需求，创建一个分支。</li>\n<li>在这个分支上开展工作。</li>\n</ol>\n<p>正在此时，你突然接到一个电话说有个很严重的问题需要紧急修补。 你将按照如下方式来处理：</p>\n<ol>\n<li>切换到你的线上分支（production branch）。</li>\n<li>为这个紧急任务新建一个分支，并在其中修复它。</li>\n<li>在测试通过之后，切换回线上分支，然后合并这个修补分支，最后将改动推送到线上分支。</li>\n<li>切换回你最初工作的分支上，继续工作。</li>\n</ol>\n<h3>新建分支</h3>\n<p>首先，我们假设你正在你的项目上工作，并且在 <code>master</code> 分支上已经有了一些提交。</p>\n<figure><img src=\"https://raw.githubusercontent.com/dribble-njr/typora-njr/master/img/basic-branching-1.png\" alt=\"一个简单的提交历史。\" tabindex=\"0\" loading=\"lazy\"><figcaption>一个简单的提交历史。</figcaption></figure>\n<p>现在，你已经决定要解决你的公司使用的问题追踪系统中的 #53 问题。 想要新建一个分支并同时切换到那个分支上，你可以运行一个带有 <code>-b</code> 参数的 <code>git checkout</code> 命令：</p>\n<div class=\"language-console\" data-ext=\"console\" data-title=\"console\"><pre class=\"language-console\"><code>$ git checkout -b iss53\nSwitched to a new branch \"iss53\"\n</code></pre></div><p>它是下面两条命令的简写：</p>\n<div class=\"language-console\" data-ext=\"console\" data-title=\"console\"><pre class=\"language-console\"><code>$ git branch iss53\n$ git checkout iss53\n</code></pre></div><figure><img src=\"https://raw.githubusercontent.com/dribble-njr/typora-njr/master/img/basic-branching-2.png\" alt=\"创建一个新分支指针\" tabindex=\"0\" loading=\"lazy\"><figcaption>创建一个新分支指针</figcaption></figure>\n<p>你继续在 #53 问题上工作，并且做了一些提交。 在此过程中，<code>iss53</code> 分支在不断的向前推进，因为你已经检出到该分支 （也就是说，你的 <code>HEAD</code> 指针指向了 <code>iss53</code> 分支）</p>\n<div class=\"language-console\" data-ext=\"console\" data-title=\"console\"><pre class=\"language-console\"><code>$ vim index.html\n$ git commit -a -m 'added a new footer [issue 53]'\n</code></pre></div><figure><img src=\"https://raw.githubusercontent.com/dribble-njr/typora-njr/master/img/basic-branching-3.png\" alt=\" 分支随着工作的进展向前推进。\" tabindex=\"0\" loading=\"lazy\"><figcaption><code>iss53</code> 分支随着工作的进展向前推进。</figcaption></figure>\n<p>现在你接到那个电话，有个紧急问题等待你来解决。有了 Git 的帮助，现在只需要切换回 <code>master</code> 分支。在切换分支之前，需要提交一个 <code>commit</code> <strong>保持干净的工作区</strong>。</p>\n<p>现在，我们假设你已经把你的修改全部提交了，这时你可以切换回 <code>master</code> 分支了：</p>\n<div class=\"language-console\" data-ext=\"console\" data-title=\"console\"><pre class=\"language-console\"><code>$ git checkout master\nSwitched to branch 'master'\n</code></pre></div><p>这个时候，你的工作目录和你在开始 #53 问题之前一模一样，现在你可以专心修复紧急问题了。建立一个 <code>hotfix</code> 分支，在该分支上工作直到问题解决：</p>\n<div class=\"language-console\" data-ext=\"console\" data-title=\"console\"><pre class=\"language-console\"><code>$ git checkout -b hotfix\nSwitched to a new branch 'hotfix'\n$ vim index.html\n$ git commit -a -m 'fixed the broken email address'\n[hotfix 1fb7853] fixed the broken email address\n 1 file changed, 2 insertions(+)\n</code></pre></div><figure><img src=\"https://raw.githubusercontent.com/dribble-njr/typora-njr/master/img/basic-branching-4.png\" alt=\"基于  分支的紧急问题分支（hotfix branch）。\" tabindex=\"0\" loading=\"lazy\"><figcaption>基于 <code>master</code> 分支的紧急问题分支（hotfix branch）。</figcaption></figure>\n<p>你可以运行你的测试，确保你的修改是正确的，然后将 <code>hotfix</code> 分支合并回你的 <code>master</code> 分支来部署到线上。 你可以使用 <code>git merge</code> 命令来达到上述目的：</p>\n<div class=\"language-console\" data-ext=\"console\" data-title=\"console\"><pre class=\"language-console\"><code>$ git checkout master\n$ git merge hotfix\nUpdating f42c576..3a0874c\nFast-forward\n index.html | 2 ++\n 1 file changed, 2 insertions(+)\n</code></pre></div><p>在合并的时候，你应该注意到了「快进（fast-forward）」这个词。</p>\n<p>由于你想要合并的分支 <code>hotfix</code> 所指向的提交 <code>C4</code> 是你所在的提交 <code>C2</code> 的直接后继， 因此 Git 会直接将指针向前移动。换句话说，当你试图合并两个分支时， 如果顺着一个分支走下去能够到达另一个分支，那么 Git 在合并两者的时候， 只会简单的将指针向前推进（指针右移），因为这种情况下的合并操作没有需要解决的分歧——这就叫做「快进（fast-forward）」。</p>\n<p>现在，最新的修改已经在 <code>master</code> 分支所指向的提交快照中，你可以着手发布该修复了。</p>\n<figure><img src=\"https://raw.githubusercontent.com/dribble-njr/typora-njr/master/img/basic-branching-5.png\" alt=\" 被快进到 。\" tabindex=\"0\" loading=\"lazy\"><figcaption><code>master</code> 被快进到 <code>hotfix</code>。</figcaption></figure>\n<p>关于这个紧急问题的解决方案发布之后，你准备回到被打断之前时的工作中。然而，你应该先删除 <code>hotfix</code> 分支，因为你已经不再需要它了——<code>master</code> 分支已经指向了同一个位置。 你可以使用带 <code>-d</code> 选项的 <code>git branch</code> 命令来删除分支：</p>\n<div class=\"language-console\" data-ext=\"console\" data-title=\"console\"><pre class=\"language-console\"><code>$ git branch -d hotfix\nDeleted branch hotfix (3a0874c).\n</code></pre></div><p>现在你可以切换回你正在工作的分支继续你的工作，也就是针对 #53 问题的那个分支（iss53 分支）。</p>\n<div class=\"language-console\" data-ext=\"console\" data-title=\"console\"><pre class=\"language-console\"><code>$ git checkout iss53\nSwitched to branch \"iss53\"\n$ vim index.html\n$ git commit -a -m 'finished the new footer [issue 53]'\n[iss53 ad82d7a] finished the new footer [issue 53]\n1 file changed, 1 insertion(+)\n</code></pre></div><figure><img src=\"https://raw.githubusercontent.com/dribble-njr/typora-njr/master/img/basic-branching-6-20231016171324548.png\" alt=\"继续在  分支上的工作\" tabindex=\"0\" loading=\"lazy\"><figcaption>继续在 <code>iss53</code> 分支上的工作</figcaption></figure>\n<h3>分支合并</h3>\n<p>假设你已经修正了 #53 问题，并且打算将你的工作合并入 <code>master</code> 分支。 为此，你需要合并 <code>iss53</code> 分支到 <code>master</code> 分支，这和之前你合并 <code>hotfix</code> 分支所做的工作差不多。 你只需要检出到你想合并入的分支，然后运行 <code>git merge</code> 命令：</p>\n<div class=\"language-console\" data-ext=\"console\" data-title=\"console\"><pre class=\"language-console\"><code>$ git checkout master\nSwitched to branch 'master'\n$ git merge iss53\nMerge made by the 'recursive' strategy.\nindex.html |    1 +\n1 file changed, 1 insertion(+)\n</code></pre></div><p>这和你之前合并 <code>hotfix</code> 分支的时候看起来有一点不一样。 在这种情况下，你的开发历史从一个更早的地方开始分叉开来（diverged）。 因为，<code>master</code> 分支所在提交并不是 <code>iss53</code> 分支所在提交的直接祖先，Git 不得不做一些额外的工作。 出现这种情况的时候，Git 会使用两个分支的末端所指的快照（<code>C4</code> 和 <code>C5</code>）以及这两个分支的公共祖先（<code>C2</code>），做一个简单的三方合并。</p>\n<figure><img src=\"https://raw.githubusercontent.com/dribble-njr/typora-njr/master/img/basic-merging-1.png\" alt=\"一次典型合并中所用到的三个快照\" tabindex=\"0\" loading=\"lazy\"><figcaption>一次典型合并中所用到的三个快照</figcaption></figure>\n<p>和之前将分支指针向前推进所不同的是，Git 将此次三方合并的结果做了一个新的快照并且自动创建一个新的提交指向它。 这个被称作一次合并提交，它的特别之处在于他有不止一个父提交。</p>\n<figure><img src=\"https://raw.githubusercontent.com/dribble-njr/typora-njr/master/img/basic-merging-2.png\" alt=\"一个合并提交\" tabindex=\"0\" loading=\"lazy\"><figcaption>一个合并提交</figcaption></figure>\n<h3>解决冲突</h3>\n<p>如果你在两个不同的分支中，对同一个文件的同一个部分进行了不同的修改，Git 就没法干净的合并它们。 如果你对 #53 问题的修改和有关 <code>hotfix</code> 分支的修改都涉及到同一个文件的同一处，在合并它们的时候就会产生合并冲突：</p>\n<div class=\"language-console\" data-ext=\"console\" data-title=\"console\"><pre class=\"language-console\"><code>$ git merge iss53\nAuto-merging index.html\nCONFLICT (content): Merge conflict in index.html\nAutomatic merge failed; fix conflicts and then commit the result.\n</code></pre></div><p>此时 Git 做了合并，但是没有自动地创建一个新的合并提交。 Git 会暂停下来，等待你去解决合并产生的冲突。 你可以在合并冲突后的任意时刻使用 <code>git status</code> 命令来查看那些因包含合并冲突而处于未合并（unmerged）状态的文件：</p>\n<div class=\"language-console\" data-ext=\"console\" data-title=\"console\"><pre class=\"language-console\"><code>$ git status\nOn branch master\nYou have unmerged paths.\n  (fix conflicts and run \"git commit\")\n\nUnmerged paths:\n  (use \"git add &lt;file&gt;...\" to mark resolution)\n\n    both modified:      index.html\n\nno changes added to commit (use \"git add\" and/or \"git commit -a\")\n</code></pre></div><p>任何因包含合并冲突而有待解决的文件，都会以未合并状态标识出来。 Git 会在有冲突的文件中加入标准的冲突解决标记，这样你可以打开这些包含冲突的文件然后手动解决冲突。 出现冲突的文件会包含一些特殊区段，看起来像下面这个样子：</p>\n<div class=\"language-html\" data-ext=\"html\" data-title=\"html\"><pre class=\"language-html\"><code>&lt;&lt;&lt;&lt;&lt;&lt;&lt; HEAD:index.html\n<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>div</span> <span class=\"token attr-name\">id</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>footer<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">&gt;</span></span>contact : email.support@github.com<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>div</span><span class=\"token punctuation\">&gt;</span></span>\n=======\n<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>div</span> <span class=\"token attr-name\">id</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>footer<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">&gt;</span></span>please contact us at support@github.com<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>div</span><span class=\"token punctuation\">&gt;</span></span>\n&gt;&gt;&gt;&gt;&gt;&gt;&gt; iss53:index.html\n</code></pre></div><p>这表示 <code>HEAD</code> 所指示的版本（也就是你的 <code>master</code> 分支所在的位置，因为你在运行 merge 命令的时候已经检出到了这个分支）在这个区段的上半部分（<code>=======</code> 的上半部分），而 <code>iss53</code> 分支所指示的版本在 <code>=======</code> 的下半部分。 为了解决冲突，你必须选择使用由 <code>=======</code> 分割的两部分中的一个，或者你也可以自行合并这些内容。 例如，你可以通过把这段内容换成下面的样子来解决冲突：</p>\n<div class=\"language-html\" data-ext=\"html\" data-title=\"html\"><pre class=\"language-html\"><code><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>div</span> <span class=\"token attr-name\">id</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>footer<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">&gt;</span></span>please contact us at email.support@github.com<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>div</span><span class=\"token punctuation\">&gt;</span></span>\n</code></pre></div><p>上述的冲突解决方案仅保留了其中一个分支的修改，并且 <code>&lt;&lt;&lt;&lt;&lt;&lt;&lt;</code> , <code>=======</code> , 和 <code>&gt;&gt;&gt;&gt;&gt;&gt;&gt;</code> 这些行被完全删除了。 在你解决了所有文件里的冲突之后，对每个文件使用 <code>git add</code> 命令来将其标记为冲突已解决。 一旦暂存这些原本有冲突的文件，Git 就会将它们标记为冲突已解决。</p>\n<div class=\"hint-container tip\">\n<p class=\"hint-container-title\">提示</p>\n<p>VScode 提供了图形化工具用以解决冲突。</p>\n</div>\n<p>等你退出合并工具之后，Git 会询问刚才的合并是否成功。 如果你回答是，Git 会暂存那些文件以表明冲突已解决： 你可以再次运行 <code>git status</code> 来确认所有的合并冲突都已被解决：</p>\n<div class=\"language-console\" data-ext=\"console\" data-title=\"console\"><pre class=\"language-console\"><code>$ git status\nOn branch master\nAll conflicts fixed but you are still merging.\n  (use \"git commit\" to conclude merge)\n\nChanges to be committed:\n\n    modified:   index.html\n</code></pre></div><p>如果你对结果感到满意，并且确定之前有冲突的的文件都已经暂存了，这时你可以输入 <code>git commit</code> 来完成合并提交。 默认情况下提交信息看起来像下面这个样子：</p>\n<div class=\"language-console\" data-ext=\"console\" data-title=\"console\"><pre class=\"language-console\"><code>Merge branch 'iss53'\n\nConflicts:\n    index.html\n#\n# It looks like you may be committing a merge.\n# If this is not correct, please remove the file\n#\t.git/MERGE_HEAD\n# and try again.\n\n\n# Please enter the commit message for your changes. Lines starting\n# with '#' will be ignored, and an empty message aborts the commit.\n# On branch master\n# All conflicts fixed but you are still merging.\n#\n# Changes to be committed:\n#\tmodified:   index.html\n#\n</code></pre></div><p>如果你觉得上述的信息不够充分，不能完全体现分支合并的过程，你可以修改上述信息，添加一些细节给未来检视这个合并的读者一些帮助，告诉他们你是如何解决合并冲突的，以及理由是什么。</p>\n<h2>分支管理</h2>\n<p><code>git branch</code> 命令不只是可以创建与删除分支。 如果不加任何参数运行它，会得到当前所有分支的一个列表：</p>\n<div class=\"language-console\" data-ext=\"console\" data-title=\"console\"><pre class=\"language-console\"><code>$ git branch\n  iss53\n* master\n  testing\n</code></pre></div><p>注意 <code>master</code> 分支前的 <code>*</code> 字符：它代表现在检出的那一个分支（也就是说，当前 <code>HEAD</code> 指针所指向的分支）。</p>\n<p>如果需要查看每一个分支的最后一次提交，可以运行 <code>git branch -v</code> 命令：</p>\n<div class=\"language-console\" data-ext=\"console\" data-title=\"console\"><pre class=\"language-console\"><code>$ git branch -v\n  iss53   93b412c fix javascript issue\n* master  7a98805 Merge branch 'iss53'\n  testing 782fd34 add scott to the author list in the readmes\n</code></pre></div><p><code>--merged</code> 与 <code>--no-merged</code> 这两个有用的选项可以过滤这个列表中已经合并或尚未合并到当前分支的分支。 如果要查看哪些分支已经合并到当前分支，可以运行 <code>git branch --merged</code>：</p>\n<div class=\"language-console\" data-ext=\"console\" data-title=\"console\"><pre class=\"language-console\"><code>$ git branch --merged\n  iss53\n* master\n</code></pre></div><p>因为之前已经合并了 <code>iss53</code> 分支，所以现在看到它在列表中。 在这个列表中分支名字前没有 <code>*</code> 号的分支通常可以使用 <code>git branch -d</code> 删除掉；你已经将它们的工作整合到了另一个分支，所以并不会失去任何东西。</p>\n<p>这里显示了其他分支。 因为它包含了还未合并的工作，尝试使用 <code>git branch -d</code> 命令删除它时会失败：</p>\n<div class=\"language-console\" data-ext=\"console\" data-title=\"console\"><pre class=\"language-console\"><code>$ git branch -d testing\nerror: The branch 'testing' is not fully merged.\nIf you are sure you want to delete it, run 'git branch -D testing'.\n</code></pre></div><p>如果真的想要删除分支并丢掉那些工作，如同帮助信息里所指出的，可以使用 <code>-D</code> 选项强制删除它。</p>\n<div class=\"hint-container tip\">\n<p class=\"hint-container-title\">提示</p>\n<p>上面描述的选项 <code>--merged</code> 和 <code>--no-merged</code> 会在没有给定提交或分支名作为参数时， 分别列出已合并或未合并到 <strong>当前</strong> 分支的分支。</p>\n<p>你总是可以提供一个附加的参数来查看其它分支的合并状态而不必检出它们。 例如，尚未合并到 <code>master</code> 分支的有哪些？</p>\n<div class=\"language-console\" data-ext=\"console\" data-title=\"console\"><pre class=\"language-console\"><code>$ git checkout testing\n$ git branch --no-merged master\ntopicA\nfeatureB\n</code></pre></div></div>\n<h2>分支开发工作流</h2>\n<p>在整个项目开发周期的不同阶段，你可以同时拥有多个开发的分支；你可以定期地把某些主题分支合并入其他分支中。</p>\n<p>只在 <code>master</code> 分支上保留完全稳定的代码——有可能仅仅是已经发布或即将发布的代码。 他们还有一些名为 <code>develop</code> 或者 <code>next</code> 的平行分支，被用来做后续开发或者测试稳定性——这些分支不必保持绝对稳定，但是一旦达到稳定状态，它们就可以被合并入 <code>master</code> 分支了。</p>\n<figure><img src=\"https://raw.githubusercontent.com/dribble-njr/typora-njr/master/img/lr-branches-2.png\" alt=\"趋于稳定分支的工作流（“silo”）视图。\" tabindex=\"0\" loading=\"lazy\"><figcaption>趋于稳定分支的工作流（“silo”）视图。</figcaption></figure>\n<h2>远程分支</h2>\n<p>远程分支以 <code>&lt;remote&gt;/&lt;branch&gt;</code> 的形式命名。 例如，<code>origin/master</code> 分支。</p>\n<p>假设你的网络里有一个在 <code>git.ourcompany.com</code> 的 Git 服务器。</p>\n<p>如果你从这里克隆，Git 的 <code>clone</code> 命令会为你自动将该远程分支命名为 <code>origin</code>，拉取它的所有数据，创建一个指向它的 <code>master</code> 分支的指针，并且在本地将其命名为 <code>origin/master</code>。</p>\n<p>Git 也会给你一个与 <code>origin</code> 的 <code>master</code> 分支在指向同一个地方的本地 <code>master</code> 分支。</p>\n<figure><img src=\"https://raw.githubusercontent.com/dribble-njr/typora-njr/master/img/20240207145750.png\" alt=\"克隆之后的服务器与本地仓库\" tabindex=\"0\" loading=\"lazy\"><figcaption>克隆之后的服务器与本地仓库</figcaption></figure>\n<p>如果你在本地的 <code>master</code> 分支做了一些工作，在同一段时间内有其他人推送提交到 <code>git.ourcompany.com</code> 并且更新了它的 <code>master</code> 分支，这就是说你们的提交历史已走向不同的方向。</p>\n<figure><img src=\"https://raw.githubusercontent.com/dribble-njr/typora-njr/master/img/20240207145827.png\" alt=\"本地与远程的工作可以分叉\" tabindex=\"0\" loading=\"lazy\"><figcaption>本地与远程的工作可以分叉</figcaption></figure>\n<p>如果要与给定的远程仓库同步数据，运行 <code>git fetch &lt;remote&gt;</code> 命令（在本例中为 <code>git fetch origin</code>）。</p>\n<div class=\"hint-container tip\">\n<p class=\"hint-container-title\">提示</p>\n<p>通常可以省略 <code>&lt;remote&gt;</code>。</p>\n</div>\n<p>这个命令查找 <code>origin</code> 是哪一个服务器（在本例中，它是 <code>git.ourcompany.com</code>），从中抓取本地没有的数据，并且更新本地数据库，移动 <code>origin/master</code> 指针到更新之后的位置。</p>\n<figure><img src=\"https://raw.githubusercontent.com/dribble-njr/typora-njr/master/img/20240207145928.png\" alt=\"git fetch 更新你的远程跟踪分支\" tabindex=\"0\" loading=\"lazy\"><figcaption>git fetch 更新你的远程跟踪分支</figcaption></figure>\n<p>为了演示有多个远程仓库与远程分支的情况，我们假定你有另一个内部 Git 服务器，仅服务于你的某个敏捷开发团队。这个服务器位于 <code>git.team1.ourcompany.com</code>。 你可以运行 <code>git remote add</code> 命令添加一个新的远程仓库引用到当前的项目。将这个远程仓库命名为 <code>teamone</code>，将其作为完整 URL 的缩写。</p>\n<figure><img src=\"https://raw.githubusercontent.com/dribble-njr/typora-njr/master/img/20240207150645.png\" alt=\"添加另一个远程仓库\" tabindex=\"0\" loading=\"lazy\"><figcaption>添加另一个远程仓库</figcaption></figure>\n<p>现在，可以运行 <code>git fetch teamone</code> 来抓取远程仓库 <code>teamone</code> 有而本地没有的数据。 因为那台服务器上现有的数据是 <code>origin</code> 服务器上的一个子集， 所以 Git 并不会抓取数据而是会设置远程跟踪分支 <code>teamone/master</code> 指向 <code>teamone</code> 的 <code>master</code> 分支。</p>\n<figure><img src=\"https://raw.githubusercontent.com/dribble-njr/typora-njr/master/img/20240207150743.png\" alt=\"远程跟踪分支 teamone/master\" tabindex=\"0\" loading=\"lazy\"><figcaption>远程跟踪分支 teamone/master</figcaption></figure>\n<h3>推送</h3>\n<p>本地的分支并不会自动与远程仓库同步——你必须显式地推送想要分享的分支。</p>\n<p>如果希望和别人一起在名为 <code>serverfix</code> 的分支上工作，你可以像推送第一个分支那样推送它。 运行 <code>git push &lt;remote&gt; &lt;branch&gt;</code>:</p>\n<div class=\"language-console\" data-ext=\"console\" data-title=\"console\"><pre class=\"language-console\"><code>$ git push origin serverfix\nCounting objects: 24, done.\nDelta compression using up to 8 threads.\nCompressing objects: 100% (15/15), done.\nWriting objects: 100% (24/24), 1.91 KiB | 0 bytes/s, done.\nTotal 24 (delta 2), reused 0 (delta 0)\nTo https://github.com/schacon/simplegit\n\n- [new branch] serverfix -&gt; serverfix\n</code></pre></div><p>你也可以运行 <code>git push origin serverfix:serverfix</code>， 它会「推送本地的 <code>serverfix</code> 分支，将其作为远程仓库的 <code>serverfix</code> 分支」。</p>\n<p>可以通过这种格式来推送本地分支到一个命名不相同的远程分支。如果并不想让远程仓库上的分支叫做 <code>serverfix</code>，可以运行 <code>git push origin serverfix:awesomebranch</code> 来将本地的 <code>serverfix</code> 分支推送到远程仓库上的 <code>awesomebranch</code> 分支。</p>\n<p>下一次其他协作者从服务器上抓取数据时，他们会在本地生成一个远程分支 <code>origin/serverfix</code>，指向服务器的 <code>serverfix</code> 分支的引用：</p>\n<div class=\"language-console\" data-ext=\"console\" data-title=\"console\"><pre class=\"language-console\"><code>$ git fetch origin\nremote: Counting objects: 7, done.\nremote: Compressing objects: 100% (2/2), done.\nremote: Total 3 (delta 0), reused 3 (delta 0)\nUnpacking objects: 100% (3/3), done.\nFrom https://github.com/schacon/simplegit\n * [new branch]      serverfix    -&gt; origin/serverfix\n</code></pre></div><p>要特别注意的一点是使用 <code>git fetch</code> 获取到新的远程跟踪分支时，本地不会有一个新的 <code>serverfix</code> 分支——只有一个不可以修改的 <code>origin/serverfix</code> 指针。</p>\n<p>可以运行 <code>git merge origin/serverfix</code> 将这些工作合并到当前所在的分支。 如果想要在自己的 <code>serverfix</code> 分支上工作，可以将其建立在远程跟踪分支之上：</p>\n<div class=\"language-console\" data-ext=\"console\" data-title=\"console\"><pre class=\"language-console\"><code>$ git checkout -b serverfix origin/serverfix\nBranch serverfix set up to track remote branch serverfix from origin.\nSwitched to a new branch 'serverfix'\n</code></pre></div><p>这会给你一个用于工作的本地分支，并且起点位于 <code>origin/serverfix</code>。</p>\n<div class=\"hint-container tip\">\n<p class=\"hint-container-title\">提示</p>\n<p>也可以使用 <code>git switch &lt;branch&gt;</code>，Git 会自动新建一个分支并跟踪拉取下来的远程分支。</p>\n</div>\n<h3>拉取</h3>\n<p>当 <code>git fetch</code> 命令从服务器上抓取本地没有的数据时，它并不会修改工作目录中的内容。 它只会获取数据然后让你自己合并。</p>\n<p>然而，有一个命令叫作 <code>git pull</code> 在大多数情况下它的含义是一个 <code>git fetch</code> 紧接着一个 <code>git merge</code> 命令。</p>\n<div class=\"hint-container tip\">\n<p class=\"hint-container-title\">提示</p>\n<p>由于 <code>git pull</code> 的魔法经常令人困惑所以通常单独显式地使用 <code>fetch</code> 与 <code>merge</code> 命令会更好一些。</p>\n</div>\n<h3>删除</h3>\n<p>假设你已经通过远程分支做完所有的工作了——也就是说你和你的协作者已经完成了一个特性， 并且将其合并到了远程仓库的 <code>master</code> 分支（或任何其他稳定代码分支）。 可以运行带有 <code>--delete</code> 选项的 <code>git push</code> 命令来删除一个远程分支。 如果想要从服务器上删除 <code>serverfix</code> 分支，运行下面的命令：</p>\n<div class=\"language-console\" data-ext=\"console\" data-title=\"console\"><pre class=\"language-console\"><code>$ git push origin --delete serverfix\nTo https://github.com/schacon/simplegit\n\n- [deleted] serverfix\n</code></pre></div><p>基本上这个命令做的只是从服务器上移除这个指针。 Git 服务器通常会保留数据一段时间直到垃圾回收运行，所以如果不小心删除掉了，通常是很容易恢复的。</p>\n<h2>变基</h2>\n<p>在 Git 中整合来自不同分支的修改主要有两种方法：<code>merge</code> 以及 <code>rebase</code>。</p>\n<h3>基本操作</h3>\n<p>当你的项目目前分叉到两个分支，又各自提交了更新。</p>\n<figure><img src=\"https://raw.githubusercontent.com/dribble-njr/typora-njr/master/img/20240207161737.png\" alt=\"分叉的提交历史\" tabindex=\"0\" loading=\"lazy\"><figcaption>分叉的提交历史</figcaption></figure>\n<p>之前介绍过，整合分支最容易的方法是 <code>merge</code> 命令。 它会把两个分支的最新快照（<code>C3</code> 和 <code>C4</code>）以及二者最近的共同祖先（<code>C2</code>）进行三方合并，合并的结果是生成一个新的快照（并提交）。</p>\n<figure><img src=\"https://raw.githubusercontent.com/dribble-njr/typora-njr/master/img/20240207161821.png\" alt=\"通过合并操作来整合分叉的历史\" tabindex=\"0\" loading=\"lazy\"><figcaption>通过合并操作来整合分叉的历史</figcaption></figure>\n<p>其实，还有一种方法：你可以提取在 <code>C4</code> 中引入的补丁和修改，然后在 <code>C3</code> 的基础上应用一次。 在 Git 中，这种操作就叫做「变基（rebase）」。 你可以使用 <code>rebase</code> 命令将提交到某一分支上的所有修改都移至另一分支上，就好像 <strong>重新播放</strong> 一样。</p>\n<p>在这个例子中，你可以检出 <code>experiment</code> 分支，然后将它变基到 <code>master</code> 分支上：</p>\n<div class=\"language-bash\" data-ext=\"sh\" data-title=\"sh\"><pre class=\"language-bash\"><code>$ <span class=\"token function\">git</span> checkout experiment\n$ <span class=\"token function\">git</span> rebase master\nFirst, rewinding <span class=\"token function\">head</span> to replay your work on <span class=\"token function\">top</span> of it<span class=\"token punctuation\">..</span>.\nApplying: added staged <span class=\"token builtin class-name\">command</span>\n</code></pre></div><p>它的原理是首先找到这两个分支（即当前分支 <code>experiment</code>、变基操作的目标基底分支 <code>master</code>） 的最近共同祖先 <code>C2</code>，然后对比当前分支相对于该祖先的历次提交，提取相应的修改并存为临时文件，然后将当前分支指向目标基底 <code>C3</code>, 最后以此将之前另存为临时文件的修改依序应用。</p>\n<figure><img src=\"https://raw.githubusercontent.com/dribble-njr/typora-njr/master/img/20240207162127.png\" alt=\"将 C4 中的修改变基到 C3 上\" tabindex=\"0\" loading=\"lazy\"><figcaption>将 C4 中的修改变基到 C3 上</figcaption></figure>\n<p>现在回到 master 分支，进行一次快进合并。</p>\n<div class=\"language-bash\" data-ext=\"sh\" data-title=\"sh\"><pre class=\"language-bash\"><code>$ <span class=\"token function\">git</span> checkout master\n$ <span class=\"token function\">git</span> merge experiment\n</code></pre></div><figure><img src=\"https://raw.githubusercontent.com/dribble-njr/typora-njr/master/img/20240207163046.png\" alt=\"master 分支的快进合并\" tabindex=\"0\" loading=\"lazy\"><figcaption>master 分支的快进合并</figcaption></figure>\n<p>这两种整合方法的最终结果没有任何区别，但是变基使得提交历史更加整洁。你在查看一个经过变基的分支的历史记录时会发现，尽管实际的开发工作是并行的，但它们看上去就像是串行的一样，提交历史是一条直线没有分叉。</p>\n<p>请注意，无论是通过变基，还是通过三方合并，整合的最终结果所指向的快照始终是一样的，只不过提交历史不同罢了。变基是将一系列提交按照原有次序依次应用到另一分支上，而合并是把最终结果合在一起。</p>\n<h3>变基的风险</h3>\n<p>呃，奇妙的变基也并非完美无缺，要用它得遵守一条准则：</p>\n<p><strong>如果提交存在于你的仓库之外，而别人可能基于这些提交进行开发，那么不要执行变基。</strong></p>\n<p>因为 <code>rebase</code> 会修改 <code>commit</code>，若你拉取的是 <code>rebase</code> 后的代码，则会遇到冲突。</p>\n<p>若发生 <code>git pull</code> 拉取冲突，需要使用 <code>git pull --rebase</code> 解决。</p>\n<h3>变基 vs. 合并</h3>\n<p>有一种观点认为，仓库的提交历史即是 <strong>记录实际发生过什么</strong>。 它是针对历史的文档，本身就有价值，不能乱改。从这个角度看来，改变提交历史是一种亵渎，你使用 <strong>谎言</strong> 掩盖了实际发生过的事情。 如果由合并产生的提交历史是一团糟怎么办？ 既然事实就是如此，那么这些痕迹就应该被保留下来，让后人能够查阅。</p>\n<p>另一种观点则正好相反，他们认为提交历史是 <strong>项目过程中发生的事</strong>。 没人会出版一本书的第一版草稿，软件维护手册也是需要反复修订才能方便使用。 持这一观点的人会使用 <code>rebase</code> 及 <code>filter-branch</code> 等工具来编写故事，怎么方便后来的读者就怎么写。</p>\n<p>总的原则是，只对尚未推送或分享给别人的本地修改执行变基操作清理历史，从不对已推送至别处的提交执行变基操作，这样，你才能享受到两种方式带来的便利。</p>\n",
      "image": "https://raw.githubusercontent.com/dribble-njr/typora-njr/master/img/image-20231012172546292.png",
      "date_published": "2024-02-07T00:00:00.000Z",
      "date_modified": "2024-02-07T08:47:58.000Z",
      "authors": [],
      "tags": [
        "READING"
      ]
    },
    {
      "title": "GET 和 POST 的区别",
      "url": "https://dribble-njr.github.io/blog/blog/computer-science/networking/003-get-post-difference.html",
      "id": "https://dribble-njr.github.io/blog/blog/computer-science/networking/003-get-post-difference.html",
      "summary": "概述 GET 和 POST 是 HTTP 协议中发送请求的方法。 GET：请求资源，从服务器获取数据； POST：将数据提交到指定地址。 二者本质上都是 TCP 链接，因此本质上没有区别，但由于 HTTP 规定和浏览器/服务器的限制，导致它们在实际操作中会有一定区别。 区别 GET 在浏览器回退时是无害的，而 POST 会再次提交请求。 GET 产生的...",
      "content_html": "<h2>概述</h2>\n<p>GET 和 POST 是 HTTP 协议中发送请求的方法。</p>\n<ul>\n<li>GET：请求资源，从服务器获取数据；</li>\n<li>POST：将数据提交到指定地址。</li>\n</ul>\n<p>二者本质上都是 TCP 链接，因此本质上<strong>没有区别</strong>，但由于 HTTP 规定和浏览器/服务器的限制，导致它们在实际操作中会有一定区别。</p>\n<h2>区别</h2>\n<ul>\n<li>GET 在浏览器回退时是无害的，而 POST 会再次提交请求。</li>\n<li>GET 产生的 URL 地址可以被 Bookmarked，而 POST 不可以。</li>\n<li>GET 请求会被浏览器主动 cache，而 POST 不会，除非手动设置。</li>\n<li>GET 请求只能进行 url 编码，而 POST 支持多种编码方式。</li>\n<li>GET 请求参数会被完整保留在浏览器历史记录里，而 POST 中的参数不会被保留。</li>\n<li>GET 请求在 URL 中传送的参数是有长度限制的，而 POST 没有。</li>\n<li>对参数的数据类型，GET 只接受 ASCII 字符，而 POST 没有限制。</li>\n<li>GET 比 POST 更不安全，因为参数直接暴露在 URL 上，所以不能用来传递敏感信息。</li>\n<li>GET 参数通过 URL 传递，POST 放在 Request body 中。</li>\n<li>GET 方法是安全且幂等的，POST 方法是<strong>不安全且不幂等</strong>的。</li>\n</ul>\n<div class=\"hint-container tip\">\n<p class=\"hint-container-title\">提示</p>\n<ul>\n<li>安全：请求方法不会破坏服务器上的资源；</li>\n<li>幂等：执行多次相同的操作，结果都是相同的。</li>\n</ul>\n</div>\n<h2>误区</h2>\n<h3>参数长度</h3>\n<p>GET 参数有长度限制，但这是因为浏览器对 URL 的长度限制，而不是 HTTP 协议本身对参数长度的限制。HTTP 同样对 POST 参数长度没有限制，而是靠服务器的设置来限制大小的。</p>\n<h3>安全性</h3>\n<p>POST <strong>相对</strong>比 GET 安全性要高。</p>\n<p>通过 GET 提交的请求都将显示到 URL 上，页面会被浏览器缓存，其他人查看历史记录会看到提交的数据。</p>\n<p>这里的相对在于：<strong>HTTP 本身是明文传输的协议</strong>，无论使用 GET 还是 POST 都有可能受到中间人攻击而造成数据泄露。</p>\n<p>如果 HTTP 链接使用 SSL/TLS，那么 GET 参数也会被加密，但是仍然会在某些地方出现，比如服务器日志、浏览器插件和其他应用。而 POST 数据会被加密并且不会被任何方式泄露。</p>\n<div class=\"hint-container tip\">\n<p class=\"hint-container-title\">提示</p>\n<p>因此如果想要保证总是安全地传输数据，需要使用 HTTPS 上的 POST。</p>\n</div>\n<h3>Request Body</h3>\n<p>GET 可以带 Request Body，但不能保证一定能被接收到。如果你用 GET 请求，在 Request Body 携带数据，不同服务器的处理方式也是不同的，有些服务器会帮你读出数据，有些服务器直接忽略。</p>\n<h3>数据包</h3>\n<p>对于 GET 请求，浏览器会把 http header 和 data 一并发送出去，服务器响应 200（返回数据）。</p>\n<p>对于 POST，浏览器先发送 header，服务器响应 100 continue，浏览器再发送 data，服务器响应 200 ok。</p>\n<p>并不是所有浏览器都会在 POST 中发送两次包，Firefox 就只发送一次。</p>\n<h2>参考链接</h2>\n<ul>\n<li><a href=\"https://stackoverflow.com/questions/3063530/what-is-the-difference-between-get-and-post-encryption\" target=\"_blank\" rel=\"noopener noreferrer\">https - What is the difference between GET and POST encryption? - Stack Overflow</a></li>\n<li><a href=\"https://mp.weixin.qq.com/s?__biz=MzI3NzIzMzg3Mw==&amp;mid=100000054&amp;idx=1&amp;sn=71f6c214f3833d9ca20b9f7dcd9d33e4#rd\" target=\"_blank\" rel=\"noopener noreferrer\">99%的人都理解错了 HTTP 中 GET 与 POST 的区别 (qq.com)</a></li>\n<li><a href=\"https://github.com/febobo/web-interview/issues/145\" target=\"_blank\" rel=\"noopener noreferrer\">面试官：说一下 GET 和 POST 的区别？ · Issue #145 · febobo/web-interview (github.com)</a></li>\n</ul>\n",
      "date_published": "2022-04-24T00:00:00.000Z",
      "date_modified": "2024-02-07T05:30:24.000Z",
      "authors": [],
      "tags": [
        "计算机网络"
      ]
    },
    {
      "title": "TCP 与 UDP 的区别",
      "url": "https://dribble-njr.github.io/blog/blog/computer-science/networking/008-tcp-udp.html",
      "id": "https://dribble-njr.github.io/blog/blog/computer-science/networking/008-tcp-udp.html",
      "summary": "TCP 和 UDP 都是传输层协议，属于 TCP/IP 协议族。 UDP 用户数据报协议（User Datagram Protocol，UDP）用来处理数据包，是一种无连接的协议，它的特点如下： 无连接 不需要像 TCP 一样进行三次握手进行连接，并且也只是数据报文的搬运工，不会对报文进行任何的加工处理。 单播、多播、广播 UDP 支持一对一、一对多、...",
      "content_html": "<p>TCP 和 UDP 都是传输层协议，属于 TCP/IP 协议族。</p>\n<h2>UDP</h2>\n<p>用户数据报协议（User Datagram Protocol，UDP）用来处理数据包，是一种无连接的协议，它的特点如下：</p>\n<p><strong>无连接</strong></p>\n<p>不需要像 TCP 一样进行三次握手进行连接，并且也只是数据报文的搬运工，不会对报文进行任何的加工处理。</p>\n<p><strong>单播、多播、广播</strong></p>\n<p>UDP 支持一对一、一对多、多对多、多对一的传输方式。</p>\n<p><strong>面向报文</strong></p>\n<p>在发送端，应用层将数据传递给传输层，UDP 只会给数据增加一个 UDP 头标识这是一个 UDP 协议报文，然后就传给网络层，对应用层交付的报文既不合并也不拆分，保留报文的边界，一次发送一个报文。</p>\n<p>在接收端，网络层将 UDP 数据报传输给 UDP，UDP 去除首部后就会将数据原封不动地传递给应用层，一次交付一个完整的报文。</p>\n<p><strong>不可靠</strong></p>\n<p>首先体现在无连接上，通信双方想发就发，必然不可靠。没有像 TCP 做重传机制、流量控制和拥塞控制。</p>\n<p><strong>头部开销小</strong></p>\n<p>UDP 头部只有 8 字节，相比 TCP 20 个字节少得多，传输数据时比较高效。</p>\n<p><strong>应用场景</strong></p>\n<p>UDP 应用于效率要求高，但可靠性要求相对较低的场景，例如：即时通讯，速度要求高，但是偶尔出现断续不是太大问题，完全可以不使用重传机制，场景有在线视频、网络语音通话、广播通信等。</p>\n<h2>TCP</h2>\n<p>传输控制协议（Transmission Control Protocol，TCP）是一种面向连接的、可靠的、基于字节流的传输层通讯协议，它的特点如下：</p>\n<p><strong>面向连接</strong></p>\n<p>在发送前必须进行 TCP 三次握手在两端建立连接。</p>\n<p><strong>仅支持单播传输</strong></p>\n<p>每个 TCP 只能进行一对一传输，不支持多播和广播的形式。</p>\n<p><strong>面向字节流</strong></p>\n<p>TCP 不像 UDP 那样一个一个报文独立传输，而是在不保留报文边界的情况下以字节流方式进行传输。</p>\n<p><strong>可靠传输</strong></p>\n<p>TCP 为了实现可靠传输，使用了重传机制、流量控制和拥塞控制。</p>\n<p><strong>头部开销大</strong></p>\n<p>TCP 头部最小 20 个字节，最大 60 个字节，传输效率慢。</p>\n<p><strong>应用场景</strong></p>\n<p>TCP 应用于效率要求相对低，但可靠性要求高的场景，例如：文件传输、邮件传输等。</p>\n<h2>区别</h2>\n<p>|              | UDP                   | TCP                                          |<br>\n|</p>\n",
      "date_published": "2022-05-06T00:00:00.000Z",
      "date_modified": "2024-02-07T05:30:24.000Z",
      "authors": [],
      "tags": [
        "计算机网络"
      ]
    },
    {
      "title": "跨域",
      "url": "https://dribble-njr.github.io/blog/blog/frontend/browser/005-cross-domain.html",
      "id": "https://dribble-njr.github.io/blog/blog/frontend/browser/005-cross-domain.html",
      "summary": "跨域是因为浏览器的同源策略，协议、域名、端口三者不一致即会造成跨域问题。 CORS 简单请求和非简单请求 简单请求 请求方法： HEAD GET POST 请求头： Accept Accept-Language Content-Language Last-Event-ID Content-Type 对于简单请求，浏览器会在请求头信息增加一个 origi...",
      "content_html": "<p>跨域是因为浏览器的同源策略，协议、域名、端口三者不一致即会造成跨域问题。</p>\n<h2>CORS</h2>\n<p>简单请求和非简单请求</p>\n<h3>简单请求</h3>\n<p>请求方法：</p>\n<ul>\n<li>HEAD</li>\n<li>GET</li>\n<li>POST</li>\n</ul>\n<p>请求头：</p>\n<ul>\n<li>Accept</li>\n<li>Accept-Language</li>\n<li>Content-Language</li>\n<li>Last-Event-ID</li>\n<li>Content-Type</li>\n</ul>\n<p>对于简单请求，浏览器会在请求头信息增加一个 origin 字段，该字段用来说明本次请求来自哪个源：协议+端口+域名。</p>\n<p>服务器根据这个值来决定是否同意这次请求，如果 origin 指定的源在允许范围内，服务器就返回如下响应头：</p>\n<div class=\"language-text\" data-ext=\"text\" data-title=\"text\"><pre class=\"language-text\"><code>Access-Control-Allow-Origin: http://api.bob.com 和 origin 一致\nAccess-Control-Allow-Credentials: true\nAccess-Control-Expose-Headers: FooBar\nContent-Type: text/html; charset=utf-8\n</code></pre></div><p>服务器至少设置 Access-Control-Allow-Origin。</p>\n<h3>非简单请求</h3>\n<p>需要进行 options 预检请求。</p>\n<p>请求头</p>\n<div class=\"language-text\" data-ext=\"text\" data-title=\"text\"><pre class=\"language-text\"><code>Access-Control-Request-Method 必须\nAccess-Control-Request-Headers 逗号分隔符，指定请求会额外发送的头信息字段\n</code></pre></div><p>响应头：</p>\n<div class=\"language-text\" data-ext=\"text\" data-title=\"text\"><pre class=\"language-text\"><code>Access-Control-Allow-Origin: http://api.bob.com 和 origin 一致\nAccess-Control-Allow-Methods: GET, POST, PUT\nAccess-Control-Allow-Credentials: true\nAccess-Control-Allow-Headers: FooBar\nAccess-Control-Max-Age: 1728000 本次预检的有效期，秒\n</code></pre></div>",
      "date_published": "2022-05-06T00:00:00.000Z",
      "date_modified": "2024-02-07T05:30:24.000Z",
      "authors": [],
      "tags": [
        "浏览器"
      ]
    },
    {
      "title": "输入 URL 后发生了什么",
      "url": "https://dribble-njr.github.io/blog/blog/frontend/browser/006-what-happens-after-entering-the-URL.html",
      "id": "https://dribble-njr.github.io/blog/blog/frontend/browser/006-what-happens-after-entering-the-URL.html",
      "summary": "先看看大致流程： 生成 HTTP 请求消息：当用户在浏览器中输入网址，浏览器就会对 URL 进行解析；然后浏览器会根据网址的含义来生成请求消息； 向 DNS 服务器查询 Web 服务器的 IP 地址：请求消息生成后，浏览器向 DNS 服务器查询域名对应的 IP 地址，然后委托操作系统（浏览器本身并没有网络通讯的能力）向 Web 服务器发送请求。 委托协...",
      "content_html": "<p>先看看大致流程：</p>\n<ol>\n<li>生成 HTTP 请求消息：当用户在浏览器中输入网址，浏览器就会对 URL 进行解析；然后浏览器会根据网址的含义来生成请求消息；</li>\n<li>向 DNS 服务器查询 Web 服务器的 IP 地址：请求消息生成后，浏览器向 DNS 服务器查询域名对应的 IP 地址，然后委托操作系统（浏览器本身并没有网络通讯的能力）向 Web 服务器发送请求。</li>\n<li>委托协议栈发送消息：查询到 IP 地址之后，浏览器就可以将消息委托给操作系统的协议栈（TCP/IP）发送给服务器。</li>\n<li>数字信息转换为电信号：通过协议栈将数据变成网络包后，网卡负责将数字信号转换为电信号。</li>\n</ol>\n<h2>生成 HTTP 请求消息</h2>\n<p>浏览器要做的第一步工作就是对 URL 进行解析，从而生成发送给 Web 服务器的请求消息。</p>\n<img src=\"/assets/image/computer-science/networking/010/parse-url.png\" alt=\"Web浏览器解析URL\" style=\"zoom:60%;\">\n<h3>省略文件名的情况</h3>\n<ol>\n<li>\n<p><a href=\"http://www.lab.glasscom.com/dir/\" target=\"_blank\" rel=\"noopener noreferrer\">http://www.lab.glasscom.com/dir/</a></p>\n<p>以 <code>/</code> 结尾代表访问默认文件，大多数情况下是 <code>index.html</code> 或者 <code>default.htm</code> 之类的文件。</p>\n</li>\n<li>\n<p><a href=\"http://www.lab.glasscom.com\" target=\"_blank\" rel=\"noopener noreferrer\">http://www.lab.glasscom.com</a></p>\n<p>省略结尾的 <code>/</code> 符，代表访问服务器根目录下的默认文件，也就是 <code>index.html</code> 或者 <code>default.htm</code>。</p>\n</li>\n<li>\n<p><a href=\"http://www.lab.glasscom.com/whatisthis\" target=\"_blank\" rel=\"noopener noreferrer\">http://www.lab.glasscom.com/whatisthis</a></p>\n<p>如果 Web 服务器上存在名 whatisthis 的文件，则作为文件名来处理；如果存在名为 whatisthis 的目录，则作为目录名来处。</p>\n</li>\n</ol>\n<h3>生成请求消息</h3>\n<p>对 URL 进行解析之后，浏览器确定了 Web 服务器和文件名，接下来就是根据这些信息来生成 HTTP 请求消息了。</p>\n<img src=\"/assets/image/computer-science/networking/010/message.png\" alt=\"消息格式\" style=\"zoom:60%;\">\n<h2>向 DNS 服务器查询域名 IP 地址</h2>\n<p>浏览器解析完 URL 并生成请求消息后，需要委托操作系统向服务器发送请求消息。</p>\n<p>但是在这之前，还需要知道服务器域名对应的 IP 地址。因此需要使用 DNS 服务器查询 IP 地址。</p>\n<p>DNS 服务器保存了域名和 IP 的对应关系。</p>\n<p>域名中用 <code>.</code> 来分隔，比如 <code>www.lab.glasscom.com.</code>，越往右层级越高，最后的一个点代表根域名，一般可以省略。</p>\n<p>根域的服务器信息保存在互联网中的所有 DNS 服务器中，这样任意一台服务器都可以找到并访问根服务器，从而找到其它服务器。</p>\n<figure><img src=\"/assets/image/computer-science/networking/010/DNS.png\" alt=\"DNS\" tabindex=\"0\" loading=\"lazy\"><figcaption>DNS</figcaption></figure>\n<h2>协议栈</h2>\n<p>通过 DNS 获取到服务器的 IP 地址后，浏览器就可以通过 socket 库把 HTTP 报文的传输工作委托给操作系统中的<strong>协议栈</strong>。</p>\n<figure><img src=\"/assets/image/computer-science/networking/010/TCP-IP.png\" alt=\"客户端\" tabindex=\"0\" loading=\"lazy\"><figcaption>客户端</figcaption></figure>\n<p>其中应用程序当然为应用层，协议栈中的 TCP/UDP 为传输层，他们会接收应用程序的委托执行收发数据的操作。</p>\n<blockquote>\n<p>像浏览器、邮件等一般的应用程序都是使用 TCP 收发数据的，而像 DNS 查询等收发较短的控制数据的时候则使用 UDP。</p>\n</blockquote>\n<p>在传送数据时，数据会切分成一个个网络包，而 IP 协议为网络层，负责控制网络包的发给通信对象。</p>\n<p>IP 中还包括 ICMP 协议和 ARP 协议。ICMP 用于告知网络包传输过程中产生的错误及各种控制消息，ARP 用于根据 IP 地址查询相应的 MAC 地址。</p>\n<h2>网卡</h2>\n",
      "image": "https://dribble-njr.github.io/blog/blog/assets/image/computer-science/networking/010/DNS.png",
      "date_published": "2021-12-11T00:00:00.000Z",
      "date_modified": "2024-02-07T05:30:24.000Z",
      "authors": [],
      "tags": [
        "计算机网络"
      ]
    },
    {
      "title": "命令模式",
      "url": "https://dribble-njr.github.io/blog/blog/reading/patterns/vanilla/01-command-pattern.html",
      "id": "https://dribble-njr.github.io/blog/blog/reading/patterns/vanilla/01-command-pattern.html",
      "summary": "命令模式 通过命令模式，我们可以将执行特定任务的对象与调用方法的对象 解耦。 假设我们有一个在线食品配送平台。用户可以下单、跟踪和取消订单。 在 OrderManager 类中，我们可以直接访问 placeOrder、trackOrder 和 cancelOrder 方法。 不过，直接在 manager 实例上调用方法也有缺点。我们可能会决定重新命名某...",
      "content_html": "<h2>命令模式</h2>\n<p>通过命令模式，我们可以将执行特定任务的对象与调用方法的对象 <em>解耦</em>。</p>\n<p>假设我们有一个在线食品配送平台。用户可以下单、跟踪和取消订单。</p>\n<div class=\"language-javascript\" data-ext=\"js\" data-title=\"js\"><pre class=\"language-javascript\"><code><span class=\"token keyword\">class</span> <span class=\"token class-name\">OrderManager</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token function\">constructor</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>orders <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span>\n  <span class=\"token punctuation\">}</span>\n\n  <span class=\"token function\">placeOrder</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">order<span class=\"token punctuation\">,</span> id</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>orders<span class=\"token punctuation\">.</span><span class=\"token function\">push</span><span class=\"token punctuation\">(</span>id<span class=\"token punctuation\">)</span>\n    <span class=\"token keyword\">return</span> <span class=\"token template-string\"><span class=\"token template-punctuation string\">`</span><span class=\"token string\">You have successfully ordered </span><span class=\"token interpolation\"><span class=\"token interpolation-punctuation punctuation\">${</span>order<span class=\"token interpolation-punctuation punctuation\">}</span></span><span class=\"token string\"> (</span><span class=\"token interpolation\"><span class=\"token interpolation-punctuation punctuation\">${</span>id<span class=\"token interpolation-punctuation punctuation\">}</span></span><span class=\"token string\">)</span><span class=\"token template-punctuation string\">`</span></span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span>\n\n  <span class=\"token function\">trackOrder</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">id</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">return</span> <span class=\"token template-string\"><span class=\"token template-punctuation string\">`</span><span class=\"token string\">Your order </span><span class=\"token interpolation\"><span class=\"token interpolation-punctuation punctuation\">${</span>id<span class=\"token interpolation-punctuation punctuation\">}</span></span><span class=\"token string\"> will arrive in 20 minutes.</span><span class=\"token template-punctuation string\">`</span></span>\n  <span class=\"token punctuation\">}</span>\n\n  <span class=\"token function\">cancelOrder</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">id</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>orders <span class=\"token operator\">=</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>orders<span class=\"token punctuation\">.</span><span class=\"token function\">filter</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">order</span> <span class=\"token operator\">=&gt;</span> order<span class=\"token punctuation\">.</span>id <span class=\"token operator\">!==</span> id<span class=\"token punctuation\">)</span>\n    <span class=\"token keyword\">return</span> <span class=\"token template-string\"><span class=\"token template-punctuation string\">`</span><span class=\"token string\">You have canceled your order </span><span class=\"token interpolation\"><span class=\"token interpolation-punctuation punctuation\">${</span>id<span class=\"token interpolation-punctuation punctuation\">}</span></span><span class=\"token template-punctuation string\">`</span></span>\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n</code></pre></div><p>在 <code>OrderManager</code> 类中，我们可以直接访问 <code>placeOrder</code>、<code>trackOrder</code> 和 <code>cancelOrder</code> 方法。</p>\n<div class=\"language-javascript\" data-ext=\"js\" data-title=\"js\"><pre class=\"language-javascript\"><code><span class=\"token keyword\">const</span> manager <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">OrderManager</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n\nmanager<span class=\"token punctuation\">.</span><span class=\"token function\">placeOrder</span><span class=\"token punctuation\">(</span><span class=\"token string\">'Pad Thai'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'1234'</span><span class=\"token punctuation\">)</span>\nmanager<span class=\"token punctuation\">.</span><span class=\"token function\">trackOrder</span><span class=\"token punctuation\">(</span><span class=\"token string\">'1234'</span><span class=\"token punctuation\">)</span>\nmanager<span class=\"token punctuation\">.</span><span class=\"token function\">cancelOrder</span><span class=\"token punctuation\">(</span><span class=\"token string\">'1234'</span><span class=\"token punctuation\">)</span>\n</code></pre></div><p>不过，直接在 <code>manager</code> 实例上调用方法也有缺点。我们可能会决定重新命名某些方法，或者方法的功能发生变化。</p>\n<p>假设我们现在不调用 <code>placeOrder</code>，而是将其重命名为 <code>addOrder</code>！这意味着我们必须确保不在代码库的任何地方调用 <code>placeOrder</code> 方法，这在大型应用程序中可能会非常棘手。</p>\n<p>相反，我们希望将这些方法与管理器对象分离，并为每个命令创建单独的命令函数！</p>\n<p>让我们重构 <code>OrderManager</code> 类：它将不再有 <code>placeOrder</code>、<code>cancelOrder</code> 和 <code>trackOrder</code> 方法，而只有一个方法：<code>execute</code>。该方法将执行给定的任何命令。</p>\n<p>每个命令都应能访问 <code>OrderManager</code> 的 <code>orders</code>，我们将把它作为第一个参数传递。</p>\n<div class=\"language-javascript\" data-ext=\"js\" data-title=\"js\"><pre class=\"language-javascript\"><code><span class=\"token keyword\">class</span> <span class=\"token class-name\">OrderManager</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token function\">constructor</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>orders <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span>\n  <span class=\"token punctuation\">}</span>\n\n  <span class=\"token function\">execute</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">command<span class=\"token punctuation\">,</span> <span class=\"token operator\">...</span>args</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">return</span> command<span class=\"token punctuation\">.</span><span class=\"token function\">execute</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>orders<span class=\"token punctuation\">,</span> <span class=\"token operator\">...</span>args<span class=\"token punctuation\">)</span>\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n</code></pre></div><p>我们需要为订单管理器创建三个命令：</p>\n<ul>\n<li><code>PlaceOrderCommand</code></li>\n<li><code>CancelOrderCommand</code></li>\n<li><code>TrackOrderCommand</code></li>\n</ul>\n<div class=\"language-javascript\" data-ext=\"js\" data-title=\"js\"><pre class=\"language-javascript\"><code><span class=\"token keyword\">class</span> <span class=\"token class-name\">Command</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token function\">constructor</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">execute</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>execute <span class=\"token operator\">=</span> execute\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">function</span> <span class=\"token function\">PlaceOrderCommand</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">order<span class=\"token punctuation\">,</span> id</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">return</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Command</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">orders</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=&gt;</span> <span class=\"token punctuation\">{</span>\n    orders<span class=\"token punctuation\">.</span><span class=\"token function\">push</span><span class=\"token punctuation\">(</span>id<span class=\"token punctuation\">)</span>\n    <span class=\"token keyword\">return</span> <span class=\"token template-string\"><span class=\"token template-punctuation string\">`</span><span class=\"token string\">You have successfully ordered </span><span class=\"token interpolation\"><span class=\"token interpolation-punctuation punctuation\">${</span>order<span class=\"token interpolation-punctuation punctuation\">}</span></span><span class=\"token string\"> (</span><span class=\"token interpolation\"><span class=\"token interpolation-punctuation punctuation\">${</span>id<span class=\"token interpolation-punctuation punctuation\">}</span></span><span class=\"token string\">)</span><span class=\"token template-punctuation string\">`</span></span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">function</span> <span class=\"token function\">CancelOrderCommand</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">id</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">return</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Command</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">orders</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=&gt;</span> <span class=\"token punctuation\">{</span>\n    orders <span class=\"token operator\">=</span> orders<span class=\"token punctuation\">.</span><span class=\"token function\">filter</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">order</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=&gt;</span> order<span class=\"token punctuation\">.</span>id <span class=\"token operator\">!==</span> id<span class=\"token punctuation\">)</span>\n    <span class=\"token keyword\">return</span> <span class=\"token template-string\"><span class=\"token template-punctuation string\">`</span><span class=\"token string\">You have canceled your order </span><span class=\"token interpolation\"><span class=\"token interpolation-punctuation punctuation\">${</span>id<span class=\"token interpolation-punctuation punctuation\">}</span></span><span class=\"token template-punctuation string\">`</span></span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">function</span> <span class=\"token function\">TrackOrderCommand</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">id</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">return</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Command</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=&gt;</span> <span class=\"token template-string\"><span class=\"token template-punctuation string\">`</span><span class=\"token string\">Your order </span><span class=\"token interpolation\"><span class=\"token interpolation-punctuation punctuation\">${</span>id<span class=\"token interpolation-punctuation punctuation\">}</span></span><span class=\"token string\"> will arrive in 20 minutes.</span><span class=\"token template-punctuation string\">`</span></span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">}</span>\n</code></pre></div><p>完美！现在，这些方法不再直接与 <code>OrderManager</code> 实例耦合，而是成为独立的解耦函数，我们可以通过 <code>OrderManager</code> 上可用的执行方法来调用它们。</p>\n\n<h2>优点</h2>\n<p>命令模式允许我们将方法与执行操作的对象解耦。如果您要处理的命令有一定的生命周期，或者命令需要排队并在特定时间执行，那么它能让您获得更多控制权。</p>\n<h2>缺点</h2>\n<p>命令模式的用例非常有限，而且往往会给应用程序增加不必要的模板。</p>\n<h2>参考</h2>\n<ul>\n<li><a href=\"https://sourcemaking.com/design_patterns/command\" target=\"_blank\" rel=\"noopener noreferrer\">Command Design Pattern</a> - SourceMaking</li>\n<li><a href=\"https://refactoring.guru/design-patterns/command\" target=\"_blank\" rel=\"noopener noreferrer\">Command Pattern</a> - Refactoring Guru</li>\n<li><a href=\"https://www.carloscaballero.io/design-patterns-command/\" target=\"_blank\" rel=\"noopener noreferrer\">Command Pattern</a> - Carlos Caballero</li>\n</ul>\n",
      "date_published": "2024-02-04T00:00:00.000Z",
      "date_modified": "2024-02-07T04:26:52.000Z",
      "authors": [
        {
          "name": "patterns"
        }
      ],
      "tags": [
        "reading"
      ]
    },
    {
      "title": "工厂模式",
      "url": "https://dribble-njr.github.io/blog/blog/reading/patterns/vanilla/02-factory-pattern.html",
      "id": "https://dribble-njr.github.io/blog/blog/reading/patterns/vanilla/02-factory-pattern.html",
      "summary": "通过工厂模式，我们可以使用工厂函数来创建新对象。当一个函数在不使用 new 关键字的情况下返回一个新对象时，它就是一个工厂函数！ 假设我们的应用程序需要许多用户。我们可以创建带有名、姓和电子邮件属性的新用户。工厂函数还会为新创建的对象添加一个 fullName 属性，并返回 name 和 lastName。 完美！现在，我们可以通过调用 createU...",
      "content_html": "<p>通过工厂模式，我们可以使用工厂函数来创建新对象。当一个函数在不使用 <code>new</code> 关键字的情况下返回一个新对象时，它就是一个工厂函数！</p>\n<p>假设我们的应用程序需要许多用户。我们可以创建带有名、姓和电子邮件属性的新用户。工厂函数还会为新创建的对象添加一个 <code>fullName</code> 属性，并返回 <code>name</code> 和 <code>lastName</code>。</p>\n<div class=\"language-javascript\" data-ext=\"js\" data-title=\"js\"><pre class=\"language-javascript\"><code><span class=\"token keyword\">const</span> <span class=\"token function-variable function\">createUser</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\"><span class=\"token punctuation\">{</span> firstName<span class=\"token punctuation\">,</span> lastName<span class=\"token punctuation\">,</span> email <span class=\"token punctuation\">}</span></span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=&gt;</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span>\n  firstName<span class=\"token punctuation\">,</span>\n  lastName<span class=\"token punctuation\">,</span>\n  email<span class=\"token punctuation\">,</span>\n  <span class=\"token function\">fullName</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">return</span> <span class=\"token template-string\"><span class=\"token template-punctuation string\">`</span><span class=\"token interpolation\"><span class=\"token interpolation-punctuation punctuation\">${</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>firstName<span class=\"token interpolation-punctuation punctuation\">}</span></span><span class=\"token string\"> </span><span class=\"token interpolation\"><span class=\"token interpolation-punctuation punctuation\">${</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>lastName<span class=\"token interpolation-punctuation punctuation\">}</span></span><span class=\"token template-punctuation string\">`</span></span>\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span>\n</code></pre></div><p>完美！现在，我们可以通过调用 <code>createUser</code> 函数轻松创建多个用户。</p>\n\n<p>如果我们要创建相对复杂且可配置的对象，工厂模式就会非常有用。可能发生的情况是，键和值的值取决于特定的环境或配置。使用工厂模式，我们可以轻松创建包含自定义键和值的新对象！</p>\n<div class=\"language-javascript\" data-ext=\"js\" data-title=\"js\"><pre class=\"language-javascript\"><code><span class=\"token keyword\">const</span> <span class=\"token function-variable function\">createObjectFromArray</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\"><span class=\"token punctuation\">[</span>key<span class=\"token punctuation\">,</span> value<span class=\"token punctuation\">]</span></span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=&gt;</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span>\n  <span class=\"token punctuation\">[</span>key<span class=\"token punctuation\">]</span><span class=\"token operator\">:</span> value\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span>\n\n<span class=\"token function\">createObjectFromArray</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">[</span><span class=\"token string\">'name'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'John'</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span> <span class=\"token comment\">// { name: \"John\" }</span>\n</code></pre></div><h2>优点</h2>\n<p>当我们需要创建多个共享相同属性的较小对象时，工厂模式非常有用。工厂函数可以根据当前环境或用户特定配置轻松返回自定义对象。</p>\n<h2>缺点</h2>\n<p>在 JavaScript 中，工厂模式不过是一个不使用 <code>new</code> 关键字就能返回对象的函数。<strong>ES6 箭头函数</strong> 允许我们创建小型工厂函数，每次都隐式返回一个对象。</p>\n<div class=\"language-javascript\" data-ext=\"js\" data-title=\"js\"><pre class=\"language-javascript\"><code><span class=\"token keyword\">const</span> <span class=\"token function-variable function\">createDog</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\">name<span class=\"token punctuation\">,</span> breed</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=&gt;</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span> name<span class=\"token punctuation\">,</span> breed <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span>\n</code></pre></div><p>不过，在许多情况下，创建新实例比每次创建新对象更节省内存。</p>\n<div class=\"language-javascript\" data-ext=\"js\" data-title=\"js\"><pre class=\"language-javascript\"><code><span class=\"token keyword\">class</span> <span class=\"token class-name\">User</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token function\">constructor</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">firstName<span class=\"token punctuation\">,</span> lastName<span class=\"token punctuation\">,</span> email</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>firstName <span class=\"token operator\">=</span> firstName\n    <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>lastName <span class=\"token operator\">=</span> lastName\n    <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>email <span class=\"token operator\">=</span> email\n  <span class=\"token punctuation\">}</span>\n\n  <span class=\"token function\">fullName</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">return</span> <span class=\"token template-string\"><span class=\"token template-punctuation string\">`</span><span class=\"token interpolation\"><span class=\"token interpolation-punctuation punctuation\">${</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>firstName<span class=\"token interpolation-punctuation punctuation\">}</span></span><span class=\"token string\"> </span><span class=\"token interpolation\"><span class=\"token interpolation-punctuation punctuation\">${</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>lastName<span class=\"token interpolation-punctuation punctuation\">}</span></span><span class=\"token template-punctuation string\">`</span></span>\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">const</span> user1 <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">User</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span>\n  <span class=\"token literal-property property\">firstName</span><span class=\"token operator\">:</span> <span class=\"token string\">'John'</span><span class=\"token punctuation\">,</span>\n  <span class=\"token literal-property property\">lastName</span><span class=\"token operator\">:</span> <span class=\"token string\">'Doe'</span><span class=\"token punctuation\">,</span>\n  <span class=\"token literal-property property\">email</span><span class=\"token operator\">:</span> <span class=\"token string\">'john@doe.com'</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span>\n\n<span class=\"token keyword\">const</span> user2 <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">User</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span>\n  <span class=\"token literal-property property\">firstName</span><span class=\"token operator\">:</span> <span class=\"token string\">'Jane'</span><span class=\"token punctuation\">,</span>\n  <span class=\"token literal-property property\">lastName</span><span class=\"token operator\">:</span> <span class=\"token string\">'Doe'</span><span class=\"token punctuation\">,</span>\n  <span class=\"token literal-property property\">email</span><span class=\"token operator\">:</span> <span class=\"token string\">'jane@doe.com'</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span>\n</code></pre></div><h2>参考</h2>\n<ul>\n<li><a href=\"https://medium.com/javascript-scene/javascript-factory-functions-with-es6-4d224591a8b1\" target=\"_blank\" rel=\"noopener noreferrer\">JavaScript Factory Functions with ES6+</a> - Eric Elliott</li>\n</ul>\n",
      "date_published": "2024-02-04T00:00:00.000Z",
      "date_modified": "2024-02-07T04:26:52.000Z",
      "authors": [
        {
          "name": "patterns"
        }
      ],
      "tags": [
        "reading"
      ]
    },
    {
      "title": "HighCharts 客户端导出图片",
      "url": "https://dribble-njr.github.io/blog/blog/frontend/practice/007-offline-export-in-highcharts.html",
      "id": "https://dribble-njr.github.io/blog/blog/frontend/practice/007-offline-export-in-highcharts.html",
      "summary": "客户端导出指的是不需要提交数据到导出服务器，直接在浏览器上可以将图表导出为常见图片文件或 PDF 文档。以下情况非常适合使用客户端导出： 不希望将图表数据或图表配置发送到我们的导出服务器 希望省去自己配置导出服务器 不需要在低版本 IE （IE9 及以下）浏览器上使用导出功能 客户端导出 客户端导出功能模块使用现代浏览器技术来完成相关的功能，因此某些功...",
      "content_html": "<p>客户端导出指的是不需要提交数据到导出服务器，直接在浏览器上可以将图表导出为常见图片文件或 PDF 文档。以下情况非常适合使用客户端导出：</p>\n<ul>\n<li>不希望将图表数据或图表配置发送到我们的导出服务器</li>\n<li>希望省去自己配置导出服务器</li>\n<li>不需要在低版本 IE （IE9 及以下）浏览器上使用导出功能</li>\n</ul>\n<h2>客户端导出</h2>\n<p>客户端导出功能模块使用现代浏览器技术来完成相关的功能，因此某些功能在低版本的浏览器上是无法正常使用的，对于不支持的浏览器，我们默认会回退到提交数据到导出服务器，可以通过 <a href=\"https://api.highcharts.com/highcharts/exporting.fallbackToExportServer\" target=\"_blank\" rel=\"noopener noreferrer\">exporting.fallbackToExportServer</a> 来关闭行为，关于客户端导出在不同浏览器中的兼容详情请参考下方的表格。</p>\n<p>IE 浏览器导出 PNG 格式图片或包含图片的图表时需要额外的 <a href=\"https://github.com/canvg/canvg\" target=\"_blank\" rel=\"noopener noreferrer\">canvg</a> 库；所有浏览器导出 PDF 文件都需要 <a href=\"https://github.com/yWorks/jsPDF\" target=\"_blank\" rel=\"noopener noreferrer\">jsPDF</a> 及 <a href=\"https://github.com/yWorks/svg2pdf.js\" target=\"_blank\" rel=\"noopener noreferrer\">svg2PDF</a> 库，默认情况下，这些文件会根据需求从我们的服务器上加载，可以通过 <a href=\"https://api.highcharts.com/highcharts/exporting.libURL\" target=\"_blank\" rel=\"noopener noreferrer\">exporting.libURL</a> 配置来指定加载这些文件的地址。如果页面中已经加载过这些文件，Highcharts 将不会再次加载。</p>\n<p>PDF 不支持导出图像，会退回到导出服务器。</p>\n<p>使用客户端导出很简单，只需要引入图表导出功能相关的文件即可，需要引入的文件如下所示：</p>\n<div class=\"language-html\" data-ext=\"html\" data-title=\"html\"><pre class=\"language-html\"><code><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>script</span> <span class=\"token attr-name\">src</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>http://cdn.hcharts.cn/highcharts/highcharts.js<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">&gt;</span></span><span class=\"token script\"></span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>script</span><span class=\"token punctuation\">&gt;</span></span>\n<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>script</span> <span class=\"token attr-name\">src</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>http://cdn.hcharts.cn/highcharts/modules/exporting.js<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">&gt;</span></span><span class=\"token script\"></span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>script</span><span class=\"token punctuation\">&gt;</span></span>\n<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>script</span> <span class=\"token attr-name\">src</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>http://cdn.hcharts.cn/highcharts/modules/offline-exporting.js<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">&gt;</span></span><span class=\"token script\"></span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>script</span><span class=\"token punctuation\">&gt;</span></span>\n</code></pre></div><p><a href=\"https://jsfiddle.net/gh/get/library/pure/highcharts/highcharts/tree/master/samples/highcharts/exporting/offline-download-demo/\" target=\"_blank\" rel=\"noopener noreferrer\">客户端导出官方 demo</a></p>\n<h2>React</h2>\n<p>如果需要使用 React，需要使用模块导入，同时在使用之前对导出功能进行挂载。</p>\n<div class=\"language-javascript\" data-ext=\"js\" data-title=\"js\"><pre class=\"language-javascript\"><code><span class=\"token keyword\">import</span> <span class=\"token operator\">*</span> <span class=\"token keyword\">as</span> Highcharts <span class=\"token keyword\">from</span> <span class=\"token string\">'highcharts'</span>\n<span class=\"token keyword\">import</span> HighchartsReact <span class=\"token keyword\">from</span> <span class=\"token string\">'highcharts-react-official'</span>\n<span class=\"token keyword\">import</span> HcExporting <span class=\"token keyword\">from</span> <span class=\"token string\">'highcharts/modules/exporting'</span>\n<span class=\"token keyword\">import</span> OfflineExporting <span class=\"token keyword\">from</span> <span class=\"token string\">'highcharts/modules/offline-exporting'</span>\n\n<span class=\"token function\">HcExporting</span><span class=\"token punctuation\">(</span>Highcharts<span class=\"token punctuation\">)</span>\n<span class=\"token function\">OfflineExporting</span><span class=\"token punctuation\">(</span>Highcharts<span class=\"token punctuation\">)</span>\n</code></pre></div><div class=\"hint-container tip\">\n<p class=\"hint-container-title\">提示</p>\n<p><code>highcharts-react-official</code> 提供了对 React 的支持，可以使用 <code>ref</code> 获取生成的 <code>chart</code> 示例。</p>\n<p><code>HcExporting(Highcharts)</code> 和 <code>OfflineExporting(Highcharts)</code> 会分别将 <code>exportChart()</code> 和 <code>exportChartLocal()</code> 两个方法挂载到实例对象中。</p>\n</div>\n<p>如果使用 <code>HighCharts</code> 自带的操作按钮进行导出，那么不需要手动调用导出方法。</p>\n<p>如果需要自定义导出按钮，则需要使用 <code>exportChartLocal()</code> 方法。</p>\n<div class=\"language-jsx\" data-ext=\"jsx\" data-title=\"jsx\"><pre class=\"language-jsx\"><code><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">ChartOperationBar</span></span>\n  <span class=\"token attr-name\">chart</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>{chartState}<span class=\"token punctuation\">\"</span></span>\n  <span class=\"token attr-name\">leftInfoChildren</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>{props.leftInfoChildren}<span class=\"token punctuation\">\"</span></span>\n  <span class=\"token attr-name\">rightInfoChildren</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>{props.rightInfoChildren}<span class=\"token punctuation\">\"</span></span>\n  <span class=\"token attr-name\">exportChartTitle</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>{props.exportChartTitle}<span class=\"token punctuation\">\"</span></span>\n<span class=\"token punctuation\">/&gt;</span></span>\n<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">HighchartsReact</span></span> <span class=\"token attr-name\">ref</span><span class=\"token script language-javascript\"><span class=\"token script-punctuation punctuation\">=</span><span class=\"token punctuation\">{</span>chartRef<span class=\"token punctuation\">}</span></span> <span class=\"token attr-name\">highcharts</span><span class=\"token script language-javascript\"><span class=\"token script-punctuation punctuation\">=</span><span class=\"token punctuation\">{</span>Highcharts<span class=\"token punctuation\">}</span></span> <span class=\"token attr-name\">options</span><span class=\"token script language-javascript\"><span class=\"token script-punctuation punctuation\">=</span><span class=\"token punctuation\">{</span>options<span class=\"token punctuation\">}</span></span>\n<span class=\"token attr-name\">callback</span><span class=\"token script language-javascript\"><span class=\"token script-punctuation punctuation\">=</span><span class=\"token punctuation\">{</span><span class=\"token punctuation\">(</span><span class=\"token parameter\"><span class=\"token literal-property property\">chart</span><span class=\"token operator\">:</span> Chart</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=&gt;</span> <span class=\"token function\">setChartState</span><span class=\"token punctuation\">(</span>chart<span class=\"token punctuation\">)</span><span class=\"token punctuation\">}</span></span> <span class=\"token punctuation\">/&gt;</span></span>\n</code></pre></div><p>上面这个代码使用 <code>callback</code> 在 <code>highcharts</code> 实例化后将实例设置为 <code>state</code>，保证自定义操作组件能够获取到实例对象，在该组件中使用 <code>exportChartLocal()</code> 方法即可实现客户端导出。</p>\n<div class=\"hint-container warning\">\n<p class=\"hint-container-title\">注意</p>\n<ol>\n<li>如果简单地传递 <code>chartRef.current.chart</code>，子组件不会重新渲染导致获取到 <code>chart</code> 实例为 <code>undefined</code>。</li>\n<li>必须使用 <code>exportChartLocal()</code> 方法，若使用 <code>exportChart()</code> 方法仍然会使用服务器导出。</li>\n</ol>\n</div>\n",
      "date_published": "2024-01-23T00:00:00.000Z",
      "date_modified": "2024-01-24T06:35:37.000Z",
      "authors": [],
      "tags": [
        "practice"
      ]
    },
    {
      "title": "关系数据库设计理论",
      "url": "https://dribble-njr.github.io/blog/blog/backend/database/basic/003-db-design.html",
      "id": "https://dribble-njr.github.io/blog/blog/backend/database/basic/003-db-design.html",
      "summary": "关系数据库有一个成熟的理论——依赖。它涉及到如何构建一个良好的关系型数据库模式，以及当一个模式存在缺陷时应该如何改进。 函数依赖 定义 函数依赖：设 R 是一个关系模式，X 和 Y 是 R 的属性集，如果对于 R 的任意两个元组 t1 和 t2，如果 t1 和 t2 在 X 上的分量相等，则 t1 和 t2 在 Y 上的分量也相等，那么我们说 Y 函数...",
      "content_html": "<p>关系数据库有一个成熟的理论——依赖。它涉及到如何构建一个良好的关系型数据库模式，以及当一个模式存在缺陷时应该如何改进。</p>\n<h2>函数依赖</h2>\n<h3>定义</h3>\n<p><strong>函数依赖</strong>：设 <code>R</code> 是一个关系模式，<code>X</code> 和 <code>Y</code> 是 <code>R</code> 的属性集，如果对于 <code>R</code> 的任意两个元组 <code>t1</code> 和 <code>t2</code>，如果 <code>t1</code> 和 <code>t2</code> 在 <code>X</code> 上的分量相等，则 <code>t1</code> 和 <code>t2</code> 在 <code>Y</code> 上的分量也相等，那么我们说 <code>Y</code> 函数依赖于 <code>X</code>，记作 <code>X -&gt; Y</code>。</p>\n<p>以关系 <code>Movies1</code> 为例。</p>\n<p>|     title     | year | length | genre | studioName |   starName    |<br>\n| :</p>\n",
      "date_published": "2024-01-17T00:00:00.000Z",
      "date_modified": "2024-01-23T14:35:46.000Z",
      "authors": [],
      "tags": [
        "database"
      ]
    },
    {
      "title": "关系数据模型",
      "url": "https://dribble-njr.github.io/blog/blog/backend/database/basic/002-relation-model.html",
      "id": "https://dribble-njr.github.io/blog/blog/backend/database/basic/002-relation-model.html",
      "summary": "本文介绍最重要的数据模型之一：「二维表」，或者称为「关系」。 数据模型概述 什么是数据模型 数据模型是用于描述数据或信息的标记，一般由三部分组成： 数据结构：物理数据模型，也称概念模型； 数据操作：查询、修改； 数据约束。 一些重要的数据模型 现今，数据库系统中有两种比较重要的数据模型： 关系数据模型，包括对象关系模型的拓展； 半结构化数据模型，包括 ...",
      "content_html": "<p>本文介绍最重要的数据模型之一：「二维表」，或者称为「关系」。</p>\n<h2>数据模型概述</h2>\n<h3>什么是数据模型</h3>\n<p>数据模型是用于描述数据或信息的标记，一般由三部分组成：</p>\n<ul>\n<li>数据结构：物理数据模型，也称概念模型；</li>\n<li>数据操作：查询、修改；</li>\n<li>数据约束。</li>\n</ul>\n<h3>一些重要的数据模型</h3>\n<p>现今，数据库系统中有两种比较重要的数据模型：</p>\n<ul>\n<li>关系数据模型，包括对象关系模型的拓展；</li>\n<li>半结构化数据模型，包括 XML 相关的标准。</li>\n</ul>\n<h4>关系模型</h4>\n<p>关系模型是一种基于「二维表」的数据模型，由 E.F.Codd 于 1970 年提出。</p>\n<p>以电影关系模型为例，这张表中会有大量的数据行，一部电影对应一行数据。</p>\n<p>|          title           | year | length | genre |<br>\n| :</p>\n",
      "date_published": "2024-01-16T00:00:00.000Z",
      "date_modified": "2024-01-23T14:35:46.000Z",
      "authors": [],
      "tags": [
        "database"
      ]
    },
    {
      "title": "数据库基础",
      "url": "https://dribble-njr.github.io/blog/blog/backend/database/basic/001-hello-database.html",
      "id": "https://dribble-njr.github.io/blog/blog/backend/database/basic/001-hello-database.html",
      "summary": "数据库系统 数据库：由「数据库管理系统（database management system, DBMS）」管理的数据的集合。 具有以下功能： 使用特殊的「数据定义语言」定义数据库，并说明数据的逻辑结构； 使用合适的「查询语言」为用户提供查询和更新数据的能力； 支持超大数据量； 具有持久性； 不允许一个用户的操作影响另一个用户（独立性）、不允许对数据的...",
      "content_html": "<h2>数据库系统</h2>\n<p>数据库：由「数据库管理系统（database management system, DBMS）」管理的数据的集合。</p>\n<p>具有以下功能：</p>\n<ol>\n<li>使用特殊的「数据定义语言」定义数据库，并说明数据的逻辑结构；</li>\n<li>使用合适的「查询语言」为用户提供查询和更新数据的能力；</li>\n<li>支持超大数据量；</li>\n<li>具有持久性；</li>\n<li>不允许一个用户的操作影响另一个用户（独立性）、不允许对数据的不完整操作（原子性）。</li>\n</ol>\n<p>目前一般是关系型数据库和非关系型数据库。</p>\n<div class=\"hint-container tip\">\n<p class=\"hint-container-title\">提示</p>\n<p>数据组织成表的形式呈现给用户，这种形式称为关系。</p>\n</div>\n<p>数据库问题的复杂性在于：「信息集成」，即如何把包含多个相关数据库中的信息连接在一起成为一整个数据库。</p>\n<p>目前解决该问题的方法一般是：</p>\n<ul>\n<li>「数据仓库」：通过合适的转换技术，将来自多个遗留数据库的信息周期性的复制到中央数据库；</li>\n<li>「协调器」或「中间件」：支持各类数据库数据的整合模型，实现整合模型和实际数据库模型间的信息转换。</li>\n</ul>\n<div class=\"hint-container tip\">\n<p class=\"hint-container-title\">提示</p>\n<p>一般可以使用 Node 实现中间件。</p>\n</div>\n",
      "date_published": "2024-01-15T00:00:00.000Z",
      "date_modified": "2024-01-15T15:40:10.000Z",
      "authors": [],
      "tags": [
        "database"
      ]
    },
    {
      "title": "Docker 安装 MySQL",
      "url": "https://dribble-njr.github.io/blog/blog/backend/database/mysql/001-install-mysql.html",
      "id": "https://dribble-njr.github.io/blog/blog/backend/database/mysql/001-install-mysql.html",
      "summary": "使用 Docker 安装 MySQL。 安装 从 docker-hub 镜像源中找到想要安装的版本号。 这里直接安装最新版本。 等待一段时间安装完成后，启动 MySQL 容器： 这个命令的参数解释如下： -d: 后台运行容器。 --name mysql-container: 给容器起一个名字。 -e MYSQL_ROOT_PASSWORD=my-sec...",
      "content_html": "<p>使用 Docker 安装 MySQL。</p>\n<h2>安装</h2>\n<p>从 <a href=\"https://hub.docker.com/_/mysql/\" target=\"_blank\" rel=\"noopener noreferrer\">docker-hub</a> 镜像源中找到想要安装的版本号。</p>\n<p>这里直接安装最新版本。</p>\n<div class=\"language-bash\" data-ext=\"sh\" data-title=\"sh\"><pre class=\"language-bash\"><code><span class=\"token function\">docker</span> pull mysql\n</code></pre></div><p>等待一段时间安装完成后，启动 MySQL 容器：</p>\n<div class=\"language-bash\" data-ext=\"sh\" data-title=\"sh\"><pre class=\"language-bash\"><code><span class=\"token function\">docker</span> run <span class=\"token parameter variable\">-d</span> <span class=\"token parameter variable\">--name</span> mysql-container <span class=\"token parameter variable\">-e</span> <span class=\"token assign-left variable\">MYSQL_ROOT_PASSWORD</span><span class=\"token operator\">=</span>my-secret-pw <span class=\"token parameter variable\">-p</span> <span class=\"token number\">3306</span>:3306 mysql\n</code></pre></div><p>这个命令的参数解释如下：</p>\n<ul>\n<li><code>-d</code>: 后台运行容器。</li>\n<li><code>--name mysql-container</code>: 给容器起一个名字。</li>\n<li><code>-e MYSQL_ROOT_PASSWORD=my-secret-pw</code>: 设置 MySQL root 用户的密码。</li>\n<li><code>-p 3306:3306</code>: 将容器的 MySQL 服务端口（默认为 3306）映射到主机的 3306 端口。</li>\n</ul>\n<p>启动容器后进入 MySQL 容器的命令行界面：</p>\n<div class=\"language-bash\" data-ext=\"sh\" data-title=\"sh\"><pre class=\"language-bash\"><code><span class=\"token function\">docker</span> <span class=\"token builtin class-name\">exec</span> <span class=\"token parameter variable\">-it</span> mysql-container <span class=\"token function\">bash</span>\n</code></pre></div><p>输入密码即可进入 MySQL 命令行界面。</p>\n<h2>设置 MySQL</h2>\n<p>进入到命令行界面后，设置一些基本的配置。</p>\n<div class=\"hint-container warning\">\n<p class=\"hint-container-title\">注意</p>\n<p>MySQL 命令以 <code>;</code> 表示一行结束。</p>\n</div>\n<ol>\n<li>登陆 MySQL</li>\n</ol>\n<div class=\"language-bash\" data-ext=\"sh\" data-title=\"sh\"><pre class=\"language-bash\"><code>mysql <span class=\"token parameter variable\">-u</span> root <span class=\"token parameter variable\">-p</span>\n</code></pre></div><ol start=\"2\">\n<li>创建数据库</li>\n</ol>\n<div class=\"language-bash\" data-ext=\"sh\" data-title=\"sh\"><pre class=\"language-bash\"><code>create database your_data_base_name<span class=\"token punctuation\">;</span>\n</code></pre></div><ol start=\"3\">\n<li>创建用户</li>\n</ol>\n<div class=\"language-bash\" data-ext=\"sh\" data-title=\"sh\"><pre class=\"language-bash\"><code>CREATE <span class=\"token environment constant\">USER</span> <span class=\"token string\">'your_username'</span>@<span class=\"token string\">'localhost'</span> IDENTIFIED BY <span class=\"token string\">'your_password'</span><span class=\"token punctuation\">;</span>\n</code></pre></div><ol start=\"4\">\n<li>设置权限</li>\n</ol>\n<div class=\"language-bash\" data-ext=\"sh\" data-title=\"sh\"><pre class=\"language-bash\"><code>GRANT ALL PRIVILEGES ON your_database_name.* TO <span class=\"token string\">'your_username'</span>@<span class=\"token string\">'localhost'</span><span class=\"token punctuation\">;</span>\n</code></pre></div><ol start=\"5\">\n<li>刷新权限</li>\n</ol>\n<div class=\"language-bash\" data-ext=\"sh\" data-title=\"sh\"><pre class=\"language-bash\"><code>FLUSH PRIVILEGES<span class=\"token punctuation\">;</span>\n</code></pre></div><div class=\"hint-container warning\">\n<p class=\"hint-container-title\">注意</p>\n<p>必要步骤，否则权限会不生效。</p>\n</div>\n<p>做完基本的配置之后，就可以使用下面命令退出命令行界面：</p>\n<div class=\"language-bash\" data-ext=\"sh\" data-title=\"sh\"><pre class=\"language-bash\"><code><span class=\"token builtin class-name\">exit</span><span class=\"token punctuation\">;</span>\n</code></pre></div><h2>服务器开放端口</h2>\n<p>参考 。</p>\n<p>接下来就可以使用 Navicat 连接数据库了。</p>\n",
      "date_published": "2024-01-14T00:00:00.000Z",
      "date_modified": "2024-01-14T11:13:24.000Z",
      "authors": [],
      "tags": [
        "database"
      ]
    },
    {
      "title": "SVG 实现签名动画效果",
      "url": "https://dribble-njr.github.io/blog/blog/frontend/practice/006-animation-svg.html",
      "id": "https://dribble-njr.github.io/blog/blog/frontend/practice/006-animation-svg.html",
      "summary": "在阅读 antfu 大佬的 Animated SVG Logo 时，发现了一个很有意思的动画效果，最终实现的效果如下。 其中原理可以参考下面两篇文章： Animated line drawing in SVG How SVG Line Animation Works 提示 下面以内马尔签名为例，介绍一下如何实现这个效果。 签名文件处理 谷歌上搜索内马尔...",
      "content_html": "<p>在阅读 antfu 大佬的 <a href=\"https://antfu.me/posts/animated-svg-logo\" target=\"_blank\" rel=\"noopener noreferrer\">Animated SVG Logo</a> 时，发现了一个很有意思的动画效果，最终实现的效果如下。</p>\n\n<p>其中原理可以参考下面两篇文章：</p>\n<ul>\n<li><a href=\"https://jakearchibald.com/2013/animated-line-drawing-svg/\" target=\"_blank\" rel=\"noopener noreferrer\">Animated line drawing in SVG</a></li>\n<li><a href=\"https://css-tricks.com/svg-line-animation-works/\" target=\"_blank\" rel=\"noopener noreferrer\">How SVG Line Animation Works</a></li>\n</ul>\n<div class=\"hint-container tip\">\n<p class=\"hint-container-title\">提示</p>\n<p>下面以内马尔签名为例，介绍一下如何实现这个效果。</p>\n</div>\n<h2>签名文件处理</h2>\n<p>谷歌上搜索内马尔签名，找到 <a href=\"https://zh.wikipedia.org/wiki/File:Neymar_da_Silva_Santos_J%C3%BAnior_signature.svg\" target=\"_blank\" rel=\"noopener noreferrer\">原始 SVG 文件</a>。</p>\n<figure><img src=\"https://raw.githubusercontent.com/dribble-njr/typora-njr/master/img/20240113225839.png\" alt=\"内马尔签名\" tabindex=\"0\" loading=\"lazy\"><figcaption>内马尔签名</figcaption></figure>\n<div class=\"hint-container warning\">\n<p class=\"hint-container-title\">注意</p>\n<p>源文件为 fill 填充，而只有 stroke 才能实现此动画效果，所以需要使用 Adobe Illustration 或 Figma 或 Motiff 处理。</p>\n<p>先将填充取消，并进行描边处理，最后使用钢笔工具在填充中间增加路径。</p>\n</div>\n<p>使用 AI 软件处理后，得到下面文件，再导出为 SVG 格式。由于技术不过关，少了很多细节处理，但是不影响效果。</p>\n<figure><img src=\"https://raw.githubusercontent.com/dribble-njr/typora-njr/master/img/20240113230507.png\" alt=\"处理后的 stroke 文件\" tabindex=\"0\" loading=\"lazy\"><figcaption>处理后的 stroke 文件</figcaption></figure>\n<h2>实现动画</h2>\n<p>得到 stroke 文件后，就可以使用 <code>stroke-dasharray</code> 和 <code>stroke-dashoffset</code> 属性实现动画效果。</p>\n<p>由于这里的有四条路径，因此需要分别设置四个动画。</p>\n<p>这里先获得四条路径的总长度。</p>\n<div class=\"language-javascript\" data-ext=\"js\" data-title=\"js\"><pre class=\"language-javascript\"><code><span class=\"token keyword\">const</span> path1 <span class=\"token operator\">=</span> document<span class=\"token punctuation\">.</span><span class=\"token function\">getElementById</span><span class=\"token punctuation\">(</span><span class=\"token string\">'path1'</span><span class=\"token punctuation\">)</span>\n<span class=\"token keyword\">const</span> path2 <span class=\"token operator\">=</span> document<span class=\"token punctuation\">.</span><span class=\"token function\">getElementById</span><span class=\"token punctuation\">(</span><span class=\"token string\">'path2'</span><span class=\"token punctuation\">)</span>\n<span class=\"token keyword\">const</span> path3 <span class=\"token operator\">=</span> document<span class=\"token punctuation\">.</span><span class=\"token function\">getElementById</span><span class=\"token punctuation\">(</span><span class=\"token string\">'path3'</span><span class=\"token punctuation\">)</span>\n<span class=\"token keyword\">const</span> path4 <span class=\"token operator\">=</span> document<span class=\"token punctuation\">.</span><span class=\"token function\">getElementById</span><span class=\"token punctuation\">(</span><span class=\"token string\">'path4'</span><span class=\"token punctuation\">)</span>\nconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>path1<span class=\"token punctuation\">.</span><span class=\"token function\">getTotalLength</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\nconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>path2<span class=\"token punctuation\">.</span><span class=\"token function\">getTotalLength</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\nconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>path3<span class=\"token punctuation\">.</span><span class=\"token function\">getTotalLength</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\nconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>path4<span class=\"token punctuation\">.</span><span class=\"token function\">getTotalLength</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n</code></pre></div><p>获取完长度后，因为需要依次出现每个路径，所以需要设置动画延迟时间，这样就能保证每个路径依次出现，最终就能得到上述的效果了。</p>\n<div class=\"language-css\" data-ext=\"css\" data-title=\"css\"><pre class=\"language-css\"><code><span class=\"token selector\">:root</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token property\">--dash-array-1</span><span class=\"token punctuation\">:</span> 1722px<span class=\"token punctuation\">;</span>\n  <span class=\"token property\">--dash-array-2</span><span class=\"token punctuation\">:</span> 633px<span class=\"token punctuation\">;</span>\n  <span class=\"token property\">--dash-array-3</span><span class=\"token punctuation\">:</span> 436px<span class=\"token punctuation\">;</span>\n  <span class=\"token property\">--dash-array-4</span><span class=\"token punctuation\">:</span> 1386px<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token atrule\"><span class=\"token rule\">@media</span> <span class=\"token punctuation\">(</span>prefers-reduced-motion<span class=\"token punctuation\">)</span></span> <span class=\"token punctuation\">{</span>\n  <span class=\"token selector\">path</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token property\">animation</span><span class=\"token punctuation\">:</span> none <span class=\"token important\">!important</span><span class=\"token punctuation\">;</span>\n    <span class=\"token property\">stroke-dasharray</span><span class=\"token punctuation\">:</span> unset <span class=\"token important\">!important</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token atrule\"><span class=\"token rule\">@keyframes</span> draw</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token selector\">0%</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token property\">stroke-dashoffset</span><span class=\"token punctuation\">:</span> <span class=\"token function\">var</span><span class=\"token punctuation\">(</span>--dash-array<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token property\">opacity</span><span class=\"token punctuation\">:</span> 0<span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span>\n  <span class=\"token selector\">100%</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token property\">stroke-dashoffset</span><span class=\"token punctuation\">:</span> 0<span class=\"token punctuation\">;</span>\n    <span class=\"token property\">opacity</span><span class=\"token punctuation\">:</span> 1<span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token selector\">path:nth-child(1)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token property\">--dash-array</span><span class=\"token punctuation\">:</span> <span class=\"token function\">var</span><span class=\"token punctuation\">(</span>--dash-array-1<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token property\">animation</span><span class=\"token punctuation\">:</span> draw 1s ease forwards 0s<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token selector\">path:nth-child(2)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token property\">--dash-array</span><span class=\"token punctuation\">:</span> <span class=\"token function\">var</span><span class=\"token punctuation\">(</span>--dash-array-2<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token property\">animation</span><span class=\"token punctuation\">:</span> draw 0.7s ease forwards 1s<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token selector\">path:nth-child(3)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token property\">--dash-array</span><span class=\"token punctuation\">:</span> <span class=\"token function\">var</span><span class=\"token punctuation\">(</span>--dash-array-3<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token property\">animation</span><span class=\"token punctuation\">:</span> draw 0.5s ease forwards 2s<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token selector\">path:nth-child(4)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token property\">--dash-array</span><span class=\"token punctuation\">:</span> <span class=\"token function\">var</span><span class=\"token punctuation\">(</span>--dash-array-4<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token property\">animation</span><span class=\"token punctuation\">:</span> draw 1s ease forwards 3s<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token selector\">path</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token property\">stroke-dashoffset</span><span class=\"token punctuation\">:</span> 1px<span class=\"token punctuation\">;</span>\n  <span class=\"token property\">stroke-dasharray</span><span class=\"token punctuation\">:</span> <span class=\"token function\">var</span><span class=\"token punctuation\">(</span>--dash-array<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token property\">transform-origin</span><span class=\"token punctuation\">:</span> center<span class=\"token punctuation\">;</span>\n  <span class=\"token property\">stroke</span><span class=\"token punctuation\">:</span> #303030<span class=\"token punctuation\">;</span>\n  <span class=\"token property\">opacity</span><span class=\"token punctuation\">:</span> 0<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n</code></pre></div><h2>适配 vuepress</h2>\n<p>这里使用的是 <code>vuepress-theme-hope</code> 主题，参考 <a href=\"https://theme-hope.vuejs.press/zh/guide/advanced/replace.html\" target=\"_blank\" rel=\"noopener noreferrer\">替换主题组件</a> 中通过导航栏组件别名替换了默认的导航栏组件。</p>\n<div class=\"language-javascript\" data-ext=\"js\" data-title=\"js\"><pre class=\"language-javascript\"><code><span class=\"token literal-property property\">alias</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token string-property property\">'@theme-hope/modules/navbar/components/NavbarBrand'</span><span class=\"token operator\">:</span> path<span class=\"token punctuation\">.</span><span class=\"token function\">resolve</span><span class=\"token punctuation\">(</span>\n    __dirname<span class=\"token punctuation\">,</span>\n    <span class=\"token string\">'./components/NavLogo.vue'</span>\n  <span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">}</span>\n</code></pre></div><h2>适配深色主题</h2>\n<p><code>vuepress</code> 并未提供是否为深色主题的接口，需要监听 <code>data-theme</code> 属性变化，来判断是否为深色主题。</p>\n<div class=\"language-javascript\" data-ext=\"js\" data-title=\"js\"><pre class=\"language-javascript\"><code><span class=\"token keyword\">import</span> <span class=\"token punctuation\">{</span> onUnmounted<span class=\"token punctuation\">,</span> onMounted<span class=\"token punctuation\">,</span> ref <span class=\"token punctuation\">}</span> <span class=\"token keyword\">from</span> <span class=\"token string\">'vue'</span>\n\n<span class=\"token keyword\">const</span> isDarkMode <span class=\"token operator\">=</span> <span class=\"token function\">ref</span><span class=\"token punctuation\">(</span><span class=\"token boolean\">false</span><span class=\"token punctuation\">)</span>\n\n<span class=\"token function\">onMounted</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=&gt;</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">const</span> html <span class=\"token operator\">=</span> document<span class=\"token punctuation\">.</span>documentElement\n\n  console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>html<span class=\"token punctuation\">,</span> <span class=\"token string\">'==='</span><span class=\"token punctuation\">)</span>\n\n  isDarkMode<span class=\"token punctuation\">.</span>value <span class=\"token operator\">=</span> html<span class=\"token punctuation\">.</span>dataset<span class=\"token punctuation\">.</span>theme <span class=\"token operator\">===</span> <span class=\"token string\">'dark'</span>\n\n  <span class=\"token comment\">// watch theme change</span>\n  <span class=\"token keyword\">const</span> observer <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">MutationObserver</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=&gt;</span> <span class=\"token punctuation\">{</span>\n    isDarkMode<span class=\"token punctuation\">.</span>value <span class=\"token operator\">=</span> html<span class=\"token punctuation\">.</span>dataset<span class=\"token punctuation\">.</span>theme <span class=\"token operator\">===</span> <span class=\"token string\">'dark'</span>\n    console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>isDarkMode<span class=\"token punctuation\">.</span>value<span class=\"token punctuation\">,</span> '</code></pre></div>",
      "image": "https://raw.githubusercontent.com/dribble-njr/typora-njr/master/img/20240113225839.png",
      "date_published": "2024-01-13T00:00:00.000Z",
      "date_modified": "2024-01-13T16:14:27.000Z",
      "authors": [],
      "tags": [
        "practice"
      ]
    },
    {
      "title": "centos 安装 docker",
      "url": "https://dribble-njr.github.io/blog/blog/backend/linux/practice/005-install-docker.html",
      "id": "https://dribble-njr.github.io/blog/blog/backend/linux/practice/005-install-docker.html",
      "summary": " 提示 需要保证 centos 版本： centos 7 centos 8 centos 9 卸载旧版本 注意 必须先完成这一步，否则会出现不可预见的错误。 运行下列命令： 出现成功提示后即可。 使用 rpm repository 安装 设置镜像 安装 yum-utils 软件包（提供 yum-config-manager 实用工具）并设置软件源。 安...",
      "content_html": "<div class=\"hint-container tip\">\n<p class=\"hint-container-title\">提示</p>\n<p>需要保证 centos 版本：</p>\n<ul>\n<li>centos 7</li>\n<li>centos 8</li>\n<li>centos 9</li>\n</ul>\n</div>\n<h2>卸载旧版本</h2>\n<div class=\"hint-container warning\">\n<p class=\"hint-container-title\">注意</p>\n<p>必须先完成这一步，否则会出现不可预见的错误。</p>\n</div>\n<p>运行下列命令：</p>\n<div class=\"language-bash\" data-ext=\"sh\" data-title=\"sh\"><pre class=\"language-bash\"><code><span class=\"token function\">sudo</span> yum remove <span class=\"token function\">docker</span> <span class=\"token punctuation\">\\</span>\n                  docker-client <span class=\"token punctuation\">\\</span>\n                  docker-client-latest <span class=\"token punctuation\">\\</span>\n                  docker-common <span class=\"token punctuation\">\\</span>\n                  docker-latest <span class=\"token punctuation\">\\</span>\n                  docker-latest-logrotate <span class=\"token punctuation\">\\</span>\n                  docker-logrotate <span class=\"token punctuation\">\\</span>\n                  docker-engine\n</code></pre></div><p>出现成功提示后即可。</p>\n<h2>使用 rpm repository 安装</h2>\n<h3>设置镜像</h3>\n<p>安装 <code>yum-utils</code> 软件包（提供 <code>yum-config-manager</code> 实用工具）并设置软件源。</p>\n<div class=\"language-bash\" data-ext=\"sh\" data-title=\"sh\"><pre class=\"language-bash\"><code><span class=\"token function\">sudo</span> yum <span class=\"token function\">install</span> <span class=\"token parameter variable\">-y</span> yum-utils\n<span class=\"token function\">sudo</span> yum-config-manager --add-repo https://download.docker.com/linux/centos/docker-ce.repo\n</code></pre></div><h3>安装 docker engin</h3>\n<ol>\n<li>安装最新版：</li>\n</ol>\n\n<ol start=\"2\">\n<li>启动 docker</li>\n</ol>\n<div class=\"language-bash\" data-ext=\"sh\" data-title=\"sh\"><pre class=\"language-bash\"><code><span class=\"token function\">sudo</span> systemctl start <span class=\"token function\">docker</span>\n</code></pre></div><ol start=\"3\">\n<li>运行 <code>hello-world</code> 映像，验证 Docker Engine 安装是否成功。</li>\n</ol>\n<div class=\"language-bash\" data-ext=\"sh\" data-title=\"sh\"><pre class=\"language-bash\"><code><span class=\"token function\">sudo</span> <span class=\"token function\">docker</span> run hello-world\n</code></pre></div><p>这条命令会下载一个测试镜像，并在一个容器中运行。当容器运行时，它会打印一条确认信息并退出。</p>\n<div class=\"hint-container tip\">\n<p class=\"hint-container-title\">提示</p>\n<p>可以不去执行，只要安装过程不报错就表明成功。</p>\n</div>\n",
      "date_published": "2024-01-12T00:00:00.000Z",
      "date_modified": "2024-01-13T18:13:25.000Z",
      "authors": [],
      "tags": [
        "linux"
      ]
    },
    {
      "title": "yeoman 基础使用",
      "url": "https://dribble-njr.github.io/blog/blog/frontend/engineering/basic/005-yeoman.html",
      "id": "https://dribble-njr.github.io/blog/blog/frontend/engineering/basic/005-yeoman.html",
      "summary": "::: waring yo@5.0.0 引入了一个破坏性的更新，会导致 instantiatedGenerator.run is not a function，需要降级到 @4.x。 降级后仍有报错，可能是 generator-node 的问题，垃圾项目没人维护。 ::: Yeoman 是一个通用的脚手架系统，允许创建任何类型的应用程序。它可以快速启动...",
      "content_html": "<p>::: waring</p>\n<p><code>yo@5.0.0</code> 引入了一个破坏性的更新，会导致 <a href=\"https://github.com/yeoman/generator-generator/issues/258\" target=\"_blank\" rel=\"noopener noreferrer\">instantiatedGenerator.run is not a function</a>，需要降级到 <code>@4.x</code>。</p>\n<p>降级后仍有报错，可能是 <code>generator-node</code> 的问题，垃圾项目没人维护。</p>\n<p>:::</p>\n<p>Yeoman 是一个通用的脚手架系统，允许创建任何类型的应用程序。它可以快速启动新项目，并简化现有项目的维护工作。</p>\n<p>Yeoman 与语言无关。它可以生成任何语言（Web、Java、Python、C# 等）的项目。</p>\n<p>Yeoman 本身不做任何决定。所有决定都由生成器做出，而生成器基本上就是 Yeoman 环境中的插件。有很多公开可用的生成器，创建一个新的生成器来匹配任何工作流程也很容易。Yeoman 始终是满足脚手架需求的正确选择。</p>\n<p>以下是一些常见的使用案例：</p>\n<ul>\n<li>快速创建新项目</li>\n<li>创建项目的新部分，如带有单元测试的新控制器</li>\n<li>创建模块或软件包</li>\n<li>引导新服务</li>\n<li>执行标准、最佳实践和风格指南</li>\n<li>通过让用户使用示例应用程序来推广新项目</li>\n<li>...</li>\n</ul>\n<h2>开始</h2>\n<p><code>yo</code> 是一款 Yeoman 命令行实用程序，允许使用脚手架模板（简称为生成器）创建项目。使用 npm 安装 <code>yo</code> 和生成器：</p>\n<div class=\"language-bash\" data-ext=\"sh\" data-title=\"sh\"><pre class=\"language-bash\"><code><span class=\"token function\">npm</span> <span class=\"token function\">install</span> <span class=\"token parameter variable\">-g</span> yo\n</code></pre></div><p>然后可以安装一些生成器：</p>\n<div class=\"hint-container info\">\n<p class=\"hint-container-title\">相关信息</p>\n<p>可以在 <a href=\"https://yeoman.io/generators/\" target=\"_blank\" rel=\"noopener noreferrer\">生成器</a> 中搜索想要的生成器。</p>\n</div>\n<div class=\"language-bash\" data-ext=\"sh\" data-title=\"sh\"><pre class=\"language-bash\"><code><span class=\"token function\">npm</span> <span class=\"token function\">install</span> <span class=\"token parameter variable\">-g</span> generator-node\n</code></pre></div><h2>基本脚手架</h2>\n<p>搭建基本脚手架，只需要去除生成器前缀 <code>generator-</code>：</p>\n<div class=\"language-bash\" data-ext=\"sh\" data-title=\"sh\"><pre class=\"language-bash\"><code>yo <span class=\"token function\">node</span>\n</code></pre></div><p>大多数生成器会提出一系列问题来定制新项目。要查看哪些选项可用，请使用 <code>help</code> 命令：</p>\n<div class=\"language-bash\" data-ext=\"sh\" data-title=\"sh\"><pre class=\"language-bash\"><code>yo <span class=\"token function\">node</span> <span class=\"token parameter variable\">--help</span>\n</code></pre></div><p>很多生成器都依赖于构建系统（如 Grunt 或 Gulp）和软件包管理器（如 npm 和 Bower）。请务必访问生成器的网站，了解运行和维护新应用程序的相关信息。运行以下命令即可轻松访问生成器的主页：</p>\n<div class=\"language-bash\" data-ext=\"sh\" data-title=\"sh\"><pre class=\"language-bash\"><code><span class=\"token function\">npm</span> home generator-node\n</code></pre></div><p>为复杂框架搭建脚手架的生成器可能会提供额外的生成器，为项目的较小部分搭建脚手架。这些生成器通常被称为子生成器，访问方式为 <code>generator:sub-generator</code>。</p>\n<p>以 <code>generator-node</code> 为例。一旦生成了完整的 node 应用程序，就可以添加其他功能。要在项目中添加新控制器，请运行控制器子生成器：</p>\n<div class=\"language-bash\" data-ext=\"sh\" data-title=\"sh\"><pre class=\"language-bash\"><code>yo node:cli\n</code></pre></div><h2>其他 yo 命令</h2>\n<p>除了上一节介绍的基础知识，<code>yo</code> 还是一个完全交互式的工具。只需在终端键入 <code>yo</code>，就能看到一系列选项，用于管理与生成器有关的一切：运行、更新、安装、帮助和其他实用程序。</p>\n<p><code>yo</code> 还提供以下命令。</p>\n<ul>\n<li><code>yo --help</code> 访问完整的帮助界面</li>\n<li><code>yo --generators</code> 列出所有已安装的生成器</li>\n<li><code>yo --version</code> 获取版本</li>\n</ul>\n<h2>故障排除</h2>\n<p>大多数问题都可以通过运行：</p>\n<div class=\"language-bash\" data-ext=\"sh\" data-title=\"sh\"><pre class=\"language-bash\"><code>yo doctor\n</code></pre></div><p><code>doctor</code> 命令将诊断并提供解决最常见问题的步骤。</p>\n",
      "date_published": "2024-01-09T00:00:00.000Z",
      "date_modified": "2024-01-09T13:35:18.000Z",
      "authors": [],
      "tags": [
        "工程化"
      ]
    },
    {
      "title": "服务器设置 ssh 密钥登录",
      "url": "https://dribble-njr.github.io/blog/blog/backend/linux/practice/001-set-the-ssh.html",
      "id": "https://dribble-njr.github.io/blog/blog/backend/linux/practice/001-set-the-ssh.html",
      "summary": " 提示 使用密码登录服务器并不安全，因此我们需要设置密钥登录。 创建密钥对 登录阿里云控制台 -> 云服务 ECS -> 网络与安全 -> 密钥对 -> 创建密钥对。 step1-create-sshstep1-create-ssh 创建成功之后，浏览器会自动下载一个 .pem 私钥文件，记住这个文件的位置，之后要用。 绑定密钥对 选中刚才创建的密钥对...",
      "content_html": "<div class=\"hint-container tip\">\n<p class=\"hint-container-title\">提示</p>\n<p>使用密码登录服务器并不安全，因此我们需要设置密钥登录。</p>\n</div>\n<h2>创建密钥对</h2>\n<p>登录阿里云控制台 -&gt; 云服务 ECS -&gt; 网络与安全 -&gt; 密钥对 -&gt; 创建密钥对。</p>\n<figure><img src=\"https://raw.githubusercontent.com/dribble-njr/typora-njr/master/img/step1-create-ssh.png\" alt=\"step1-create-ssh\" tabindex=\"0\" loading=\"lazy\"><figcaption>step1-create-ssh</figcaption></figure>\n<p>创建成功之后，浏览器会自动下载一个 <code>.pem</code> 私钥文件，记住这个文件的位置，之后要用。</p>\n<h2>绑定密钥对</h2>\n<p>选中刚才创建的密钥对，点击右侧<strong>绑定密钥对</strong>，将密钥对绑定到实例。</p>\n<figure><img src=\"https://raw.githubusercontent.com/dribble-njr/typora-njr/master/img/step2-bind-ssh.png\" alt=\"step2-bind-ssh\" tabindex=\"0\" loading=\"lazy\"><figcaption>step2-bind-ssh</figcaption></figure>\n<h2>添加安全组规则</h2>\n<p>云服务 ECS -&gt; 网络与安全 -&gt; 安全组 -&gt; 入方向 -&gt; 手动添加。</p>\n<figure><img src=\"https://raw.githubusercontent.com/dribble-njr/typora-njr/master/img/step3-add-port.png\" alt=\"step3-add-port\" tabindex=\"0\" loading=\"lazy\"><figcaption>step3-add-port</figcaption></figure>\n<p>执行完后重启实例。</p>\n<h2>密钥验证并禁用密码登录</h2>\n<ol>\n<li>\n<p>安装 MobaXterm</p>\n</li>\n<li>\n<p>在 MobaXterm 下输入命令（<a href=\"https://help.aliyun.com/document_detail/51798.html#title-7je-5ba-sm2\" target=\"_blank\" rel=\"noopener noreferrer\">参考阿里云官网文档</a>）</p>\n<div class=\"language-bash\" data-ext=\"sh\" data-title=\"sh\"><pre class=\"language-bash\"><code><span class=\"token function\">chmod</span> <span class=\"token number\">400</span> <span class=\"token punctuation\">[</span>.pem私钥文件在本地机上的存储路径<span class=\"token punctuation\">]</span>\n</code></pre></div><div class=\"language-bash\" data-ext=\"sh\" data-title=\"sh\"><pre class=\"language-bash\"><code><span class=\"token function\">ssh</span> <span class=\"token parameter variable\">-i</span> <span class=\"token punctuation\">[</span>.pem私钥文件在本地机上的存储路径<span class=\"token punctuation\">]</span> root@<span class=\"token punctuation\">[</span>公网IP地址<span class=\"token punctuation\">]</span>\n</code></pre></div></li>\n<li>\n<p>输入以下命令修改 config 文件</p>\n<div class=\"language-bash\" data-ext=\"sh\" data-title=\"sh\"><pre class=\"language-bash\"><code><span class=\"token function\">vi</span> /etc/ssh/sshd_config\n</code></pre></div></li>\n<li>\n<p>按 <code>i</code> 进入编辑模式</p>\n<div class=\"language-bash\" data-ext=\"sh\" data-title=\"sh\"><pre class=\"language-bash\"><code><span class=\"token comment\">#禁用密码验证</span>\nPasswordAuthentication no\n<span class=\"token comment\">#启用密钥验证</span>\nPubkeyAuthentication <span class=\"token function\">yes</span>\n</code></pre></div></li>\n<li>\n<p>重启 ssh 服务</p>\n<div class=\"language-bash\" data-ext=\"sh\" data-title=\"sh\"><pre class=\"language-bash\"><code><span class=\"token function\">service</span> sshd restart\n</code></pre></div></li>\n</ol>\n<p>接下来在阿里云控制台使用 Workbench 远程连接，可以发现密码登录已经被禁用了，只能使用密钥登录。</p>\n<figure><img src=\"https://raw.githubusercontent.com/dribble-njr/typora-njr/master/img/step4-pw-fail.png\" alt=\"step4-pw-fail\" tabindex=\"0\" loading=\"lazy\"><figcaption>step4-pw-fail</figcaption></figure>\n",
      "image": "https://raw.githubusercontent.com/dribble-njr/typora-njr/master/img/step1-create-ssh.png",
      "date_published": "2021-05-12T00:00:00.000Z",
      "date_modified": "2024-01-09T04:30:54.000Z",
      "authors": [],
      "tags": [
        "linux"
      ]
    },
    {
      "title": "搭建 git 私服",
      "url": "https://dribble-njr.github.io/blog/blog/backend/linux/practice/002-build-git-server.html",
      "id": "https://dribble-njr.github.io/blog/blog/backend/linux/practice/002-build-git-server.html",
      "summary": " 提示 git 私服作用： 自己电脑和公司（或者实验室）电脑随时同步资料 GitHub、Gitee 私有仓库都是限流的，文件一旦多了，或者有图片文件，git pull 的时候半天拉不下来 保存一些隐私文件 开始搭建 服务器：centos7.9 本地电脑: Windows10 如果服务器没装 git 可以使用以下命令安装： 创建 git 用户 创建一个 ...",
      "content_html": "<div class=\"hint-container tip\">\n<p class=\"hint-container-title\">提示</p>\n<p><strong>git 私服作用：</strong></p>\n<ul>\n<li>自己电脑和公司（或者实验室）电脑随时同步资料</li>\n<li>GitHub、Gitee 私有仓库都是限流的，文件一旦多了，或者有图片文件，<code>git pull</code> 的时候半天拉不下来</li>\n<li>保存一些隐私文件</li>\n</ul>\n</div>\n<h2>开始搭建</h2>\n<ul>\n<li>服务器：centos7.9</li>\n<li>本地电脑: Windows10</li>\n</ul>\n<p>如果服务器没装 git 可以使用以下命令安装：</p>\n<div class=\"language-bash\" data-ext=\"sh\" data-title=\"sh\"><pre class=\"language-bash\"><code>yum <span class=\"token function\">install</span> <span class=\"token function\">git</span>\n</code></pre></div><h2>创建 git 用户</h2>\n<p>创建一个 Git 的 Linux 账户，这个账户只做 Git 私服的操作，之后就要设置 Linux Git 账户的密码，但由于我之前已经 ，因此不用设置密码。</p>\n<div class=\"language-bash\" data-ext=\"sh\" data-title=\"sh\"><pre class=\"language-bash\"><code>adduser <span class=\"token function\">git</span>\n</code></pre></div><p><strong>后面所有的操作都在 git 用户下进行：</strong></p>\n<div class=\"language-bash\" data-ext=\"sh\" data-title=\"sh\"><pre class=\"language-bash\"><code><span class=\"token punctuation\">[</span>root@instance-5fcyjde7 ~<span class=\"token punctuation\">]</span>su - <span class=\"token function\">git</span>\n</code></pre></div><p>看一下自己所在的目录，是不是在 git 目录下面：</p>\n<div class=\"language-bash\" data-ext=\"sh\" data-title=\"sh\"><pre class=\"language-bash\"><code><span class=\"token punctuation\">[</span>git@instance-5fcyjde7 ~<span class=\"token punctuation\">]</span>$ <span class=\"token builtin class-name\">pwd</span>\n/home/git\n</code></pre></div><h2>服务器端密钥管理</h2>\n<p>创建 <code>.ssh</code> 目录，如果 <code>.ssh</code> 已经存在了，可以忽略这一项。方便每次操作 Git 仓库的时候不用再去输入密码。</p>\n<div class=\"language-bash\" data-ext=\"sh\" data-title=\"sh\"><pre class=\"language-bash\"><code><span class=\"token builtin class-name\">cd</span> ~/\n<span class=\"token function\">mkdir</span> .ssh\n</code></pre></div><p>进入 <code>.ssh</code> 文件下，创建一个 <code>authorized_keys</code> 文件，并给 <code>authorized_keys</code> 文件设置权限。这个文件用来存放客户端的公钥。</p>\n<div class=\"language-bash\" data-ext=\"sh\" data-title=\"sh\"><pre class=\"language-bash\"><code><span class=\"token builtin class-name\">cd</span> ~/.ssh\n<span class=\"token function\">touch</span> authorized_keys\n<span class=\"token function\">chmod</span> <span class=\"token number\">700</span> /home/git/.ssh\n<span class=\"token function\">chmod</span> <span class=\"token number\">600</span> /home/git/.ssh/authorized_keys\n</code></pre></div><p>接下来要把客户端的公钥放在 Git 服务器上，我们再回到客户端，创建一个公钥。</p>\n<p>在我们自己的电脑上，有公钥和私钥。两个文件分别是：<code>id_rsa</code> 和 <code>id_rsa.pub</code>。</p>\n<p>如果是 Windows 系统公钥私钥的目录在 <code>C:\\Users\\用户名.ssh</code> 下。</p>\n<p>如果是 Mac 或者 Linux， 公钥和私钥的目录这里 <code>cd ~/.ssh/</code>， 如果发现自己的电脑上没有公钥私钥，那就自己创建一个。</p>\n<p>创建密钥的命令：</p>\n<div class=\"language-bash\" data-ext=\"sh\" data-title=\"sh\"><pre class=\"language-bash\"><code>ssh-keygen <span class=\"token parameter variable\">-t</span> rsa\n</code></pre></div><p>创建密钥的过程中，一路点击回车就可以了，不需要填任何东西。把刚刚生成的 <code>id_rsa.pub</code>，拷贝到 Git 服务器的 <code>/home/git/.ssh/</code> 目录。</p>\n<p>在 Git 服务器上，将公钥添加到 <code>authorized_keys</code> 文件中：</p>\n<div class=\"language-bash\" data-ext=\"sh\" data-title=\"sh\"><pre class=\"language-bash\"><code><span class=\"token builtin class-name\">cd</span> /home/git/.ssh/\n<span class=\"token function\">cat</span> id_rsa.pub <span class=\"token operator\">&gt;&gt;</span> authorized_keys\n</code></pre></div><p>在客户直接登录 Git 服务器，验证是否配置成功：</p>\n<div class=\"language-bash\" data-ext=\"sh\" data-title=\"sh\"><pre class=\"language-bash\"><code><span class=\"token function\">ssh</span> git@git 服务器 <span class=\"token function\">ip</span>\n<span class=\"token comment\"># 例如：</span>\n<span class=\"token function\">ssh</span> git@127.0.0.1\n</code></pre></div><p>如果可以免密登录，那就说明服务器端密钥配置成功了。</p>\n<p>在这里我还出现了一个错误：</p>\n<div class=\"language-bash\" data-ext=\"sh\" data-title=\"sh\"><pre class=\"language-bash\"><code>@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@\n@    WARNING: REMOTE HOST IDENTIFICATION HAS CHANGED<span class=\"token operator\">!</span>     @\n@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@\nIT IS POSSIBLE THAT SOMEONE IS DOING SOMETHING NASTY<span class=\"token operator\">!</span>\nSomeone could be eavesdropping on you right now <span class=\"token punctuation\">(</span>man-in-the-middle attack<span class=\"token punctuation\">)</span><span class=\"token operator\">!</span>\nIt is also possible that a <span class=\"token function\">host</span> key has just been changed.\nThe fingerprint <span class=\"token keyword\">for</span> the RSA key sent by the remote <span class=\"token function\">host</span> is\n<span class=\"token number\">51</span>:82:00:1c:7e:6f:ac:ac:de:f1:53:08:1c:7d:55:68.\nPlease contact your system administrator.\nAdd correct <span class=\"token function\">host</span> key <span class=\"token keyword\">in</span> /Users/isaacalves/.ssh/known_hosts to get rid of this message.\nOffending RSA key <span class=\"token keyword\">in</span> /Users/isaacalves/.ssh/known_hosts:12\nRSA <span class=\"token function\">host</span> key <span class=\"token keyword\">for</span> <span class=\"token number\">104.131</span>.16.158 has changed and you have requested strict checking.\nHost key verification failed.\n</code></pre></div><p>出现这个错误的原因是因为我更新了 <code>ssh key</code>，使用以下命令删除无效的 key 即可：</p>\n<div class=\"language-bash\" data-ext=\"sh\" data-title=\"sh\"><pre class=\"language-bash\"><code>ssh-keygen <span class=\"token parameter variable\">-R</span> <span class=\"token string\">\"服务器 ip\"</span>\n</code></pre></div><h2>服务器端部署 Git 仓库</h2>\n<p>接下来在服务器上部署 git 仓库。</p>\n<p>登录到 Git 服务器端，切换为 Git 账户。如果是 root 账户切换成 Git 账户：</p>\n<div class=\"language-bash\" data-ext=\"sh\" data-title=\"sh\"><pre class=\"language-bash\"><code><span class=\"token function\">su</span> - <span class=\"token function\">git</span>\n</code></pre></div><p>如果是其他账户切换为 Git 账户：</p>\n<div class=\"language-bash\" data-ext=\"sh\" data-title=\"sh\"><pre class=\"language-bash\"><code><span class=\"token function\">sudo</span> <span class=\"token function\">su</span> - <span class=\"token function\">git</span>\n</code></pre></div><p>进入 git 目录下：</p>\n<div class=\"language-bash\" data-ext=\"sh\" data-title=\"sh\"><pre class=\"language-bash\"><code><span class=\"token builtin class-name\">cd</span> ~/git\n</code></pre></div><p>创建一个文件夹名为 <code>world.git</code>，<code>.git</code> 后缀表明这是一个 git 仓库而不是别的什么文件。</p>\n<div class=\"language-bash\" data-ext=\"sh\" data-title=\"sh\"><pre class=\"language-bash\"><code><span class=\"token punctuation\">[</span>git@localhost git<span class=\"token punctuation\">]</span><span class=\"token comment\"># mkdir world.git</span>\n<span class=\"token punctuation\">[</span>git@localhost git<span class=\"token punctuation\">]</span><span class=\"token comment\"># cd word.git</span>\n</code></pre></div><p>初始化 word 仓库：</p>\n<div class=\"language-bash\" data-ext=\"sh\" data-title=\"sh\"><pre class=\"language-bash\"><code><span class=\"token function\">git</span> init <span class=\"token parameter variable\">--bare</span>\n</code></pre></div><p>如果想创建多个仓库，就在 <strong>git</strong> 用户下的 <code>~/git</code> 目录创建多个文件夹并<strong>初始化</strong>就可以了。</p>\n<p>现在服务端的 Git 仓库就部署完了，接下来就能像平时使用 github 一样使用这个 Git 私服了。</p>\n<h2>客户端连接远程仓库</h2>\n<p>在自己的电脑上创建一个文件夹也叫做 <code>world</code>。</p>\n<div class=\"hint-container tip\">\n<p class=\"hint-container-title\">提示</p>\n<p>其实这里命名是随意的，但是我们为了和 Git 服务端的仓库名称保持同步。这样更直观我们操作的是哪一个仓库。</p>\n</div>\n<div class=\"language-bash\" data-ext=\"sh\" data-title=\"sh\"><pre class=\"language-bash\"><code><span class=\"token function\">mkdir</span> world\n<span class=\"token builtin class-name\">cd</span> world\n</code></pre></div><p>进入 <code>world</code> 文件，并初始化操作：</p>\n<div class=\"language-bash\" data-ext=\"sh\" data-title=\"sh\"><pre class=\"language-bash\"><code><span class=\"token builtin class-name\">cd</span> world\n<span class=\"token function\">git</span> init\n</code></pre></div><p>在 <code>world</code> 目录上创建一个测试文件，并且将其添加到 Git 私服中：</p>\n<div class=\"language-bash\" data-ext=\"sh\" data-title=\"sh\"><pre class=\"language-bash\"><code><span class=\"token function\">touch</span> <span class=\"token builtin class-name\">test</span>\n<span class=\"token function\">git</span> <span class=\"token function\">add</span> <span class=\"token builtin class-name\">test</span>\n<span class=\"token function\">git</span> commit <span class=\"token parameter variable\">-m</span> <span class=\"token string\">\"test git server\"</span>\n</code></pre></div><p>将本地仓库和远端仓库同步：</p>\n<div class=\"language-bash\" data-ext=\"sh\" data-title=\"sh\"><pre class=\"language-bash\"><code><span class=\"token function\">git</span> remote <span class=\"token function\">add</span> origin git@服务器 ip:world.git\n<span class=\"token function\">git</span> push <span class=\"token parameter variable\">-u</span> origin master\n</code></pre></div><p>此时这个 <code>test</code> 测试文件就已经提交到我们的 Git 远端私服上了。</p>\n<h2>参考链接</h2>\n<ul>\n<li><a href=\"https://mp.weixin.qq.com/s/8m5zK29sX0D9NM_YB8KDNQ\" target=\"_blank\" rel=\"noopener noreferrer\">手把手来搭建 Git 私服！</a></li>\n<li><a href=\"https://www.digitalocean.com/community/questions/warning-remote-host-identification-has-changed\" target=\"_blank\" rel=\"noopener noreferrer\">WARNING: REMOTE HOST IDENTIFICATION HAS CHANGED</a></li>\n</ul>\n",
      "date_published": "2021-05-12T00:00:00.000Z",
      "date_modified": "2024-01-09T04:30:54.000Z",
      "authors": [],
      "tags": [
        "linux"
      ]
    },
    {
      "title": "配置宝塔面板",
      "url": "https://dribble-njr.github.io/blog/blog/backend/linux/practice/003-configure-bt.html",
      "id": "https://dribble-njr.github.io/blog/blog/backend/linux/practice/003-configure-bt.html",
      "summary": " 提示 服务器系统：centos 7.9。 其他系统可以参照 官网 进行搭建。 为了方便一键配置部署环境，因此选择宝塔面板。 安装宝塔面板 大概过两分钟即可安装成功，复制外网面板地址到浏览器打开，输入下面的 username 和 password。进去之后会弹出 推荐安装套件，因为只要部署 vuepress， 因此这里安装 nginx 就好。选择编译安...",
      "content_html": "<div class=\"hint-container tip\">\n<p class=\"hint-container-title\">提示</p>\n<p>服务器系统：centos 7.9。</p>\n<p>其他系统可以参照 <a href=\"https://www.bt.cn/bbs/thread-19376-1-1.html\" target=\"_blank\" rel=\"noopener noreferrer\">官网</a> 进行搭建。</p>\n<p>为了方便一键配置部署环境，因此选择宝塔面板。</p>\n</div>\n<h2>安装宝塔面板</h2>\n<div class=\"language-bash\" data-ext=\"sh\" data-title=\"sh\"><pre class=\"language-bash\"><code>yum <span class=\"token function\">install</span> <span class=\"token parameter variable\">-y</span> <span class=\"token function\">wget</span> <span class=\"token operator\">&amp;&amp;</span> <span class=\"token function\">wget</span> <span class=\"token parameter variable\">-O</span> install.sh http://download.bt.cn/install/install_6.0.sh <span class=\"token operator\">&amp;&amp;</span> <span class=\"token function\">sh</span> install.sh\n</code></pre></div><p>大概过两分钟即可安装成功，复制外网面板地址到浏览器打开，输入下面的 <code>username</code> 和 <code>password</code>。进去之后会弹出 <code>推荐安装套件</code>，因为只要部署 <code>vuepress</code>， 因此这里安装 <code>nginx</code> 就好。选择编译安装，更加稳定。</p>\n<figure><img src=\"https://raw.githubusercontent.com/dribble-njr/typora-njr/master/img/step1-install-bt.png\" alt=\"step1-install-bt\" tabindex=\"0\" loading=\"lazy\"><figcaption>step1-install-bt</figcaption></figure>\n<figure><img src=\"https://raw.githubusercontent.com/dribble-njr/typora-njr/master/img/step2-install-nginx.png\" alt=\"step2-install-nginx\" tabindex=\"0\" loading=\"lazy\"><figcaption>step2-install-nginx</figcaption></figure>\n<p>如果之后忘记用户名和密码，可以通过以下命令查找：</p>\n<div class=\"language-bash\" data-ext=\"sh\" data-title=\"sh\"><pre class=\"language-bash\"><code><span class=\"token punctuation\">[</span>root@xxxx ~<span class=\"token punctuation\">]</span><span class=\"token comment\"># bt</span>\n<span class=\"token punctuation\">[</span>root@xxxx ~<span class=\"token punctuation\">]</span><span class=\"token comment\"># 14</span>\n</code></pre></div><h2>参考链接</h2>\n<ul>\n<li><a href=\"https://www.bt.cn/bbs/thread-19376-1-1.html\" target=\"_blank\" rel=\"noopener noreferrer\">宝塔 Linux 面板安装教程</a></li>\n<li><a href=\"https://www.bilibili.com/video/BV12T4y1N7T9?from=search&amp;seid=2220018938681661072&amp;spm_id_from=333.337.0.0\" target=\"_blank\" rel=\"noopener noreferrer\">阿里云服务器 ECS 新手搭建网站视频教程（详细版）</a></li>\n</ul>\n",
      "image": "https://raw.githubusercontent.com/dribble-njr/typora-njr/master/img/step1-install-bt.png",
      "date_published": "2021-05-12T00:00:00.000Z",
      "date_modified": "2024-01-09T04:30:54.000Z",
      "authors": [],
      "tags": [
        "linux"
      ]
    },
    {
      "title": "自动部署 Vuepress 到服务器",
      "url": "https://dribble-njr.github.io/blog/blog/backend/linux/practice/004-automated-deployment.html",
      "id": "https://dribble-njr.github.io/blog/blog/backend/linux/practice/004-automated-deployment.html",
      "summary": " 提示 服务器：centos 7.9 本地电脑：Windows 10 服务器端 配置 nginx 登录宝塔面板，可以参考 。点击左侧网站 -> 添加站点。 step1-add-sitestep1-add-site 新增之后，点击设置 -> 配置文件。这三项按自己的情况配置，在后面 中会将 dist 文件推送到 root 配置项设置的文件夹下。 step...",
      "content_html": "<div class=\"hint-container tip\">\n<p class=\"hint-container-title\">提示</p>\n<p>服务器：centos 7.9</p>\n<p>本地电脑：Windows 10</p>\n</div>\n<h2>服务器端</h2>\n<h3>配置 nginx</h3>\n<p>登录宝塔面板，可以参考 。点击左侧网站 -&gt; 添加站点。</p>\n<figure><img src=\"https://raw.githubusercontent.com/dribble-njr/typora-njr/master/img/step1-add-site.png\" alt=\"step1-add-site\" tabindex=\"0\" loading=\"lazy\"><figcaption>step1-add-site</figcaption></figure>\n<p>新增之后，点击设置 -&gt; 配置文件。这三项按自己的情况配置，在后面  中会将 dist 文件推送到 <code>root</code> 配置项设置的文件夹下。</p>\n<figure><img src=\"https://raw.githubusercontent.com/dribble-njr/typora-njr/master/img/step2-nginx-conf.png\" alt=\"step2-nginx-conf\" tabindex=\"0\" loading=\"lazy\"><figcaption>step2-nginx-conf</figcaption></figure>\n<p>先测试下 nginx 有没有配置成功，本地打包文件：</p>\n<div class=\"language-bash\" data-ext=\"sh\" data-title=\"sh\"><pre class=\"language-bash\"><code><span class=\"token function\">yarn</span> build\n</code></pre></div><p>然后将生成的 <code>dist</code> 文件里的内容复制到刚才设置的项目根目录下。</p>\n<p>接着输入 <code>http://xxx.xxx.xxx.xxx:端口号</code>，就能访问成功了。</p>\n<div class=\"hint-container tip\">\n<p class=\"hint-container-title\">提示</p>\n<p>地址得用 http 协议，因为我们还没有配置 ssl 证书。</p>\n</div>\n<h3>配置 git 仓库</h3>\n<p>在  中已经搭建好了 git 私服，因此只需要初始化 <code>vuepress.git</code> 仓库即可。</p>\n<div class=\"language-bash\" data-ext=\"sh\" data-title=\"sh\"><pre class=\"language-bash\"><code><span class=\"token builtin class-name\">cd</span> /home/git\n<span class=\"token function\">mkdir</span> vuepress.git\n<span class=\"token builtin class-name\">cd</span> vuepress.git\n<span class=\"token function\">git</span> init <span class=\"token parameter variable\">--bare</span> vuepress.git\n</code></pre></div><h3>配置 hooks</h3>\n<p>先切换到 root 用户（<code>ctrl + d</code>），在 home 文件夹下创建一个临时存放 dist 文件夹的地方。</p>\n<div class=\"hint-container tip\">\n<p class=\"hint-container-title\">提示</p>\n<p>我这里选择存放到 home 文件夹下，但是 git 用户是没有权限的，因此切换到 root 用户，也可以存放到其他文件夹。</p>\n</div>\n<div class=\"language-bash\" data-ext=\"sh\" data-title=\"sh\"><pre class=\"language-bash\"><code><span class=\"token builtin class-name\">cd</span> /home\n<span class=\"token function\">mkdir</span> tmp\n<span class=\"token builtin class-name\">cd</span> tmp\n<span class=\"token function\">mkdir</span> vuepress\n</code></pre></div><p>接着将文件的所有权换成 git：</p>\n<div class=\"language-bash\" data-ext=\"sh\" data-title=\"sh\"><pre class=\"language-bash\"><code><span class=\"token function\">sudo</span> <span class=\"token function\">chown</span> git:git <span class=\"token parameter variable\">-R</span> vuepress\n</code></pre></div><p>然后，有一个关键的地方，要将 <code>/www/wwwroot</code> 的所有权换成 git：</p>\n<div class=\"language-bash\" data-ext=\"sh\" data-title=\"sh\"><pre class=\"language-bash\"><code><span class=\"token function\">sudo</span> <span class=\"token function\">chown</span> git:git /www/wwwroot\n</code></pre></div><p>做好这些准备之后，就可以开始配置 <code>hooks</code> 了。</p>\n<div class=\"language-bash\" data-ext=\"sh\" data-title=\"sh\"><pre class=\"language-bash\"><code><span class=\"token builtin class-name\">cd</span> /home/git/vuepress.git/hooks\n<span class=\"token comment\"># 通过 copy 新建 post-update 文件</span>\n<span class=\"token function\">cp</span> post-update.sample post-update\n<span class=\"token function\">vim</span> post-update\n</code></pre></div><p>接着将下面代码复制进去：</p>\n<div class=\"language-bash\" data-ext=\"sh\" data-title=\"sh\"><pre class=\"language-bash\"><code><span class=\"token builtin class-name\">echo</span> <span class=\"token string\">\"auto deploy start ===================================\"</span>\n<span class=\"token builtin class-name\">unset</span> GIT_DIR\n\n<span class=\"token comment\"># 项目文件夹</span>\n<span class=\"token assign-left variable\">PUBLIC_WWW</span><span class=\"token operator\">=</span>/www/wwwroot/vuepress\n<span class=\"token comment\"># git 仓库文件夹</span>\n<span class=\"token assign-left variable\">GIT_REPO</span><span class=\"token operator\">=</span>/home/git/vuepress.git\n<span class=\"token comment\"># 临时文件夹</span>\n<span class=\"token assign-left variable\">TMP_GIT_CLONE</span><span class=\"token operator\">=</span>/home/tmp/vuepress\n\n<span class=\"token comment\"># 移除临时文件夹</span>\n<span class=\"token function\">rm</span> <span class=\"token parameter variable\">-rf</span> <span class=\"token variable\">${TMP_GIT_CLONE}</span>\n<span class=\"token comment\"># 克隆 git 仓库到临时文件夹</span>\n<span class=\"token function\">git</span> clone <span class=\"token variable\">$GIT_REPO</span> <span class=\"token variable\">$TMP_GIT_CLONE</span>\n<span class=\"token comment\"># 移除项目文件夹</span>\n<span class=\"token comment\"># 宝塔为了安全，为自动在项目文件夹下新增 .user.ini 文件</span>\n<span class=\"token comment\"># 需要先关闭这个文件的功能才能删除项目文件夹</span>\n<span class=\"token builtin class-name\">cd</span> <span class=\"token variable\">${PUBLIC_WWW}</span>\nchattr <span class=\"token parameter variable\">-i</span> .user.ini\n<span class=\"token function\">rm</span> <span class=\"token parameter variable\">-rf</span> <span class=\"token variable\">${PUBLIC_WWW}</span>\n<span class=\"token comment\"># 将临时文件夹复制到项目文件夹</span>\n<span class=\"token function\">cp</span> <span class=\"token parameter variable\">-rf</span> <span class=\"token variable\">${TMP_GIT_CLONE}</span> <span class=\"token variable\">${PUBLIC_WWW}</span>\n\n<span class=\"token builtin class-name\">echo</span> <span class=\"token string\">\"auto deploy end ====================================\"</span>\n</code></pre></div><p>现在服务器端的准备工作已经完成了，接下来看看本地电脑的配置。</p>\n<h2>本地电脑</h2>\n<p>在本地项目根目录下新建 <code>deploy.sh</code> 脚本文件，内容如下：</p>\n<div class=\"language-bash\" data-ext=\"sh\" data-title=\"sh\"><pre class=\"language-bash\"><code><span class=\"token shebang important\">#!/usr/bin/env sh</span>\n\n<span class=\"token comment\"># 确保脚本抛出遇到的错误</span>\n<span class=\"token builtin class-name\">set</span> <span class=\"token parameter variable\">-e</span>\n\n<span class=\"token comment\"># 生成静态文件</span>\n<span class=\"token function\">yarn</span> build\n\n<span class=\"token comment\"># 进入生成的文件夹</span>\n<span class=\"token builtin class-name\">cd</span> docs/.vuepress/dist\n\n<span class=\"token comment\"># 初始化 git 仓库，并提交修改</span>\n<span class=\"token function\">git</span> init\n<span class=\"token function\">git</span> <span class=\"token function\">add</span> <span class=\"token parameter variable\">-A</span>\n<span class=\"token function\">git</span> commit <span class=\"token parameter variable\">-m</span> <span class=\"token string\">'deploy'</span>\n\n<span class=\"token comment\"># 发布到 git 私服， -f 强制覆盖</span>\n<span class=\"token function\">git</span> remote <span class=\"token function\">add</span> origin git@119.23.65.118:/home/git/vuepress.git\n<span class=\"token function\">git</span> push <span class=\"token parameter variable\">-f</span> git@119.23.65.118:/home/git/vuepress.git master\n\n<span class=\"token builtin class-name\">cd</span> -\n</code></pre></div><div class=\"hint-container tip\">\n<p class=\"hint-container-title\">提示</p>\n<p>了解更多 git 命令，可以查询<a href=\"https://git-scm.com/docs\" target=\"_blank\" rel=\"noopener noreferrer\">官方文档</a>。</p>\n</div>\n<h2>测试</h2>\n<p>vscode 终端中输入 <code>sh depoly.sh</code>，报错：</p>\n<div class=\"language-bash\" data-ext=\"sh\" data-title=\"sh\"><pre class=\"language-bash\"><code><span class=\"token function\">sh</span> <span class=\"token builtin class-name\">:</span> 无法将“sh”项识别为 cmdlet、函数、脚本文件或可运行程序的名称。\n请检查名称的拼写，如果包括路径，请确保路径正确，然后再试一次。\n</code></pre></div><p>了解到 windows 上可以使用 git bash 执行 shell 脚本，但我可不想每次执行的时候都打开 git bash，当然得找如何在 vscode 中执行 shell 脚本的办法。</p>\n<ol>\n<li>首先得在 vscode 中安装 code runner，之前一直用它来调试力扣上的题，已经安装过了。</li>\n<li>安装 git bash，这个不用说，安装 git 的时候就已经有了</li>\n<li>配置 bash 环境，找到 bash.exe 的安装目录，将它的位置添加到系统的环境变量中。</li>\n<li>配置 code runner：文件 -&gt; 首选项 -&gt; 设置 -&gt; 搜索 code runner</li>\n<li>打开终端，输入 <code>bash</code> 切换到 bash 环境，点击右上角的三角形即可运行。</li>\n</ol>\n<figure><img src=\"https://raw.githubusercontent.com/dribble-njr/typora-njr/master/img/step3-code-runner.png\" alt=\"step3-code-runner\" tabindex=\"0\" loading=\"lazy\"><figcaption>step3-code-runner</figcaption></figure>\n<p>现在随便更新点内容，并执行 <code>deploy.sh</code> 脚本：</p>\n<figure><img src=\"https://raw.githubusercontent.com/dribble-njr/typora-njr/master/img/step4-complete.png\" alt=\"step4-complete\" tabindex=\"0\" loading=\"lazy\"><figcaption>step4-complete</figcaption></figure>\n<p>再次访问 <code>http://xxx.xxx.xxx.xxx:端口号</code> 发现已经更新了。</p>\n<h2>参考链接</h2>\n<ul>\n<li><a href=\"http://chanwingwah.info/article/604eb2273c8ec67668f6fd41\" target=\"_blank\" rel=\"noopener noreferrer\">只需三步， 部署 Vuepress 并实现本地一行命令更新部署到服务器</a></li>\n<li><a href=\"https://www.imqianduan.com/git-svn/335.html\" target=\"_blank\" rel=\"noopener noreferrer\">使用 git hooks(post-receive)实现简单的远程自动部署</a></li>\n<li><a href=\"https://hjxlog.com/posts/20191130a1.html#7-%E9%85%8D%E7%BD%AENginx\" target=\"_blank\" rel=\"noopener noreferrer\">将 Hexo 部署到阿里云轻量服务器（保姆级教程）</a></li>\n<li><a href=\"https://www.cnblogs.com/yongdaimi/p/15247771.html\" target=\"_blank\" rel=\"noopener noreferrer\">VSCode: Windows 下配置 VSCode 运行 shell</a></li>\n</ul>\n",
      "image": "https://raw.githubusercontent.com/dribble-njr/typora-njr/master/img/step1-add-site.png",
      "date_published": "2021-05-12T00:00:00.000Z",
      "date_modified": "2024-01-09T04:30:54.000Z",
      "authors": [],
      "tags": [
        "linux"
      ]
    },
    {
      "title": "拖拽排序",
      "url": "https://dribble-njr.github.io/blog/blog/frontend/practice/001-sortable.html",
      "id": "https://dribble-njr.github.io/blog/blog/frontend/practice/001-sortable.html",
      "summary": "@dnd-kit - 用于 React 的轻量级、模块化、高性能、可访问和可扩展的拖放工具包。 RERRRRR Context Provider 踩坑 dnd kit 会将鼠标点击事件识别为拖拽事件 https://github.com/clauderic/dnd-kit/issues/1204 https://github.com/clauderic...",
      "content_html": "<p>@dnd-kit - 用于 React 的轻量级、模块化、高性能、可访问和可扩展的拖放工具包。<br>\nRERRRRR</p>\n<h2>Context Provider</h2>\n<div class=\"language-tsx\" data-ext=\"tsx\" data-title=\"tsx\"><pre class=\"language-tsx\"><code><span class=\"token keyword\">const</span> <span class=\"token function-variable function\">SortableItem</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span>props<span class=\"token operator\">:</span> <span class=\"token punctuation\">{</span>\n  id<span class=\"token operator\">:</span> <span class=\"token builtin\">string</span>\n  <span class=\"token function-variable function\">itemRender</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=&gt;</span> ReactElement\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=&gt;</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">const</span> <span class=\"token punctuation\">{</span> attributes<span class=\"token punctuation\">,</span> listeners<span class=\"token punctuation\">,</span> setNodeRef<span class=\"token punctuation\">,</span> transform<span class=\"token punctuation\">,</span> transition <span class=\"token punctuation\">}</span> <span class=\"token operator\">=</span>\n    <span class=\"token function\">useSortable</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span> id<span class=\"token operator\">:</span> props<span class=\"token punctuation\">.</span>id <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span>\n  <span class=\"token keyword\">const</span> style <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span>\n    transform<span class=\"token operator\">:</span> <span class=\"token constant\">CSS</span><span class=\"token punctuation\">.</span>Transform<span class=\"token punctuation\">.</span><span class=\"token function\">toString</span><span class=\"token punctuation\">(</span>transform<span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>\n    transition<span class=\"token operator\">:</span> transition<span class=\"token operator\">!</span><span class=\"token punctuation\">,</span>\n    cursor<span class=\"token operator\">:</span> <span class=\"token string\">'move'</span>\n  <span class=\"token punctuation\">}</span>\n  <span class=\"token keyword\">return</span> <span class=\"token punctuation\">(</span>\n    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>div</span>\n      <span class=\"token attr-name\">className</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>mr-2<span class=\"token punctuation\">\"</span></span>\n      <span class=\"token attr-name\">ref</span><span class=\"token script language-javascript\"><span class=\"token script-punctuation punctuation\">=</span><span class=\"token punctuation\">{</span>setNodeRef<span class=\"token punctuation\">}</span></span>\n      <span class=\"token attr-name\">style</span><span class=\"token script language-javascript\"><span class=\"token script-punctuation punctuation\">=</span><span class=\"token punctuation\">{</span><span class=\"token punctuation\">{</span> <span class=\"token operator\">...</span>style <span class=\"token punctuation\">}</span><span class=\"token punctuation\">}</span></span>\n      <span class=\"token spread\"><span class=\"token punctuation\">{</span><span class=\"token operator\">...</span>attributes<span class=\"token punctuation\">}</span></span>\n      <span class=\"token spread\"><span class=\"token punctuation\">{</span><span class=\"token operator\">...</span>listeners<span class=\"token punctuation\">}</span></span>\n    <span class=\"token punctuation\">&gt;</span></span><span class=\"token plain-text\">\n      </span><span class=\"token punctuation\">{</span>props<span class=\"token punctuation\">.</span><span class=\"token function\">itemRender</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">}</span><span class=\"token plain-text\">\n    </span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>div</span><span class=\"token punctuation\">&gt;</span></span>\n  <span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">}</span>\n</code></pre></div><h2>踩坑</h2>\n<h3>dnd kit 会将鼠标点击事件识别为拖拽事件</h3>\n<p><a href=\"https://github.com/clauderic/dnd-kit/issues/1204\" target=\"_blank\" rel=\"noopener noreferrer\">https://github.com/clauderic/dnd-kit/issues/1204</a></p>\n<p><a href=\"https://github.com/clauderic/dnd-kit/issues/893\" target=\"_blank\" rel=\"noopener noreferrer\">https://github.com/clauderic/dnd-kit/issues/893</a></p>\n<p>需要注册一些传感器：</p>\n<div class=\"language-javascript\" data-ext=\"js\" data-title=\"js\"><pre class=\"language-javascript\"><code><span class=\"token keyword\">const</span> sensor <span class=\"token operator\">=</span> <span class=\"token function\">useSensor</span><span class=\"token punctuation\">(</span>PointerSensor<span class=\"token punctuation\">,</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token literal-property property\">activationConstraint</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">{</span> <span class=\"token literal-property property\">distance</span><span class=\"token operator\">:</span> <span class=\"token number\">10</span> <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span>\n</code></pre></div><h3>条件拖拽</h3>\n<p>让元素在某些条件下允许排序：</p>\n<div class=\"language-javascript\" data-ext=\"js\" data-title=\"js\"><pre class=\"language-javascript\"><code><span class=\"token keyword\">const</span> <span class=\"token punctuation\">{</span> attributes<span class=\"token punctuation\">,</span> listeners<span class=\"token punctuation\">,</span> setNodeRef<span class=\"token punctuation\">,</span> transform<span class=\"token punctuation\">,</span> transition <span class=\"token punctuation\">}</span> <span class=\"token operator\">=</span>\n  <span class=\"token function\">useSortable</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span> <span class=\"token literal-property property\">id</span><span class=\"token operator\">:</span> props<span class=\"token punctuation\">.</span>id<span class=\"token punctuation\">,</span> <span class=\"token literal-property property\">disabled</span><span class=\"token operator\">:</span> props<span class=\"token punctuation\">.</span>disabled <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span>\n</code></pre></div><h3>video 元素无法被拖拽</h3>\n<p>外层包裹一个 <code>div</code>。</p>\n<div class=\"language-tsx\" data-ext=\"tsx\" data-title=\"tsx\"><pre class=\"language-tsx\"><code><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>div</span>\n  <span class=\"token attr-name\">className</span><span class=\"token script language-javascript\"><span class=\"token script-punctuation punctuation\">=</span><span class=\"token punctuation\">{</span>style<span class=\"token punctuation\">.</span>videoItem<span class=\"token punctuation\">}</span></span>\n  <span class=\"token attr-name\">onMouseEnter</span><span class=\"token script language-javascript\"><span class=\"token script-punctuation punctuation\">=</span><span class=\"token punctuation\">{</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=&gt;</span> <span class=\"token punctuation\">{</span>\n    videoRef<span class=\"token punctuation\">.</span>current<span class=\"token operator\">?.</span><span class=\"token function\">play</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">}</span></span>\n  <span class=\"token attr-name\">onMouseLeave</span><span class=\"token script language-javascript\"><span class=\"token script-punctuation punctuation\">=</span><span class=\"token punctuation\">{</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=&gt;</span> <span class=\"token punctuation\">{</span>\n    videoRef<span class=\"token punctuation\">.</span>current<span class=\"token operator\">?.</span><span class=\"token function\">pause</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">}</span></span>\n<span class=\"token punctuation\">&gt;</span></span><span class=\"token plain-text\">\n  </span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>video</span>\n    <span class=\"token attr-name\">ref</span><span class=\"token script language-javascript\"><span class=\"token script-punctuation punctuation\">=</span><span class=\"token punctuation\">{</span>videoRef<span class=\"token punctuation\">}</span></span>\n    <span class=\"token attr-name\">src</span><span class=\"token script language-javascript\"><span class=\"token script-punctuation punctuation\">=</span><span class=\"token punctuation\">{</span>props<span class=\"token punctuation\">.</span>resource<span class=\"token punctuation\">.</span>resourceUrl<span class=\"token punctuation\">}</span></span>\n    <span class=\"token attr-name\">controls</span>\n    <span class=\"token attr-name\">className</span><span class=\"token script language-javascript\"><span class=\"token script-punctuation punctuation\">=</span><span class=\"token punctuation\">{</span>style<span class=\"token punctuation\">.</span>video<span class=\"token punctuation\">}</span></span>\n    <span class=\"token attr-name\">muted</span>\n    <span class=\"token attr-name\">loop</span>\n  <span class=\"token punctuation\">&gt;</span></span><span class=\"token plain-text\">\n    </span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>track</span> <span class=\"token attr-name\">kind</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>captions<span class=\"token punctuation\">\"</span></span> <span class=\"token spread\"><span class=\"token punctuation\">{</span><span class=\"token operator\">...</span>props<span class=\"token punctuation\">}</span></span> <span class=\"token punctuation\">/&gt;</span></span><span class=\"token plain-text\">\n  </span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>video</span><span class=\"token punctuation\">&gt;</span></span><span class=\"token plain-text\">\n</span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>div</span><span class=\"token punctuation\">&gt;</span></span>\n</code></pre></div><h3>拖拽动画异常</h3>\n<p>排序策略</p>\n<p>需要选择默认</p>\n<h3>无限拖拽出现滚动条</h3>\n<div class=\"language-javascript\" data-ext=\"js\" data-title=\"js\"><pre class=\"language-javascript\"><code>modifiers<span class=\"token operator\">=</span><span class=\"token punctuation\">{</span><span class=\"token punctuation\">[</span>restrictToFirstScrollableAncestor<span class=\"token punctuation\">]</span><span class=\"token punctuation\">}</span>\n</code></pre></div>",
      "date_published": "2023-11-23T00:00:00.000Z",
      "date_modified": "2024-04-02T03:14:43.000Z",
      "authors": [],
      "tags": [
        "practice"
      ]
    },
    {
      "title": "图片批注",
      "url": "https://dribble-njr.github.io/blog/blog/frontend/practice/002-annotation.html",
      "id": "https://dribble-njr.github.io/blog/blog/frontend/practice/002-annotation.html",
      "summary": " 相关信息 demo: https://codesandbox.io/p/sandbox/image-annotation-pht676?file=%2Fsrc%2FApp.js%3A210%2C56 实现图片批注有两种方案，一种是通过 SVG 绘制，一种是通过 Canvas 绘制。以下是两者对比： 综上，选择使用 Canvas 实现图片批注。 加载图...",
      "content_html": "<div class=\"hint-container info\">\n<p class=\"hint-container-title\">相关信息</p>\n<p>demo: <a href=\"https://codesandbox.io/p/sandbox/image-annotation-pht676?file=%2Fsrc%2FApp.js%3A210%2C56\" target=\"_blank\" rel=\"noopener noreferrer\">https://codesandbox.io/p/sandbox/image-annotation-pht676?file=%2Fsrc%2FApp.js%3A210%2C56</a></p>\n</div>\n<p>实现图片批注有两种方案，一种是通过 <code>SVG</code> 绘制，一种是通过 <code>Canvas</code> 绘制。以下是两者对比：</p>\n<p>| 特点       | Canvas                           | SVG                                 |<br>\n|</p>\n",
      "date_published": "2023-12-28T00:00:00.000Z",
      "date_modified": "2024-01-07T10:18:51.000Z",
      "authors": [],
      "tags": [
        "practice"
      ]
    },
    {
      "title": "常见文件上传场景",
      "url": "https://dribble-njr.github.io/blog/blog/frontend/practice/003-file-upload.html",
      "id": "https://dribble-njr.github.io/blog/blog/frontend/practice/003-file-upload.html",
      "summary": "文件上传是前端开发中常见的需求，不管业务如何复杂，最关键的步骤在于如何获取文件数据，这里介绍几种常见的文件上传场景。 选择上传 拖拽上传 粘贴上传 选择上传 单文件 通过 input 标签的 type 属性设置为 file，然后监听 change 事件，获取文件数据。 多文件 通过 input 标签的 multiple 属性设置为 true，然后监听 ...",
      "content_html": "<p>文件上传是前端开发中常见的需求，不管业务如何复杂，最关键的步骤在于如何获取文件数据，这里介绍几种常见的文件上传场景。</p>\n<ul>\n<li>选择上传</li>\n<li>拖拽上传</li>\n<li>粘贴上传</li>\n</ul>\n<h2>选择上传</h2>\n<h3>单文件</h3>\n<p>通过 <code>input</code> 标签的 <code>type</code> 属性设置为 <code>file</code>，然后监听 <code>change</code> 事件，获取文件数据。</p>\n\n<h3>多文件</h3>\n<p>通过 <code>input</code> 标签的 <code>multiple</code> 属性设置为 <code>true</code>，然后监听 <code>change</code> 事件，获取文件数据。</p>\n\n<h3>目录上传</h3>\n<p>通过 <code>input</code> 标签的 <code>webkitdirectory</code> 属性设置为 <code>true</code>，然后监听 <code>change</code> 事件，获取文件数据。</p>\n\n<h2>拖拽上传</h2>\n<p>选择上传获取文件数据比较简单，下面来看最复杂的文件拖拽上传。</p>\n<p>使用 <a href=\"https://developer.mozilla.org/zh-CN/docs/Web/API/HTML_Drag_and_Drop_API\" target=\"_blank\" rel=\"noopener noreferrer\">HTML Drag and Drop API</a> 实现拖拽上传，主要涉及到以下几个事件：</p>\n<ul>\n<li><code>dragenter</code>：拖拽元素进入目标元素时触发；</li>\n<li><code>dragover</code>：拖拽元素在目标元素上移动时触发（每 100 毫秒触发一次）；</li>\n<li><code>dragleave</code>：拖拽元素离开目标元素时触发；</li>\n<li><code>drop</code>：拖拽元素在目标元素上释放时触发。</li>\n</ul>\n<h3>实现拖拽区域交互</h3>\n<p>首先实现拖拽区域的交互，当拖拽元素进入目标元素时，目标元素的边框变色。</p>\n<p>仅需要设置一个 <code>drag-enter</code> 类，当拖拽元素进入目标元素时，添加该类，离开时移除该类。</p>\n\n<h3>DataTransfer</h3>\n<p><code>DataTransfer</code> 对象用于保存拖动并放下过程中的数据。当拖拽元素在目标元素上释放时，需要监听 <code>onDrop</code> 事件，获取 <code>event.dataTransfer.items</code>。</p>\n<p><a href=\"https://developer.mozilla.org/zh-CN/docs/Web/API/DataTransfer\" target=\"_blank\" rel=\"noopener noreferrer\"><code>DataTransfer</code></a> 接口定义了一些方法和属性：</p>\n<div class=\"language-typescript\" data-ext=\"ts\" data-title=\"ts\"><pre class=\"language-typescript\"><code><span class=\"token keyword\">interface</span> <span class=\"token class-name\">DataTransfer</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token doc-comment comment\">/**\n   * 获取当前选定的拖放操作类型或者设置的为一个新的类型。值必须为 none, copy, link 或 move。\n   *\n   * [MDN Reference](https://developer.mozilla.org/docs/Web/API/DataTransfer/dropEffect)\n   */</span>\n  dropEffect<span class=\"token operator\">:</span> <span class=\"token string\">'none'</span> <span class=\"token operator\">|</span> <span class=\"token string\">'copy'</span> <span class=\"token operator\">|</span> <span class=\"token string\">'link'</span> <span class=\"token operator\">|</span> <span class=\"token string\">'move'</span>\n  <span class=\"token doc-comment comment\">/**\n   * 提供所有可用的操作类型。必须是 none, copy, copyLink, copyMove, link, linkMove, move, all or uninitialized 之一。\n   *\n   * [MDN Reference](https://developer.mozilla.org/docs/Web/API/DataTransfer/effectAllowed)\n   */</span>\n  effectAllowed<span class=\"token operator\">:</span>\n    <span class=\"token operator\">|</span> <span class=\"token string\">'none'</span>\n    <span class=\"token operator\">|</span> <span class=\"token string\">'copy'</span>\n    <span class=\"token operator\">|</span> <span class=\"token string\">'copyLink'</span>\n    <span class=\"token operator\">|</span> <span class=\"token string\">'copyMove'</span>\n    <span class=\"token operator\">|</span> <span class=\"token string\">'link'</span>\n    <span class=\"token operator\">|</span> <span class=\"token string\">'linkMove'</span>\n    <span class=\"token operator\">|</span> <span class=\"token string\">'move'</span>\n    <span class=\"token operator\">|</span> <span class=\"token string\">'all'</span>\n    <span class=\"token operator\">|</span> <span class=\"token string\">'uninitialized'</span>\n  <span class=\"token doc-comment comment\">/**\n   * 包含数据传输中可用的所有本地文件的列表。如果拖动操作不涉及拖动文件，则此属性为空列表。\n   *\n   * [MDN Reference](https://developer.mozilla.org/docs/Web/API/DataTransfer/files)\n   */</span>\n  <span class=\"token keyword\">readonly</span> files<span class=\"token operator\">:</span> FileList\n  <span class=\"token doc-comment comment\">/**\n   * 提供一个包含所有拖动数据列表的 DataTransferItemList 对象。\n   *\n   * [MDN Reference](https://developer.mozilla.org/docs/Web/API/DataTransfer/items)\n   */</span>\n  <span class=\"token keyword\">readonly</span> items<span class=\"token operator\">:</span> DataTransferItemList\n  <span class=\"token doc-comment comment\">/**\n   * 一个提供 dragstart 事件中设置的格式的 strings 数组。\n   *\n   * [MDN Reference](https://developer.mozilla.org/docs/Web/API/DataTransfer/types)\n   */</span>\n  <span class=\"token keyword\">readonly</span> types<span class=\"token operator\">:</span> ReadonlyArray<span class=\"token operator\">&lt;</span><span class=\"token builtin\">string</span><span class=\"token operator\">&gt;</span>\n  <span class=\"token doc-comment comment\">/**\n   * 删除与给定类型关联的数据。类型参数是可选的。如果类型为空或未指定，则删除与所有类型关联的数据。如果指定类型的数据不存在，或者 data transfer 中不包含任何数据，则该方法不会产生任何效果。\n   *\n   * [MDN Reference](https://developer.mozilla.org/docs/Web/API/DataTransfer/clearData)\n   */</span>\n  <span class=\"token function\">clearData</span><span class=\"token punctuation\">(</span>format<span class=\"token operator\">?</span><span class=\"token operator\">:</span> <span class=\"token builtin\">string</span><span class=\"token punctuation\">)</span><span class=\"token operator\">:</span> <span class=\"token keyword\">void</span>\n  <span class=\"token doc-comment comment\">/**\n   * 检索给定类型的数据，如果该类型的数据不存在或 data transfer 不包含数据，则返回空字符串。\n   *\n   * [MDN Reference](https://developer.mozilla.org/docs/Web/API/DataTransfer/getData)\n   */</span>\n  <span class=\"token function\">getData</span><span class=\"token punctuation\">(</span>format<span class=\"token operator\">:</span> <span class=\"token builtin\">string</span><span class=\"token punctuation\">)</span><span class=\"token operator\">:</span> <span class=\"token builtin\">string</span>\n  <span class=\"token doc-comment comment\">/**\n   * 设置给定类型的数据。如果该类型的数据不存在，则将其添加到末尾，以便类型列表中的最后一项将是新的格式。如果该类型的数据已经存在，则在相同位置替换现有数据。\n   *\n   * [MDN Reference](https://developer.mozilla.org/docs/Web/API/DataTransfer/setData)\n   */</span>\n  <span class=\"token function\">setData</span><span class=\"token punctuation\">(</span>format<span class=\"token operator\">:</span> <span class=\"token builtin\">string</span><span class=\"token punctuation\">,</span> data<span class=\"token operator\">:</span> <span class=\"token builtin\">string</span><span class=\"token punctuation\">)</span><span class=\"token operator\">:</span> <span class=\"token keyword\">void</span>\n  <span class=\"token doc-comment comment\">/**\n   * 用于设置自定义的拖动图像。\n   *\n   * [MDN Reference](https://developer.mozilla.org/docs/Web/API/DataTransfer/setDragImage)\n   */</span>\n  <span class=\"token function\">setDragImage</span><span class=\"token punctuation\">(</span>image<span class=\"token operator\">:</span> Element<span class=\"token punctuation\">,</span> x<span class=\"token operator\">:</span> <span class=\"token builtin\">number</span><span class=\"token punctuation\">,</span> y<span class=\"token operator\">:</span> <span class=\"token builtin\">number</span><span class=\"token punctuation\">)</span><span class=\"token operator\">:</span> <span class=\"token keyword\">void</span>\n<span class=\"token punctuation\">}</span>\n</code></pre></div><div class=\"hint-container warning\">\n<p class=\"hint-container-title\">注意</p>\n<p><code>DataTransfer.files</code> 属性只能返回文件列表，因此当拖动文件夹时，只能查看一个文件夹信息。</p>\n<p>因此如果拖拽文件夹，需要使用 <code>dataTransfer.items</code>，该属性包含一个 <code>DataTransferItem</code> 数组。</p>\n</div>\n<div class=\"language-diff\" data-ext=\"diff\" data-title=\"diff\"><pre class=\"language-diff\"><code><span class=\"token unchanged\"><span class=\"token prefix unchanged\"> </span><span class=\"token line\"> const handleDrop = (e) =&gt; {\n</span><span class=\"token prefix unchanged\"> </span><span class=\"token line\">   e.preventDefault()\n</span><span class=\"token prefix unchanged\"> </span><span class=\"token line\">   setDragEnter(false)\n</span></span><span class=\"token inserted-sign inserted\"><span class=\"token prefix inserted\">+</span><span class=\"token line\">   getFileData(e.dataTransfer.items)\n</span></span><span class=\"token unchanged\"><span class=\"token prefix unchanged\"> </span><span class=\"token line\"> }\n</span></span></code></pre></div><h3>获取文件路径</h3>\n<p><code>DataTransferItemList</code> 数组中包含 <code>DataTransferItem</code> 元素，拖拽几个文件或文件夹则会包含多少个 <code>DataTransferItem</code> 对象。</p>\n<p><a href=\"https://developer.mozilla.org/zh-CN/docs/Web/API/DataTransferItem\" target=\"_blank\" rel=\"noopener noreferrer\"><code>DataTransferItem</code></a> 接口定义了一些属性和方法：</p>\n<div class=\"language-typescript\" data-ext=\"ts\" data-title=\"ts\"><pre class=\"language-typescript\"><code><span class=\"token keyword\">interface</span> <span class=\"token class-name\">DataTransferItem</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token doc-comment comment\">/**\n   * 拖拽项的种类，string 或是 file。\n   *\n   * [MDN Reference](https://developer.mozilla.org/docs/Web/API/DataTransferItem/kind)\n   */</span>\n  <span class=\"token keyword\">readonly</span> kind<span class=\"token operator\">:</span> <span class=\"token builtin\">string</span>\n  <span class=\"token doc-comment comment\">/**\n   * 拖拽项的类型，一般是一个 MIME 类型。\n   *\n   * [MDN Reference](https://developer.mozilla.org/docs/Web/API/DataTransferItem/type)\n   */</span>\n  <span class=\"token keyword\">readonly</span> type<span class=\"token operator\">:</span> <span class=\"token builtin\">string</span>\n  <span class=\"token doc-comment comment\">/**\n   * 返回一个关联拖拽项的 File 对象（当拖拽项不是一个文件时返回 null）。\n   *\n   * [MDN Reference](https://developer.mozilla.org/docs/Web/API/DataTransferItem/getAsFile)\n   */</span>\n  <span class=\"token function\">getAsFile</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token operator\">:</span> File <span class=\"token operator\">|</span> <span class=\"token keyword\">null</span>\n  <span class=\"token doc-comment comment\">/**\n   * 使用拖拽项的字符串作为参数执行指定回调函数。\n   *\n   * [MDN Reference](https://developer.mozilla.org/docs/Web/API/DataTransferItem/getAsString)\n   */</span>\n  <span class=\"token function\">getAsString</span><span class=\"token punctuation\">(</span>callback<span class=\"token operator\">:</span> FunctionStringCallback <span class=\"token operator\">|</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">)</span><span class=\"token operator\">:</span> <span class=\"token keyword\">void</span>\n  <span class=\"token doc-comment comment\">/**\n   * 返回一个基于 FileSystemEntry (en-US) 的对象来表示文件系统中选中的项目。通常是返回一个FileSystemFileEntry 或是 FileSystemDirectoryEntry 对象。\n   *\n   * [MDN Reference](https://developer.mozilla.org/docs/Web/API/DataTransferItem/webkitGetAsEntry) */</span>\n  <span class=\"token function\">webkitGetAsEntry</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token operator\">:</span> FileSystemEntry <span class=\"token operator\">|</span> <span class=\"token keyword\">null</span>\n<span class=\"token punctuation\">}</span>\n</code></pre></div><p>由于拖拽对象可能是文件也可能是文件夹，因此需要通过该对象上的 <a href=\"https://developer.mozilla.org/docs/Web/API/DataTransferItem/webkitGetAsEntry\" target=\"_blank\" rel=\"noopener noreferrer\"><code>webkitGetAsEntry()</code></a> 方法，获取 <a href=\"https://developer.mozilla.org/en-US/docs/Web/API/FileSystemEntry\" target=\"_blank\" rel=\"noopener noreferrer\"><code>FileSystemEnry</code></a> 对象，该对象可能是 <a href=\"https://developer.mozilla.org/zh-CN/docs/Web/API/FileSystemFileEntry\" target=\"_blank\" rel=\"noopener noreferrer\"><code>FileSystemFileEntry</code></a> 和 <a href=\"https://developer.mozilla.org/zh-CN/docs/Web/API/FileSystemDirectoryEntry\" target=\"_blank\" rel=\"noopener noreferrer\"><code>FileSystemDirectoryEntry</code></a>。</p>\n<div class=\"language-javascript\" data-ext=\"js\" data-title=\"js\"><pre class=\"language-javascript\"><code><span class=\"token keyword\">const</span> <span class=\"token function-variable function\">getFileData</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\">items</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=&gt;</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token operator\">!</span>items<span class=\"token punctuation\">)</span> <span class=\"token keyword\">return</span>\n\n  <span class=\"token comment\">// 文件或目录路径列表</span>\n  <span class=\"token keyword\">const</span> fileEntryList <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span>\n\n  <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">const</span> item <span class=\"token keyword\">of</span> items<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">const</span> entry <span class=\"token operator\">=</span> item<span class=\"token punctuation\">.</span><span class=\"token function\">webkitGetAsEntry</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>entry<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n      fileEntryList<span class=\"token punctuation\">.</span><span class=\"token function\">push</span><span class=\"token punctuation\">(</span>entry<span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">}</span>\n  <span class=\"token punctuation\">}</span>\n\n  <span class=\"token comment\">// 这里上次一个文件夹，三个文件</span>\n  <span class=\"token comment\">// [DirectoryEntry, FileEntry, FileEntry, FileEntry]</span>\n  console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>fileEntryList<span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">}</span>\n</code></pre></div><h3>递归获取文件</h3>\n<p>当获取到所有 <code>FileSystemEntry</code> 对象后，即可递归获取文件。</p>\n<div class=\"language-javascript\" data-ext=\"js\" data-title=\"js\"><pre class=\"language-javascript\"><code><span class=\"token keyword\">const</span> files <span class=\"token operator\">=</span> <span class=\"token keyword\">await</span> <span class=\"token function\">tranverseFileTree</span><span class=\"token punctuation\">(</span>fileEntryList<span class=\"token punctuation\">)</span>\n</code></pre></div><p>在 <code>traverseFileTree</code> 函数中，需要解析 <code>Entry</code> 获取文件对象：</p>\n<ul>\n<li>当对象是一个文件时，使用 <code>file()</code> 函数获取 <code>File</code> 对象；</li>\n<li>当对象是一个文件夹时，使用 <code>createReader()</code> 函数创建一个阅读器，可以读取目录中的所有文件。</li>\n</ul>\n<div class=\"hint-container warning\">\n<p class=\"hint-container-title\">注意</p>\n<p>这两个函数都是异步执行，因此需要使用 <code>promise</code>，保证能获取到文件对象。</p>\n</div>\n<div class=\"language-javascript\" data-ext=\"js\" data-title=\"js\"><pre class=\"language-javascript\"><code><span class=\"token keyword\">const</span> <span class=\"token function-variable function\">traverseFileTree</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\">fileEntryList</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=&gt;</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">return</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Promise</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">resolve</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=&gt;</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">const</span> promises <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span>\n\n    <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">const</span> entry <span class=\"token keyword\">of</span> fileEntryList<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n      <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>entry<span class=\"token punctuation\">.</span>isFile<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token comment\">// 文件，使用 file() 函数获取文件对象</span>\n        promises<span class=\"token punctuation\">.</span><span class=\"token function\">push</span><span class=\"token punctuation\">(</span>\n          <span class=\"token keyword\">new</span> <span class=\"token class-name\">Promise</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">resolve</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=&gt;</span> <span class=\"token punctuation\">{</span>\n            entry<span class=\"token punctuation\">.</span><span class=\"token function\">file</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">file</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=&gt;</span> <span class=\"token punctuation\">{</span>\n              <span class=\"token function\">resolve</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">[</span>file<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span>\n            <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span>\n          <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span>\n        <span class=\"token punctuation\">)</span>\n      <span class=\"token punctuation\">}</span> <span class=\"token keyword\">else</span> <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>entry<span class=\"token punctuation\">.</span>isDirectory<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token comment\">// 文件夹，使用 createReader() 函数获取目录所有文件 entry</span>\n        <span class=\"token comment\">// 然后再递归调用 traverseFileTree 函数</span>\n        <span class=\"token keyword\">const</span> dirReader <span class=\"token operator\">=</span> entry<span class=\"token punctuation\">.</span><span class=\"token function\">createReader</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n        promises<span class=\"token punctuation\">.</span><span class=\"token function\">push</span><span class=\"token punctuation\">(</span>\n          <span class=\"token keyword\">new</span> <span class=\"token class-name\">Promise</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">resolve</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=&gt;</span> <span class=\"token punctuation\">{</span>\n            dirReader<span class=\"token punctuation\">.</span><span class=\"token function\">readEntries</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">entries</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=&gt;</span> <span class=\"token punctuation\">{</span>\n              <span class=\"token function\">resolve</span><span class=\"token punctuation\">(</span><span class=\"token function\">traverseFileTree</span><span class=\"token punctuation\">(</span>entries<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n            <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span>\n          <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span>\n        <span class=\"token punctuation\">)</span>\n      <span class=\"token punctuation\">}</span>\n    <span class=\"token punctuation\">}</span>\n\n    Promise<span class=\"token punctuation\">.</span><span class=\"token function\">all</span><span class=\"token punctuation\">(</span>promises<span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">then</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">fileList</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=&gt;</span> <span class=\"token punctuation\">{</span>\n      <span class=\"token function\">resolve</span><span class=\"token punctuation\">(</span>fileList<span class=\"token punctuation\">.</span><span class=\"token function\">flat</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">}</span>\n</code></pre></div>\n<div class=\"hint-container warning\">\n<p class=\"hint-container-title\">注意</p>\n<p>以为拖拽上传就到此结束了吗？当然没有，还有一个 edge case 需要处理。</p>\n</div>\n<h4>拖拽文件数量超过 100 处理</h4>\n<p>当文件夹中文件数量超过 100 个时，<code>readEntries</code> 方法只会返回 100 个文件，因此需要递归调用 <code>readEntries</code> 方法，直到返回空数组。</p>\n<div class=\"language-javascript\" data-ext=\"js\" data-title=\"js\"><pre class=\"language-javascript\"><code><span class=\"token comment\">// dirReader.readEntries 每次只能读取 100 个文件，所以需要递归读取全部文件</span>\n<span class=\"token keyword\">const</span> <span class=\"token function-variable function\">readAllEntries</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\">dirReader<span class=\"token punctuation\">,</span> items <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span></span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=&gt;</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">return</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Promise</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">resolve</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=&gt;</span> <span class=\"token punctuation\">{</span>\n    dirReader<span class=\"token punctuation\">.</span><span class=\"token function\">readEntries</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">entries</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=&gt;</span> <span class=\"token punctuation\">{</span>\n      <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>entries<span class=\"token punctuation\">.</span>length<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token comment\">// 如果还有文件，将其添加到 items 列表中并继续读取</span>\n        items<span class=\"token punctuation\">.</span><span class=\"token function\">push</span><span class=\"token punctuation\">(</span><span class=\"token operator\">...</span>entries<span class=\"token punctuation\">)</span>\n        <span class=\"token function\">resolve</span><span class=\"token punctuation\">(</span><span class=\"token function\">readAllEntries</span><span class=\"token punctuation\">(</span>dirReader<span class=\"token punctuation\">,</span> items<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n      <span class=\"token punctuation\">}</span> <span class=\"token keyword\">else</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token comment\">// 如果没有更多文件，则完成读取，并返回获取到的全部文件</span>\n        <span class=\"token function\">resolve</span><span class=\"token punctuation\">(</span>items<span class=\"token punctuation\">)</span>\n      <span class=\"token punctuation\">}</span>\n    <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">const</span> dirReader <span class=\"token operator\">=</span> entry<span class=\"token punctuation\">.</span><span class=\"token function\">createReader</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\npromises<span class=\"token punctuation\">.</span><span class=\"token function\">push</span><span class=\"token punctuation\">(</span>\n  <span class=\"token function\">readAllEntries</span><span class=\"token punctuation\">(</span>dirReader<span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">then</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">entries</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=&gt;</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">return</span> <span class=\"token function\">traverseFileTree</span><span class=\"token punctuation\">(</span>entries<span class=\"token punctuation\">)</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">)</span>\n</code></pre></div>\n<div class=\"hint-container warning\">\n<p class=\"hint-container-title\">注意</p>\n<p>你以为又结束了吗？此时产品跑过来和你说需要保留文件目录结构，但是上面已经说过，<code>DataTransfer.items</code> 属性只能返回文件列表，因此需要自己实现文件路径信息。</p>\n</div>\n<h4>保留文件目录结构</h4>\n<p>思考一下如何保留文件目录结构，只需要保留文件目录信息即可，剩下的事情就交给后端进行解析。</p>\n<p>看一下拖拽上传后的获取的 <code>File</code> 对象，其中的 <code>webkitRelativePath</code> 竟然是一个空值：</p>\n<div class=\"language-javascript\" data-ext=\"js\" data-title=\"js\"><pre class=\"language-javascript\"><code><span class=\"token punctuation\">{</span>\n  <span class=\"token literal-property property\">lastModified</span><span class=\"token operator\">:</span> <span class=\"token number\">1691144702000</span><span class=\"token punctuation\">,</span>\n  <span class=\"token literal-property property\">lastModifiedDate</span><span class=\"token operator\">:</span> Fri Aug <span class=\"token number\">04</span> <span class=\"token number\">2023</span> <span class=\"token number\">18</span><span class=\"token operator\">:</span><span class=\"token number\">25</span><span class=\"token operator\">:</span><span class=\"token number\">02</span> <span class=\"token constant\">GMT</span><span class=\"token operator\">+</span><span class=\"token number\">0800</span> <span class=\"token punctuation\">(</span>中国标准时间<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n  <span class=\"token literal-property property\">name</span><span class=\"token operator\">:</span><span class=\"token string\">\"2083_00008.png\"</span><span class=\"token punctuation\">,</span>\n  <span class=\"token literal-property property\">size</span><span class=\"token operator\">:</span> <span class=\"token number\">118241</span><span class=\"token punctuation\">,</span>\n  <span class=\"token literal-property property\">type</span><span class=\"token operator\">:</span> <span class=\"token string\">\"image/png\"</span><span class=\"token punctuation\">,</span>\n  <span class=\"token literal-property property\">webkitRelativePath</span><span class=\"token operator\">:</span> <span class=\"token string\">\"\"</span><span class=\"token punctuation\">,</span>\n  <span class=\"token punctuation\">[</span><span class=\"token punctuation\">[</span>Prototype<span class=\"token punctuation\">]</span><span class=\"token punctuation\">]</span><span class=\"token operator\">:</span> File\n<span class=\"token punctuation\">}</span>\n</code></pre></div><div class=\"hint-container warning\">\n<p class=\"hint-container-title\">注意</p>\n<p><a href=\"https://developer.mozilla.org/zh-CN/docs/Web/API/File/webkitRelativePath\" target=\"_blank\" rel=\"noopener noreferrer\"><code>webkitRelativePath</code></a> 属性记录了文件的路径，但是该属性只有在使用 <code>input</code> 上传时才会有值，因此需要自己实现该属性。</p>\n</div>\n<p>那么如何实现该属性，<a href=\"https://developer.mozilla.org/en-US/docs/Web/API/FileSystemEntry\" target=\"_blank\" rel=\"noopener noreferrer\">FileSystemEntry</a> 对象上会有一个 <code>name</code> 属性，记录了路径的名字。</p>\n<p>因此只需要在 <code>traverseFileTree</code> 函数中，将文件路径信息保存到 <code>File</code> 对象上的 <code>webkitRelativePath</code> 中即可。</p>\n<p>下面看完整实现：</p>\n\n<div class=\"hint-container warning\">\n<p class=\"hint-container-title\">注意</p>\n<p>到此，拖拽上传就已经全部实现完，但是由于使用的都是最新标准，如果使用 ts 可能会有类型报错：</p>\n<div class=\"language-bash\" data-ext=\"sh\" data-title=\"sh\"><pre class=\"language-bash\"><code>error TS2304: Cannot <span class=\"token function\">find</span> name <span class=\"token string\">'FileSystemEntry'</span>\n</code></pre></div><p>因此需要自定义类型：</p>\n<div class=\"language-typescript\" data-ext=\"ts\" data-title=\"ts\"><pre class=\"language-typescript\"><code><span class=\"token keyword\">export</span> <span class=\"token keyword\">interface</span> <span class=\"token class-name\">IFileSystemEntry</span> <span class=\"token punctuation\">{</span>\n  isFile<span class=\"token operator\">:</span> <span class=\"token builtin\">boolean</span>\n  isDirectory<span class=\"token operator\">:</span> <span class=\"token builtin\">boolean</span>\n  file<span class=\"token operator\">?</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">(</span><span class=\"token function-variable function\">callback</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">(</span>file<span class=\"token operator\">:</span> File<span class=\"token punctuation\">)</span> <span class=\"token operator\">=&gt;</span> <span class=\"token keyword\">void</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=&gt;</span> <span class=\"token keyword\">void</span>\n  createReader<span class=\"token operator\">?</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=&gt;</span> <span class=\"token builtin\">any</span> <span class=\"token comment\">// 为了方便使用 any，也可以创建具体类型</span>\n<span class=\"token punctuation\">}</span>\n</code></pre></div></div>\n<h2>粘贴上传</h2>\n<p>经历过拖拽上传的痛苦折磨后，实现粘贴上传相信也不在话下了。</p>\n<p>只需要监听 <code>paste</code> 事件，<code>clipboardData</code> 中包含了粘贴的文件数据。</p>\n\n<div class=\"hint-container warning\">\n<p class=\"hint-container-title\">注意</p>\n<p>粘贴上传一般不会有特别复杂的场景，一般是粘贴一个图片或者文件，因此这里没考虑文件夹上传等场景。</p>\n</div>\n",
      "date_published": "2023-12-28T00:00:00.000Z",
      "date_modified": "2024-01-07T10:18:51.000Z",
      "authors": [],
      "tags": [
        "practice"
      ]
    },
    {
      "title": "全局上传组件",
      "url": "https://dribble-njr.github.io/blog/blog/frontend/practice/004-global-upload.html",
      "id": "https://dribble-njr.github.io/blog/blog/frontend/practice/004-global-upload.html",
      "summary": "上传需要涉及到各个页面，因此需要实现一个全局上传组件，同时支持拖拽上传。 根据产品 PRD，整理出如下几个重点部分： 管理全局的上传任务状态 文件上传需要绑定每次上传任务的回调 拖拽内容区域上传 上传文件时进度以文件夹为单位进行展示 管理全局的上传任务状态 第一个问题可以使用 Context 或着 Redux 解决，在这里由于没有涉及到其他更复杂的状态...",
      "content_html": "<p>上传需要涉及到各个页面，因此需要实现一个全局上传组件，同时支持拖拽上传。</p>\n<p>根据产品 PRD，整理出如下几个重点部分：</p>\n<ol>\n<li>管理全局的上传任务状态</li>\n<li>文件上传需要绑定每次上传任务的回调</li>\n<li>拖拽内容区域上传</li>\n<li>上传文件时进度以文件夹为单位进行展示</li>\n</ol>\n<h2>管理全局的上传任务状态</h2>\n<p>第一个问题可以使用 Context 或着 Redux 解决，在这里由于没有涉及到其他更复杂的状态管理，因此使用更轻量的 Context。</p>\n<p>每当添加上传任务，都可以通过 Context 提供的方法更新状态，同时所有引用了此状态的组件（如全局上传抽屉）都会被重新渲染以显示最新的状态。</p>\n<p>在切换页面时需要保留全局上传组件的状态。 因此应将其定义在一个比页面组件生命周期更长的地方，页面切换时，只是 <code>Router</code> 的子组件（即页面组件）在发生变化，而 <code>Router</code> 和它的父组件 <code>App</code> 并未发生变化，也就不会触发重新渲染。</p>\n<div class=\"language-tsx\" data-ext=\"tsx\" data-title=\"tsx\"><pre class=\"language-tsx\"><code><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">UploadContextProvider</span></span><span class=\"token punctuation\">&gt;</span></span><span class=\"token plain-text\">\n  </span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">AppRouting</span></span> <span class=\"token punctuation\">/&gt;</span></span><span class=\"token plain-text\">\n  </span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">GlobalUploadDrawer</span></span> <span class=\"token punctuation\">/&gt;</span></span><span class=\"token plain-text\">\n</span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span><span class=\"token class-name\">UploadContextProvider</span></span><span class=\"token punctuation\">&gt;</span></span>\n</code></pre></div><p>这样，在全局上传组件被创建后，就会一直存在，即使页面发生切换。同时，由于它包裹在 <code>UploadContextProvider</code> 下面，能够随时读取和更新全局的上传状态。</p>\n<h2>绑定对应回调</h2>\n<p>在上传任务的处理中，最初将上传任务交给 <code>UploadContext</code> 处理：</p>\n<div class=\"language-tsx\" data-ext=\"tsx\" data-title=\"tsx\"><pre class=\"language-tsx\"><code><span class=\"token keyword\">interface</span> <span class=\"token class-name\">UploadCallbackType</span> <span class=\"token punctuation\">{</span>\n  onStartCallback<span class=\"token operator\">?</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">(</span>data<span class=\"token operator\">:</span> ZdtUploaderOutput<span class=\"token punctuation\">)</span> <span class=\"token operator\">=&gt;</span> <span class=\"token keyword\">void</span>\n  onProgressCallback<span class=\"token operator\">?</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">(</span>data<span class=\"token operator\">:</span> ZdtUploaderOutput<span class=\"token punctuation\">)</span> <span class=\"token operator\">=&gt;</span> <span class=\"token keyword\">void</span>\n  onSuccessCallback<span class=\"token operator\">?</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">(</span>data<span class=\"token operator\">:</span> ZdtUploaderOutput<span class=\"token punctuation\">)</span> <span class=\"token operator\">=&gt;</span> <span class=\"token keyword\">void</span>\n  onFailCallback<span class=\"token operator\">?</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">(</span>data<span class=\"token operator\">:</span> ZdtUploaderOutput<span class=\"token punctuation\">)</span> <span class=\"token operator\">=&gt;</span> <span class=\"token keyword\">void</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">interface</span> <span class=\"token class-name\">UploadContextType</span> <span class=\"token punctuation\">{</span>\n  uploadFiles<span class=\"token operator\">:</span> UploadFile<span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span>\n  <span class=\"token function-variable function\">handleUpload</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">(</span>files<span class=\"token operator\">:</span> File<span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span> callback<span class=\"token operator\">:</span> UploadCallbackType<span class=\"token punctuation\">)</span> <span class=\"token operator\">=&gt;</span> <span class=\"token keyword\">void</span>\n  <span class=\"token function-variable function\">handleCancel</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">(</span>file<span class=\"token operator\">:</span> File<span class=\"token punctuation\">)</span> <span class=\"token operator\">=&gt;</span> <span class=\"token keyword\">void</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">export</span> <span class=\"token keyword\">const</span> UploadContext <span class=\"token operator\">=</span> <span class=\"token generic-function\"><span class=\"token function\">createContext</span><span class=\"token generic class-name\"><span class=\"token operator\">&lt;</span>UploadContextType<span class=\"token operator\">&gt;</span></span></span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span>\n  uploadFiles<span class=\"token operator\">:</span> <span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span>\n  <span class=\"token function-variable function\">handleUpload</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=&gt;</span> <span class=\"token punctuation\">{</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n  <span class=\"token function-variable function\">handleCancel</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=&gt;</span> <span class=\"token punctuation\">{</span><span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span>\n\n<span class=\"token keyword\">interface</span> <span class=\"token class-name\">UploadContextProviderProps</span> <span class=\"token punctuation\">{</span><span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">export</span> <span class=\"token keyword\">const</span> UploadContextProvider<span class=\"token operator\">:</span> <span class=\"token constant\">FC</span><span class=\"token operator\">&lt;</span>UploadContextProviderProps<span class=\"token operator\">&gt;</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span>\n  children\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=&gt;</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">const</span> <span class=\"token punctuation\">[</span>uploadFiles<span class=\"token punctuation\">,</span> setUploadFiles<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token generic-function\"><span class=\"token function\">useState</span><span class=\"token generic class-name\"><span class=\"token operator\">&lt;</span>UploadFile<span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token operator\">&gt;</span></span></span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span>\n\n  <span class=\"token comment\">// 这里需要生成十个 ref</span>\n  <span class=\"token keyword\">const</span> uploaderRef <span class=\"token operator\">=</span> <span class=\"token generic-function\"><span class=\"token function\">useRef</span><span class=\"token generic class-name\"><span class=\"token operator\">&lt;</span>ZdtUploaderRef<span class=\"token operator\">&gt;</span></span></span><span class=\"token punctuation\">(</span><span class=\"token keyword\">null</span><span class=\"token punctuation\">)</span>\n\n  <span class=\"token keyword\">const</span> uploadTaskRef <span class=\"token operator\">=</span>\n    <span class=\"token generic-function\"><span class=\"token function\">useRef</span><span class=\"token generic class-name\"><span class=\"token operator\">&lt;</span>Map<span class=\"token operator\">&lt;</span>ZdtUploaderOutput <span class=\"token operator\">|</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">,</span> UploadCallbackType<span class=\"token operator\">&gt;&gt;</span></span></span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token comment\">// 上传任务队列</span>\n\n  <span class=\"token keyword\">const</span> <span class=\"token function-variable function\">handleUpload</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span>files<span class=\"token operator\">:</span> File<span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span> callback<span class=\"token operator\">:</span> UploadCallbackType<span class=\"token punctuation\">)</span> <span class=\"token operator\">=&gt;</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">const</span> taskId <span class=\"token operator\">=</span> <span class=\"token template-string\"><span class=\"token template-punctuation string\">`</span><span class=\"token interpolation\"><span class=\"token interpolation-punctuation punctuation\">${</span>Date<span class=\"token punctuation\">.</span><span class=\"token function\">now</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token interpolation-punctuation punctuation\">}</span></span><span class=\"token template-punctuation string\">`</span></span>\n    uploadTaskRef<span class=\"token punctuation\">.</span>current<span class=\"token punctuation\">[</span>taskId<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span>\n      data<span class=\"token operator\">:</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">,</span> <span class=\"token comment\">// 上传任务开始之前的文件数据我们先设置为null</span>\n      callback\n    <span class=\"token punctuation\">}</span>\n\n    uploaderRef<span class=\"token punctuation\">.</span>current<span class=\"token operator\">?.</span><span class=\"token function\">upload</span><span class=\"token punctuation\">(</span>files<span class=\"token punctuation\">)</span>\n  <span class=\"token punctuation\">}</span>\n\n  <span class=\"token keyword\">const</span> <span class=\"token function-variable function\">handleCancel</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span>file<span class=\"token operator\">:</span> File<span class=\"token punctuation\">)</span> <span class=\"token operator\">=&gt;</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token comment\">// 这里添加取消文件上传的逻辑</span>\n  <span class=\"token punctuation\">}</span>\n\n  <span class=\"token keyword\">const</span> <span class=\"token function-variable function\">uploadBatchFilesStart</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span>data<span class=\"token operator\">:</span> ZdtUploaderOutput<span class=\"token punctuation\">)</span> <span class=\"token operator\">=&gt;</span> <span class=\"token punctuation\">{</span><span class=\"token punctuation\">}</span>\n\n  <span class=\"token keyword\">const</span> <span class=\"token function-variable function\">onUploadProgress</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span>data<span class=\"token operator\">:</span> ZdtUploaderOutput<span class=\"token punctuation\">)</span> <span class=\"token operator\">=&gt;</span> <span class=\"token punctuation\">{</span><span class=\"token punctuation\">}</span>\n\n  <span class=\"token keyword\">const</span> <span class=\"token function-variable function\">uploadBatchFilesSuccess</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span>data<span class=\"token operator\">:</span> ZdtUploaderOutput<span class=\"token punctuation\">)</span> <span class=\"token operator\">=&gt;</span> <span class=\"token punctuation\">{</span><span class=\"token punctuation\">}</span>\n\n  <span class=\"token keyword\">const</span> <span class=\"token function-variable function\">uploadBatchFilesFailed</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span>data<span class=\"token operator\">:</span> ZdtUploaderOutput<span class=\"token punctuation\">)</span> <span class=\"token operator\">=&gt;</span> <span class=\"token punctuation\">{</span><span class=\"token punctuation\">}</span>\n\n  <span class=\"token keyword\">return</span> <span class=\"token punctuation\">(</span>\n    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">UploadContext.Provider</span></span>\n      <span class=\"token attr-name\">value</span><span class=\"token script language-javascript\"><span class=\"token script-punctuation punctuation\">=</span><span class=\"token punctuation\">{</span><span class=\"token punctuation\">{</span>\n        uploadFiles<span class=\"token punctuation\">,</span>\n        handleUpload<span class=\"token punctuation\">,</span>\n        handleCancel\n      <span class=\"token punctuation\">}</span><span class=\"token punctuation\">}</span></span>\n    <span class=\"token punctuation\">&gt;</span></span><span class=\"token plain-text\">\n      </span><span class=\"token punctuation\">{</span>children<span class=\"token punctuation\">}</span><span class=\"token plain-text\">\n      // 这里生成十个组件\n      </span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">ZdtUploaderBtn</span></span>\n        <span class=\"token attr-name\">ref</span><span class=\"token script language-javascript\"><span class=\"token script-punctuation punctuation\">=</span><span class=\"token punctuation\">{</span>uploaderRef<span class=\"token punctuation\">}</span></span>\n        <span class=\"token attr-name\">showProgress</span><span class=\"token script language-javascript\"><span class=\"token script-punctuation punctuation\">=</span><span class=\"token punctuation\">{</span><span class=\"token boolean\">false</span><span class=\"token punctuation\">}</span></span>\n        <span class=\"token attr-name\">multiple</span>\n        <span class=\"token attr-name\">onUploadSuccess</span><span class=\"token script language-javascript\"><span class=\"token script-punctuation punctuation\">=</span><span class=\"token punctuation\">{</span>uploadBatchFilesSuccess<span class=\"token punctuation\">}</span></span>\n        <span class=\"token attr-name\">onUploadFailed</span><span class=\"token script language-javascript\"><span class=\"token script-punctuation punctuation\">=</span><span class=\"token punctuation\">{</span>uploadBatchFilesFailed<span class=\"token punctuation\">}</span></span>\n        <span class=\"token attr-name\">onUploadStart</span><span class=\"token script language-javascript\"><span class=\"token script-punctuation punctuation\">=</span><span class=\"token punctuation\">{</span>uploadBatchFilesStart<span class=\"token punctuation\">}</span></span>\n        <span class=\"token attr-name\">onUploadProgress</span><span class=\"token script language-javascript\"><span class=\"token script-punctuation punctuation\">=</span><span class=\"token punctuation\">{</span>onUploadProgress<span class=\"token punctuation\">}</span></span>\n      <span class=\"token punctuation\">/&gt;</span></span><span class=\"token plain-text\">\n    </span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span><span class=\"token class-name\">UploadContext.Provider</span></span><span class=\"token punctuation\">&gt;</span></span>\n  <span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">}</span>\n</code></pre></div><p>但是经过仔细思考后，这种方案将 <code>ZdtUploaderBtn</code> 直接定义好，很自定义其他属性。</p>\n<p>因此，上传组件应该由页面自己决定，而 <code>upload-context</code> 只负责管理上传文件的状态，只需提供 <code>createUploader</code> 方法供页面调用，这样就能避免复杂的属性绑定。</p>\n<p>子页面传入 <code>ZdtUploaderBtnProps</code>，可以很方便地自定义上传组件属性。</p>\n<p>这样，子页面每次调用 createUploader，<strong>页面上都会创建一个由该子页面定义的上传组件</strong>，同时每个上传任务的文件由 Map 存储起来，这样在触发回调更新上传文件时，可以保证一一对应。</p>\n<div class=\"language-tsx\" data-ext=\"tsx\" data-title=\"tsx\"><pre class=\"language-tsx\"><code><span class=\"token keyword\">interface</span> <span class=\"token class-name\">UploadContextType</span> <span class=\"token punctuation\">{</span>\n  uploadFilesMap<span class=\"token operator\">:</span> Map<span class=\"token operator\">&lt;</span><span class=\"token builtin\">number</span><span class=\"token punctuation\">,</span> UploadFile<span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token operator\">&gt;</span> <span class=\"token comment\">// 上传文件对象</span>\n  <span class=\"token function-variable function\">createUploader</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">(</span>\n    props<span class=\"token operator\">:</span> ZdtUploaderBtnProps<span class=\"token punctuation\">,</span>\n    files<span class=\"token operator\">?</span><span class=\"token operator\">:</span> File<span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span>\n    groupLayer<span class=\"token operator\">?</span><span class=\"token operator\">:</span> <span class=\"token builtin\">number</span>\n  <span class=\"token punctuation\">)</span> <span class=\"token operator\">=&gt;</span> <span class=\"token keyword\">void</span> <span class=\"token comment\">// 初始化 uploader</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">export</span> <span class=\"token keyword\">const</span> UploadContext <span class=\"token operator\">=</span> <span class=\"token generic-function\"><span class=\"token function\">createContext</span><span class=\"token generic class-name\"><span class=\"token operator\">&lt;</span>UploadContextType<span class=\"token operator\">&gt;</span></span></span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span>\n  uploadFilesMap<span class=\"token operator\">:</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Map</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>\n  <span class=\"token function-variable function\">createUploader</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=&gt;</span> <span class=\"token punctuation\">{</span><span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span>\n\n<span class=\"token keyword\">export</span> <span class=\"token keyword\">const</span> UploadContextProvider<span class=\"token operator\">:</span> <span class=\"token function-variable function\">FC</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span> children <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=&gt;</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">const</span> <span class=\"token punctuation\">[</span>uploadFilesMap<span class=\"token punctuation\">,</span> setUploadFilesMap<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token generic-function\"><span class=\"token function\">useState</span><span class=\"token generic class-name\"><span class=\"token operator\">&lt;</span>\n    Map<span class=\"token operator\">&lt;</span><span class=\"token builtin\">number</span><span class=\"token punctuation\">,</span> UploadFile<span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token operator\">&gt;</span>\n  <span class=\"token operator\">&gt;</span></span></span><span class=\"token punctuation\">(</span><span class=\"token keyword\">new</span> <span class=\"token class-name\">Map</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n\n  <span class=\"token keyword\">const</span> <span class=\"token function-variable function\">updateFileMap</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span>data<span class=\"token operator\">:</span> ZdtUploaderOutput<span class=\"token punctuation\">,</span> index<span class=\"token operator\">:</span> <span class=\"token builtin\">number</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=&gt;</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token function\">setUploadFilesMap</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span>oldFilesMap<span class=\"token punctuation\">)</span> <span class=\"token operator\">=&gt;</span> <span class=\"token punctuation\">{</span>\n      <span class=\"token keyword\">const</span> newFilesMap <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Map</span><span class=\"token punctuation\">(</span>oldFilesMap<span class=\"token punctuation\">)</span>\n      newFilesMap<span class=\"token punctuation\">.</span><span class=\"token function\">set</span><span class=\"token punctuation\">(</span>index<span class=\"token punctuation\">,</span> data<span class=\"token punctuation\">.</span>nzFiles<span class=\"token operator\">!</span><span class=\"token punctuation\">)</span>\n      <span class=\"token keyword\">return</span> newFilesMap\n    <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span>\n  <span class=\"token punctuation\">}</span>\n\n  <span class=\"token comment\">// 由外部设置 uploader</span>\n  <span class=\"token keyword\">const</span> <span class=\"token punctuation\">[</span>uploaders<span class=\"token punctuation\">,</span> setUploaders<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token generic-function\"><span class=\"token function\">useState</span><span class=\"token generic class-name\"><span class=\"token operator\">&lt;</span>ReactNode<span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token operator\">&gt;</span></span></span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span>\n  <span class=\"token keyword\">const</span> uploaderRef <span class=\"token operator\">=</span> <span class=\"token generic-function\"><span class=\"token function\">useRef</span><span class=\"token generic class-name\"><span class=\"token operator\">&lt;</span>ZdtUploaderRef<span class=\"token operator\">&gt;</span></span></span><span class=\"token punctuation\">(</span><span class=\"token keyword\">null</span><span class=\"token punctuation\">)</span>\n\n  <span class=\"token comment\">/**\n   * 自定义 ZdtUploaderBtn\n   * @param props ZdtUploaderBtnProps\n   */</span>\n  <span class=\"token keyword\">const</span> <span class=\"token function-variable function\">createUploader</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span>props<span class=\"token operator\">:</span> ZdtUploaderBtnProps<span class=\"token punctuation\">)</span> <span class=\"token operator\">=&gt;</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">const</span> element <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span>\n      <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">ZdtUploaderBtn</span></span>\n        <span class=\"token attr-name\">ref</span><span class=\"token script language-javascript\"><span class=\"token script-punctuation punctuation\">=</span><span class=\"token punctuation\">{</span>uploaderRef<span class=\"token punctuation\">}</span></span>\n        <span class=\"token attr-name\">key</span><span class=\"token script language-javascript\"><span class=\"token script-punctuation punctuation\">=</span><span class=\"token punctuation\">{</span>Date<span class=\"token punctuation\">.</span><span class=\"token function\">now</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">}</span></span>\n        <span class=\"token attr-name\">subDirectory</span><span class=\"token script language-javascript\"><span class=\"token script-punctuation punctuation\">=</span><span class=\"token punctuation\">{</span><span class=\"token string\">''</span> <span class=\"token operator\">+</span> <span class=\"token function\">generateUniqString</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">+</span> <span class=\"token string\">'/'</span><span class=\"token punctuation\">}</span></span>\n        <span class=\"token attr-name\">showProgress</span><span class=\"token script language-javascript\"><span class=\"token script-punctuation punctuation\">=</span><span class=\"token punctuation\">{</span><span class=\"token boolean\">false</span><span class=\"token punctuation\">}</span></span>\n        <span class=\"token attr-name\">multiple</span>\n        <span class=\"token attr-name\">onUploadStart</span><span class=\"token script language-javascript\"><span class=\"token script-punctuation punctuation\">=</span><span class=\"token punctuation\">{</span><span class=\"token punctuation\">(</span>data<span class=\"token punctuation\">)</span> <span class=\"token operator\">=&gt;</span> <span class=\"token punctuation\">{</span>\n          <span class=\"token function\">updateFileMap</span><span class=\"token punctuation\">(</span>data<span class=\"token punctuation\">,</span> uploaders<span class=\"token punctuation\">.</span>length<span class=\"token punctuation\">)</span>\n          props<span class=\"token punctuation\">.</span>onUploadStart<span class=\"token operator\">?.</span><span class=\"token punctuation\">(</span>data<span class=\"token punctuation\">)</span>\n        <span class=\"token punctuation\">}</span><span class=\"token punctuation\">}</span></span>\n        <span class=\"token attr-name\">onUploadProgress</span><span class=\"token script language-javascript\"><span class=\"token script-punctuation punctuation\">=</span><span class=\"token punctuation\">{</span><span class=\"token punctuation\">(</span>data<span class=\"token punctuation\">)</span> <span class=\"token operator\">=&gt;</span> <span class=\"token punctuation\">{</span>\n          <span class=\"token function\">updateFileMap</span><span class=\"token punctuation\">(</span>data<span class=\"token punctuation\">,</span> uploaders<span class=\"token punctuation\">.</span>length<span class=\"token punctuation\">)</span>\n          props<span class=\"token punctuation\">.</span>onUploadProgress<span class=\"token operator\">?.</span><span class=\"token punctuation\">(</span>data<span class=\"token punctuation\">)</span>\n        <span class=\"token punctuation\">}</span><span class=\"token punctuation\">}</span></span>\n        <span class=\"token attr-name\">onUploadSuccess</span><span class=\"token script language-javascript\"><span class=\"token script-punctuation punctuation\">=</span><span class=\"token punctuation\">{</span><span class=\"token punctuation\">(</span>data<span class=\"token punctuation\">)</span> <span class=\"token operator\">=&gt;</span> <span class=\"token punctuation\">{</span>\n          <span class=\"token function\">updateFileMap</span><span class=\"token punctuation\">(</span>data<span class=\"token punctuation\">,</span> uploaders<span class=\"token punctuation\">.</span>length<span class=\"token punctuation\">)</span>\n          props<span class=\"token punctuation\">.</span>onUploadSuccess<span class=\"token operator\">?.</span><span class=\"token punctuation\">(</span>data<span class=\"token punctuation\">)</span>\n        <span class=\"token punctuation\">}</span><span class=\"token punctuation\">}</span></span>\n        <span class=\"token attr-name\">onUploadFailed</span><span class=\"token script language-javascript\"><span class=\"token script-punctuation punctuation\">=</span><span class=\"token punctuation\">{</span><span class=\"token punctuation\">(</span>data<span class=\"token punctuation\">)</span> <span class=\"token operator\">=&gt;</span> <span class=\"token punctuation\">{</span>\n          <span class=\"token function\">updateFileMap</span><span class=\"token punctuation\">(</span>data<span class=\"token punctuation\">,</span> uploaders<span class=\"token punctuation\">.</span>length<span class=\"token punctuation\">)</span>\n          props<span class=\"token punctuation\">.</span>onUploadFailed<span class=\"token operator\">?.</span><span class=\"token punctuation\">(</span>data<span class=\"token punctuation\">)</span>\n        <span class=\"token punctuation\">}</span><span class=\"token punctuation\">}</span></span>\n        <span class=\"token spread\"><span class=\"token punctuation\">{</span><span class=\"token operator\">...</span>props<span class=\"token punctuation\">}</span></span>\n      <span class=\"token punctuation\">/&gt;</span></span>\n    <span class=\"token punctuation\">)</span>\n\n    <span class=\"token function\">setUploaders</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span>olduploaders<span class=\"token punctuation\">)</span> <span class=\"token operator\">=&gt;</span> <span class=\"token punctuation\">[</span><span class=\"token operator\">...</span>olduploaders<span class=\"token punctuation\">,</span> element<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span>\n\n    <span class=\"token comment\">// 保证组件 ref 成功绑定</span>\n    <span class=\"token function\">setTimeout</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=&gt;</span> <span class=\"token punctuation\">{</span>\n      uploaderRef<span class=\"token punctuation\">.</span>current<span class=\"token operator\">?.</span><span class=\"token function\">select</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span>\n  <span class=\"token punctuation\">}</span>\n\n  <span class=\"token keyword\">return</span> <span class=\"token punctuation\">(</span>\n    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">UploadContext.Provider</span></span>\n      <span class=\"token attr-name\">value</span><span class=\"token script language-javascript\"><span class=\"token script-punctuation punctuation\">=</span><span class=\"token punctuation\">{</span><span class=\"token punctuation\">{</span>\n        uploadFilesMap<span class=\"token punctuation\">,</span>\n        createUploader\n      <span class=\"token punctuation\">}</span><span class=\"token punctuation\">}</span></span>\n    <span class=\"token punctuation\">&gt;</span></span><span class=\"token plain-text\">\n      </span><span class=\"token punctuation\">{</span>children<span class=\"token punctuation\">}</span><span class=\"token plain-text\">\n      </span><span class=\"token punctuation\">{</span>uploaders<span class=\"token punctuation\">}</span><span class=\"token plain-text\">\n    </span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span><span class=\"token class-name\">UploadContext.Provider</span></span><span class=\"token punctuation\">&gt;</span></span>\n  <span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">}</span>\n</code></pre></div><figure><img src=\"https://raw.githubusercontent.com/dribble-njr/typora-njr/master/img/image-20231127194832077.png\" alt=\"整体架构\" tabindex=\"0\" loading=\"lazy\"><figcaption>整体架构</figcaption></figure>\n<h2>支持内容区域拖拽上传</h2>\n<p>由于内容区域拖拽上传也需要接入全局上传抽屉，而 <code>upload-context</code> 提供的 <code>createUploader</code> 方法，内部原理是调用 <code>uploaderRef.select()</code> 唤起文件选择器进行上传，无法实现拖拽上传。</p>\n<p>因此需要修改 <code>createUploader</code> 方法，支持获取文件后直接上传：</p>\n<div class=\"language-tsx\" data-ext=\"tsx\" data-title=\"tsx\"><pre class=\"language-tsx\"><code><span class=\"token comment\">// 拖拽上传需要监听 onDrop 事件传入 files 数组</span>\n<span class=\"token keyword\">const</span> <span class=\"token function-variable function\">createUploader</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span>props<span class=\"token operator\">:</span> ZdtUploaderBtnProps<span class=\"token punctuation\">,</span> files<span class=\"token operator\">?</span><span class=\"token operator\">:</span> File<span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=&gt;</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">const</span> element <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span>\n    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">ZdtUploaderBtn</span></span>\n      <span class=\"token attr-name\">...</span>\n    <span class=\"token punctuation\">/&gt;</span></span>\n  <span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n  <span class=\"token function\">setUploaders</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span>olduploaders<span class=\"token punctuation\">)</span> <span class=\"token operator\">=&gt;</span> <span class=\"token punctuation\">[</span><span class=\"token operator\">...</span>olduploaders<span class=\"token punctuation\">,</span> element<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n  <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>files<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    uploaderRef<span class=\"token punctuation\">.</span>current<span class=\"token operator\">?.</span><span class=\"token function\">upload</span><span class=\"token punctuation\">(</span>files<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span> <span class=\"token keyword\">else</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token function\">setTimeout</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=&gt;</span> <span class=\"token punctuation\">{</span>\n      uploaderRef<span class=\"token punctuation\">.</span>current<span class=\"token operator\">?.</span><span class=\"token function\">select</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n</code></pre></div><p>接下来需要自定义一个 <code>global-drag-uploader</code> 组件，监听 <code>onDrop</code> 事件获取拖拽的所有文件夹，并调用 <code>createUploader</code> 方法。</p>\n<p>在该方法中，需要实现 <code>directory</code> 和 <code>accept</code> 属性校验方法。</p>\n<p>因此，最终代码如下：</p>\n<div class=\"language-tsx\" data-ext=\"tsx\" data-title=\"tsx\"><pre class=\"language-tsx\"><code><span class=\"token keyword\">import</span> <span class=\"token keyword\">type</span> <span class=\"token punctuation\">{</span> <span class=\"token constant\">FC</span> <span class=\"token punctuation\">}</span> <span class=\"token keyword\">from</span> <span class=\"token string\">'react'</span>\n<span class=\"token keyword\">import</span> <span class=\"token punctuation\">{</span> useContext<span class=\"token punctuation\">,</span> useState <span class=\"token punctuation\">}</span> <span class=\"token keyword\">from</span> <span class=\"token string\">'react'</span>\n<span class=\"token keyword\">import</span> validateAccept <span class=\"token keyword\">from</span> <span class=\"token string\">'attr-accept'</span>\n\n<span class=\"token keyword\">import</span> <span class=\"token punctuation\">{</span> ZdtUploaderBtnProps<span class=\"token punctuation\">,</span> shortToast <span class=\"token punctuation\">}</span> <span class=\"token keyword\">from</span> <span class=\"token string\">'@yuanfudao/zdt-react'</span>\n\n<span class=\"token keyword\">import</span> <span class=\"token punctuation\">{</span> UploadContext <span class=\"token punctuation\">}</span> <span class=\"token keyword\">from</span> <span class=\"token string\">'../../context/upload-context'</span>\n<span class=\"token keyword\">import</span> styles <span class=\"token keyword\">from</span> <span class=\"token string\">'./global-drag-uploader.module.scss'</span>\n\n<span class=\"token keyword\">export</span> <span class=\"token keyword\">interface</span> <span class=\"token class-name\">IFileSystemEntry</span> <span class=\"token punctuation\">{</span>\n  isFile<span class=\"token operator\">:</span> <span class=\"token builtin\">boolean</span>\n  isDirectory<span class=\"token operator\">:</span> <span class=\"token builtin\">boolean</span>\n  file<span class=\"token operator\">?</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">(</span><span class=\"token function-variable function\">callback</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">(</span>file<span class=\"token operator\">:</span> File<span class=\"token punctuation\">)</span> <span class=\"token operator\">=&gt;</span> <span class=\"token keyword\">void</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=&gt;</span> <span class=\"token keyword\">void</span>\n  createReader<span class=\"token operator\">?</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=&gt;</span> <span class=\"token builtin\">any</span> <span class=\"token comment\">// 或创建具体类型，例如： { readEntries: (callback: (entries: MyFileSystemEntry[]) =&gt; void) =&gt; void };</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">interface</span> <span class=\"token class-name\">GlobalDragUploader</span> <span class=\"token punctuation\">{</span>\n  uploaderProps<span class=\"token operator\">:</span> ZdtUploaderBtnProps\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">export</span> <span class=\"token keyword\">const</span> GlobalDragUploader<span class=\"token operator\">:</span> <span class=\"token constant\">FC</span><span class=\"token operator\">&lt;</span>GlobalDragUploader<span class=\"token operator\">&gt;</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span>props<span class=\"token punctuation\">)</span> <span class=\"token operator\">=&gt;</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">const</span> <span class=\"token punctuation\">{</span> directory<span class=\"token punctuation\">,</span> accept <span class=\"token punctuation\">}</span> <span class=\"token operator\">=</span> props<span class=\"token punctuation\">.</span>uploaderProps\n  <span class=\"token keyword\">const</span> <span class=\"token punctuation\">{</span> children <span class=\"token punctuation\">}</span> <span class=\"token operator\">=</span> props\n\n  <span class=\"token keyword\">const</span> <span class=\"token punctuation\">[</span>isDragOver<span class=\"token punctuation\">,</span> setIsDragOver<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token generic-function\"><span class=\"token function\">useState</span><span class=\"token generic class-name\"><span class=\"token operator\">&lt;</span><span class=\"token builtin\">boolean</span><span class=\"token operator\">&gt;</span></span></span><span class=\"token punctuation\">(</span><span class=\"token boolean\">false</span><span class=\"token punctuation\">)</span>\n\n  <span class=\"token keyword\">const</span> <span class=\"token punctuation\">{</span> createUploader <span class=\"token punctuation\">}</span> <span class=\"token operator\">=</span> <span class=\"token function\">useContext</span><span class=\"token punctuation\">(</span>UploadContext<span class=\"token punctuation\">)</span>\n\n  <span class=\"token keyword\">async</span> <span class=\"token keyword\">function</span> <span class=\"token function\">traverseFileTree</span><span class=\"token punctuation\">(</span>\n    fileEntryList<span class=\"token operator\">:</span> <span class=\"token builtin\">any</span><span class=\"token punctuation\">,</span>\n    relativePath <span class=\"token operator\">=</span> <span class=\"token string\">''</span>\n  <span class=\"token punctuation\">)</span><span class=\"token operator\">:</span> <span class=\"token builtin\">Promise</span><span class=\"token operator\">&lt;</span>File<span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token operator\">&gt;</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">return</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\"><span class=\"token builtin\">Promise</span></span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span>resolve<span class=\"token punctuation\">)</span> <span class=\"token operator\">=&gt;</span> <span class=\"token punctuation\">{</span>\n      <span class=\"token keyword\">const</span> promises<span class=\"token operator\">:</span> <span class=\"token builtin\">Promise</span><span class=\"token operator\">&lt;</span>File<span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token operator\">&gt;</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span>\n\n      <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">const</span> entry <span class=\"token keyword\">of</span> fileEntryList<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">const</span> entryRelativePath <span class=\"token operator\">=</span> relativePath <span class=\"token operator\">+</span> <span class=\"token punctuation\">(</span>entry<span class=\"token punctuation\">.</span>name <span class=\"token keyword\">as</span> <span class=\"token builtin\">string</span><span class=\"token punctuation\">)</span>\n        <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>entry<span class=\"token punctuation\">.</span>isFile<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n          promises<span class=\"token punctuation\">.</span><span class=\"token function\">push</span><span class=\"token punctuation\">(</span>\n            <span class=\"token keyword\">new</span> <span class=\"token class-name\"><span class=\"token builtin\">Promise</span></span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span>resolve<span class=\"token punctuation\">)</span> <span class=\"token operator\">=&gt;</span> <span class=\"token punctuation\">{</span>\n              entry<span class=\"token punctuation\">.</span><span class=\"token function\">file</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span>file<span class=\"token operator\">:</span> File<span class=\"token punctuation\">)</span> <span class=\"token operator\">=&gt;</span> <span class=\"token punctuation\">{</span>\n                Object<span class=\"token punctuation\">.</span><span class=\"token function\">defineProperty</span><span class=\"token punctuation\">(</span>file<span class=\"token punctuation\">,</span> <span class=\"token string\">'webkitRelativePath'</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">{</span>\n                  value<span class=\"token operator\">:</span> entryRelativePath<span class=\"token punctuation\">,</span>\n                  writable<span class=\"token operator\">:</span> <span class=\"token boolean\">false</span>\n                <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span>\n                <span class=\"token function\">resolve</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">[</span>file<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span>\n              <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span>\n            <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span>\n          <span class=\"token punctuation\">)</span>\n        <span class=\"token punctuation\">}</span> <span class=\"token keyword\">else</span> <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>entry<span class=\"token punctuation\">.</span>isDirectory<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n          <span class=\"token comment\">// dirReader.readEntries 每次只能读取 100 个文件，所以需要递归读取全部文件</span>\n          <span class=\"token keyword\">const</span> readAllEntries <span class=\"token operator\">=</span> <span class=\"token keyword\">async</span> <span class=\"token punctuation\">(</span>\n            dirReader<span class=\"token operator\">:</span> <span class=\"token builtin\">any</span><span class=\"token punctuation\">,</span>\n            items<span class=\"token operator\">:</span> <span class=\"token builtin\">any</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span>\n          <span class=\"token punctuation\">)</span><span class=\"token operator\">:</span> <span class=\"token builtin\">Promise</span><span class=\"token operator\">&lt;</span><span class=\"token builtin\">any</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token operator\">&gt;</span> <span class=\"token operator\">=&gt;</span> <span class=\"token punctuation\">{</span>\n            <span class=\"token keyword\">return</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\"><span class=\"token builtin\">Promise</span></span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span>resolve<span class=\"token punctuation\">)</span> <span class=\"token operator\">=&gt;</span> <span class=\"token punctuation\">{</span>\n              dirReader<span class=\"token punctuation\">.</span><span class=\"token function\">readEntries</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">async</span> <span class=\"token punctuation\">(</span>entries<span class=\"token operator\">:</span> <span class=\"token builtin\">any</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=&gt;</span> <span class=\"token punctuation\">{</span>\n                <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>entries<span class=\"token punctuation\">.</span>length<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n                  <span class=\"token comment\">// 如果还有文件，将其添加到 items 列表中并继续读取</span>\n                  items<span class=\"token punctuation\">.</span><span class=\"token function\">push</span><span class=\"token punctuation\">(</span><span class=\"token operator\">...</span>entries<span class=\"token punctuation\">)</span>\n                  <span class=\"token function\">resolve</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">await</span> <span class=\"token function\">readAllEntries</span><span class=\"token punctuation\">(</span>dirReader<span class=\"token punctuation\">,</span> items<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n                <span class=\"token punctuation\">}</span> <span class=\"token keyword\">else</span> <span class=\"token punctuation\">{</span>\n                  <span class=\"token comment\">// 如果没有更多文件，则完成读取，并返回获取到的全部文件</span>\n                  <span class=\"token function\">resolve</span><span class=\"token punctuation\">(</span>items<span class=\"token punctuation\">)</span>\n                <span class=\"token punctuation\">}</span>\n              <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span>\n            <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span>\n          <span class=\"token punctuation\">}</span>\n\n          <span class=\"token keyword\">const</span> dirReader <span class=\"token operator\">=</span> entry<span class=\"token punctuation\">.</span><span class=\"token function\">createReader</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n          promises<span class=\"token punctuation\">.</span><span class=\"token function\">push</span><span class=\"token punctuation\">(</span>\n            <span class=\"token function\">readAllEntries</span><span class=\"token punctuation\">(</span>dirReader<span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">then</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">async</span> <span class=\"token punctuation\">(</span>entries<span class=\"token punctuation\">)</span> <span class=\"token operator\">=&gt;</span> <span class=\"token punctuation\">{</span>\n              <span class=\"token keyword\">return</span> <span class=\"token function\">traverseFileTree</span><span class=\"token punctuation\">(</span>entries<span class=\"token punctuation\">,</span> entryRelativePath <span class=\"token operator\">+</span> <span class=\"token string\">'/'</span><span class=\"token punctuation\">)</span>\n            <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span>\n          <span class=\"token punctuation\">)</span>\n        <span class=\"token punctuation\">}</span>\n      <span class=\"token punctuation\">}</span>\n\n      <span class=\"token builtin\">Promise</span><span class=\"token punctuation\">.</span><span class=\"token function\">all</span><span class=\"token punctuation\">(</span>promises<span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">then</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span>fileList<span class=\"token punctuation\">)</span> <span class=\"token operator\">=&gt;</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token function\">resolve</span><span class=\"token punctuation\">(</span>fileList<span class=\"token punctuation\">.</span><span class=\"token function\">flat</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n      <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span>\n  <span class=\"token punctuation\">}</span>\n\n  <span class=\"token keyword\">async</span> <span class=\"token keyword\">function</span> <span class=\"token function\">onDrop</span><span class=\"token punctuation\">(</span>event<span class=\"token operator\">:</span> React<span class=\"token punctuation\">.</span>DragEvent<span class=\"token operator\">&lt;</span>HTMLDivElement<span class=\"token operator\">&gt;</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token function\">setIsDragOver</span><span class=\"token punctuation\">(</span><span class=\"token boolean\">false</span><span class=\"token punctuation\">)</span>\n    event<span class=\"token punctuation\">.</span><span class=\"token function\">preventDefault</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n\n    <span class=\"token comment\">// 获取文件</span>\n    <span class=\"token keyword\">const</span> items <span class=\"token operator\">=</span> event<span class=\"token punctuation\">.</span>dataTransfer<span class=\"token operator\">?.</span>items\n    <span class=\"token keyword\">const</span> fileEntryList<span class=\"token operator\">:</span> IFileSystemEntry<span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span>\n\n    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token operator\">!</span>items<span class=\"token punctuation\">)</span> <span class=\"token keyword\">return</span>\n\n    <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">const</span> item <span class=\"token keyword\">of</span> items<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n      <span class=\"token keyword\">const</span> entry <span class=\"token operator\">=</span> item<span class=\"token punctuation\">.</span><span class=\"token function\">webkitGetAsEntry</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n      <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>directory <span class=\"token operator\">&amp;&amp;</span> <span class=\"token operator\">!</span>entry<span class=\"token operator\">?.</span>isDirectory<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        shortToast<span class=\"token punctuation\">.</span><span class=\"token function\">error</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span>\n          message<span class=\"token operator\">:</span> <span class=\"token string\">'上传类型错误'</span><span class=\"token punctuation\">,</span>\n          description<span class=\"token operator\">:</span> <span class=\"token template-string\"><span class=\"token template-punctuation string\">`</span><span class=\"token string\">请上传文件夹</span><span class=\"token template-punctuation string\">`</span></span>\n        <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span>\n        <span class=\"token keyword\">return</span>\n      <span class=\"token punctuation\">}</span>\n      <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token operator\">!</span>directory <span class=\"token operator\">&amp;&amp;</span> <span class=\"token operator\">!</span>entry<span class=\"token operator\">?.</span>isFile<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        shortToast<span class=\"token punctuation\">.</span><span class=\"token function\">error</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span> message<span class=\"token operator\">:</span> <span class=\"token string\">'上传类型错误'</span><span class=\"token punctuation\">,</span> description<span class=\"token operator\">:</span> <span class=\"token template-string\"><span class=\"token template-punctuation string\">`</span><span class=\"token string\">请上传文件</span><span class=\"token template-punctuation string\">`</span></span> <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span>\n        <span class=\"token keyword\">return</span>\n      <span class=\"token punctuation\">}</span>\n      <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>entry<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        fileEntryList<span class=\"token punctuation\">.</span><span class=\"token function\">push</span><span class=\"token punctuation\">(</span>entry<span class=\"token punctuation\">)</span>\n      <span class=\"token punctuation\">}</span>\n    <span class=\"token punctuation\">}</span>\n\n    <span class=\"token keyword\">const</span> files <span class=\"token operator\">=</span> <span class=\"token keyword\">await</span> <span class=\"token function\">traverseFileTree</span><span class=\"token punctuation\">(</span>fileEntryList<span class=\"token punctuation\">)</span>\n\n    <span class=\"token comment\">// // 这里要对拖拽上传图片做一个后缀和accept匹配的校验</span>\n    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>files<span class=\"token punctuation\">.</span><span class=\"token function\">some</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span>file<span class=\"token punctuation\">)</span> <span class=\"token operator\">=&gt;</span> <span class=\"token operator\">!</span><span class=\"token function\">validateAccept</span><span class=\"token punctuation\">(</span>file<span class=\"token punctuation\">,</span> accept <span class=\"token operator\">??</span> <span class=\"token string\">''</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n      shortToast<span class=\"token punctuation\">.</span><span class=\"token function\">error</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span>\n        message<span class=\"token operator\">:</span> <span class=\"token string\">'上传格式错误'</span><span class=\"token punctuation\">,</span>\n        description<span class=\"token operator\">:</span> <span class=\"token template-string\"><span class=\"token template-punctuation string\">`</span><span class=\"token string\">请上传</span><span class=\"token interpolation\"><span class=\"token interpolation-punctuation punctuation\">${</span>accept<span class=\"token interpolation-punctuation punctuation\">}</span></span><span class=\"token string\">格式文件</span><span class=\"token template-punctuation string\">`</span></span>\n      <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">}</span>\n\n    <span class=\"token comment\">// 过滤 .DS_Store</span>\n    <span class=\"token keyword\">const</span> fileList <span class=\"token operator\">=</span> files<span class=\"token punctuation\">.</span><span class=\"token function\">filter</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span>file<span class=\"token punctuation\">)</span> <span class=\"token operator\">=&gt;</span> file<span class=\"token punctuation\">.</span>name <span class=\"token operator\">!==</span> <span class=\"token string\">'.DS_Store'</span><span class=\"token punctuation\">)</span>\n\n    <span class=\"token comment\">// 上传</span>\n    <span class=\"token function\">createUploader</span><span class=\"token punctuation\">(</span>props<span class=\"token punctuation\">.</span>uploaderProps<span class=\"token punctuation\">,</span> fileList<span class=\"token punctuation\">)</span>\n    <span class=\"token comment\">// refUploader.current?.upload(multiple ? fileList : fileList[0] ? [fileList[0]] : []);</span>\n  <span class=\"token punctuation\">}</span>\n\n  <span class=\"token keyword\">return</span> <span class=\"token punctuation\">(</span>\n    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>div</span>\n      <span class=\"token attr-name\">className</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>relative<span class=\"token punctuation\">\"</span></span>\n      <span class=\"token attr-name\">onDragOver</span><span class=\"token script language-javascript\"><span class=\"token script-punctuation punctuation\">=</span><span class=\"token punctuation\">{</span><span class=\"token punctuation\">(</span>e<span class=\"token punctuation\">)</span> <span class=\"token operator\">=&gt;</span> <span class=\"token punctuation\">{</span>\n        e<span class=\"token punctuation\">.</span><span class=\"token function\">preventDefault</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n        <span class=\"token function\">setIsDragOver</span><span class=\"token punctuation\">(</span><span class=\"token boolean\">true</span><span class=\"token punctuation\">)</span>\n      <span class=\"token punctuation\">}</span><span class=\"token punctuation\">}</span></span>\n    <span class=\"token punctuation\">&gt;</span></span><span class=\"token plain-text\">\n      </span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>div</span>\n        <span class=\"token attr-name\">className</span><span class=\"token script language-javascript\"><span class=\"token script-punctuation punctuation\">=</span><span class=\"token punctuation\">{</span>styles<span class=\"token punctuation\">[</span><span class=\"token string\">'drag-cover'</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">}</span></span>\n        <span class=\"token attr-name\">style</span><span class=\"token script language-javascript\"><span class=\"token script-punctuation punctuation\">=</span><span class=\"token punctuation\">{</span><span class=\"token punctuation\">{</span> display<span class=\"token operator\">:</span> isDragOver <span class=\"token operator\">?</span> <span class=\"token string\">'block'</span> <span class=\"token operator\">:</span> <span class=\"token string\">'none'</span> <span class=\"token punctuation\">}</span><span class=\"token punctuation\">}</span></span>\n        <span class=\"token attr-name\">onDrop</span><span class=\"token script language-javascript\"><span class=\"token script-punctuation punctuation\">=</span><span class=\"token punctuation\">{</span>onDrop<span class=\"token punctuation\">}</span></span>\n        <span class=\"token attr-name\">onDragEnter</span><span class=\"token script language-javascript\"><span class=\"token script-punctuation punctuation\">=</span><span class=\"token punctuation\">{</span><span class=\"token punctuation\">(</span>e<span class=\"token punctuation\">)</span> <span class=\"token operator\">=&gt;</span> <span class=\"token punctuation\">{</span>\n          e<span class=\"token punctuation\">.</span><span class=\"token function\">preventDefault</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n          <span class=\"token function\">setIsDragOver</span><span class=\"token punctuation\">(</span><span class=\"token boolean\">true</span><span class=\"token punctuation\">)</span>\n        <span class=\"token punctuation\">}</span><span class=\"token punctuation\">}</span></span>\n        <span class=\"token attr-name\">onDragLeave</span><span class=\"token script language-javascript\"><span class=\"token script-punctuation punctuation\">=</span><span class=\"token punctuation\">{</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=&gt;</span> <span class=\"token punctuation\">{</span>\n          <span class=\"token function\">setIsDragOver</span><span class=\"token punctuation\">(</span><span class=\"token boolean\">false</span><span class=\"token punctuation\">)</span>\n        <span class=\"token punctuation\">}</span><span class=\"token punctuation\">}</span></span>\n      <span class=\"token punctuation\">/&gt;</span></span><span class=\"token plain-text\">\n      </span><span class=\"token punctuation\">{</span>children<span class=\"token punctuation\">}</span><span class=\"token plain-text\">\n    </span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>div</span><span class=\"token punctuation\">&gt;</span></span>\n  <span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">}</span>\n\nGlobalDragUploader<span class=\"token punctuation\">.</span>defaultProps <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span>\n  uploaderProps<span class=\"token operator\">:</span> <span class=\"token punctuation\">{</span>\n    directory<span class=\"token operator\">:</span> <span class=\"token boolean\">false</span><span class=\"token punctuation\">,</span>\n    multiple<span class=\"token operator\">:</span> <span class=\"token boolean\">true</span>\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n</code></pre></div><div class=\"hint-container info\">\n<p class=\"hint-container-title\">相关信息</p>\n<p>拖拽上传详细实现过程见 </p>\n</div>\n<h2>全局上传支持以文件夹为单位展示进度</h2>\n<p>需要以文件夹层级为单位展示进度，最开始直接平铺 <code>uploadFilesMap</code> 方案无法实现。</p>\n<p>然而由于使用全局上传，上传抽屉写在 <code>App.tsx</code> 中，因此很难支持传入 <code>props</code> 自定义以何种层级展示文件上传进度，只能以第一级为单位展示文件进度。</p>\n<p>所以 <code>upload-context</code> 中还需要提供 <code>groupLayersMap</code>，支持页面自定义展示层级。</p>\n<div class=\"language-diff\" data-ext=\"diff\" data-title=\"diff\"><pre class=\"language-diff\"><code><span class=\"token deleted-sign deleted\"><span class=\"token prefix deleted\">-</span><span class=\"token line\"> const createUploader = (props: ZdtUploaderBtnProps, files?: File[]) =&gt; {\n</span></span><span class=\"token inserted-sign inserted\"><span class=\"token prefix inserted\">+</span><span class=\"token line\"> const createUploader = (props: ZdtUploaderBtnProps, files?: File[], groupLayer?: number) =&gt; {\n</span></span><span class=\"token unchanged\"><span class=\"token prefix unchanged\"> </span><span class=\"token line\"> const element = (\n</span><span class=\"token prefix unchanged\"> </span><span class=\"token line\">   &lt;ZdtUploaderBtn\n</span><span class=\"token prefix unchanged\"> </span><span class=\"token line\">     ref={uploaderRef}\n</span><span class=\"token prefix unchanged\"> </span><span class=\"token line\">     key={Date.now()}\n</span><span class=\"token prefix unchanged\"> </span><span class=\"token line\">     subDirectory={'' + generateUniqString() + '/'}\n</span><span class=\"token prefix unchanged\"> </span><span class=\"token line\">     showProgress={false}\n</span><span class=\"token prefix unchanged\"> </span><span class=\"token line\">     multiple\n</span><span class=\"token prefix unchanged\"> </span><span class=\"token line\">     onUploadStart={(data) =&gt; {\n</span><span class=\"token prefix unchanged\"> </span><span class=\"token line\">       updateFileMap(data, uploaders.length);\n</span></span>\n<span class=\"token inserted-sign inserted\"><span class=\"token prefix inserted\">+</span><span class=\"token line\">       // 设置展示层级，默认展示根路径\n</span><span class=\"token prefix inserted\">+</span><span class=\"token line\">       setGroupLayersMap((oldGroupLayersMap) =&gt; {\n</span><span class=\"token prefix inserted\">+</span><span class=\"token line\">         const newGroupLayersMap = new Map(oldGroupLayersMap);\n</span><span class=\"token prefix inserted\">+</span><span class=\"token line\">         newGroupLayersMap.set(uploaders.length, groupLayer ?? 1);\n</span><span class=\"token prefix inserted\">+</span><span class=\"token line\">         return newGroupLayersMap;\n</span><span class=\"token prefix inserted\">+</span><span class=\"token line\">       });\n</span></span>\n<span class=\"token unchanged\"><span class=\"token prefix unchanged\"> </span><span class=\"token line\">       props.onUploadStart?.(data);\n</span><span class=\"token prefix unchanged\"> </span><span class=\"token line\">     }}\n</span><span class=\"token prefix unchanged\"> </span><span class=\"token line\">     ...\n</span></span></code></pre></div><p>修改全局上传抽屉组件：</p>\n<div class=\"language-diff\" data-ext=\"diff\" data-title=\"diff\"><pre class=\"language-diff\"><code><span class=\"token unchanged\"><span class=\"token prefix unchanged\"> </span><span class=\"token line\"> export const GlobalUploadDrawer: FC = () =&gt; {\n</span></span><span class=\"token deleted-sign deleted\"><span class=\"token prefix deleted\">-</span><span class=\"token line\">   const uploadFiles = flatten(Array.from(uploadFilesMap.values())).reverse();\n</span></span><span class=\"token inserted-sign inserted\"><span class=\"token prefix inserted\">+</span><span class=\"token line\">   const groupedUploadFiles = groupByFolder(uploadFilesMap, groupLayersMap);\n</span></span></code></pre></div><p><code>UploadFilesMap</code> 中仅包含平铺后的文件信息，无法直接识别上传的文件属于文件夹还是文件，所以需要利用 <code>webkitRelativePath</code> 判断，若为空则为文件，若不为空则属于文件夹。</p>\n<p>同时，分组逻辑应为 <code>taskId + '-' + groupLayersMap.get(taskId).join('/')</code> 保证每个任务下的文件夹独立。</p>\n<div class=\"language-tsx\" data-ext=\"tsx\" data-title=\"tsx\"><pre class=\"language-tsx\"><code><span class=\"token keyword\">const</span> <span class=\"token function-variable function\">groupByFolder</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span>\n  uploadFilesMap<span class=\"token operator\">:</span> Map<span class=\"token operator\">&lt;</span><span class=\"token builtin\">number</span><span class=\"token punctuation\">,</span> UploadFile<span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token operator\">&gt;</span><span class=\"token punctuation\">,</span>\n  groupLayersMap<span class=\"token operator\">:</span> Map<span class=\"token operator\">&lt;</span><span class=\"token builtin\">number</span><span class=\"token punctuation\">,</span> <span class=\"token builtin\">number</span><span class=\"token operator\">&gt;</span>\n<span class=\"token punctuation\">)</span> <span class=\"token operator\">=&gt;</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">const</span> folders<span class=\"token operator\">:</span> Record<span class=\"token operator\">&lt;</span>\n    <span class=\"token builtin\">string</span><span class=\"token punctuation\">,</span>\n    <span class=\"token punctuation\">{</span> total<span class=\"token operator\">:</span> <span class=\"token builtin\">number</span><span class=\"token punctuation\">;</span> percent<span class=\"token operator\">:</span> <span class=\"token builtin\">number</span><span class=\"token punctuation\">;</span> uid<span class=\"token operator\">:</span> <span class=\"token builtin\">string</span><span class=\"token punctuation\">;</span> name<span class=\"token operator\">:</span> <span class=\"token builtin\">string</span> <span class=\"token punctuation\">}</span>\n  <span class=\"token operator\">&gt;</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span><span class=\"token punctuation\">}</span>\n\n  uploadFilesMap<span class=\"token punctuation\">.</span><span class=\"token function\">forEach</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span>uploadFiles<span class=\"token punctuation\">,</span> taskId<span class=\"token punctuation\">)</span> <span class=\"token operator\">=&gt;</span> <span class=\"token punctuation\">{</span>\n    uploadFiles<span class=\"token punctuation\">.</span><span class=\"token function\">forEach</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span>file<span class=\"token punctuation\">)</span> <span class=\"token operator\">=&gt;</span> <span class=\"token punctuation\">{</span>\n      <span class=\"token comment\">// 判断文件属于文件夹内还是文件</span>\n      <span class=\"token comment\">// @ts-expect-error</span>\n      <span class=\"token keyword\">const</span> relativePath <span class=\"token operator\">=</span> file<span class=\"token punctuation\">.</span>originFileObj<span class=\"token operator\">!</span><span class=\"token punctuation\">.</span>webkitRelativePath\n      <span class=\"token keyword\">const</span> pathParts <span class=\"token operator\">=</span> relativePath <span class=\"token operator\">?</span> relativePath<span class=\"token punctuation\">.</span><span class=\"token function\">split</span><span class=\"token punctuation\">(</span><span class=\"token string\">'/'</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">:</span> <span class=\"token punctuation\">[</span>file<span class=\"token punctuation\">.</span>name<span class=\"token punctuation\">]</span>\n\n      <span class=\"token keyword\">const</span> folder <span class=\"token operator\">=</span>\n        taskId <span class=\"token operator\">+</span> <span class=\"token string\">'-'</span> <span class=\"token operator\">+</span> pathParts<span class=\"token punctuation\">.</span><span class=\"token function\">slice</span><span class=\"token punctuation\">(</span><span class=\"token number\">0</span><span class=\"token punctuation\">,</span> groupLayersMap<span class=\"token punctuation\">.</span><span class=\"token function\">get</span><span class=\"token punctuation\">(</span>taskId<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">join</span><span class=\"token punctuation\">(</span><span class=\"token string\">'/'</span><span class=\"token punctuation\">)</span>\n      <span class=\"token keyword\">const</span> name <span class=\"token operator\">=</span> pathParts<span class=\"token punctuation\">.</span><span class=\"token function\">slice</span><span class=\"token punctuation\">(</span><span class=\"token number\">0</span><span class=\"token punctuation\">,</span> groupLayersMap<span class=\"token punctuation\">.</span><span class=\"token function\">get</span><span class=\"token punctuation\">(</span>taskId<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">join</span><span class=\"token punctuation\">(</span><span class=\"token string\">''</span><span class=\"token punctuation\">)</span>\n\n      <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token operator\">!</span>folders<span class=\"token punctuation\">[</span>folder<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        folders<span class=\"token punctuation\">[</span>folder<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span> total<span class=\"token operator\">:</span> <span class=\"token number\">0</span><span class=\"token punctuation\">,</span> percent<span class=\"token operator\">:</span> <span class=\"token number\">0</span><span class=\"token punctuation\">,</span> uid<span class=\"token operator\">:</span> folder<span class=\"token punctuation\">,</span> name <span class=\"token punctuation\">}</span>\n      <span class=\"token punctuation\">}</span>\n\n      folders<span class=\"token punctuation\">[</span>folder<span class=\"token punctuation\">]</span><span class=\"token operator\">!</span><span class=\"token punctuation\">.</span>total<span class=\"token operator\">++</span>\n      folders<span class=\"token punctuation\">[</span>folder<span class=\"token punctuation\">]</span><span class=\"token operator\">!</span><span class=\"token punctuation\">.</span>percent <span class=\"token operator\">+=</span> file<span class=\"token punctuation\">.</span>percent<span class=\"token operator\">!</span>\n    <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span>\n\n  <span class=\"token comment\">// reverse 保证最新的任务在最上方</span>\n  <span class=\"token keyword\">return</span> Object<span class=\"token punctuation\">.</span><span class=\"token function\">keys</span><span class=\"token punctuation\">(</span>folders<span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">.</span><span class=\"token function\">reverse</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">.</span><span class=\"token function\">map</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span>folder<span class=\"token punctuation\">)</span> <span class=\"token operator\">=&gt;</span> <span class=\"token punctuation\">{</span>\n      <span class=\"token keyword\">return</span> <span class=\"token punctuation\">{</span>\n        name<span class=\"token operator\">:</span> folders<span class=\"token punctuation\">[</span>folder<span class=\"token punctuation\">]</span><span class=\"token operator\">?.</span>name<span class=\"token punctuation\">,</span>\n        percent<span class=\"token operator\">:</span> folders<span class=\"token punctuation\">[</span>folder<span class=\"token punctuation\">]</span><span class=\"token operator\">!</span><span class=\"token punctuation\">.</span>percent <span class=\"token operator\">/</span> folders<span class=\"token punctuation\">[</span>folder<span class=\"token punctuation\">]</span><span class=\"token operator\">!</span><span class=\"token punctuation\">.</span>total<span class=\"token punctuation\">,</span>\n        uid<span class=\"token operator\">:</span> folders<span class=\"token punctuation\">[</span>folder<span class=\"token punctuation\">]</span><span class=\"token operator\">?.</span>uid\n      <span class=\"token punctuation\">}</span>\n    <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">}</span>\n</code></pre></div>",
      "image": "https://raw.githubusercontent.com/dribble-njr/typora-njr/master/img/image-20231127194832077.png",
      "date_published": "2023-11-22T00:00:00.000Z",
      "date_modified": "2024-01-07T10:18:51.000Z",
      "authors": [],
      "tags": [
        "practice"
      ]
    },
    {
      "title": "移动端适配方案 postcss-px-to-viewport",
      "url": "https://dribble-njr.github.io/blog/blog/frontend/practice/005-postcss-px-to-viewport.html",
      "id": "https://dribble-njr.github.io/blog/blog/frontend/practice/005-postcss-px-to-viewport.html",
      "summary": "由于 px 是固定单位，所以在不同设备上显示的大小是固定的，而不同设备又有不同大小，为了适配不同设备的单位大小，需要将 px 转换为视口单位。 确定方案之后，那么思考如何将 px 转为视口单位呢，一个一个算？不太可能，因为你事先并不知道用户手中的设备是什么大小，这样换算得到的结果并不能满足所有用户的需求，因此需要一个更为适用的方法。 这就需要用到一个插...",
      "content_html": "<p>由于 <code>px</code> 是固定单位，所以在不同设备上显示的大小是固定的，而不同设备又有不同大小，为了适配不同设备的单位大小，需要将 <code>px</code> 转换为视口单位。</p>\n<p>确定方案之后，那么思考如何将 <code>px</code> 转为视口单位呢，一个一个算？不太可能，因为你事先并不知道用户手中的设备是什么大小，这样换算得到的结果并不能满足所有用户的需求，因此需要一个更为适用的方法。</p>\n<p>这就需要用到一个插件：<code>postcss-px-to-viewport</code>。</p>\n<h2>安装</h2>\n<div class=\"language-text\" data-ext=\"text\" data-title=\"text\"><pre class=\"language-text\"><code>npm install postcss-px-to-viewport --save-dev\n</code></pre></div><h2>参数配置</h2>\n<p>新建 <code>postcss.config.js</code>，默认配置如下：</p>\n<div class=\"language-javascript\" data-ext=\"js\" data-title=\"js\"><pre class=\"language-javascript\"><code>module<span class=\"token punctuation\">.</span>exports <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token literal-property property\">plugins</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token string-property property\">'postcss-px-to-viewport'</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">{</span>\n      <span class=\"token literal-property property\">unitToConvert</span><span class=\"token operator\">:</span> <span class=\"token string\">'px'</span><span class=\"token punctuation\">,</span> <span class=\"token comment\">// 需要转换的单位</span>\n      <span class=\"token literal-property property\">viewportWidth</span><span class=\"token operator\">:</span> <span class=\"token number\">320</span><span class=\"token punctuation\">,</span> <span class=\"token comment\">// 设计稿的视口宽度</span>\n      <span class=\"token literal-property property\">unitPrecision</span><span class=\"token operator\">:</span> <span class=\"token number\">5</span><span class=\"token punctuation\">,</span> <span class=\"token comment\">// 单位转换后保留的精度</span>\n      <span class=\"token literal-property property\">propList</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">[</span><span class=\"token string\">'*'</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span> <span class=\"token comment\">// 能转换的vw属性列表</span>\n      <span class=\"token literal-property property\">viewportUnit</span><span class=\"token operator\">:</span> <span class=\"token string\">'vw'</span><span class=\"token punctuation\">,</span> <span class=\"token comment\">// 希望使用的视口单位</span>\n      <span class=\"token literal-property property\">fontViewportUnit</span><span class=\"token operator\">:</span> <span class=\"token string\">'vw'</span><span class=\"token punctuation\">,</span> <span class=\"token comment\">// 字体使用的视口单位</span>\n      <span class=\"token literal-property property\">selectorBlackList</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span> <span class=\"token comment\">// 需要忽略的css选择器</span>\n      <span class=\"token literal-property property\">minPixelValue</span><span class=\"token operator\">:</span> <span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token comment\">// 设置最小的转换数值，如果为1，只有大于1的值才会被转换</span>\n      <span class=\"token literal-property property\">mediaQuery</span><span class=\"token operator\">:</span> <span class=\"token boolean\">false</span><span class=\"token punctuation\">,</span> <span class=\"token comment\">// 媒体查询中是否需要转换单位</span>\n      <span class=\"token literal-property property\">replace</span><span class=\"token operator\">:</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">,</span> <span class=\"token comment\">// 是否直接更换属性值</span>\n      <span class=\"token literal-property property\">exclude</span><span class=\"token operator\">:</span> <span class=\"token keyword\">undefined</span><span class=\"token punctuation\">,</span> <span class=\"token comment\">// 忽略一些文件比如 node_modules</span>\n      <span class=\"token literal-property property\">include</span><span class=\"token operator\">:</span> <span class=\"token keyword\">undefined</span><span class=\"token punctuation\">,</span> <span class=\"token comment\">// 如果设置了 include，则仅转换匹配的文件</span>\n      <span class=\"token literal-property property\">landscape</span><span class=\"token operator\">:</span> <span class=\"token boolean\">false</span><span class=\"token punctuation\">,</span> <span class=\"token comment\">// 是否添加根据 landscapeWidth 生成的媒体查询条件 @media (orientation: landscape)</span>\n      <span class=\"token literal-property property\">landscapeUnit</span><span class=\"token operator\">:</span> <span class=\"token string\">'vw'</span><span class=\"token punctuation\">,</span> <span class=\"token comment\">// 横屏时使用的单位</span>\n      <span class=\"token literal-property property\">landscapeWidth</span><span class=\"token operator\">:</span> <span class=\"token number\">568</span> <span class=\"token comment\">// 横屏时使用的视口宽度</span>\n    <span class=\"token punctuation\">}</span>\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n</code></pre></div><p>详细配置见 <a href=\"https://github.com/evrone/postcss-px-to-viewport\" target=\"_blank\" rel=\"noopener noreferrer\">postcss-px-to-viewport</a>。</p>\n<p>当全部设置完成后，重新运行项目，查看 css 属性，即可发现所有 <code>px</code> 单位全部变成了 <code>vw</code> 单位。</p>\n<p>切换不同的设备时，大小会随之发生变化。</p>\n",
      "date_published": "2022-03-23T00:00:00.000Z",
      "date_modified": "2024-01-07T10:18:51.000Z",
      "authors": [],
      "tags": [
        "practice"
      ]
    },
    {
      "title": "实践",
      "url": "https://dribble-njr.github.io/blog/blog/frontend/practice/",
      "id": "https://dribble-njr.github.io/blog/blog/frontend/practice/",
      "summary": "实践 这里是关于前端实践的文章。 ",
      "content_html": "\n<p>这里是关于前端实践的文章。</p>\n",
      "date_published": "2024-01-07T10:18:51.000Z",
      "date_modified": "2024-01-13T16:33:26.000Z",
      "authors": [],
      "tags": []
    },
    {
      "title": "BFC 块级格式化上下文",
      "url": "https://dribble-njr.github.io/blog/blog/frontend/basic/css/013-BFC.html",
      "id": "https://dribble-njr.github.io/blog/blog/frontend/basic/css/013-BFC.html",
      "summary": "什么是 BFC 块级格式化上下文（Block Formatting Context，BFC），其实是块级盒子的布局过程发生的区域，在这个区域内会有特定的布局规则。实际上他相当于一个 结界：如果一个元素具有 BFC，那么内部子元素无法影响外部的元素。 触发 BFC 触发 BFC 的 CSS 属性： <html> 根元素 浮动元素：float: left ...",
      "content_html": "<h2>什么是 BFC</h2>\n<p>块级格式化上下文（Block Formatting Context，BFC），其实是块级盒子的布局过程发生的区域，在这个区域内会有特定的布局规则。实际上他相当于一个 <strong>结界</strong>：如果一个元素具有 BFC，那么内部子元素无法影响外部的元素。</p>\n<h2>触发 BFC</h2>\n<p>触发 BFC 的 CSS 属性：</p>\n<ul>\n<li><code>&lt;html&gt;</code> 根元素</li>\n<li>浮动元素：<code>float: left | right</code></li>\n<li><code>overflow</code> 值不为 <code>visible</code>、<code>clip</code> 的块元素：<code>overflow: hidden | scroll | auto</code></li>\n<li>绝对定位元素：<code>position: absolute | fixed</code></li>\n<li><code>display: inline-block | table-cell | flex | table-caption | inline-flex</code></li>\n</ul>\n<h2>BFC 的布局规则</h2>\n<p><strong>BFC 相当于一个独立块级容器，容器内的元素不会影响外部元素</strong>，具体规则如下：</p>\n<ul>\n<li>BFC 内的子元素以正常流排列；</li>\n<li>BFC 内的 <strong>子元素</strong> 垂直方向的外边距会发生重叠，但是可以利用 BFC 包裹元素消除外边距重叠（如果不能消除外边距重叠问题，则会影响外部元素布局）；</li>\n<li>BFC 元素计算高度时，浮动元素也参与计算。因此可以用来清除浮动（如果不能清除，子元素浮动则父元素高度塌陷，会影响后面元素的布局）。</li>\n</ul>\n<p>后面两条规则都是由于 BFC 的 <strong>结界</strong> 特性，常用来解决外边距重叠、浮动高度塌陷的问题。</p>\n<p>所以 BFC 的核心规则就是：<strong>容器内的元素不会影响外部元素</strong>。</p>\n<p>下面一一举例验证这些规则。</p>\n<h3>BFC 内的子元素以正常流排列</h3>\n<p><code>&lt;html&gt;</code> 根元素是最大的 BFC，它内部元素的布局是以正常流排列的，因此非常容易验证。</p>\n<h3>margin 重叠</h3>\n<h4>子元素的外边距会发生重叠</h4>\n<p>很简单，<code>&lt;html&gt;</code> 根元素就是最大的 BFC，在里面布局当然会发生外边距重叠。块的上外边距（margin-top）和下外边距 （margin-bottom）会合并为单个边距，其大小为两个外边距中的最大值。</p>\n\n<p>在这个例子中，为了看清两个子元素的外边距折叠问题，给父元素设置为宽 <code>120px</code>，边框 <code>1px</code> 黑色，第一个盒子设置了 <code>10px</code> 的 <code>margin-bottom</code>，第二个盒子设置为 <code>20px</code> 的 <code>margin-top</code>，两个盒子垂直外边距的值会取其中的最大值 <code>20px</code>。</p>\n<h4>BFC 消除外边距折叠</h4>\n<p>如果要消除这个影响，那么将第二个盒子包裹一个 wrapper，并将这个容器触发为 BFC，那么这个 wrapper 内的子元素则不会影响外部元素，当然也就消除了外边距折叠。</p>\n\n<p>可以看到，在触发 BFC 后，两个盒子垂直方向外边距为 <code>30px</code>。</p>\n<h3>浮动</h3>\n<h4>浮动高度塌陷</h4>\n<p>当我们使用 <code>float</code> 布局时，会使元素脱离文档流，造成高度塌陷。</p>\n\n<p>可以看到，由于给子元素设置了浮动，会造成父盒子高度塌陷。</p>\n<h4>BFC 清除浮动</h4>\n<p>如果要解决这个问题，可以给容器触发 BFC，则可以消除浮动的影响，就无需使用 <code>clear: both</code> 属性去清除浮动了。</p>\n\n<h2>两栏布局</h2>\n<p>如果想使用浮动实现两栏布局，可以看到，由于浮动的影响，会形成文字环绕的效果。</p>\n\n<p>如果给右边盒子触发 BFC，那么就可以得到想要的效果了。</p>\n\n<h2>常见触发方式的优缺点</h2>\n<ul>\n<li><code>float: left | right</code>：浮动元素能够形成 BFC，但是浮动元素本身具有破坏性，无法用来实现自动填满容器的自适应布局。</li>\n<li><code>position: absolute | fixed</code>：脱离文档流，一般用来和相对定位配合做布局，不太适合触发 BFC。</li>\n<li><code>overflow: hidden</code>：本身还是一个普通的元素，并没有脱离文档流，兼容性也不错，<strong>推荐使用</strong>。</li>\n</ul>\n",
      "date_published": "2022-07-18T00:00:00.000Z",
      "date_modified": "2024-01-07T13:07:06.000Z",
      "authors": [],
      "tags": [
        "CSS"
      ]
    },
    {
      "title": "模块化",
      "url": "https://dribble-njr.github.io/blog/blog/frontend/engineering/basic/001-modularization.html",
      "id": "https://dribble-njr.github.io/blog/blog/frontend/engineering/basic/001-modularization.html",
      "summary": "早期 JavaScript 仅仅作为一个脚本语言，所需的代码通常不会很大。然而随着前端和 JavaScript 的发展，逐渐暴露出两个问题： 全局污染：不同文件中的函数会相互污染； 依赖混乱：各文件中的函数依赖非常混乱。 模块化就是为了解决上述问题，最终目的是为了将程序拆分为可按需导入的单独模块。在模块中编写属于自己的逻辑代码，拥有自己的作用域，能够导...",
      "content_html": "<p>早期 JavaScript 仅仅作为一个脚本语言，所需的代码通常不会很大。然而随着前端和 JavaScript 的发展，逐渐暴露出两个问题：</p>\n<ul>\n<li>全局污染：不同文件中的函数会相互污染；</li>\n<li>依赖混乱：各文件中的函数依赖非常混乱。</li>\n</ul>\n<p>模块化就是为了解决上述问题，最终目的是为了将程序拆分为可按需导入的单独模块。在模块中编写属于自己的逻辑代码，拥有自己的作用域，能够导出希望暴露的变量、函数、对象等，并能通过某种方式，导入其他模块中的变量、函数或对象等。</p>\n<p>JavaScript 本身直到 ES2015 才推出了自己的模块化方案 —— ES Module。在此之前，为了让 JavaScript 支持模块化，社区中涌现了不同的模块化规范：AMD、CMD、CommonJS 等。</p>\n<h2>早期模块化方案</h2>\n<h3>Window</h3>\n<p>在最开始的前端时期，JavaScript 文件之间的通信通常会依靠 window 对象。</p>\n<p><strong>utils.js</strong></p>\n<div class=\"language-javascript\" data-ext=\"js\" data-title=\"js\"><pre class=\"language-javascript\"><code><span class=\"token keyword\">var</span> utils <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token function\">format</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">time</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>time<span class=\"token punctuation\">)</span>\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n</code></pre></div><p><strong>time.js</strong></p>\n<div class=\"language-javascript\" data-ext=\"js\" data-title=\"js\"><pre class=\"language-javascript\"><code><span class=\"token keyword\">var</span> curTime <span class=\"token operator\">=</span> <span class=\"token string\">'2022-08-10 15:05'</span>\n<span class=\"token keyword\">var</span> time <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token literal-property property\">curTime</span><span class=\"token operator\">:</span> curTime\n<span class=\"token punctuation\">}</span>\n</code></pre></div><p><strong>index.js</strong></p>\n<div class=\"language-javascript\" data-ext=\"js\" data-title=\"js\"><pre class=\"language-javascript\"><code>window<span class=\"token punctuation\">.</span>utils<span class=\"token punctuation\">.</span><span class=\"token function\">format</span><span class=\"token punctuation\">(</span>window<span class=\"token punctuation\">.</span>time<span class=\"token punctuation\">.</span>curTime<span class=\"token punctuation\">)</span> <span class=\"token comment\">// '2022-08-10 15:05'</span>\n</code></pre></div><p><strong>index.html</strong></p>\n<div class=\"language-html\" data-ext=\"html\" data-title=\"html\"><pre class=\"language-html\"><code><span class=\"token doctype\"><span class=\"token punctuation\">&lt;!</span><span class=\"token doctype-tag\">DOCTYPE</span> <span class=\"token name\">html</span><span class=\"token punctuation\">&gt;</span></span>\n<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>html</span> <span class=\"token attr-name\">lang</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>en<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">&gt;</span></span>\n  <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>head</span><span class=\"token punctuation\">&gt;</span></span>\n    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>meta</span> <span class=\"token attr-name\">charset</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>UTF-8<span class=\"token punctuation\">\"</span></span> <span class=\"token punctuation\">/&gt;</span></span>\n    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>meta</span> <span class=\"token attr-name\">name</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>viewport<span class=\"token punctuation\">\"</span></span> <span class=\"token attr-name\">content</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>width=device-width, initial-scale=1.0<span class=\"token punctuation\">\"</span></span> <span class=\"token punctuation\">/&gt;</span></span>\n    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>title</span><span class=\"token punctuation\">&gt;</span></span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>title</span><span class=\"token punctuation\">&gt;</span></span>\n  <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>head</span><span class=\"token punctuation\">&gt;</span></span>\n  <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>body</span><span class=\"token punctuation\">&gt;</span></span>\n    <span class=\"token comment\">&lt;!-- 必须保证顺序正确 --&gt;</span>\n    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>script</span> <span class=\"token attr-name\">src</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>./time.js<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">&gt;</span></span><span class=\"token script\"></span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>script</span><span class=\"token punctuation\">&gt;</span></span>\n    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>script</span> <span class=\"token attr-name\">src</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>./utils.js<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">&gt;</span></span><span class=\"token script\"></span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>script</span><span class=\"token punctuation\">&gt;</span></span>\n    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>script</span> <span class=\"token attr-name\">src</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>./index.js<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">&gt;</span></span><span class=\"token script\"></span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>script</span><span class=\"token punctuation\">&gt;</span></span>\n  <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>body</span><span class=\"token punctuation\">&gt;</span></span>\n<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>html</span><span class=\"token punctuation\">&gt;</span></span>\n</code></pre></div><p>然而这会带来命名冲突的问题，并且声明的全局变量会占用内存无法回收，代码可读性差。因此出现了立即调用表达式（IIFE）。</p>\n<h2>IIFE</h2>\n<p>使用立即调用表达式（Immediately Invoked Function Expression, IIFE）改造上述代码：</p>\n<p><strong>utils.js</strong></p>\n<div class=\"language-javascript\" data-ext=\"js\" data-title=\"js\"><pre class=\"language-javascript\"><code><span class=\"token keyword\">var</span> moduleUtils <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">function</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">var</span> <span class=\"token function-variable function\">format</span> <span class=\"token operator\">=</span> <span class=\"token keyword\">function</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\">time</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>time<span class=\"token punctuation\">)</span>\n  <span class=\"token punctuation\">}</span>\n\n  <span class=\"token keyword\">return</span> <span class=\"token punctuation\">{</span>\n    format\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n</code></pre></div><p><strong>time.js</strong></p>\n<div class=\"language-javascript\" data-ext=\"js\" data-title=\"js\"><pre class=\"language-javascript\"><code><span class=\"token keyword\">var</span> moduleTime <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">function</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">var</span> curTime <span class=\"token operator\">=</span> <span class=\"token string\">'2022-08-10 15:05'</span>\n\n  <span class=\"token keyword\">return</span> <span class=\"token punctuation\">{</span>\n    curTime\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n</code></pre></div><p><strong>index.js</strong></p>\n<div class=\"language-javascript\" data-ext=\"js\" data-title=\"js\"><pre class=\"language-javascript\"><code>window<span class=\"token punctuation\">.</span>moduleUtils<span class=\"token punctuation\">.</span><span class=\"token function\">format</span><span class=\"token punctuation\">(</span>window<span class=\"token punctuation\">.</span>moduleTime<span class=\"token punctuation\">.</span>curTime<span class=\"token punctuation\">)</span>\n</code></pre></div><p>现在因为函数具有作用域，就可以解决命名冲突的问题，然而这再次带来了新的问题：</p>\n<ul>\n<li>代码混乱不堪，每个文件的代码都需要包裹在一个立即调用函数表达式中编写；</li>\n<li>在没有合适的规范的情况下，每个公司或个人都会出现任意命名导致模块名称相同的情况。</li>\n</ul>\n<p>因此需要用规范编写模块化代码，这个规范需要包括两个核心功能：<strong>模块本身可以导出暴露的属性，又可以导入需要的属性。</strong></p>\n<h2>CommonJS</h2>\n<p>CommonJS 是一个 JavaScript 规范，最初提出来是在浏览器以外的地方使用，并且当时被命名为 ServerJS，后来为了体现它的广泛性，修改为 CommonJS，平时我们也会简称为 CJS。</p>\n<p>NodeJS 对 CommonJS 进行了支持和实现：</p>\n<ul>\n<li>在 Node 中每个 js 文件都是一个单独的模块；</li>\n<li>这个模块包括 CommonJS 规范的核心变量：<code>exports</code> <code>module.exports</code> <code>require</code>。</li>\n</ul>\n<p>下面在 node 环境中执行以下代码。</p>\n<p><strong>utils.js</strong></p>\n<div class=\"language-javascript\" data-ext=\"js\" data-title=\"js\"><pre class=\"language-javascript\"><code><span class=\"token keyword\">const</span> <span class=\"token function-variable function\">format</span> <span class=\"token operator\">=</span> <span class=\"token keyword\">function</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\">time</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>time<span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">}</span>\n\nmodule<span class=\"token punctuation\">.</span>exports <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span>\n  format\n<span class=\"token punctuation\">}</span>\n</code></pre></div><p><strong>time.js</strong></p>\n<div class=\"language-javascript\" data-ext=\"js\" data-title=\"js\"><pre class=\"language-javascript\"><code><span class=\"token keyword\">const</span> curTime <span class=\"token operator\">=</span> <span class=\"token string\">'2022-08-10 15:05'</span>\n\nexports<span class=\"token punctuation\">.</span>curTime <span class=\"token operator\">=</span> curTime\n</code></pre></div><p><strong>index.js</strong></p>\n<div class=\"language-javascript\" data-ext=\"js\" data-title=\"js\"><pre class=\"language-javascript\"><code><span class=\"token keyword\">const</span> <span class=\"token punctuation\">{</span> curTime <span class=\"token punctuation\">}</span> <span class=\"token operator\">=</span> <span class=\"token function\">require</span><span class=\"token punctuation\">(</span><span class=\"token string\">'./time.js'</span><span class=\"token punctuation\">)</span>\n<span class=\"token keyword\">const</span> <span class=\"token punctuation\">{</span> format <span class=\"token punctuation\">}</span> <span class=\"token operator\">=</span> <span class=\"token function\">require</span><span class=\"token punctuation\">(</span><span class=\"token string\">'./utils'</span><span class=\"token punctuation\">)</span>\n\n<span class=\"token function\">format</span><span class=\"token punctuation\">(</span>curTime<span class=\"token punctuation\">)</span> <span class=\"token comment\">// \"2022-08-10 15:05\"</span>\n</code></pre></div><h3><code>exports</code> 和 <code>module.exports</code></h3>\n<p>可以看到，node 中实用 <code>exports</code> 和 <code>module.exports</code> 实现模块导出，使用 <code>require()</code> 实现模块导入。</p>\n<p>那么为什么要有两个导出方式？</p>\n<p>因为 CommonJS 规范中只定义了 <code>exports</code>，但是它存在一些问题，因此 node 使用 <code>module.exports = exports</code> 间接代替了 <code>exports</code>，他们两个指向同一个内存地址的对象。<code>require()</code> 会返回 <code>module.exports</code> 指向的对象。</p>\n<p>可以在 index.js 中打印 <code>module</code> 对象：</p>\n<div class=\"language-javascript\" data-ext=\"js\" data-title=\"js\"><pre class=\"language-javascript\"><code>Module <span class=\"token punctuation\">{</span>\n  <span class=\"token literal-property property\">id</span><span class=\"token operator\">:</span> <span class=\"token string\">'.'</span><span class=\"token punctuation\">,</span>                    <span class=\"token comment\">// 模块 id</span>\n  <span class=\"token literal-property property\">path</span><span class=\"token operator\">:</span> <span class=\"token string\">'/* ... */'</span><span class=\"token punctuation\">,</span>          <span class=\"token comment\">// 文件路径</span>\n  <span class=\"token literal-property property\">exports</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">{</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>                <span class=\"token comment\">// 模块导出对象</span>\n  <span class=\"token literal-property property\">filename</span><span class=\"token operator\">:</span> <span class=\"token string\">'/* ... */'</span><span class=\"token punctuation\">,</span>      <span class=\"token comment\">// 文件名</span>\n  <span class=\"token literal-property property\">loaded</span><span class=\"token operator\">:</span> <span class=\"token boolean\">false</span><span class=\"token punctuation\">,</span>              <span class=\"token comment\">// 模块是否加载完成</span>\n  <span class=\"token literal-property property\">children</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">[</span>\n    Module <span class=\"token punctuation\">{</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span> <span class=\"token comment\">// 模块 utils</span>\n    Module <span class=\"token punctuation\">{</span><span class=\"token punctuation\">}</span>  <span class=\"token comment\">// 模块 time</span>\n  <span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span>\n  <span class=\"token literal-property property\">paths</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">[</span> <span class=\"token comment\">/* ... */</span> <span class=\"token punctuation\">]</span>        <span class=\"token comment\">// 搜索路径</span>\n<span class=\"token punctuation\">}</span>\n</code></pre></div><h3>require</h3>\n<p><code>require()</code> 引入模块需要经历三个步骤：</p>\n<ol>\n<li>路径分析</li>\n<li>文件定位</li>\n<li>编译执行</li>\n</ol>\n<h4>核心模块和文件模块</h4>\n<p>而在 Node 中，模块分为核心模块和文件模块：</p>\n<ul>\n<li>核心模块：在 Node 源代码的编译过程中，编译成了二进制执行文件。在 Node 进程启动时，核心模块就直接加载进了内存中，因此核心模块引入时，不需要进行文件定位和编译执行，并且在路径分析时会优先判断，因此它的加载速度是最快的。</li>\n<li>文件模块：在运行时动态加载，需要完整的路径分析、文件定位、编译执行过程，速度比核心模块慢。</li>\n</ul>\n<h4>优先从缓存中加载</h4>\n<p>Node 会对引入过的模块进行缓存，以减少二次引入时的开销，对任何模块都会采取缓存优先的策略，<strong>缓存是第一优先级</strong>。</p>\n<p>从缓存加载的优化策略使得二次引入时不需要路径分析、文件定位和编译执行的过程，提高了加载模块的效率。</p>\n<h4>路径分析</h4>\n<p>在判断缓存后，需要对模块进行路径分析和文件定位，<code>require(X)</code> 接收一个<strong>模块标识符</strong>，不同标识符有不同查找规则。</p>\n<p><strong>情况一：X 是一个核心模块，如 path、http</strong></p>\n<p><strong>核心模块</strong>会直接返回模块，并且停止查找。</p>\n<p>试图加载一个与核心模块标识符相同的自定义模块是不会成功的，如果自己编写了一个 <code>http</code> 用户模块，想要加载成功，则必须选择一个不同的标识符或者换用路径方式。</p>\n<p><strong>情况二：X 以 ./ 或 ../ 或 / （路径形式）开头</strong></p>\n<p>以路径开始的标识符，会被当成<strong>文件模块</strong>，在分析路径时，<code>require(X)</code> 方法会将路径转换为真实路径，并以真实路径作为索引，将编译执行的过程中放到缓存中。由于文件模块给 Node 指明了确切的文件位置，因此在查找过程中可以节约大量时间，<strong>文件模块的加载速度慢于核心模块</strong>。</p>\n<p><strong>情况三：直接是一个 X（没有路径），并且 X 不是一个核心模块</strong></p>\n<p>这种情况下，X 是一个<strong>自定义模块</strong>，那么 Node 会从<strong>模块路径</strong> <code>moudle.paths</code> 中查找。</p>\n<blockquote>\n<p>模块路径：Node 在定位文件模块的具体文件时指定的查找策略，为多个路径组成的数组。</p>\n</blockquote>\n<p>在 Linux 下，打印这个可能输出：</p>\n<div class=\"language-javascript\" data-ext=\"js\" data-title=\"js\"><pre class=\"language-javascript\"><code><span class=\"token punctuation\">;</span><span class=\"token punctuation\">[</span>\n  <span class=\"token string\">'/home/jackson/research/node_modules'</span><span class=\"token punctuation\">,</span>\n  <span class=\"token string\">'/home/jackson/node_modules'</span><span class=\"token punctuation\">,</span>\n  <span class=\"token string\">'/home/node_modules'</span><span class=\"token punctuation\">,</span>\n  <span class=\"token string\">'/node_modules'</span>\n<span class=\"token punctuation\">]</span>\n</code></pre></div><p>Windows 下，可能会输出：</p>\n<div class=\"language-javascript\" data-ext=\"js\" data-title=\"js\"><pre class=\"language-javascript\"><code><span class=\"token punctuation\">;</span><span class=\"token punctuation\">[</span><span class=\"token string\">'c:\\\\nodejs\\\\node_modules'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'c:\\\\node_modules'</span><span class=\"token punctuation\">]</span>\n</code></pre></div><p>模块路径的生成规则如下：</p>\n<ul>\n<li>当前文件目录下的 <code>node_modules</code> 目录</li>\n<li>父目录下的 <code>node_modules</code> 目录</li>\n<li>父目录的父目录下的 <code>node_modules</code> 目录</li>\n<li>沿路径向上逐级递归，直到根目录下的 <code>node_modules</code> 目录</li>\n</ul>\n<p>在加载过程中，Node 会逐个尝试模块路径中的路径，直到找到目标模块，因此速度在三个情况中最慢。</p>\n<h4>文件定位</h4>\n<p>文件定位主要包括文件扩展名分析、目录和包的处理。</p>\n<p><strong>文件扩展名分析</strong></p>\n<p><code>require(X)</code> 在分析标识符的过程中，会出现标识符不包含文件扩展名的情况。</p>\n<ol>\n<li>如果有文件扩展名，按照后缀名的格式查找对应的文件</li>\n<li>如果没有文件扩展名，会按照如下顺序尝试：</li>\n</ol>\n<ul>\n<li>直接查找文件 X</li>\n<li>查找 <code>X.js</code> 文件</li>\n<li>查找 <code>X.json</code> 文件</li>\n<li>查找 <code>X.node</code> 文件</li>\n</ul>\n<p>在尝试的过程中，需要调用 <code>fs</code> 模块同步阻塞式地判断文件是否存在，所以会引起性能问题，因此，最好带上文件扩展名，会加快模块加载速度。</p>\n<p><strong>目录分析和包</strong></p>\n<p>在分析标识符的过程中，通过分析文件扩展名可能并没有得到对应文件，但却得到一个目录，此时 Node 会将目录当作一个包来处理。</p>\n<ol>\n<li>首先在当前目录下查找 <code>package.json</code> 文件，通过 <code>JSON.parse()</code> 解析出包描述对象，从中取出 <code>main</code> 属性指定的文件名进行定位，如果文件名缺少扩展名，则会进行文件扩展名分析</li>\n<li>如果 <code>main</code> 属性指定的文件名错误，或者没有 <code>package.json</code> 文件，那么会一次查找目录下面的 <code>index</code> 文件</li>\n</ol>\n<ul>\n<li>查找 <code>X/index.js</code> 文件</li>\n<li>查找 <code>X/index.json</code> 文件</li>\n<li>查找 <code>X/index.node</code> 文件</li>\n</ul>\n<ol start=\"3\">\n<li>如果目录分析的过程中没有成功定位，则自定义模块进入下一个模块路径中进行搜索；如果所有路径都遍历完毕，仍然没有找到目标文件，那么报错：<code>not found</code></li>\n</ol>\n<h3>模块编译</h3>\n<p>Node 中对于模块的定义如下：</p>\n<div class=\"language-javascript\" data-ext=\"js\" data-title=\"js\"><pre class=\"language-javascript\"><code><span class=\"token keyword\">function</span> <span class=\"token function\">Module</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">id<span class=\"token punctuation\">,</span> parent</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>id <span class=\"token operator\">=</span> id\n  <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>exports <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span><span class=\"token punctuation\">}</span>\n  <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>parent <span class=\"token operator\">=</span> parent\n  <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>parent <span class=\"token operator\">&amp;&amp;</span> parent<span class=\"token punctuation\">.</span>children<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    parent<span class=\"token punctuation\">.</span>children<span class=\"token punctuation\">.</span><span class=\"token function\">push</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">)</span>\n  <span class=\"token punctuation\">}</span>\n\n  <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>filename <span class=\"token operator\">=</span> <span class=\"token keyword\">null</span>\n  <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>loaded <span class=\"token operator\">=</span> <span class=\"token boolean\">false</span>\n  <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>children <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span>\n  <span class=\"token comment\">// ...</span>\n<span class=\"token punctuation\">}</span>\n</code></pre></div><p>当定位到目标文件时，Node 会新建一个模块对象，然后根据路径载入并编译，对于不同的文件扩展名，它的载入方法也不同：</p>\n<ul>\n<li><code>.js</code> 文件：通过 <code>fs</code> 模块同步读取文件后编译执行；</li>\n<li><code>.node</code> 文件：这是用 <code>C/C++</code> 编写的扩展文件，通过 <code>dlopen()</code> 方法加载最后编译生成的文件；</li>\n<li><code>.json</code> 文件：通过 <code>fs</code> 模块同步读取文件后，用 <code>JSON.parse()</code> 解析返回结果；</li>\n<li>其余扩展名文件：都被当作 <code>.js</code> 文件载入。</li>\n</ul>\n<p>模块在第一次被引入时，模块中的代码会被执行一次；模块被多次引入，会缓存（<code>module.loaded</code> 设置为 <code>true</code>），最终只运行一次；如果有循环引入，会采用深度优先搜索加载模块。</p>\n<p>每一个编译成功的模块都会讲其文件路径作为索引缓存在 <code>Module._cache</code> 对象上，以提高二次引入的性能。</p>\n<h3>其他</h3>\n<p>每个模块都存在 <code>require</code>、<code>exports</code>、<code>module</code> 等其它变量，这些变量从何而来？这是因为 Node 对获取的 JavaScript 文件内容进行了头尾包装。</p>\n<div class=\"language-javascript\" data-ext=\"js\" data-title=\"js\"><pre class=\"language-javascript\"><code><span class=\"token punctuation\">;</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">function</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\">exports<span class=\"token punctuation\">,</span> require<span class=\"token punctuation\">,</span> module<span class=\"token punctuation\">,</span> __filename<span class=\"token punctuation\">,</span> __dirname</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">var</span> Math <span class=\"token operator\">=</span> <span class=\"token function\">require</span><span class=\"token punctuation\">(</span><span class=\"token string\">'math'</span><span class=\"token punctuation\">)</span>\n  exports<span class=\"token punctuation\">.</span><span class=\"token function-variable function\">area</span> <span class=\"token operator\">=</span> <span class=\"token keyword\">function</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\">raduis</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">return</span> Math<span class=\"token punctuation\">.</span><span class=\"token constant\">PI</span> <span class=\"token operator\">*</span> radius <span class=\"token operator\">*</span> radius\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span>\n</code></pre></div><p>这样每个模块文件都用函数进行了作用域隔离，包装之后的代码会通过 <code>vm</code> 原生模块的 <code>runInThisContext()</code> 方法执行（类似 <code>eval</code>，只是有明确作用域，不会污染全局），返回一个具体的 <code>function</code> 对象。最后,将当前模块的 <code>exports</code> 属性、<code>require()</code> 方法、<code>module</code> 以及在文件定位中得到的完整文件路径和文件目录作为参数传递给这个 <code>function</code> 执行。</p>\n<p>那么为什么存在 <code>exports</code> 的情况下，还存在 <code>module.exports</code>？</p>\n<p>先来看看包装之后的文件：</p>\n<div class=\"language-javascript\" data-ext=\"js\" data-title=\"js\"><pre class=\"language-javascript\"><code><span class=\"token keyword\">function</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\">exports<span class=\"token punctuation\">,</span> require<span class=\"token punctuation\">,</span> module<span class=\"token punctuation\">,</span> __filename<span class=\"token punctuation\">,</span> __dirname</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span><span class=\"token punctuation\">}</span>\n</code></pre></div><p><code>exports</code> 是通过形参的方式传入，<strong>直接赋值形参会改变形参的引用</strong>，但并不能改变作用域外的值，因此在使用 <code>exports</code> 的时候不推荐直接赋值一个对象，而是通过赋值属性的方式导出变量。而如果想要达到 <code>require</code> 直接引入一个类的效果，应该赋值给 <code>module.exports</code> 对象，这种方案不会改变形参的引用。</p>\n<h3>缺点</h3>\n<p>CommonJS 加载模块是同步的：同步意味着只有等到对应的模块加载完毕，当前模块中的内容才能被运行。</p>\n<p>这也是通常用作服务器模块化规范的原因，因为服务器加载的 js 文件都是本地文件，加载速度非常快。</p>\n<p>如果将它应用于浏览器呢？浏览器加载 js 文件需要先从服务器将文件下载下来，之后在加载运行，会阻塞后续代码的执行。</p>\n<p>所以早期在浏览器中，我们通常不使用 CommonJS 规范，而通常会采用 AMD 或 CMD 规范。</p>\n<h2>AMD/CMD</h2>\n<p>AMD 和 CMD 是用于浏览器端的模块化规范。</p>\n<p>但是目前一方面现代的浏览器已经支持 ES Modules，另一方面借助于 webpack 等工具可以实现对 CommonJS 或者 ES Module 代码的转换。AMD 和 CMD 已经使用非常少了，所以这里我们进行简单的演练。</p>\n<h3>AMD</h3>\n<p>异步模块定义（Asynchronous Module Definition，AMD）采用异步加载模块，因此可以在浏览器中使用。比较常用的库是 <code>require.js</code>。</p>\n<blockquote>\n<p>先有 RequireJS，后有 AMD 规范，随着 RequireJS 的推广和普及，AMD 规范才被创建出来。</p>\n</blockquote>\n<div class=\"language-bash\" data-ext=\"sh\" data-title=\"sh\"><pre class=\"language-bash\"><code>AMD\n├── index.html\n├── index.js\n├── lib\n│   └── require.js\n└── modules\n    ├── time.js\n    └── .js\n</code></pre></div><p><strong>index.html</strong></p>\n<div class=\"language-html\" data-ext=\"html\" data-title=\"html\"><pre class=\"language-html\"><code><span class=\"token doctype\"><span class=\"token punctuation\">&lt;!</span><span class=\"token doctype-tag\">DOCTYPE</span> <span class=\"token name\">html</span><span class=\"token punctuation\">&gt;</span></span>\n<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>html</span> <span class=\"token attr-name\">lang</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>en<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">&gt;</span></span>\n  <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>head</span><span class=\"token punctuation\">&gt;</span></span>\n    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>meta</span> <span class=\"token attr-name\">charset</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>UTF-8<span class=\"token punctuation\">\"</span></span> <span class=\"token punctuation\">/&gt;</span></span>\n    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>meta</span> <span class=\"token attr-name\">name</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>viewport<span class=\"token punctuation\">\"</span></span> <span class=\"token attr-name\">content</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>width=device-width, initial-scale=1.0<span class=\"token punctuation\">\"</span></span> <span class=\"token punctuation\">/&gt;</span></span>\n    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>title</span><span class=\"token punctuation\">&gt;</span></span>Document<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>title</span><span class=\"token punctuation\">&gt;</span></span>\n  <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>head</span><span class=\"token punctuation\">&gt;</span></span>\n  <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>body</span><span class=\"token punctuation\">&gt;</span></span>\n    <span class=\"token comment\">&lt;!-- 注意 data-main --&gt;</span>\n    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>script</span> <span class=\"token attr-name\">src</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>./lib/require.js<span class=\"token punctuation\">\"</span></span> <span class=\"token attr-name\">data-main</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>./index.js<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">&gt;</span></span><span class=\"token script\"></span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>script</span><span class=\"token punctuation\">&gt;</span></span>\n  <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>body</span><span class=\"token punctuation\">&gt;</span></span>\n<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>html</span><span class=\"token punctuation\">&gt;</span></span>\n</code></pre></div><p><strong>index.js</strong></p>\n<div class=\"language-javascript\" data-ext=\"js\" data-title=\"js\"><pre class=\"language-javascript\"><code><span class=\"token punctuation\">;</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">function</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token comment\">// 配置</span>\n  require<span class=\"token punctuation\">.</span><span class=\"token function\">config</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span>\n    <span class=\"token literal-property property\">baseUrl</span><span class=\"token operator\">:</span> <span class=\"token string\">''</span><span class=\"token punctuation\">,</span>\n    <span class=\"token comment\">// 模块映射关系</span>\n    <span class=\"token literal-property property\">paths</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">{</span>\n      <span class=\"token literal-property property\">time</span><span class=\"token operator\">:</span> <span class=\"token string\">'./modules/time'</span><span class=\"token punctuation\">,</span>\n      <span class=\"token literal-property property\">utils</span><span class=\"token operator\">:</span> <span class=\"token string\">'./modules/utils'</span>\n    <span class=\"token punctuation\">}</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span>\n\n  <span class=\"token function\">require</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">[</span><span class=\"token string\">'utils'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'time'</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span> <span class=\"token keyword\">function</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\">utils<span class=\"token punctuation\">,</span> time</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token comment\">// 逻辑代码</span>\n    console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>utils<span class=\"token punctuation\">.</span>format<span class=\"token punctuation\">)</span> <span class=\"token comment\">// Function</span>\n    console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>time<span class=\"token punctuation\">.</span>curTime<span class=\"token punctuation\">)</span> <span class=\"token comment\">// 2022-08-10 15:05</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n</code></pre></div><p><strong>time.js</strong></p>\n<div class=\"language-javascript\" data-ext=\"js\" data-title=\"js\"><pre class=\"language-javascript\"><code><span class=\"token comment\">// 定义模块</span>\n<span class=\"token function\">define</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">function</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">const</span> curTime <span class=\"token operator\">=</span> <span class=\"token string\">'2022-08-10 15:05'</span>\n\n  <span class=\"token comment\">// 暴露属性</span>\n  <span class=\"token keyword\">return</span> <span class=\"token punctuation\">{</span>\n    curTime\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span>\n</code></pre></div><p><strong>utils.js</strong></p>\n<div class=\"language-javascript\" data-ext=\"js\" data-title=\"js\"><pre class=\"language-javascript\"><code><span class=\"token comment\">// 定义模块，引入需要的模块</span>\n<span class=\"token function\">define</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">[</span><span class=\"token string\">'time'</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span> <span class=\"token keyword\">function</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\">time</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">const</span> <span class=\"token function-variable function\">format</span> <span class=\"token operator\">=</span> <span class=\"token keyword\">function</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\">time</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>time<span class=\"token punctuation\">)</span>\n  <span class=\"token punctuation\">}</span>\n\n  <span class=\"token function\">format</span><span class=\"token punctuation\">(</span>time<span class=\"token punctuation\">.</span>curTime<span class=\"token punctuation\">)</span> <span class=\"token comment\">// 2022-08-10 15:05</span>\n\n  <span class=\"token comment\">// 暴露属性</span>\n  <span class=\"token keyword\">return</span> <span class=\"token punctuation\">{</span>\n    format\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span>\n</code></pre></div><h3>CMD</h3>\n<p>通用模块定义（Common Module Definition，CMD）采用异步加载模块，并且吸收 CommonJS 的优点，比较常用的库是 <code>SeaJS</code>。</p>\n<div class=\"language-bash\" data-ext=\"sh\" data-title=\"sh\"><pre class=\"language-bash\"><code>CMD\n├── index.html\n├── index.js\n├── lib\n│   └── sea.js\n└── modules\n    ├── time.js\n    └── .js\n</code></pre></div><p><strong>index.html</strong></p>\n<div class=\"language-html\" data-ext=\"html\" data-title=\"html\"><pre class=\"language-html\"><code><span class=\"token doctype\"><span class=\"token punctuation\">&lt;!</span><span class=\"token doctype-tag\">DOCTYPE</span> <span class=\"token name\">html</span><span class=\"token punctuation\">&gt;</span></span>\n<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>html</span> <span class=\"token attr-name\">lang</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>en<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">&gt;</span></span>\n  <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>head</span><span class=\"token punctuation\">&gt;</span></span>\n    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>meta</span> <span class=\"token attr-name\">charset</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>UTF-8<span class=\"token punctuation\">\"</span></span> <span class=\"token punctuation\">/&gt;</span></span>\n    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>meta</span> <span class=\"token attr-name\">name</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>viewport<span class=\"token punctuation\">\"</span></span> <span class=\"token attr-name\">content</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>width=device-width, initial-scale=1.0<span class=\"token punctuation\">\"</span></span> <span class=\"token punctuation\">/&gt;</span></span>\n    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>title</span><span class=\"token punctuation\">&gt;</span></span>Document<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>title</span><span class=\"token punctuation\">&gt;</span></span>\n  <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>head</span><span class=\"token punctuation\">&gt;</span></span>\n  <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>body</span><span class=\"token punctuation\">&gt;</span></span>\n    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>script</span> <span class=\"token attr-name\">src</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>./lib/sea.js<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">&gt;</span></span><span class=\"token script\"></span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>script</span><span class=\"token punctuation\">&gt;</span></span>\n    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>script</span><span class=\"token punctuation\">&gt;</span></span><span class=\"token script\"><span class=\"token language-javascript\">\n      seajs<span class=\"token punctuation\">.</span><span class=\"token function\">use</span><span class=\"token punctuation\">(</span><span class=\"token string\">'./index.js'</span><span class=\"token punctuation\">)</span>\n    </span></span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>script</span><span class=\"token punctuation\">&gt;</span></span>\n  <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>body</span><span class=\"token punctuation\">&gt;</span></span>\n<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>html</span><span class=\"token punctuation\">&gt;</span></span>\n</code></pre></div><p><strong>index.js</strong></p>\n<div class=\"language-javascript\" data-ext=\"js\" data-title=\"js\"><pre class=\"language-javascript\"><code><span class=\"token function\">define</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">function</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\">require<span class=\"token punctuation\">,</span> exports<span class=\"token punctuation\">,</span> module</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">const</span> <span class=\"token punctuation\">{</span> curTime <span class=\"token punctuation\">}</span> <span class=\"token operator\">=</span> <span class=\"token function\">require</span><span class=\"token punctuation\">(</span><span class=\"token string\">'./modules/foo'</span><span class=\"token punctuation\">)</span>\n  <span class=\"token keyword\">const</span> <span class=\"token punctuation\">{</span> format <span class=\"token punctuation\">}</span> <span class=\"token operator\">=</span> <span class=\"token function\">require</span><span class=\"token punctuation\">(</span><span class=\"token string\">'./modules/utils'</span><span class=\"token punctuation\">)</span>\n\n  <span class=\"token function\">format</span><span class=\"token punctuation\">(</span>curTime<span class=\"token punctuation\">)</span> <span class=\"token comment\">// 2022-08-10 15:05</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span>\n</code></pre></div><p><strong>time.js</strong></p>\n<div class=\"language-javascript\" data-ext=\"js\" data-title=\"js\"><pre class=\"language-javascript\"><code><span class=\"token function\">define</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">function</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\">require<span class=\"token punctuation\">,</span> exports<span class=\"token punctuation\">,</span> module</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">const</span> curTime <span class=\"token operator\">=</span> <span class=\"token string\">'2022-08-10 15:05'</span>\n\n  module<span class=\"token punctuation\">.</span>exports <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span>\n    curTime\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span>\n</code></pre></div><p><strong>utils.js</strong></p>\n<div class=\"language-javascript\" data-ext=\"js\" data-title=\"js\"><pre class=\"language-javascript\"><code><span class=\"token function\">define</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">function</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\">require<span class=\"token punctuation\">,</span> exports<span class=\"token punctuation\">,</span> module</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">const</span> <span class=\"token function-variable function\">format</span> <span class=\"token operator\">=</span> <span class=\"token keyword\">function</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\">time</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>time<span class=\"token punctuation\">)</span>\n  <span class=\"token punctuation\">}</span>\n\n  module<span class=\"token punctuation\">.</span>exports <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span>\n    format\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span>\n</code></pre></div><h2>ESM</h2>\n<p>ES2015 后浏览器实现的模块化方案，长远来看，未来无论是基于 JS 的 WEB 端，还是基于 node 的服务器端或桌面应用，模块规范都会统一使用 ES6 module。</p>\n<h3>兼容性</h3>\n<p>并不是所有浏览器都对 ESM 实现完全支持，需要用到 webpack 等工具实现代码转换。</p>\n<p>可见 <a href=\"https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Guide/Modules#%E6%B5%8F%E8%A7%88%E5%99%A8%E6%94%AF%E6%8C%81\" target=\"_blank\" rel=\"noopener noreferrer\">浏览器支持</a>。</p>\n<h3>导出</h3>\n<h4>方式一：分别导出</h4>\n<div class=\"language-javascript\" data-ext=\"js\" data-title=\"js\"><pre class=\"language-javascript\"><code><span class=\"token keyword\">export</span> <span class=\"token keyword\">const</span> curTime <span class=\"token operator\">=</span> <span class=\"token string\">'2022-08-10 15:05'</span>\n<span class=\"token keyword\">export</span> <span class=\"token keyword\">const</span> <span class=\"token function-variable function\">format</span> <span class=\"token operator\">=</span> <span class=\"token keyword\">function</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\">time</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>time<span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">}</span>\n</code></pre></div><h4>方式二：统一导出</h4>\n<div class=\"language-javascript\" data-ext=\"js\" data-title=\"js\"><pre class=\"language-javascript\"><code><span class=\"token keyword\">const</span> curTime <span class=\"token operator\">=</span> <span class=\"token string\">'2022-08-10 15:05'</span>\n<span class=\"token keyword\">const</span> <span class=\"token function-variable function\">format</span> <span class=\"token operator\">=</span> <span class=\"token keyword\">function</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\">time</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>time<span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">export</span> <span class=\"token punctuation\">{</span> curTime<span class=\"token punctuation\">,</span> format <span class=\"token punctuation\">}</span>\n</code></pre></div><h4>方式三：别名导出</h4>\n<div class=\"language-javascript\" data-ext=\"js\" data-title=\"js\"><pre class=\"language-javascript\"><code><span class=\"token keyword\">export</span> <span class=\"token punctuation\">{</span> curTime <span class=\"token keyword\">as</span> time<span class=\"token punctuation\">,</span> format <span class=\"token punctuation\">}</span>\n</code></pre></div><p>注意这里 <code>{}</code> 并非对象。</p>\n<h4>方式四：默认导出</h4>\n<p>一个模块中只能有一个默认导出。</p>\n<div class=\"language-javascript\" data-ext=\"js\" data-title=\"js\"><pre class=\"language-javascript\"><code><span class=\"token keyword\">export</span> <span class=\"token keyword\">default</span> <span class=\"token keyword\">function</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\">time</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token string\">'format'</span><span class=\"token punctuation\">,</span> time<span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">}</span>\n</code></pre></div><h3>导入</h3>\n<h4>方式一：统一导入</h4>\n<div class=\"language-javascript\" data-ext=\"js\" data-title=\"js\"><pre class=\"language-javascript\"><code><span class=\"token keyword\">import</span> <span class=\"token punctuation\">{</span> curTime<span class=\"token punctuation\">,</span> format <span class=\"token punctuation\">}</span> <span class=\"token keyword\">from</span> <span class=\"token string\">'./module.js'</span>\n</code></pre></div><h4>方式二：整体导入</h4>\n<div class=\"language-javascript\" data-ext=\"js\" data-title=\"js\"><pre class=\"language-javascript\"><code><span class=\"token keyword\">import</span> <span class=\"token operator\">*</span> <span class=\"token keyword\">as</span> module <span class=\"token keyword\">from</span> <span class=\"token string\">'./module.js'</span>\nmodule<span class=\"token punctuation\">.</span><span class=\"token function\">format</span><span class=\"token punctuation\">(</span>module<span class=\"token punctuation\">.</span>time<span class=\"token punctuation\">)</span>\n</code></pre></div><h4>方式三：别名导入</h4>\n<div class=\"language-javascript\" data-ext=\"js\" data-title=\"js\"><pre class=\"language-javascript\"><code><span class=\"token keyword\">import</span> <span class=\"token punctuation\">{</span> curTime <span class=\"token keyword\">as</span> time<span class=\"token punctuation\">,</span> format <span class=\"token punctuation\">}</span> <span class=\"token keyword\">from</span> <span class=\"token string\">'./module.js'</span>\n</code></pre></div><h4>方式四：默认导出的导入</h4>\n<div class=\"language-javascript\" data-ext=\"js\" data-title=\"js\"><pre class=\"language-javascript\"><code><span class=\"token keyword\">import</span> format <span class=\"token keyword\">from</span> <span class=\"token string\">'./module.js'</span>\n</code></pre></div><h3><code>import()</code></h3>\n<p>上述的导入都是用 import 关键字实现模块实现，<code>import()</code> 函数可以实现动态导入模块。</p>\n<div class=\"language-javascript\" data-ext=\"js\" data-title=\"js\"><pre class=\"language-javascript\"><code><span class=\"token keyword\">let</span> flag <span class=\"token operator\">=</span> <span class=\"token boolean\">true</span>\n<span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>flag<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">import</span><span class=\"token punctuation\">(</span><span class=\"token string\">'./foo.js'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">then</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">foo</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=&gt;</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token comment\">// 逻辑代码</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">}</span> <span class=\"token keyword\">else</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">import</span><span class=\"token punctuation\">(</span><span class=\"token string\">'./bar.js'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">then</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">bar</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=&gt;</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token comment\">// 逻辑代码</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">}</span>\n</code></pre></div><h3>ESM VS CommonJS</h3>\n<p>CommonJS 模块加载 js 文件的过程是 <strong>运行时</strong> 加载的，并且是同步的：</p>\n<ul>\n<li>运行时加载意味着是 js 引擎在执行 js 代码的过程中加载模块；</li>\n<li>同步的就意味着一个文件没有加载结束之前，后面的代码都不会执行。</li>\n</ul>\n<p>ES Module 加载 js 文件的过程是 <strong>编译（解析）时</strong> 加载的，并且是异步的：</p>\n<ul>\n<li>编译时（解析）时加载，意味着 <code>import</code> 关键字不能和运行时相关的内容放在一起使用；</li>\n<li>异步的意味着：JS 引擎在遇到 import 时会去获取这个 js 文件，但是这个获取的过程是异步的，并不会阻塞主线程继续执行。</li>\n</ul>\n<p>CommonJS 通过 <code>module.exports</code> 导出的是一个对象，导出和导入指向的是同一块内存空间，两边修改会同时影响导出对象。</p>\n<p>ES Module 通过 <code>export</code> 导出的是变量本身的引用：JS 引擎会创建<strong>模块环境记录</strong>，会和导出的变量进行绑定。所以在导出的模块中修改变化，导入的地方可以通过模块环境记录获取最新的值；但是在导入的地方不允许修改变量（直接报错），因为导入它时相当于给一个常量赋值。</p>\n<blockquote>\n<p>如果 ESM 导出的是一个对象，那么导入的模块也能修改对象中的属性，因为他指向内存空间。</p>\n</blockquote>\n<h2>总结</h2>\n<p>本文主要介绍了模块化发展的历程，介绍各种规范如 CommonJS、AMD、CMD、ESM 的使用和对比。</p>\n",
      "date_published": "2022-08-10T00:00:00.000Z",
      "date_modified": "2024-01-07T08:28:24.000Z",
      "authors": [],
      "tags": [
        "工程化"
      ]
    },
    {
      "title": "包管理工具",
      "url": "https://dribble-njr.github.io/blog/blog/frontend/engineering/basic/002-package-manager.html",
      "id": "https://dribble-njr.github.io/blog/blog/frontend/engineering/basic/002-package-manager.html",
      "summary": "npm https://docs.npmjs.com/resolving-eacces-permissions-errors-when-installing-packages-globally ",
      "content_html": "<h2>npm</h2>\n<p><a href=\"https://docs.npmjs.com/resolving-eacces-permissions-errors-when-installing-packages-globally\" target=\"_blank\" rel=\"noopener noreferrer\">https://docs.npmjs.com/resolving-eacces-permissions-errors-when-installing-packages-globally</a></p>\n",
      "date_published": "2023-12-23T00:00:00.000Z",
      "date_modified": "2024-02-07T05:30:24.000Z",
      "authors": [],
      "tags": [
        "工程化"
      ]
    },
    {
      "title": "工具链",
      "url": "https://dribble-njr.github.io/blog/blog/frontend/engineering/basic/003-tool.html",
      "id": "https://dribble-njr.github.io/blog/blog/frontend/engineering/basic/003-tool.html",
      "summary": "JavaScript 问题： API 兼容，polyfill: core.js 语法增强（compiler），syntax transformer(regenerator)，jsx，tsc... babel 代码编译工具 @babel/core @babel/preset-env source code -- ast swc(rust) 对标 babe...",
      "content_html": "<h2>JavaScript</h2>\n<p>问题：</p>\n<ul>\n<li>API 兼容，polyfill: core.js</li>\n<li>语法增强（compiler），syntax transformer(regenerator)，jsx，tsc...</li>\n</ul>\n<p>babel 代码编译工具</p>\n<ul>\n<li>@babel/core</li>\n<li>@babel/preset-env</li>\n</ul>\n<p>source code -- ast</p>\n<p>swc(rust) 对标 babel</p>\n<p><a href=\"https://github.com/estree/estree\" target=\"_blank\" rel=\"noopener noreferrer\">https://github.com/estree/estree</a></p>\n<p><a href=\"https://github.com/bramblex/jsjs\" target=\"_blank\" rel=\"noopener noreferrer\">https://github.com/bramblex/jsjs</a></p>\n<h2>CSS</h2>\n<p>问题：</p>\n<ul>\n<li>语法缺失（循环、判断、拼接）</li>\n<li>功能缺失（颜色函数、数学函数、自定义函数）</li>\n</ul>\n<p>sass/less/stylus --&gt; 预处理器 --&gt; css --&gt; postcss（后处理器） --&gt; polyfill、代码压缩、剪枝</p>\n<p><a href=\"https://postcss.org/\" target=\"_blank\" rel=\"noopener noreferrer\">https://postcss.org/</a></p>\n<figure><img src=\"https://raw.githubusercontent.com/dribble-njr/typora-njr/master/img/20231223162446.png\" alt=\"20231223162446\" tabindex=\"0\" loading=\"lazy\"><figcaption>20231223162446</figcaption></figure>\n<h2>构建工具</h2>\n<p>以 webpack 为例。</p>\n<ol>\n<li>入口：通过入口分析依赖关系；</li>\n<li>开发服务器：webpack serve --&gt; webpack dev server --&gt; express --&gt; 源码变更 --&gt; 浏览器刷新（强制刷新、HMR）websocket</li>\n<li>文件指纹（hash），涉及到缓存，类似 </li>\n<li>sourcemap</li>\n<li>...</li>\n</ol>\n<h2>脚手架</h2>\n<p>提供界面与交互、提供工程模版</p>\n<ul>\n<li>cra：深度定制，配置需要 eject 或使用 react-rewired 和 customize-cra</li>\n<li>vue-cli：支持配置覆盖，折中方案</li>\n<li>...</li>\n</ul>\n",
      "image": "https://raw.githubusercontent.com/dribble-njr/typora-njr/master/img/20231223162446.png",
      "date_published": "2023-12-23T00:00:00.000Z",
      "date_modified": "2024-01-07T08:28:24.000Z",
      "authors": [],
      "tags": [
        "工程化"
      ]
    },
    {
      "title": "项目规范",
      "url": "https://dribble-njr.github.io/blog/blog/frontend/engineering/basic/004-project-standards.html",
      "id": "https://dribble-njr.github.io/blog/blog/frontend/engineering/basic/004-project-standards.html",
      "summary": "代码规范 editorconfig EditorConfig 有助于跨不同编辑器和 IDE 为处理同一项目的多个开发人员维护一致的编码风格。 VSCode 需要安装 EditorConfig for VS Code 插件。 .editorconfig ESLint ESLint 是一个 Javascript Linter，帮助我们规范代码质量，提高团队...",
      "content_html": "<h2>代码规范</h2>\n<h3>editorconfig</h3>\n<p>EditorConfig 有助于跨不同编辑器和 IDE 为处理同一项目的多个开发人员维护一致的编码风格。</p>\n<p>VSCode 需要安装 <code>EditorConfig for VS Code</code> 插件。</p>\n<p><strong><code>.editorconfig</code></strong></p>\n<div class=\"language-bash\" data-ext=\"sh\" data-title=\"sh\"><pre class=\"language-bash\"><code><span class=\"token comment\"># http://editorconfig.org</span>\n\nroot <span class=\"token operator\">=</span> <span class=\"token boolean\">true</span>\n\n<span class=\"token punctuation\">[</span>*<span class=\"token punctuation\">]</span> <span class=\"token comment\"># 表示所有文件适用</span>\ncharset <span class=\"token operator\">=</span> utf-8 <span class=\"token comment\"># 设置文件字符集为 utf-8</span>\nindent_style <span class=\"token operator\">=</span> space <span class=\"token comment\"># 缩进风格（tab | space）</span>\nindent_size <span class=\"token operator\">=</span> <span class=\"token number\">2</span> <span class=\"token comment\"># 缩进大小</span>\nend_of_line <span class=\"token operator\">=</span> lf <span class=\"token comment\"># 控制换行类型(lf | cr | crlf)</span>\ntrim_trailing_whitespace <span class=\"token operator\">=</span> <span class=\"token boolean\">true</span> <span class=\"token comment\"># 去除行首的任意空白字符</span>\ninsert_final_newline <span class=\"token operator\">=</span> <span class=\"token boolean\">true</span> <span class=\"token comment\"># 始终在文件末尾插入一个新行</span>\n\n<span class=\"token punctuation\">[</span>*.md<span class=\"token punctuation\">]</span> <span class=\"token comment\"># 表示仅 md 文件适用以下规则</span>\nmax_line_length <span class=\"token operator\">=</span> off\ntrim_trailing_whitespace <span class=\"token operator\">=</span> <span class=\"token boolean\">false</span>\n</code></pre></div><h3>ESLint</h3>\n<p>ESLint 是一个 Javascript Linter，帮助我们规范代码质量，提高团队开发效率。</p>\n<p>安装 <code>eslint</code> 并新建配置文件 <code>.eslintrc.js</code>。</p>\n<div class=\"language-bash\" data-ext=\"sh\" data-title=\"sh\"><pre class=\"language-bash\"><code><span class=\"token function\">pnpm</span> <span class=\"token function\">add</span> eslint <span class=\"token parameter variable\">-D</span>\n</code></pre></div><div class=\"language-javascript\" data-ext=\"js\" data-title=\"js\"><pre class=\"language-javascript\"><code>module<span class=\"token punctuation\">.</span>exports <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token literal-property property\">env</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token literal-property property\">browser</span><span class=\"token operator\">:</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">,</span>\n    <span class=\"token literal-property property\">es2021</span><span class=\"token operator\">:</span> <span class=\"token boolean\">true</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n  <span class=\"token keyword\">extends</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">[</span>\n    <span class=\"token string\">'eslint:recommended'</span><span class=\"token punctuation\">,</span>\n    <span class=\"token string\">'plugin:react/recommended'</span><span class=\"token punctuation\">,</span>\n    <span class=\"token string\">'plugin:@typescript-eslint/recommended'</span>\n  <span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span>\n  <span class=\"token literal-property property\">parserOptions</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token literal-property property\">ecmaVersion</span><span class=\"token operator\">:</span> <span class=\"token string\">'latest'</span><span class=\"token punctuation\">,</span>\n    <span class=\"token literal-property property\">sourceType</span><span class=\"token operator\">:</span> <span class=\"token string\">'module'</span>\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n</code></pre></div><p>如果想要在项目中安装 <code>jest</code>，则需要在配置文件中的 <code>env</code> 加上下面这一行：</p>\n<div class=\"language-diff\" data-ext=\"diff\" data-title=\"diff\"><pre class=\"language-diff\"><code><span class=\"token unchanged\"><span class=\"token prefix unchanged\"> </span><span class=\"token line\"> env: {\n</span><span class=\"token prefix unchanged\"> </span><span class=\"token line\">   browser: true,\n</span><span class=\"token prefix unchanged\"> </span><span class=\"token line\">   es2021: true,\n</span></span><span class=\"token inserted-sign inserted\"><span class=\"token prefix inserted\">+</span><span class=\"token line\">   jest: true\n</span></span><span class=\"token unchanged\"><span class=\"token prefix unchanged\"> </span><span class=\"token line\"> },\n</span></span></code></pre></div><p>如果想和 <code>prettier</code> 一起使用则需要在 <code>extends</code> 中加入：</p>\n<div class=\"language-diff\" data-ext=\"diff\" data-title=\"diff\"><pre class=\"language-diff\"><code><span class=\"token unchanged\"><span class=\"token prefix unchanged\"> </span><span class=\"token line\"> extends: [\n</span><span class=\"token prefix unchanged\"> </span><span class=\"token line\">   'eslint:recommended',\n</span><span class=\"token prefix unchanged\"> </span><span class=\"token line\">   'plugin:react/recommended',\n</span><span class=\"token prefix unchanged\"> </span><span class=\"token line\">   'plugin:@typescript-eslint/recommended',\n</span></span><span class=\"token inserted-sign inserted\"><span class=\"token prefix inserted\">+</span><span class=\"token line\">   \"prettier\"\n</span></span><span class=\"token unchanged\"><span class=\"token prefix unchanged\"> </span><span class=\"token line\"> ],\n</span></span></code></pre></div><p>还需要在项目中安装与 <code>TypeScript</code> 相关的插件：</p>\n<div class=\"language-bash\" data-ext=\"sh\" data-title=\"sh\"><pre class=\"language-bash\"><code><span class=\"token function\">pnpm</span> <span class=\"token function\">add</span> <span class=\"token parameter variable\">-D</span> eslint-plugin-import @typescript-eslint/parser eslint-import-resolver-typescript\n</code></pre></div><p>最后在 <code>.eslintrc.js</code> 中添加 <code>settings</code>：</p>\n<div class=\"language-javascript\" data-ext=\"js\" data-title=\"js\"><pre class=\"language-javascript\"><code><span class=\"token punctuation\">{</span>\n\t<span class=\"token literal-property property\">settings</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token string-property property\">\"import/resolver\"</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">{</span>\n      <span class=\"token string-property property\">\"typescript\"</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">{</span><span class=\"token punctuation\">}</span>\n    <span class=\"token punctuation\">}</span>\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n</code></pre></div><h3>prettier</h3>\n<p><code>prettier</code> 是代码格式化工具，和 <code>eslint</code> 不同的是，它只关注代码格式，而不关注语法问题。</p>\n<p>首先安装 <code>prettier</code> 及相关依赖插件：</p>\n<div class=\"language-bash\" data-ext=\"sh\" data-title=\"sh\"><pre class=\"language-bash\"><code><span class=\"token function\">pnpm</span> <span class=\"token function\">add</span> prettier eslint-config-prettier eslint-plugin-prettier eslint-plugin-react-hooks <span class=\"token parameter variable\">-D</span>\n</code></pre></div><p>为了使用刚才安装的插件，需要对 <code>.eslintrc.js</code> 中的 <code>plugins</code> 进行修改：</p>\n<div class=\"language-diff\" data-ext=\"diff\" data-title=\"diff\"><pre class=\"language-diff\"><code><span class=\"token deleted-sign deleted\"><span class=\"token prefix deleted\">-</span><span class=\"token line\"> plugins: [\"react\", \"@typescript-eslint\"]\n</span></span><span class=\"token inserted-sign inserted\"><span class=\"token prefix inserted\">+</span><span class=\"token line\"> plugins: [\"react\", \"react-hooks\", \"@typescript-eslint\", \"prettier\"]\n</span></span></code></pre></div><p><code>prettier</code> 基本的配置文件如下：</p>\n<p><strong><code>.prettierrc</code></strong></p>\n<div class=\"language-json\" data-ext=\"json\" data-title=\"json\"><pre class=\"language-json\"><code><span class=\"token punctuation\">{</span>\n  <span class=\"token property\">\"useTabs\"</span><span class=\"token operator\">:</span> <span class=\"token boolean\">false</span><span class=\"token punctuation\">,</span>\n  <span class=\"token property\">\"tabWidth\"</span><span class=\"token operator\">:</span> <span class=\"token number\">2</span><span class=\"token punctuation\">,</span>\n  <span class=\"token property\">\"printWidth\"</span><span class=\"token operator\">:</span> <span class=\"token number\">80</span><span class=\"token punctuation\">,</span>\n  <span class=\"token property\">\"singleQuote\"</span><span class=\"token operator\">:</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">,</span>\n  <span class=\"token property\">\"trailingComma\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"none\"</span><span class=\"token punctuation\">,</span>\n  <span class=\"token property\">\"semi\"</span><span class=\"token operator\">:</span> <span class=\"token boolean\">false</span>\n<span class=\"token punctuation\">}</span>\n</code></pre></div><p><strong><code>.prettierignore</code></strong></p>\n<div class=\"language-text\" data-ext=\"text\" data-title=\"text\"><pre class=\"language-text\"><code>/dist/*\n.local\n.output.js\n/node_modules/**\n\n**/*.svg\n**/*.sh\n\n/public/*\n</code></pre></div><p>最后可以在 <code>package.json</code> 中配置 <code>scripts</code>：</p>\n<div class=\"language-json\" data-ext=\"json\" data-title=\"json\"><pre class=\"language-json\"><code><span class=\"token punctuation\">{</span>\n  <span class=\"token property\">\"scripts\"</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token property\">\"lint\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"eslint src/**/*.{js,jsx,ts,tsx,json}\"</span><span class=\"token punctuation\">,</span>\n    <span class=\"token property\">\"lint:fix\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"eslint --fix 'src/**/*.{js,jsx,ts,tsx,json}'\"</span><span class=\"token punctuation\">,</span>\n    <span class=\"token property\">\"format\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"prettier --write 'src/**/*.{js,jsx,ts,tsx,css,md,json}' --config ./.prettierrc\"</span>\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n</code></pre></div><h3>StyleLint</h3>\n<p><code>Stylelint</code> 是一个强大、先进的 CSS 代码检查器（linter），可以帮助你规避 CSS 代码中的错误并保持一致的编码风格。</p>\n<blockquote>\n<p><a href=\"https://stylelint.io/\" target=\"_blank\" rel=\"noopener noreferrer\">https://stylelint.io/</a></p>\n</blockquote>\n<p>安装依赖</p>\n<div class=\"language-bash\" data-ext=\"sh\" data-title=\"sh\"><pre class=\"language-bash\"><code><span class=\"token comment\"># 如果项目中使用 scss</span>\n<span class=\"token function\">pnpm</span> <span class=\"token function\">add</span> stylelint stylelint-config-standard-scss <span class=\"token parameter variable\">-D</span>\n<span class=\"token function\">pnpm</span> <span class=\"token function\">add</span> postcss-scss <span class=\"token parameter variable\">-D</span>\n</code></pre></div><p>配置文件 <code>.stylelintrc.js</code>：</p>\n<div class=\"language-javascript\" data-ext=\"js\" data-title=\"js\"><pre class=\"language-javascript\"><code>module<span class=\"token punctuation\">.</span>exports <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">extends</span><span class=\"token operator\">:</span> <span class=\"token string\">'stylelint-config-standard-scss'</span><span class=\"token punctuation\">,</span>\n  <span class=\"token comment\">// rule覆盖（根据自己喜好来配置）</span>\n  <span class=\"token literal-property property\">rules</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token string-property property\">'string-quotes'</span><span class=\"token operator\">:</span> <span class=\"token string\">'single'</span><span class=\"token punctuation\">,</span>\n    <span class=\"token string-property property\">'property-no-vendor-prefix'</span><span class=\"token operator\">:</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">,</span>\n    <span class=\"token string-property property\">'declaration-colon-newline-after'</span><span class=\"token operator\">:</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">,</span>\n    <span class=\"token string-property property\">'value-list-comma-newline-after'</span><span class=\"token operator\">:</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">,</span>\n    <span class=\"token string-property property\">'custom-property-pattern'</span><span class=\"token operator\">:</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">,</span>\n    <span class=\"token string-property property\">'color-hex-length'</span><span class=\"token operator\">:</span> <span class=\"token string\">'short'</span><span class=\"token punctuation\">,</span>\n    <span class=\"token string-property property\">'color-function-notation'</span><span class=\"token operator\">:</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">,</span>\n    <span class=\"token string-property property\">'alpha-value-notation'</span><span class=\"token operator\">:</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">,</span>\n    <span class=\"token string-property property\">'value-no-vendor-prefix'</span><span class=\"token operator\">:</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">,</span>\n    <span class=\"token string-property property\">'selector-class-pattern'</span><span class=\"token operator\">:</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">,</span>\n    <span class=\"token string-property property\">'function-url-quotes'</span><span class=\"token operator\">:</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">,</span>\n    <span class=\"token string-property property\">'no-missing-end-of-source-newline'</span><span class=\"token operator\">:</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">,</span>\n    <span class=\"token string-property property\">'no-descending-specificity'</span><span class=\"token operator\">:</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">,</span>\n    <span class=\"token string-property property\">'font-family-no-missing-generic-family-keyword'</span><span class=\"token operator\">:</span> <span class=\"token keyword\">null</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n  <span class=\"token literal-property property\">overrides</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">[</span>\n    <span class=\"token comment\">// 若项目中存在scss文件，添加以下配置</span>\n    <span class=\"token punctuation\">{</span>\n      <span class=\"token literal-property property\">files</span><span class=\"token operator\">:</span> <span class=\"token string\">'**/*.scss'</span><span class=\"token punctuation\">,</span>\n      <span class=\"token literal-property property\">customSyntax</span><span class=\"token operator\">:</span> <span class=\"token string\">'postcss-scss'</span>\n    <span class=\"token punctuation\">}</span>\n  <span class=\"token punctuation\">]</span>\n<span class=\"token punctuation\">}</span>\n</code></pre></div><p><code>.stylelintignore</code> 忽略校验目录文件：</p>\n<div class=\"language-bash\" data-ext=\"sh\" data-title=\"sh\"><pre class=\"language-bash\"><code>/dist/*\n/public/*\npublic/*\nnode_modules\n</code></pre></div><h2>Git 规范</h2>\n<p><code>Git</code> 规范包括：</p>\n<ul>\n<li><code>pre-commit</code>：判断提交的代码是否符合规范</li>\n<li><code>commit-message</code>：判断 <code>commit</code> 信息是否符合规范</li>\n</ul>\n<h3>husky</h3>\n<p><code>husky</code> 可以管理 <code>git</code> 中的 <code>hooks</code>，初始化应该执行如下命令：</p>\n<div class=\"language-bash\" data-ext=\"sh\" data-title=\"sh\"><pre class=\"language-bash\"><code><span class=\"token function\">pnpm</span> dlx husky-init <span class=\"token operator\">&amp;&amp;</span> <span class=\"token function\">pnpm</span> <span class=\"token function\">install</span> <span class=\"token comment\"># pnpm</span>\n</code></pre></div><div class=\"hint-container tip\">\n<p class=\"hint-container-title\">提示</p>\n<p>它将设置 <code>husky</code>，修改 <code>package.json</code> 并创建一个你可以编辑的预提交钩子样本。默认情况下，它将在你提交时运行 <code>npm test</code>。</p>\n</div>\n<p>然后修改 <code>pre-commit</code>：</p>\n<div class=\"language-diff\" data-ext=\"diff\" data-title=\"diff\"><pre class=\"language-diff\"><code><span class=\"token deleted-sign deleted\"><span class=\"token prefix deleted\">-</span><span class=\"token line\"> npm test\n</span></span><span class=\"token inserted-sign inserted\"><span class=\"token prefix inserted\">+</span><span class=\"token line\"> npm run lint\n</span></span></code></pre></div><p>这样在每次 <code>git commit</code> 之前，都会首先进行 <code>lint</code> 检查，通过之后才能提交代码。</p>\n<h3>lint-staged</h3>\n<p>然而思考几个问题：</p>\n<ol>\n<li>我们只修改了个别的文件，没有必要检测所有的文件代码格式</li>\n<li>它只能给我们提示出对应的错误，我们还需要手动的进行代码修改</li>\n<li>修改后需要手动 <code>git add .</code></li>\n</ol>\n<p>这时可以使用 <code>lint-staged</code> 解决这个问题，它只会检查在暂存区的代码。</p>\n<p>安装：</p>\n<div class=\"language-bash\" data-ext=\"sh\" data-title=\"sh\"><pre class=\"language-bash\"><code><span class=\"token function\">pnpm</span> <span class=\"token function\">add</span> lint-staged <span class=\"token parameter variable\">-D</span>\n</code></pre></div><p>修改 <code>.husky</code> 中的 <code>pre-commit</code>：</p>\n<div class=\"language-diff\" data-ext=\"diff\" data-title=\"diff\"><pre class=\"language-diff\"><code><span class=\"token deleted-sign deleted\"><span class=\"token prefix deleted\">-</span><span class=\"token line\"> npm test\n</span></span><span class=\"token inserted-sign inserted\"><span class=\"token prefix inserted\">+</span><span class=\"token line\"> npx --no-install lint-staged\n</span></span></code></pre></div><div class=\"hint-container tip\">\n<p class=\"hint-container-title\">提示</p>\n<p><code>--no-install</code> 强制使用本地模块，不下载远程模块，如果本地不存在该模块，就会报错。</p>\n</div>\n<p>在 <code>package.json</code> 中配置：</p>\n<blockquote>\n<p>参考资料</p>\n<p><a href=\"https://github.com/ant-design/ant-design/blob/master/package.json\" target=\"_blank\" rel=\"noopener noreferrer\">https://github.com/ant-design/ant-design/blob/master/package.json</a> &gt; <a href=\"https://www.npmjs.com/package/lint-staged\" target=\"_blank\" rel=\"noopener noreferrer\">https://www.npmjs.com/package/lint-staged</a> &gt; <a href=\"https://juejin.cn/post/7136009620979449893#heading-5\" target=\"_blank\" rel=\"noopener noreferrer\">https://juejin.cn/post/7136009620979449893#heading-5</a></p>\n</blockquote>\n<div class=\"language-json\" data-ext=\"json\" data-title=\"json\"><pre class=\"language-json\"><code><span class=\"token property\">\"lint-staged\"</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token property\">\"*.{json,md}\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"prettier --ignore-unknown --write\"</span><span class=\"token punctuation\">,</span>\n  <span class=\"token property\">\"*.{js,jsx,ts,tsx}\"</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">[</span>\n    <span class=\"token string\">\"eslint --fix\"</span><span class=\"token punctuation\">,</span>\n    <span class=\"token string\">\"prettier --write\"</span>\n  <span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span>\n  <span class=\"token property\">\"{!(package)*.json,*.code-snippets,.!(browserslist)*rc}\"</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">[</span>\n    <span class=\"token string\">\"prettier --write--parser json\"</span>\n  <span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span>\n  <span class=\"token property\">\"package.json\"</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">[</span>\n    <span class=\"token string\">\"prettier --write\"</span>\n  <span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span>\n  <span class=\"token property\">\"*.{scss,less,styl,html}\"</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">[</span>\n    <span class=\"token string\">\"stylelint --fix\"</span><span class=\"token punctuation\">,</span>\n    <span class=\"token string\">\"prettier --write\"</span>\n  <span class=\"token punctuation\">]</span>\n<span class=\"token punctuation\">}</span>\n</code></pre></div><h3>commitizen</h3>\n<p>在安装完上面两个依赖后，就已经能在 <code>pre-commit</code> 钩子判断<strong>暂存区代码</strong>是否符合规范，并且使用 <code>prettier</code> 修复它。</p>\n<p>第二个问题是我们需要在 <code>commit-message</code> 中判断 <code>commit</code> 信息是否符合规范。可以使用 <code>commitizen</code>，它是一个撰写符合 <code>Commit Message</code> 标准的一款工具。通过它可以实现交互式撰写规范的 <code>Commit Message</code>。</p>\n<blockquote>\n<p><a href=\"http://commitizen.github.io/cz-cli/\" target=\"_blank\" rel=\"noopener noreferrer\">http://commitizen.github.io/cz-cli/</a></p>\n</blockquote>\n<div class=\"language-bash\" data-ext=\"sh\" data-title=\"sh\"><pre class=\"language-bash\"><code><span class=\"token function\">pnpm</span> <span class=\"token function\">add</span> commitizen <span class=\"token parameter variable\">-D</span>\n</code></pre></div><p>安装完成后，一般我们都采用符合 Angular 的 <code>Commit message</code> 格式的提交规范，运行以下命令生成符合 Angular 提交规范格式的 <code>Commit message</code>：</p>\n<div class=\"language-bash\" data-ext=\"sh\" data-title=\"sh\"><pre class=\"language-bash\"><code>npx --no-install commitizen init cz-conventional-changelog <span class=\"token parameter variable\">--pnpm</span> --save-dev --save-exact\n</code></pre></div><p><code>package.json</code> 中会自动生成以下配置：</p>\n<div class=\"language-json\" data-ext=\"json\" data-title=\"json\"><pre class=\"language-json\"><code><span class=\"token property\">\"config\"</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token property\">\"commitizen\"</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token property\">\"path\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"./node_modules/cz-conventional-changelog\"</span>\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n</code></pre></div><p>然后在 <code>package.json</code> 中的 <code>scripts</code> 添加命令：</p>\n<div class=\"language-json\" data-ext=\"json\" data-title=\"json\"><pre class=\"language-json\"><code><span class=\"token property\">\"scripts\"</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">{</span>\n\t<span class=\"token property\">\"commit\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"git-cz\"</span>\n<span class=\"token punctuation\">}</span>\n</code></pre></div><h3>commitlint</h3>\n<p>虽然使用了 <code>commitizen</code> 交互式撰写规范的 <code>Commit Message</code>，但由于它不是强制使用，我们仍然可以通过 <code>git commit</code> 提交信息，因此不管是使用 <code>git commit</code> 或 <code>git cz</code>，我们都需要对 <code>commit message</code> 进行校验，不允许规范的情况下不能进行 <code>commit</code> 操作。</p>\n<blockquote>\n<p><a href=\"https://commitlint.js.org/#/guides-local-setup\" target=\"_blank\" rel=\"noopener noreferrer\">https://commitlint.js.org/#/guides-local-setup</a></p>\n</blockquote>\n<p>首先安装相关依赖并且生成相关配置：</p>\n<div class=\"language-bash\" data-ext=\"sh\" data-title=\"sh\"><pre class=\"language-bash\"><code><span class=\"token comment\"># Install and configure if needed</span>\n<span class=\"token function\">npm</span> <span class=\"token function\">install</span> --save-dev @commitlint/<span class=\"token punctuation\">{</span>cli,config-conventional<span class=\"token punctuation\">}</span>\n<span class=\"token comment\"># For Windows:</span>\n<span class=\"token function\">pnpm</span> <span class=\"token function\">add</span> @commitlint/config-conventional @commitlint/cli <span class=\"token parameter variable\">-D</span>\n\n<span class=\"token comment\"># Configure commitlint to use conventional config</span>\n<span class=\"token builtin class-name\">echo</span> <span class=\"token string\">\"module.exports = { ignores: [(commit) =&gt; commit.includes('init')], extends: ['@commitlint/config-conventional'] };\"</span> <span class=\"token operator\">&gt;</span> commitlint.config.js\n</code></pre></div><p>在 <code>hushy</code> 中自动生成 <code>hook</code>：</p>\n<div class=\"language-bash\" data-ext=\"sh\" data-title=\"sh\"><pre class=\"language-bash\"><code>npx husky <span class=\"token function\">add</span> .husky/commit-msg <span class=\"token string\">\"npx --no-install commitlint --edit <span class=\"token variable\">$1</span>\"</span>\n</code></pre></div><p>除了 <code>cli</code> 和 <code>config-conventional</code> 外，<code>commitlint</code> 还提供了其他的工具包：</p>\n<ul>\n<li><code>@commitlint/cli</code>: 这是 <code>commitlint</code> 的命令行接口，用于在命令行中执行 <code>commitlint</code>。</li>\n<li><code>@commitlint/config-conventional</code>: 这是 <code>commitlint</code> 的一个常规配置，它提供了一组常规的 <code>commit</code> 规则，这些规则来源于 <code>Angular</code> 团队的提交规范。</li>\n<li><code>@commitlint/cz-commitlint</code>: 这个包是 <code>commitizen</code> 与 <code>commitlint</code> 的适配器，用于在命令行中启动交互式的 <code>commit</code> 提示器，来协助开发者完成符合规范的提交信息。</li>\n<li><code>@commitlint/format</code>: 这个包提供了一种格式化 <code>commitlint</code> 返回的结果的方式，可以自定义输出结果的样式。</li>\n<li><code>@commitlint/prompt-cli</code>: 这个包提供了一个命令行的交互式提示器，用于在命令行中启动交互式的 <code>commit</code> 提示器，来协助开发者完成符合规范的提交信息。</li>\n</ul>\n<div class=\"hint-container tip\">\n<p class=\"hint-container-title\">`commitizen` 和 `@commitlint/cz-commitlint` 的区别</p>\n<p><code>commitizen</code> 和 <code>@commitlint/cz-commitlint</code> 的功能并不完全一样，但它们可以协同工作来帮助实现更好地 <code>git commit</code> 信息。</p>\n<p><code>commitizen</code> 是一个帮助创建符合规范的 <code>git commit</code> 的工具。它在运行 <code>git cz</code> 时会提供一个命令行的交互式界面来引导你创建 <code>commit</code>，使 <code>commit message</code> 更为标准化。</p>\n<p><code>@commitlint/cz-commitlint</code> 是一个为 <code>commitizen</code> 提供的 <code>@commitlint</code> 适配器。它让 <code>commitizen</code> 可以使用 <code>@commitlint</code> 的 <code>config</code> 配置（如 <code>@commitlint/config-conventional</code>）作为 <code>commit</code> 提示的规则。</p>\n<p>所以，可以这么理解：<code>commitizen</code> 提供了一种方式来创建 <code>commit</code>，而 <code>@commitlint/cz-commitlint</code> 则是允许 <code>commitizen</code> 使用 <code>commitlint</code> 的规则进行 <code>commit</code> 信息的创建。</p>\n<p>这样，当使用 <code>commitizen</code> 进行 <code>commit</code> 时，就会遵守 <code>commitlint</code> 的规则，如果不遵守，<code>commit</code> 就会被阻止，除非修改为符合规则的信息。这可以保证项目中的 <code>git commit</code> 样式的一致性。</p>\n<p>总结：<code>commitizen</code> 负责引导创建 <code>commit</code>，而 <code>@commitlint/cz-commitlint</code> 则负责设定创建 <code>commit</code> 的规则。</p>\n</div>\n<div class=\"hint-container tip\">\n<p class=\"hint-container-title\">`commitizen` 和 `@commitlint/prompt-cli` 的区别</p>\n<p><code>@commitlint/prompt-cli</code> 和 <code>commitizen</code> 的功能类似，它们都提供命令行的交互式界面来引导创建符合规范的 <code>commit message</code>。</p>\n<p>区别主要在于：</p>\n<ul>\n<li><code>@commitlint/prompt-cli</code> 是 <code>commitlint</code> 的一部分，用于捕获 <code>commit message</code> 进行校验。</li>\n<li><code>commitizen</code> 是一个独立的第三方库，它没有自己的校验规范，但可以非常好的与 <code>commitlint</code> 以及其他规范配合使用。</li>\n</ul>\n<p>总的来说，这两者可以一起使用或分开使用，选择使用哪一个主要取决于希望从哪个工具中获取需要的特性或者个人的使用习惯。</p>\n</div>\n<h3>CHANGELOG</h3>\n<p>CHANGELOG 记录项目所有的 <code>commit</code> 信息并归类版本，可以快速跳转到该条 <code>commit</code> 记录，方便知道项目哪个版本做了哪些功能有哪些 bug 等信息。也方便排查 bug，对于提交记录一目了然，不用一个一个去翻去查。</p>\n<blockquote>\n<p><a href=\"https://juejin.cn/post/7136009620979449893\" target=\"_blank\" rel=\"noopener noreferrer\">https://juejin.cn/post/7136009620979449893</a></p>\n</blockquote>\n<p>首先安装 <code>standard-version</code>：</p>\n<div class=\"language-bash\" data-ext=\"sh\" data-title=\"sh\"><pre class=\"language-bash\"><code><span class=\"token function\">pnpm</span> <span class=\"token function\">add</span> standard-version <span class=\"token parameter variable\">-D</span>\n</code></pre></div><p>然后在 <code>package.json</code> 的 <code>scripts</code> 中添加命令：</p>\n<div class=\"language-json\" data-ext=\"json\" data-title=\"json\"><pre class=\"language-json\"><code><span class=\"token property\">\"scripts\"</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">{</span>\n\t<span class=\"token property\">\"standard-version\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"standard-version\"</span>\n<span class=\"token punctuation\">}</span>\n</code></pre></div><p>当 <code>commit type</code> 是 <code>feat</code> 和 <code>fix</code> 的时候执行 <code>npm run standard-version</code>，它会自增版本号。</p>\n<p><code>standard-version</code> 提供自定义配置不同类型对应显示文案，在根目录新建 <code>.versionrc.js</code> 文件：</p>\n<div class=\"language-javascript\" data-ext=\"js\" data-title=\"js\"><pre class=\"language-javascript\"><code>module<span class=\"token punctuation\">.</span>exports <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token literal-property property\">types</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">[</span>\n    <span class=\"token punctuation\">{</span> <span class=\"token literal-property property\">type</span><span class=\"token operator\">:</span> <span class=\"token string\">'feat'</span><span class=\"token punctuation\">,</span> <span class=\"token literal-property property\">section</span><span class=\"token operator\">:</span> <span class=\"token string\">'✨ Features | 新功能'</span> <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n    <span class=\"token punctuation\">{</span> <span class=\"token literal-property property\">type</span><span class=\"token operator\">:</span> <span class=\"token string\">'fix'</span><span class=\"token punctuation\">,</span> <span class=\"token literal-property property\">section</span><span class=\"token operator\">:</span> <span class=\"token string\">'🐛 Bug Fixes | Bug 修复'</span> <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n    <span class=\"token punctuation\">{</span> <span class=\"token literal-property property\">type</span><span class=\"token operator\">:</span> <span class=\"token string\">'init'</span><span class=\"token punctuation\">,</span> <span class=\"token literal-property property\">section</span><span class=\"token operator\">:</span> <span class=\"token string\">'🎉 Init | 初始化'</span> <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n    <span class=\"token punctuation\">{</span> <span class=\"token literal-property property\">type</span><span class=\"token operator\">:</span> <span class=\"token string\">'docs'</span><span class=\"token punctuation\">,</span> <span class=\"token literal-property property\">section</span><span class=\"token operator\">:</span> <span class=\"token string\">'✏️ Documentation | 文档'</span> <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n    <span class=\"token punctuation\">{</span> <span class=\"token literal-property property\">type</span><span class=\"token operator\">:</span> <span class=\"token string\">'style'</span><span class=\"token punctuation\">,</span> <span class=\"token literal-property property\">section</span><span class=\"token operator\">:</span> <span class=\"token string\">'💄 Styles | 风格'</span> <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n    <span class=\"token punctuation\">{</span> <span class=\"token literal-property property\">type</span><span class=\"token operator\">:</span> <span class=\"token string\">'refactor'</span><span class=\"token punctuation\">,</span> <span class=\"token literal-property property\">section</span><span class=\"token operator\">:</span> <span class=\"token string\">'♻️ Code Refactoring | 代码重构'</span> <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n    <span class=\"token punctuation\">{</span> <span class=\"token literal-property property\">type</span><span class=\"token operator\">:</span> <span class=\"token string\">'perf'</span><span class=\"token punctuation\">,</span> <span class=\"token literal-property property\">section</span><span class=\"token operator\">:</span> <span class=\"token string\">'⚡ Performance Improvements | 性能优化'</span> <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n    <span class=\"token punctuation\">{</span> <span class=\"token literal-property property\">type</span><span class=\"token operator\">:</span> <span class=\"token string\">'test'</span><span class=\"token punctuation\">,</span> <span class=\"token literal-property property\">section</span><span class=\"token operator\">:</span> <span class=\"token string\">'✅ Tests | 测试'</span> <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n    <span class=\"token punctuation\">{</span> <span class=\"token literal-property property\">type</span><span class=\"token operator\">:</span> <span class=\"token string\">'revert'</span><span class=\"token punctuation\">,</span> <span class=\"token literal-property property\">section</span><span class=\"token operator\">:</span> <span class=\"token string\">'⏪ Revert | 回退'</span> <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n    <span class=\"token punctuation\">{</span> <span class=\"token literal-property property\">type</span><span class=\"token operator\">:</span> <span class=\"token string\">'build'</span><span class=\"token punctuation\">,</span> <span class=\"token literal-property property\">section</span><span class=\"token operator\">:</span> <span class=\"token string\">'📦‍ Build System | 打包构建'</span> <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n    <span class=\"token punctuation\">{</span> <span class=\"token literal-property property\">type</span><span class=\"token operator\">:</span> <span class=\"token string\">'chore'</span><span class=\"token punctuation\">,</span> <span class=\"token literal-property property\">section</span><span class=\"token operator\">:</span> <span class=\"token string\">'🚀 Chore | 构建/工程依赖/工具'</span> <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n    <span class=\"token punctuation\">{</span> <span class=\"token literal-property property\">type</span><span class=\"token operator\">:</span> <span class=\"token string\">'ci'</span><span class=\"token punctuation\">,</span> <span class=\"token literal-property property\">section</span><span class=\"token operator\">:</span> <span class=\"token string\">'👷 Continuous Integration | CI 配置'</span> <span class=\"token punctuation\">}</span>\n  <span class=\"token punctuation\">]</span>\n<span class=\"token punctuation\">}</span>\n</code></pre></div>",
      "date_published": "2023-11-21T00:00:00.000Z",
      "date_modified": "2024-01-15T15:15:41.000Z",
      "authors": [],
      "tags": [
        "工程化"
      ]
    },
    {
      "title": "Qwik",
      "url": "https://dribble-njr.github.io/blog/blog/frontend/engineering/ssr/005-qwik.html",
      "id": "https://dribble-njr.github.io/blog/blog/frontend/engineering/ssr/005-qwik.html",
      "summary": "Web Apps 历史 在了解 Qwik 之前，有必要了解 Web 应用程序的历史。 第一代 第一代应用程序采用 MPA 技术，是在服务器上通过 PHP 等技术完成的。 服务器会渲染一系列包含 HTML 和 JavaScript 的文档，客户端使用 jQuery 在模板中添加交互。 这种方法的问题在于必须处理两种语言，一种在服务器端（如 PHP），另一...",
      "content_html": "<h2>Web Apps 历史</h2>\n<p>在了解 Qwik 之前，有必要了解 Web 应用程序的历史。</p>\n<h3>第一代</h3>\n<p>第一代应用程序采用 MPA 技术，是在服务器上通过 PHP 等技术完成的。</p>\n<p>服务器会渲染一系列包含 HTML 和 JavaScript 的文档，客户端使用 jQuery 在模板中添加交互。</p>\n<p>这种方法的问题在于必须处理两种语言，一种在服务器端（如 PHP），另一种在客户端（JavaScript），这可能会导致在 PHP 中编写的元素与其在 JavaScript 中的行为之间产生混淆，从而导致多次编写一个功能。</p>\n<p>这就是这种方法难以扩展的原因。</p>\n<h3>第二代</h3>\n<p>第二代应用程序就是 SPA，即 AngularJS、Angular、React、Vue.js 等现代框架，这些框架都基于 MVC 架构。</p>\n<p>SPA 只在客户端向服务器发起请求更新状态，但是在首次加载时，浏览器会下载所有 JavaScript 代码。</p>\n<p>SPA 在首次加载时会是一个空白页，需要很长时间才能加载，而且如果想开发大型应用程序，它不具备可扩展性。</p>\n<figure><img src=\"https://raw.githubusercontent.com/dribble-njr/typora-njr/master/img/63e3d6905bacd65c5da3920b_Client Rendering-min.jpg\" alt=\"client renderin - Adservio\" tabindex=\"0\" loading=\"lazy\"><figcaption>client renderin - Adservio</figcaption></figure>\n<h3>SSR</h3>\n<p>处于第二代和第三代的技术就是服务端渲染，比如 Next.js 或 Svelte。</p>\n<p>在 SSR 中，仍然构建 SPA 应用程序，然而步骤略有不同：</p>\n<ol>\n<li>\n<p>服务端拼接 HTML</p>\n<p>用户请求某个页面时，服务端会拼接好一个页面的 HTML 结构返回给客户端。</p>\n</li>\n<li>\n<p>客户端对 HTML 进行预渲染</p>\n<p>HTML 结构加载显示，但是 JavaScript 代码还未加载，此时页面还不能进行交互。</p>\n</li>\n<li>\n<p>进行 hydration（水合）处理</p>\n<p>通过 JavaScript 代码的执行，动态地为当前页面上的 DOM 绑定事件。</p>\n</li>\n</ol>\n<blockquote>\n<p>HTML 相当于一个干货海参，JavaScript 代码理解为水，hydration 过程就是用水把海参泡发，即达到页面可正常交互的状态。</p>\n</blockquote>\n<p>SSR 确实将首屏加载速度变快，但仍有一些缺点：</p>\n<ol>\n<li>在水合之前，此时页面仍然不可交互，所以 tti（页面可交互时间）并没有太多优化。</li>\n<li>下载的 JavaScript 代码仍然是比较全量的代码。</li>\n<li>比较耗费服务器资源，维护成本也较高。</li>\n</ol>\n<figure><img src=\"https://raw.githubusercontent.com/dribble-njr/typora-njr/master/img/63e3d6905bacd612ada3920c_Server Rendering-min (1).jpg\" alt=\"server renderin - Adservio \" tabindex=\"0\" loading=\"lazy\"><figcaption>server renderin - Adservio </figcaption></figure>\n<p>为了减少加载 JavaScript 代码所需的时间，Astro 框架出现了。</p>\n<p>Astro 有一个名为「部分水合」的概念，因此在页面可见之前，它不会对页面进行水合。</p>\n<p>例如，如果联系表单位于页面底部，而我们位于页面顶部，那么联系表单将不可见，这样就不需要加载表单所需的 JavaScript。</p>\n<p>只有当页面向下滚动到有联系表单的部分时，才会进行水合，将表单中的组件与所需的 JavaScript 水合。</p>\n<h2>Qwik 介绍</h2>\n<p>Qwik 可以理解为一个语法接近 React 的前端 SSR 框架，但是相比于 Astro，它的优化更加彻底：<strong>「0 水合」和「0 JavaScript」</strong>。</p>\n<p>例如，如果我们在页面底部有一个联系表单，Angular、React 或 Vue 会在首次加载时加载所需的 JavaScript，Astro 会在我们向下滚动时加载，而 Qwik 只有在点击表单的发送按钮时才会加载，它不是在页面出现表单时加载 JavaScript，<strong>而是在与表单交互时加载</strong>。</p>\n<p>Qwik 的核心理念：to do it faster by doing nothing。</p>\n<h3>Resumability</h3>\n<p>现代的框架都在尝试优化水合作用，Qwik 的独特之处在于 <strong>可恢复性</strong> (no eager JS execution and no hydration)。</p>\n<figure><img src=\"https://raw.githubusercontent.com/dribble-njr/typora-njr/master/img/63e3d6905bacd6233ba391e2_Hydration - Ready-min.jpg\" alt=\"resumability in qwik framework\" tabindex=\"0\" loading=\"lazy\"><figcaption>resumability in qwik framework</figcaption></figure>\n<p>如果有一个庞大的应用程序，那么加载水合将会耗费大量时间，即使使用部分水合技术，也会面临挑战。而使用可恢复性的 Qwik 技术，只加载 HTML，则不会耗费大量时间。</p>\n<h2>思考</h2>\n<p>从概念上看，Qwik 确实会大幅提升庞大应用程序的性能，能提供最快的首次渲染和交互性能。然而，作为一个新技术，尽管它有潜力成为未来广泛使用的框架之一，仍然需要时间和社区支持。</p>\n<h2>参考资料</h2>\n<ol>\n<li><a href=\"https://www.adservio.fr/post/a-brief-history-of-web-apps-why-qwik-is-innovative\" target=\"_blank\" rel=\"noopener noreferrer\">A Brief History of Web Apps – Why Qwik is Innovative</a></li>\n<li><a href=\"https://www.adservio.fr/post/qwik-the-post-modern-framework\" target=\"_blank\" rel=\"noopener noreferrer\">Qwik – The Post-Modern Framework</a></li>\n<li><a href=\"https://segmentfault.com/a/1190000042250628\" target=\"_blank\" rel=\"noopener noreferrer\">Qwik.js框架是如何追求极致性能的?!</a></li>\n</ol>\n",
      "image": "https://raw.githubusercontent.com/dribble-njr/typora-njr/master/img/63e3d6905bacd65c5da3920b_Client%20Rendering-min.jpg",
      "date_published": "2024-01-03T00:00:00.000Z",
      "date_modified": "2024-01-07T08:28:24.000Z",
      "authors": [],
      "tags": [
        "工程化"
      ]
    },
    {
      "title": "React Server Component",
      "url": "https://dribble-njr.github.io/blog/blog/frontend/engineering/ssr/006-react-server-component.html",
      "id": "https://dribble-njr.github.io/blog/blog/frontend/engineering/ssr/006-react-server-component.html",
      "summary": "React Server Component 是一种新的组件类型，它允许 React 应用在后端服务器上运行部分组件逻辑。传统的客户端渲染将渲染和处理放在前端。服务器组件的引入，旨在优化应用性能，减小传输给客户端的数据量，提高加载速度，提升用户体验。 服务器和客户端组件允许开发人员构建跨越服务器和客户端的应用程序，将客户端应用程序的丰富交互性与传统服务...",
      "content_html": "<p>React Server Component 是一种新的组件类型，它允许 React 应用在后端服务器上运行部分组件逻辑。传统的客户端渲染将渲染和处理放在前端。服务器组件的引入，旨在优化应用性能，减小传输给客户端的数据量，提高加载速度，提升用户体验。</p>\n<p>服务器和客户端组件允许开发人员构建跨越服务器和客户端的应用程序，将客户端应用程序的丰富交互性与传统服务器渲染的更高性能结合起来。</p>\n<h2>Why Server Components</h2>\n<p>注意看下面的例子：</p>\n<div class=\"language-jsx\" data-ext=\"jsx\" data-title=\"jsx\"><pre class=\"language-jsx\"><code><span class=\"token keyword\">const</span> <span class=\"token function-variable function\">App</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=&gt;</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">return</span> <span class=\"token punctuation\">(</span>\n    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">Wrapper</span></span><span class=\"token punctuation\">&gt;</span></span><span class=\"token plain-text\">\n      </span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">ComponentA</span></span> <span class=\"token punctuation\">/&gt;</span></span><span class=\"token plain-text\">\n      </span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">ComponentB</span></span> <span class=\"token punctuation\">/&gt;</span></span><span class=\"token plain-text\">\n    </span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span><span class=\"token class-name\">Wrapper</span></span><span class=\"token punctuation\">&gt;</span></span>\n  <span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">}</span>\n</code></pre></div><p>组件 A 和组件 B 以 <code>children</code> prop 传入 <code>wrapper</code>。每个组件都负责获取自己的数据，任何组件都不会处理自身操作不需要的数据。</p>\n<div class=\"language-jsx\" data-ext=\"jsx\" data-title=\"jsx\"><pre class=\"language-jsx\"><code><span class=\"token keyword\">const</span> <span class=\"token function-variable function\">Wrapper</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\"><span class=\"token punctuation\">{</span> children <span class=\"token punctuation\">}</span></span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=&gt;</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">const</span> <span class=\"token punctuation\">[</span>wrapperData<span class=\"token punctuation\">,</span> setWrapperData<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token function\">useState</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span>\n\n  <span class=\"token function\">useEffect</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=&gt;</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token comment\">// API call to get data for Wrapper component to function</span>\n    <span class=\"token function\">getWrapperData</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">then</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">res</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=&gt;</span> <span class=\"token punctuation\">{</span>\n      <span class=\"token function\">setWrapperData</span><span class=\"token punctuation\">(</span>res<span class=\"token punctuation\">.</span>data<span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span>\n\n  <span class=\"token comment\">// Only after API response is received, we start rendering</span>\n  <span class=\"token comment\">// ComponentA and ComponentB (children props)</span>\n  <span class=\"token keyword\">return</span> <span class=\"token punctuation\">(</span>\n    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span></span><span class=\"token punctuation\">&gt;</span></span><span class=\"token plain-text\">\n      </span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>h1</span><span class=\"token punctuation\">&gt;</span></span><span class=\"token punctuation\">{</span>wrapperData<span class=\"token punctuation\">.</span>name<span class=\"token punctuation\">}</span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>h1</span><span class=\"token punctuation\">&gt;</span></span><span class=\"token plain-text\">\n      </span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span></span><span class=\"token punctuation\">&gt;</span></span><span class=\"token punctuation\">{</span>wrapperData<span class=\"token punctuation\">.</span>name <span class=\"token operator\">&amp;&amp;</span> children<span class=\"token punctuation\">}</span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span></span><span class=\"token punctuation\">&gt;</span></span><span class=\"token plain-text\">\n    </span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span></span><span class=\"token punctuation\">&gt;</span></span>\n  <span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token comment\">/*</span></code></pre></div>",
      "image": "https://raw.githubusercontent.com/dribble-njr/typora-njr/master/img/thinking-in-server-components.avif",
      "date_published": "2024-01-03T00:00:00.000Z",
      "date_modified": "2024-01-07T08:28:24.000Z",
      "authors": [],
      "tags": [
        "工程化"
      ]
    },
    {
      "title": "Hydration is Pure Overhead",
      "url": "https://dribble-njr.github.io/blog/blog/frontend/engineering/ssr/007-hydration-is-pure-overhead.html",
      "id": "https://dribble-njr.github.io/blog/blog/frontend/engineering/ssr/007-hydration-is-pure-overhead.html",
      "summary": " 相关信息 原文链接：Hydration is Pure Overhead Hydration 是一种为服务器渲染的 HTML 添加交互性的解决方案。 在网页开发中，水合或再水合是一种技术，客户端 JavaScript 通过在 HTML 元素上附加事件处理程序，将通过静态托管或服务器端渲染提供的静态 HTML 网页转换为动态网页。 上述定义是从将事件处...",
      "content_html": "<div class=\"hint-container info\">\n<p class=\"hint-container-title\">相关信息</p>\n<p>原文链接：<a href=\"https://www.builder.io/blog/hydration-is-pure-overhead\" target=\"_blank\" rel=\"noopener noreferrer\">Hydration is Pure Overhead</a></p>\n</div>\n<figure><img src=\"https://raw.githubusercontent.com/dribble-njr/typora-njr/master/img/assets_YJIGb4i01jvw0SRdL5Bt_a6d8c3bacc3c4cf88446e41a71cda21c.webp\" alt=\"\" tabindex=\"0\" loading=\"lazy\"><figcaption></figcaption></figure>\n<p><strong>Hydration</strong> 是一种为服务器渲染的 HTML 添加交互性的解决方案。</p>\n<blockquote>\n<p>在网页开发中，水合或再水合是一种技术，客户端 JavaScript 通过在 HTML 元素上附加事件处理程序，将通过静态托管或服务器端渲染提供的静态 HTML 网页转换为动态网页。</p>\n</blockquote>\n<p>上述定义是从将事件处理程序附加到静态 HTML 的角度来讨论水合的。然而，将事件处理程序附加到 DOM 并不是水合过程中具有挑战性或成本高昂的部分，因此这就忽略了为什么有人会将水合称为开销。在本文中，「开销」是指可以避免的工作，而且最终结果仍然相同。如果它可以被移除，而结果是一样的，那它就是开销。</p>\n<figure><img src=\"https://raw.githubusercontent.com/dribble-njr/typora-njr/master/img/assets_YJIGb4i01jvw0SRdL5Bt_4f48568655904e4586ba34b413beb790.webp\" alt=\"img\" tabindex=\"0\" loading=\"lazy\"><figcaption>img</figcaption></figure>\n<h2>深入了解水合</h2>\n<p>水合最困难的部分是需要 <code>WHAT</code> 事件处理器以及将它附加到 <code>WHERE</code>。</p>\n<ul>\n<li><code>WHAT</code>：事件处理程序是一个包含事件处理程序行为的闭包，它是用户触发该事件时应该发生的事情。</li>\n<li><code>WHERE</code>：事件处理程序需要附加到的 DOM 元素的位置（包括事件类型）。</li>\n</ul>\n<p><code>WHAT</code> 是一个闭包，包含了 <code>APP_STATE</code> 和 <code>FRAMEWORK_STATE</code>：</p>\n<ul>\n<li><code>APP_STATE</code>：应用程序的状态。<code>APP_STATE</code> 是大多数人认为的状态。如果没有 <code>APP_STATE</code>，应用程序就没有任何动态信息可以向用户展示。</li>\n<li><code>FRAMEWORK_STATE</code>：框架的内部状态。没有 <code>FRAMEWORK_STATE</code>，框架就不知道要更新哪些 DOM 节点，也不知道框架应在何时更新这些节点。例如组件树和对渲染函数的引用。</li>\n</ul>\n<p>那么我们如何恢复 <code>WHAT</code>（<code>APP_STATE</code> + <code>FRAMEWORK_STATE</code>）和 <code>WHERE</code> 呢？通过下载并执行当前 HTML 中的组件。然而下载和执行 HTML 中的渲染组件是最昂贵的部分。</p>\n<p>换句话说，「水合」是一种通过在浏览器中急切执行应用程序代码来恢复 <code>APP_STATE</code> 和 <code>FRAMEWORK_STATE</code> 的方法：</p>\n<ol>\n<li>下载组件代码</li>\n<li>执行组件代码</li>\n<li>恢复 <code>WHAT</code>（<code>APP_STATE</code> 和 <code>FRAMEWORK_STATE</code>）和 <code>WHERE</code> 以获取事件处理程序闭包</li>\n<li>将 <code>WHAT</code>（事件处理程序闭包）附加到 <code>WHERE</code>（一个 DOM 元素）</li>\n</ol>\n<figure><img src=\"https://raw.githubusercontent.com/dribble-njr/typora-njr/master/img/assets_YJIGb4i01jvw0SRdL5Bt_0e1bbc52c75747328b846dcfa76c28f2.webp\" alt=\"img\" tabindex=\"0\" loading=\"lazy\"><figcaption>img</figcaption></figure>\n<p>前三个步骤称为「恢复」阶段，该阶段尝试重建应用程序，需要下载并执行应用程序代码，因此重建成本很高。</p>\n<p><code>Recovery</code> 与水合页面的复杂程度成正比，在移动设备上很可能需要 10 秒钟。由于 <code>RECOVERY</code> 是昂贵的部分，因此大多数应用程序的启动性能都不理想，尤其是在移动设备上。</p>\n<p><code>RECOVERY</code> 也是纯粹的开销。开销是指不直接提供价值的工作。就水合而言，<code>RECOVERY</code> 是一种开销，因为它会重建服务器在 SSR/SSG 中已经收集到的信息。这些信息没有发送到客户端，而是被丢弃了。因此，客户端必须执行昂贵的 <code>RECOVERY</code> 来重建服务器已经拥有的信息。如果服务器将信息序列化，并连同 HTML 一起发送给客户端，就可以避免 <code>RECOVERY</code>。序列化信息将使客户端不必急于下载和执行 HTML 中的所有组件。</p>\n<p>作为 SSR/SSG 的一部分，服务器已经在客户端重新执行了代码，这使得水合成为纯粹的开销：也就是说，客户端重复了服务器已经完成的工作。框架本可以通过将信息从服务器传输到客户端来避免这一开销，但它却将信息丢弃了。</p>\n<p>总之，水合是通过下载并重新执行 SSR/SSG 渲染的 HTML 中的所有组件来恢复事件处理程序。网站会两次发送到客户端，一次是 HTML，另一次是 JavaScript。此外，框架还必须急切地执行 JavaScript 以恢复 <code>WHAT</code>、<code>WHERE</code>、<code>APP_STATE</code> 和 <code>FRAMEWORK_STATE</code>。所有这些工作都只是为了检索服务器已经拥有但丢弃的内容！</p>\n<p>为了理解为什么水合会迫使客户端重复工作，让我们来看一个包含几个简单组件的示例。</p>\n<p>我们将使用一种很多人都能理解的常用语法，但请记住，这是一个普遍问题，并不是某个框架所特有的。</p>\n<div class=\"language-jsx\" data-ext=\"jsx\" data-title=\"jsx\"><pre class=\"language-jsx\"><code><span class=\"token keyword\">export</span> <span class=\"token keyword\">const</span> <span class=\"token function-variable function\">Main</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=&gt;</span> <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span></span><span class=\"token punctuation\">&gt;</span></span><span class=\"token plain-text\">\n   </span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">Greeter</span></span> <span class=\"token punctuation\">/&gt;</span></span><span class=\"token plain-text\">\n   </span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">Counter</span></span> <span class=\"token attr-name\">value</span><span class=\"token script language-javascript\"><span class=\"token script-punctuation punctuation\">=</span><span class=\"token punctuation\">{</span><span class=\"token number\">10</span><span class=\"token punctuation\">}</span></span><span class=\"token punctuation\">/&gt;</span></span><span class=\"token plain-text\">\n</span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span></span><span class=\"token punctuation\">&gt;</span></span>\n\n<span class=\"token keyword\">export</span> <span class=\"token keyword\">const</span> <span class=\"token function-variable function\">Greeter</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=&gt;</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">return</span> <span class=\"token punctuation\">(</span>\n    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>button</span> <span class=\"token attr-name\">onClick</span><span class=\"token script language-javascript\"><span class=\"token script-punctuation punctuation\">=</span><span class=\"token punctuation\">{</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=&gt;</span> <span class=\"token function\">alert</span><span class=\"token punctuation\">(</span><span class=\"token string\">'Hello World!'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">}</span></span><span class=\"token punctuation\">&gt;</span></span><span class=\"token plain-text\">\n      Greet\n    </span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>button</span><span class=\"token punctuation\">&gt;</span></span>\n  <span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">export</span> <span class=\"token keyword\">const</span> <span class=\"token function-variable function\">Counter</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\"><span class=\"token literal-property property\">props</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">{</span> <span class=\"token literal-property property\">value</span><span class=\"token operator\">:</span> number <span class=\"token punctuation\">}</span></span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=&gt;</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">const</span> store <span class=\"token operator\">=</span> <span class=\"token function\">useStore</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span> <span class=\"token literal-property property\">count</span><span class=\"token operator\">:</span> props<span class=\"token punctuation\">.</span>number <span class=\"token operator\">||</span> <span class=\"token number\">0</span> <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token keyword\">return</span> <span class=\"token punctuation\">(</span>\n    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>button</span> <span class=\"token attr-name\">onClick</span><span class=\"token script language-javascript\"><span class=\"token script-punctuation punctuation\">=</span><span class=\"token punctuation\">{</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=&gt;</span> store<span class=\"token punctuation\">.</span>count<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">}</span></span><span class=\"token punctuation\">&gt;</span></span><span class=\"token plain-text\">\n      </span><span class=\"token punctuation\">{</span>count<span class=\"token punctuation\">}</span><span class=\"token plain-text\">\n    </span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>button</span><span class=\"token punctuation\">&gt;</span></span>\n  <span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">}</span>\n</code></pre></div><p>在经过 SSR/SSG 后会生成一下 HTML：</p>\n<div class=\"language-html\" data-ext=\"html\" data-title=\"html\"><pre class=\"language-html\"><code><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>button</span><span class=\"token punctuation\">&gt;</span></span>Greet<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>button</span><span class=\"token punctuation\">&gt;</span></span>\n<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>button</span><span class=\"token punctuation\">&gt;</span></span>10<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>button</span><span class=\"token punctuation\">&gt;</span></span>\n</code></pre></div><p>HTML 中没有说明事件处理程序或组件边界的位置。生成的 HTML 不包含 <code>WHAT</code>（<code>APP_STATE</code>、 <code>FRAMEWORK_STATE</code>）或 <code>WHERE</code>。这些信息在服务器生成 HTML 时就已存在，但服务器并未将其序列化。要使应用程序具有交互性，客户端唯一能做的就是通过下载并执行代码来恢复这些信息。我们这样做是为了恢复关闭状态的事件处理程序闭包。</p>\n<p>这里的重点是，在附加任何事件处理程序并处理事件之前，必须下载并执行代码。代码执行会实例化组件并重新创建状态（<code>WHAT</code>(<code>APP_STATE</code>, <code>FRAMEWORK_STATE</code>) 和 <code>WHERE</code>）。</p>\n<p>水合完成后，应用程序即可运行。点击按钮将按预期更新用户界面。</p>\n<h2>Resumability：无须耗费的水合作用</h2>\n<p>那么，如何设计一个没有水合作用的系统，从而避免开销呢？</p>\n<p>要消除开销，框架不仅要避免「恢复」（RECOVERY），还要避免上述第四步。第四步是将 <code>WHAT</code> 附加到 <code>WHERE</code>，这是可以避免的成本。</p>\n<p>要避免这种成本，你需要三样东西：</p>\n<ol>\n<li>将所有需要的信息序列化，作为 HTML 的一部分。序列化信息需要包括 <code>WHAT</code>、<code>WHERE</code>、<code>APP_STATE</code> 和 <code>FRAMEWORK_STATE</code>。</li>\n<li>依靠事件冒泡拦截所有事件的全局事件处理程序。该事件处理程序必须是全局性的，这样我们就不必急于在特定 DOM 元素上单独注册所有事件。</li>\n<li>一个工厂函数，可以轻松恢复事件处理程序（<code>WHAT</code>）。</li>\n</ol>\n<figure><img src=\"https://raw.githubusercontent.com/dribble-njr/typora-njr/master/img/assets_YJIGb4i01jvw0SRdL5Bt_04681212764f4025b2b5f5c6a258ad6e.webp\" alt=\"img\" tabindex=\"0\" loading=\"lazy\"><figcaption>img</figcaption></figure>\n<p>关键在于工厂函数，水合急切地创建 <code>WHAT</code>，是因为它需要 <code>WHAT</code> 将其附加到 <code>WHERE</code>。相反，我们可以延迟创建 <code>WHAT</code> 来响应用户事件，从而避免做不必要的工作。</p>\n<p>上述设置是可恢复的，因为它可以在服务器中断的地方继续执行，而不会重做服务器已经完成的任何工作。更重要的是，该设置没有任何开销，因为所有工作都是必要的，没有任何工作是在重做服务器已经做过的工作。</p>\n<p>了解推式系统和拉式系统的区别有一个很好的方法。</p>\n<ul>\n<li>推式（Hydration）：急切地下载和执行代码，急切地注册事件处理程序，以防用户交互。</li>\n<li>拉（Resumability）：什么都不做，等待用户触发事件，然后惰性创建处理程序来处理事件。</li>\n</ul>\n<p>在 Hydration 中，事件处理程序的创建是在事件触发之前进行的，因此比较急迫。水合还要求创建和注册所有可能的事件处理程序，以防用户触发事件（可能是不必要的工作）。因此，事件处理程序的创建是投机性的。这是可能不需要的额外工作。(事件处理程序也是通过重做服务器已经完成的工作来创建的，因此也是开销）。</p>\n<p>在 Resumability 系统中，事件处理程序的创建是懒惰的。因此，事件处理程序是在事件触发后创建的，而且严格按需创建。框架通过反序列化来创建事件处理程序，因此客户端不会重做服务器已经完成的任何工作。</p>\n<p>Qwik 的工作方式就是惰性地创建事件处理程序，这样就能加快应用程序的启动时间。</p>\n<p>可恢复性要求我们序列化 <code>WHAT</code>(<code>APP_STATE</code>, <code>FRAMEWORK_STATE</code>) 和 <code>WHERE</code>。可重续系统可生成以下 HTML 作为存储 <code>WHAT</code>(<code>APP_STATE</code>, <code>FRAMEWORK_STATE</code>) 和 <code>WHERE</code> 的可能解决方案。具体细节并不重要，重要的是所有信息都已存在。</p>\n<div class=\"language-html\" data-ext=\"html\" data-title=\"html\"><pre class=\"language-html\"><code><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>div</span> <span class=\"token attr-name\"><span class=\"token namespace\">q:</span>host</span><span class=\"token punctuation\">&gt;</span></span>\n  <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>div</span> <span class=\"token attr-name\"><span class=\"token namespace\">q:</span>host</span><span class=\"token punctuation\">&gt;</span></span>\n    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>button</span> <span class=\"token attr-name\"><span class=\"token namespace\">on:</span>click</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>./chunk-a.js#greet<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">&gt;</span></span>Greet<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>button</span><span class=\"token punctuation\">&gt;</span></span>\n  <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>div</span><span class=\"token punctuation\">&gt;</span></span>\n  <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>div</span> <span class=\"token attr-name\"><span class=\"token namespace\">q:</span>host</span><span class=\"token punctuation\">&gt;</span></span>\n    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>button</span> <span class=\"token attr-name\"><span class=\"token namespace\">q:</span>obj</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>1<span class=\"token punctuation\">\"</span></span> <span class=\"token attr-name\"><span class=\"token namespace\">on:</span>click</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>./chunk-b.js#count[0]<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">&gt;</span></span>10<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>button</span><span class=\"token punctuation\">&gt;</span></span>\n  <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>div</span><span class=\"token punctuation\">&gt;</span></span>\n<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>div</span><span class=\"token punctuation\">&gt;</span></span>\n<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>script</span><span class=\"token punctuation\">&gt;</span></span><span class=\"token script\"><span class=\"token language-javascript\"><span class=\"token comment\">/* code that sets up global listeners */</span></span></span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>script</span><span class=\"token punctuation\">&gt;</span></span>\n<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>script</span> <span class=\"token attr-name\">type</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>text/qwik<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">&gt;</span></span><span class=\"token script\"><span class=\"token language-javascript\"><span class=\"token comment\">/* JSON representing APP_STATE, FRAMEWORK_STATE */</span></span></span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>script</span><span class=\"token punctuation\">&gt;</span></span>\n</code></pre></div><p>当浏览器加载上述 HTML 代码时，它会立即执行内联脚本，以设置全局监听器。应用程序已准备好接受事件，但浏览器尚未执行任何应用程序代码。这是最接近零 JS 的做法。</p>\n<p>HTML 包含作为元素属性编码的 <code>WHERE</code>。当用户触发一个事件时，框架可以使用 DOM 中的信息惰性地创建事件处理程序。创建过程包括对 <code>APP_STATE</code> 和 <code>FRAMEWORK_STATE</code> 进行懒惰反序列化，以完成 <code>WHAT</code>。一旦该框架惰性地创建了事件处理程序，事件处理程序就可以处理事件了。请注意，客户端不会重做服务器已经完成的任何工作。</p>\n<figure><img src=\"https://raw.githubusercontent.com/dribble-njr/typora-njr/master/img/assets_YJIGb4i01jvw0SRdL5Bt_3c529b5adb7448d48e05cb04594f1e0c.webp\" alt=\"img\" tabindex=\"0\" loading=\"lazy\"><figcaption>img</figcaption></figure>\n<h2>内存使用说明</h2>\n<p>DOM 元素在其生命周期内会保留事件处理程序。Hydration 会急切地创建所有监听器。因此，水合需要在启动时分配内存。</p>\n<p>可恢复框架在事件触发后才会创建事件处理程序。因此，可恢复框架消耗的内存将少于水合框架。此外，可恢复方法不会在执行后保留事件处理程序。事件处理程序在执行后会被释放，并返回内存。</p>\n<p>在某种程度上，释放内存与水合正好相反。这就好比框架惰性地为特定 <code>WHAT</code> 补充水分，执行后再将其脱水。处理程序的第一次执行和第 n 次执行并无太大区别。事件处理程序的惰性创建和释放不符合水合心理模型。</p>\n<h2>结论</h2>\n<p>水合是一种开销，因为它会重复工作。服务器会建立 <code>WHERE</code> 和 <code>WHAT</code>（<code>APP_STATE</code> 和 <code>FRAMEWORK_STATE</code>），但这些信息会被丢弃，而不是序列化给客户端。这样，客户端就会收到没有足够信息来重建应用程序的 HTML。信息的缺乏迫使客户端急于下载应用程序并执行它，以恢复 <code>WHERE</code> 和 <code>WHAT</code>（<code>APP_STATE</code> 和 <code>FRAMEWORK_STATE</code>）。</p>\n<figure><img src=\"https://raw.githubusercontent.com/dribble-njr/typora-njr/master/img/assets_YJIGb4i01jvw0SRdL5Bt_6ac78462e04d4761b1beefa4479c4715.webp\" alt=\"\" tabindex=\"0\" loading=\"lazy\"><figcaption></figcaption></figure>\n<p>另一种方法是可恢复性。可重复性侧重于将所有信息从服务器传输到客户端。这些信息包括 <code>WHERE</code> 和 <code>WHAT</code>（<code>APP_STATE</code> 和 <code>FRAMEWORK_STATE</code>）。附加信息允许客户端在不急于下载应用程序代码的情况下对应用程序进行推理。只有用户交互会迫使客户端下载代码来处理特定的交互。客户端不会重复服务器的任何工作，因此不会产生开销。</p>\n<p>为了将这一想法付诸实践，我们创建了 Qwik，这是一个围绕可恢复性设计的框架，具有出色的启动性能。我们也很高兴听到您的意见！让我们继续交流，共同为用户打造更快的网络应用程序。</p>\n<h2>Q&amp;A</h2>\n<ol>\n<li>\n<p>为什么要创造一个新名词？</p>\n<p>可重复性并没有一个明确的界限来表明组件是否水合。如果你坚持说 Qwik 水合，那么你有两个选择：</p>\n<p>当全局事件处理程序被注册时，Qwik 应用程序就水合了。这感觉不对，因为没有下载应用程序代码，也没有执行任何工作。<br>\n当第一次交互解析序列化状态时，Qwik 应用程序就完成了水合。水合是为交互附加事件监听器。反序列化状态是为了恢复应用程序的状态，与注册事件处理程序无关。在某些情况下，不需要进行反序列化，如果需要，也是在事件触发后进行。另一个问题是，对状态的反序列化甚至会恢复那些尚未下载或永远不会下载的组件的状态。因此，虽然我们很想假设这就是水合的意义所在，但我们认为这只是应用程序状态的懒惰反序列化，因为它与事件处理没有直接关系。<br>\n这两种方案都不能令人满意，因此我们创造了一个新名词。您可以将水合定义为使应用程序具有交互性，但这样的定义过于宽泛，以至于适用于所有人，从而降低了它的价值。因此，虽然听起来像是在分化，但我们还是喜欢谈论水合性与可恢复性，因为我们相信它能更好地捕捉到使应用程序具有交互性所需的大量工作之间的巨大差异。</p>\n</li>\n<li>\n<p>恢复能力仅仅是事后补充水分吗？</p>\n<p>这当然是一个有效的方法。不过，这两者之间有一个很大的区别。可重复性并不要求框架下载并执行组件来了解组件层次结构。可重复性要求将框架的所有信息序列化到 HTML 中，包括</p>\n<ul>\n<li>事件侦听器和事件类型的位置。</li>\n<li>下载事件的位置</li>\n<li>组件边界</li>\n<li>组件道具</li>\n<li>投影/子组件</li>\n<li>必要时下载组件重新渲染功能的位置</li>\n</ul>\n<p>由于框架会反序列化所有这些信息，并在服务器中断的地方继续执行，因此「可恢复」（resumable）是一个更好的词。</p>\n</li>\n<li>\n<p>实际效果如何？我在哪里可以看到使用可恢复战略的网站？</p>\n<p><a href=\"http://Builder.io\" target=\"_blank\" rel=\"noopener noreferrer\">Builder.io</a> 使用 resumable 策略（和 Qwik）重做了我们的网站。我们在启动过程中删除了 99% 的 JavaScript，由此产生的应用程序即使在移动设备上也感觉非常灵敏。通过使用 Qwik 和 Partytown，我们减少了网站中 99% 的 JavaScript，并获得了 100/100 的 PageSpeed 分数。(您仍然可以访问使用 hydration [PageSpeed 50/100]的旧页面，并与使用 resumability [PageSpeed 100/100]的新页面进行比较，亲自体验性能差异）。</p>\n<p>Qwik 的文档是在 Qwik 上运行的。你可以通过在浏览器中打开开发工具（隐身）来查看引擎盖下的情况，并注意到启动时没有使用 Javascript。(该页面还使用 Partytown 将第三方分析移至 Web Worker）。</p>\n<p>最后，看看在 Cloudflare edge 上运行的待办事项应用程序演示。该页面可在 50 毫秒内完成交互！</p>\n</li>\n<li>\n<p>我的框架知道如何进行渐进式和/或懒惰式补水。这是一码事吗？</p>\n<p>不一样，因为渐进式/懒惰式水合仍无法继续执行服务器中断的操作。所有组件代码都需要下载并执行，以恢复和安装事件处理程序。</p>\n<p>有了可恢复性，许多组件将永远不会下载，因为它们永远不会改变。但这些组件可以向子组件传递道具，或创建子组件投射的内容。因此，即使不交互，也需要通过重新执行来恢复组件的状态。这就是为什么支持渐进/快速水合的岛屿不能任意缩小的原因。</p>\n<p>简而言之，与水合相比，可恢复性在处理用户交互时需要下载和执行的代码要少得多。</p>\n</li>\n<li>\n<p>我的框架知道如何创建岛屿。这是一码事吗？</p>\n<p>岛屿架构将应用程序分割成多个岛屿。然后，每个岛都可以独立水合。现在，总工作量不再是一次大的水合，而是分散到许多较小的水合事件中。通常情况下，触发器会使岛在启动时懒散地水合，而不是急切地水合。</p>\n<p>这意味着基于孤岛的水合是一种改进，因为它可以将工作分解成更小的块并延迟执行，但这仍然是水合，与可恢复性不同。</p>\n</li>\n<li>\n<p>我的框架知道如何序列化状态。它会产生开销吗？</p>\n<p>这里的问题是，state 一词被超载了。是的，有些元框架可以序列化状态。但这里的「状态 」指的是 APP_STATE，而不是 FRAMEWORK_STATE。我不知道有哪个流行的框架（或元框架）可以序列化 FRAMEWORK_STATE。此外，即使 FRAMEWORK_STATE 序列化了，WHAT 和 WHERE 也没有序列化。</p>\n<p>是的，状态（APP_STATE）的序列化很有用，可以避免客户端的大量工作。但它仍然会导致水合。</p>\n</li>\n<li>\n<p>组件在首次交互时是否水合？</p>\n<p>如果你查看一下可恢复框架的内部状态，就会发现组件的首次交互与后续交互并无不同。唯一的区别是框架已经解析了序列化状态。一旦状态被解析，它就适用于所有组件，而不仅仅是用户与之交互的组件。在任何时候，框架都可以将状态序列化回 HTML。这是否意味着应用程序不再水合？从这个角度来看，状态的反序列化会使所有组件水合，即使它们的代码尚未被下载。</p>\n</li>\n<li>\n<p>今天我如何利用可恢复性的优势？</p>\n<p>框架控制着应用程序交互所使用的恢复策略类型。因此，要利用可恢复性，您的应用程序必须使用支持它的框架之一。目前，我们只知道 Qwik 明确支持可恢复性。可重续性的优势不容忽视，因此我相信未来其他框架也会开始使用这一策略，无论是新框架还是选择迁移到可重续性的现有框架。</p>\n</li>\n<li>\n<p>第一次互动会有延迟吗？</p>\n<p>使用预取就不会。Qwik 对预取没有任何主见--我们使用过多种预取策略（急切、可见、分析驱动），效果都很好。在大多数情况下，我们发现在 Web Worker（如 Partytown）中进行预取可实现 0 成本和高速度的最佳平衡。我们将在框架中加入最佳实践，并逐步提供具有推荐模式的示例。</p>\n</li>\n<li>\n<p>我可以在 Qwik 中使用我的 React/Angular/Vue/Svelte 组件吗？</p>\n<p>重写应用程序是一项巨大的工程。为了降低入门门槛，我们正在研究与当今一些更流行的框架建立互操作性。Qwik 将成为您的协调器，提供即时的应用程序启动，但它仍将与大部分现有的代码投资一起使用。可以将 Qwik 视为您当前应用程序的协调器。这样，您就不必重写整个应用程序，但仍能获得一些好处。这项工作还在进行中，敬请期待。</p>\n</li>\n</ol>\n",
      "image": "https://raw.githubusercontent.com/dribble-njr/typora-njr/master/img/assets_YJIGb4i01jvw0SRdL5Bt_a6d8c3bacc3c4cf88446e41a71cda21c.webp",
      "date_published": "2024-01-03T00:00:00.000Z",
      "date_modified": "2024-01-07T08:28:24.000Z",
      "authors": [],
      "tags": [
        "工程化"
      ]
    },
    {
      "title": "Rspack",
      "url": "https://dribble-njr.github.io/blog/blog/frontend/engineering/build-tool/rspack/001-hello-rspack.html",
      "id": "https://dribble-njr.github.io/blog/blog/frontend/engineering/build-tool/rspack/001-hello-rspack.html",
      "summary": "Why Rspack? 面对大型项目，开发和生产环境的构建需要耗费很长时间。 组内实际项目在生产环境中构建需要接近 30 分钟。 按照官方说法，Rspack 拥有： 快速的 Dev 启动性能 高效的 Build 性能 灵活的配置 生产环境的优化能力 Rspack 创建项目 使用 Rspack CLI： 目前支持三种模版： react react-ts ...",
      "content_html": "<h2>Why Rspack?</h2>\n<p>面对大型项目，开发和生产环境的构建需要耗费很长时间。</p>\n<p>组内实际项目在生产环境中构建需要接近 30 分钟。</p>\n<p>按照官方说法，Rspack 拥有：</p>\n<ul>\n<li>快速的 Dev 启动性能</li>\n<li>高效的 Build 性能</li>\n<li>灵活的配置</li>\n<li>生产环境的优化能力</li>\n</ul>\n<h2>Rspack 创建项目</h2>\n<p>使用 Rspack CLI：</p>\n<div class=\"language-bash\" data-ext=\"sh\" data-title=\"sh\"><pre class=\"language-bash\"><code><span class=\"token function\">pnpm</span> create rspack@latest\n</code></pre></div><p>目前支持三种模版：</p>\n<ul>\n<li>react</li>\n<li>react-ts</li>\n<li>vue</li>\n</ul>\n<p>用该命令创建的项目 Rspack 不是最新，因此选择从零开始。 (11 月 29 日 已适配为最新版本。)</p>\n<h2>从零开始</h2>\n<p>安装相关依赖。</p>\n<div class=\"language-bash\" data-ext=\"sh\" data-title=\"sh\"><pre class=\"language-bash\"><code><span class=\"token function\">pnpm</span> init\n<span class=\"token function\">pnpm</span> <span class=\"token function\">install</span> react react-dom\n<span class=\"token function\">pnpm</span> <span class=\"token function\">install</span> <span class=\"token parameter variable\">-D</span> typescript @types/react @types/react-dom\n<span class=\"token function\">pnpm</span> <span class=\"token function\">install</span> <span class=\"token parameter variable\">-D</span> @rspack/cli @rspack/core\n</code></pre></div><p>为了快速启动项目，直接将所有文件内容复制，然后启动项目，报错：</p>\n<figure><img src=\"https://raw.githubusercontent.com/dribble-njr/typora-njr/master/img/20240103130024.png\" alt=\"报错\" tabindex=\"0\" loading=\"lazy\"><figcaption>报错</figcaption></figure>\n<p>从官网中查看 <a href=\"https://github.com/rspack-contrib/rspack-examples/pull/2\" target=\"_blank\" rel=\"noopener noreferrer\">迁移示例</a>，并未得到有用信息。复制错误信息 <code>JavaScript parsing error</code> 搜索 issue。</p>\n<p>在 <a href=\"https://github.com/web-infra-dev/rspack/issues/4745\" target=\"_blank\" rel=\"noopener noreferrer\">issue 官网示例报错</a> 中找到解决方法：</p>\n<p>这里按照官方解答无效，查看 <code>rspack-template</code> 最新配置如下：</p>\n<div class=\"language-typescript\" data-ext=\"ts\" data-title=\"ts\"><pre class=\"language-typescript\"><code><span class=\"token punctuation\">{</span>\n\ttest<span class=\"token operator\">:</span> <span class=\"token regex\"><span class=\"token regex-delimiter\">/</span><span class=\"token regex-source language-regex\">\\.(jsx?|tsx?)$</span><span class=\"token regex-delimiter\">/</span></span><span class=\"token punctuation\">,</span>\n\tuse<span class=\"token operator\">:</span> <span class=\"token punctuation\">[</span>\n\t\t<span class=\"token punctuation\">{</span>\n\t\t\tloader<span class=\"token operator\">:</span> <span class=\"token string\">\"builtin:swc-loader\"</span><span class=\"token punctuation\">,</span>\n\t\t\toptions<span class=\"token operator\">:</span> <span class=\"token punctuation\">{</span>\n\t\t\t\tsourceMap<span class=\"token operator\">:</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">,</span>\n\t\t\t\tjsc<span class=\"token operator\">:</span> <span class=\"token punctuation\">{</span>\n\t\t\t\t\tparser<span class=\"token operator\">:</span> <span class=\"token punctuation\">{</span>\n\t\t\t\t\t\tsyntax<span class=\"token operator\">:</span> <span class=\"token string\">\"typescript\"</span><span class=\"token punctuation\">,</span>\n\t\t\t\t\t\ttsx<span class=\"token operator\">:</span> <span class=\"token boolean\">true</span>\n\t\t\t\t\t<span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n\t\t\t\t\ttransform<span class=\"token operator\">:</span> <span class=\"token punctuation\">{</span>\n\t\t\t\t\t\treact<span class=\"token operator\">:</span> <span class=\"token punctuation\">{</span>\n\t\t\t\t\t\t\truntime<span class=\"token operator\">:</span> <span class=\"token string\">\"automatic\"</span><span class=\"token punctuation\">,</span>\n\t\t\t\t\t\t\tdevelopment<span class=\"token operator\">:</span> isDev<span class=\"token punctuation\">,</span>\n\t\t\t\t\t\t\trefresh<span class=\"token operator\">:</span> isDev\n\t\t\t\t\t\t<span class=\"token punctuation\">}</span>\n\t\t\t\t\t<span class=\"token punctuation\">}</span>\n\t\t\t\t<span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n\t\t\t\tenv<span class=\"token operator\">:</span> <span class=\"token punctuation\">{</span>\n\t\t\t\t\ttargets<span class=\"token operator\">:</span> <span class=\"token punctuation\">[</span>\n\t\t\t\t\t\t<span class=\"token string\">\"chrome &gt;= 87\"</span><span class=\"token punctuation\">,</span>\n\t\t\t\t\t\t<span class=\"token string\">\"edge &gt;= 88\"</span><span class=\"token punctuation\">,</span>\n\t\t\t\t\t\t<span class=\"token string\">\"firefox &gt;= 78\"</span><span class=\"token punctuation\">,</span>\n\t\t\t\t\t\t<span class=\"token string\">\"safari &gt;= 14\"</span>\n\t\t\t\t\t<span class=\"token punctuation\">]</span>\n\t\t\t\t<span class=\"token punctuation\">}</span>\n\t\t\t<span class=\"token punctuation\">}</span>\n\t\t<span class=\"token punctuation\">}</span>\n\t<span class=\"token punctuation\">]</span>\n<span class=\"token punctuation\">}</span>\n</code></pre></div><h2>Rspack VS Webpack</h2>\n<p>常见语言与资源模块支持对比如下：</p>\n<p>| 语言/资源 | 支持(Rspack/Webpack)                                                           |<br>\n|</p>\n",
      "image": "https://raw.githubusercontent.com/dribble-njr/typora-njr/master/img/20240103130024.png",
      "date_published": "2023-01-03T00:00:00.000Z",
      "date_modified": "2024-01-07T08:28:24.000Z",
      "authors": [],
      "tags": [
        "工程化"
      ]
    },
    {
      "title": "Vite 初体验",
      "url": "https://dribble-njr.github.io/blog/blog/frontend/engineering/build-tool/vite/001-hello-vite.html",
      "id": "https://dribble-njr.github.io/blog/blog/frontend/engineering/build-tool/vite/001-hello-vite.html",
      "summary": " 项目地址 通过前面对 webpack 的学习，我们已经看到了它的强大，为什么还需要学习 Vite 呢？ Vite 官方文档中提到，当我们开始构建越来越大型的应用时，需要处理的 JavaScript 代码量也呈指数级增长。包含数千个模块的大型项目相当普遍。我们开始遇到性能瓶颈 —— 使用 JavaScript 开发的工具通常需要很长时间（甚至是几分钟！...",
      "content_html": "<blockquote>\n<p><a href=\"https://github.com/Stephen-wzw/vite-demo\" target=\"_blank\" rel=\"noopener noreferrer\">项目地址</a></p>\n</blockquote>\n<p>通过前面对 webpack 的学习，我们已经看到了它的强大，为什么还需要学习 Vite 呢？</p>\n<p>Vite 官方文档中提到，当我们开始构建越来越大型的应用时，需要处理的 JavaScript 代码量也呈指数级增长。包含数千个模块的大型项目相当普遍。我们开始遇到性能瓶颈 —— 使用 JavaScript 开发的工具通常需要很长时间（甚至是几分钟！）才能启动开发服务器，即使使用 HMR，文件修改后的效果也需要几秒钟才能在浏览器中反映出来。如此循环往复，迟钝的反馈会极大地影响开发者的开发效率和幸福感。</p>\n<p>事实也确实如此，webpack 虽好，但是每次重新打包或者热更新都需要比较长的时间，同时还需要繁琐的配置，每次使用 loader 或者 plugin 都需要写上配置文件。</p>\n<p>Vite 给我们提供了开箱即用的配置，同时它也具有高度的可扩展性，并有完整的类型支持。它主要由两部分组成：</p>\n<ul>\n<li>一个开发服务器，它基于<strong>原生 ES 模块</strong>提供了丰富的内建功能，如速度快到惊人的模块热更新（HMR）。</li>\n<li>一套构建指令，它使用 Rollup 打包你的代码，并且它是预配置的，可输出用于生产环境的高度优化过的静态资源。</li>\n</ul>\n<h2>开始</h2>\n<p>新建项目，初始化 npm，然后本地安装 <code>vite</code>。</p>\n<div class=\"language-bash\" data-ext=\"sh\" data-title=\"sh\"><pre class=\"language-bash\"><code><span class=\"token function\">mkdir</span> vite-demo\n<span class=\"token builtin class-name\">cd</span> vite-demo\n<span class=\"token function\">npm</span> init <span class=\"token parameter variable\">-y</span>\n<span class=\"token function\">npm</span> <span class=\"token function\">install</span> vite <span class=\"token parameter variable\">-D</span>\n</code></pre></div><p>创建以下目录及文件：</p>\n<p><strong>project</strong></p>\n<div class=\"language-diff\" data-ext=\"diff\" data-title=\"diff\"><pre class=\"language-diff\"><code><span class=\"token unchanged\"><span class=\"token prefix unchanged\"> </span><span class=\"token line\"> vite-demo\n</span><span class=\"token prefix unchanged\"> </span><span class=\"token line\"> |- package.json\n</span><span class=\"token prefix unchanged\"> </span><span class=\"token line\"> |- package-lock.json\n</span></span><span class=\"token inserted-sign inserted\"><span class=\"token prefix inserted\">+</span><span class=\"token line\"> |- index.html\n</span><span class=\"token prefix inserted\">+</span><span class=\"token line\"> |- /src\n</span><span class=\"token prefix inserted\">+</span><span class=\"token line\">   |- /js\n</span><span class=\"token prefix inserted\">+</span><span class=\"token line\">     |- math.js\n</span><span class=\"token prefix inserted\">+</span><span class=\"token line\">   |- index.js\n</span></span></code></pre></div><p><strong>src/js/math.js</strong></p>\n<div class=\"language-javascript\" data-ext=\"js\" data-title=\"js\"><pre class=\"language-javascript\"><code><span class=\"token keyword\">export</span> <span class=\"token keyword\">function</span> <span class=\"token function\">sum</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">num1<span class=\"token punctuation\">,</span> num2</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">return</span> num1 <span class=\"token operator\">+</span> num2<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n</code></pre></div><p><strong>src/index.js</strong></p>\n<div class=\"language-javascript\" data-ext=\"js\" data-title=\"js\"><pre class=\"language-javascript\"><code><span class=\"token keyword\">import</span> <span class=\"token punctuation\">{</span> sum <span class=\"token punctuation\">}</span> <span class=\"token keyword\">from</span> <span class=\"token string\">\"./js/math.js\"</span><span class=\"token punctuation\">;</span>\n\nconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Hello Vite!\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\nconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token function\">sum</span><span class=\"token punctuation\">(</span><span class=\"token number\">10</span><span class=\"token punctuation\">,</span> <span class=\"token number\">20</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n</code></pre></div><p><strong>index.html</strong></p>\n<div class=\"language-html\" data-ext=\"html\" data-title=\"html\"><pre class=\"language-html\"><code><span class=\"token doctype\"><span class=\"token punctuation\">&lt;!</span><span class=\"token doctype-tag\">DOCTYPE</span> <span class=\"token name\">html</span><span class=\"token punctuation\">&gt;</span></span>\n<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>html</span> <span class=\"token attr-name\">lang</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>en<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">&gt;</span></span>\n<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>head</span><span class=\"token punctuation\">&gt;</span></span>\n  <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>meta</span> <span class=\"token attr-name\">charset</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>UTF-8<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">&gt;</span></span>\n  <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>meta</span> <span class=\"token attr-name\">http-equiv</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>X-UA-Compatible<span class=\"token punctuation\">\"</span></span> <span class=\"token attr-name\">content</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>IE=edge<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">&gt;</span></span>\n  <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>meta</span> <span class=\"token attr-name\">name</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>viewport<span class=\"token punctuation\">\"</span></span> <span class=\"token attr-name\">content</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>width=device-width, initial-scale=1.0<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">&gt;</span></span>\n  <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>title</span><span class=\"token punctuation\">&gt;</span></span>vite-demo<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>title</span><span class=\"token punctuation\">&gt;</span></span>\n<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>head</span><span class=\"token punctuation\">&gt;</span></span>\n<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>body</span><span class=\"token punctuation\">&gt;</span></span>\n  <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>script</span> <span class=\"token attr-name\">src</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>./src/index.js<span class=\"token punctuation\">\"</span></span> <span class=\"token attr-name\">type</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>module<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">&gt;</span></span><span class=\"token script\"></span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>script</span><span class=\"token punctuation\">&gt;</span></span>\n<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>body</span><span class=\"token punctuation\">&gt;</span></span>\n<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>html</span><span class=\"token punctuation\">&gt;</span></span>\n</code></pre></div><p>现在用 <code>live server</code> 打开 <code>index.html</code> 文件，即可看到浏览器显示正确的内容：</p>\n<div class=\"language-bash\" data-ext=\"sh\" data-title=\"sh\"><pre class=\"language-bash\"><code>Hello Vite<span class=\"token operator\">!</span>\n<span class=\"token number\">30</span>\n</code></pre></div><p>但其实我们现在并没有使用 Vite 帮我们打包项目，它起作用的原因在于浏览器本身就支持<strong>原生 ES 模块</strong>。既然这样，我们直接写 ES Module 的代码就行，为什么还需要使用到 Vite 呢？接下来看看直接使用 ES Module 的问题所在。</p>\n<h2>原生 ES 模块的问题</h2>\n<p>为了体现原生 ES 模块的问题，安装 <code>lodash-es</code> 库，它是使用 ES Module 导出的。</p>\n<div class=\"language-bash\" data-ext=\"sh\" data-title=\"sh\"><pre class=\"language-bash\"><code><span class=\"token function\">npm</span> <span class=\"token function\">install</span> lodash-es\n</code></pre></div><p>接下来在 <code>src/index.js</code> 中使用：</p>\n<div class=\"language-diff\" data-ext=\"diff\" data-title=\"diff\"><pre class=\"language-diff\"><code><span class=\"token inserted-sign inserted\"><span class=\"token prefix inserted\">+</span><span class=\"token line\"> import _ from \"lodash-es\";\n</span></span><span class=\"token unchanged\"><span class=\"token prefix unchanged\"> </span><span class=\"token line\"> \n</span><span class=\"token prefix unchanged\"> </span><span class=\"token line\"> import { sum } from \"./js/math.js\";\n</span><span class=\"token prefix unchanged\"> </span><span class=\"token line\"> \n</span><span class=\"token prefix unchanged\"> </span><span class=\"token line\"> console.log(\"Hello Vite!\");\n</span><span class=\"token prefix unchanged\"> </span><span class=\"token line\"> console.log(sum(10, 20));\n</span></span><span class=\"token inserted-sign inserted\"><span class=\"token prefix inserted\">+</span><span class=\"token line\"> console.log(_.join([\"hello\", \"vite\"], \"-\"));\n</span></span></code></pre></div><p>这时打开 <code>index.html</code> 会报错：</p>\n<div class=\"language-bash\" data-ext=\"sh\" data-title=\"sh\"><pre class=\"language-bash\"><code>Uncaught TypeError: Failed to resolve module specifier <span class=\"token string\">\"lodash-es\"</span><span class=\"token builtin class-name\">.</span> Relative references must start with either <span class=\"token string\">\"/\"</span>, <span class=\"token string\">\"./\"</span>, or <span class=\"token string\">\"../\"</span><span class=\"token builtin class-name\">.</span>\n</code></pre></div><p>之前在 webpack 中可以直接这样导入模块的原因是它内部帮我们做了。其实 Vite 也帮我们做了这样的事，但是为了体现<strong>原生 ES Module</strong>存在的问题，使用相对路径对其进行导入。</p>\n<div class=\"language-diff\" data-ext=\"diff\" data-title=\"diff\"><pre class=\"language-diff\"><code><span class=\"token deleted-sign deleted\"><span class=\"token prefix deleted\">-</span><span class=\"token line\"> import _ from \"lodash-es\";\n</span></span><span class=\"token inserted-sign inserted\"><span class=\"token prefix inserted\">+</span><span class=\"token line\"> import _ from \"../node_modules/lodash-es/lodash.default.js\";\n</span></span></code></pre></div><p>重新打开浏览器正常工作：</p>\n<div class=\"language-bash\" data-ext=\"sh\" data-title=\"sh\"><pre class=\"language-bash\"><code>Hello Vite<span class=\"token operator\">!</span>\n<span class=\"token number\">30</span>\nhello-vite\n</code></pre></div><p>但是，我们查看网络，可以看到浏览器将整个库都请求下来了，如果每个库都这样，那请求的资源将不可想象。</p>\n<figure><img src=\"/assets/image/frontend/tool/vite/001/esm-problem.png\" alt=\"原生问题\" tabindex=\"0\" loading=\"lazy\"><figcaption>原生问题</figcaption></figure>\n<p>现在我们更改下模块路径，并使用 <code>vite</code> 启动服务：</p>\n<p><strong>src/index.js</strong></p>\n<div class=\"language-diff\" data-ext=\"diff\" data-title=\"diff\"><pre class=\"language-diff\"><code><span class=\"token deleted-sign deleted\"><span class=\"token prefix deleted\">-</span><span class=\"token line\"> import _ from \"../node_modules/lodash-es/lodash.default.js\";\n</span></span><span class=\"token inserted-sign inserted\"><span class=\"token prefix inserted\">+</span><span class=\"token line\"> import _ from \"lodash-es\";\n</span></span></code></pre></div><div class=\"language-bash\" data-ext=\"sh\" data-title=\"sh\"><pre class=\"language-bash\"><code>npx vite\n\nvite v2.9.9 dev server running at:\n\n<span class=\"token operator\">&gt;</span> Local: http://localhost:3000/\n<span class=\"token operator\">&gt;</span> Network: use <span class=\"token variable\"><span class=\"token variable\">`</span><span class=\"token parameter variable\">--host</span><span class=\"token variable\">`</span></span> to expose\n\nready <span class=\"token keyword\">in</span> 547ms.\n</code></pre></div><p>用浏览器打开并查看网络，请求数极大减少，这是由于 Vite 帮我们在内部做了处理。</p>\n<figure><img src=\"/assets/image/frontend/tool/vite/001/esm-vite.png\" alt=\"vite\" tabindex=\"0\" loading=\"lazy\"><figcaption>vite</figcaption></figure>\n<h2>css</h2>\n<h3>普通 css</h3>\n<p>导入 .css 文件将会把内容插入到 <code>&lt;style&gt;</code> 标签中，同时也带有 HMR 支持。</p>\n<p>在 src 下新建 css 文件夹，并新增 <code>style.css</code> 文件：</p>\n<p><strong>src/css/style.css</strong></p>\n<div class=\"language-css\" data-ext=\"css\" data-title=\"css\"><pre class=\"language-css\"><code><span class=\"token selector\">body</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token property\">background-color</span><span class=\"token punctuation\">:</span> #eee<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n</code></pre></div><p><strong>src/index.js</strong></p>\n<div class=\"language-diff\" data-ext=\"diff\" data-title=\"diff\"><pre class=\"language-diff\"><code><span class=\"token unchanged\"><span class=\"token prefix unchanged\"> </span><span class=\"token line\"> import _ from \"lodash-es\";\n</span><span class=\"token prefix unchanged\"> </span><span class=\"token line\"> import { sum } from \"./js/math.js\";\n</span><span class=\"token prefix unchanged\"> </span><span class=\"token line\">\n</span></span><span class=\"token inserted-sign inserted\"><span class=\"token prefix inserted\">+</span><span class=\"token line\"> import \"./css/style.css\";\n</span></span><span class=\"token unchanged\"><span class=\"token prefix unchanged\"> </span><span class=\"token line\">\n</span><span class=\"token prefix unchanged\"> </span><span class=\"token line\"> console.log(\"Hello Vite!\");\n</span><span class=\"token prefix unchanged\"> </span><span class=\"token line\"> console.log(sum(10, 20));\n</span><span class=\"token prefix unchanged\"> </span><span class=\"token line\"> console.log(_.join([\"hello\", \"vite\"], \"-\"));\n</span></span></code></pre></div><p>打开浏览器可以看到 <code>.css</code> 样式生效。</p>\n<h3>预处理器</h3>\n<p>Vite 也同时提供了对 .scss, .sass, .less, .styl 和 .stylus 文件的内置支持。没有必要为它们安装特定的 Vite 插件，但必须安装相应的预处理器依赖：</p>\n<div class=\"language-bash\" data-ext=\"sh\" data-title=\"sh\"><pre class=\"language-bash\"><code><span class=\"token comment\"># .scss and .sass</span>\n<span class=\"token function\">npm</span> <span class=\"token function\">add</span> <span class=\"token parameter variable\">-D</span> sass\n\n<span class=\"token comment\"># .less</span>\n<span class=\"token function\">npm</span> <span class=\"token function\">add</span> <span class=\"token parameter variable\">-D</span> <span class=\"token function\">less</span>\n\n<span class=\"token comment\"># .styl and .stylus</span>\n<span class=\"token function\">npm</span> <span class=\"token function\">add</span> <span class=\"token parameter variable\">-D</span> stylus\n</code></pre></div><p>以 less 为例，在 src/css 文件夹下新建 <code>title.less</code> 文件：</p>\n<p><strong>title.less</strong></p>\n<div class=\"language-less\" data-ext=\"less\" data-title=\"less\"><pre class=\"language-less\"><code><span class=\"token variable\">@fontSize<span class=\"token punctuation\">:</span></span> 50px<span class=\"token punctuation\">;</span>\n<span class=\"token variable\">@fontColor<span class=\"token punctuation\">:</span></span> #999<span class=\"token punctuation\">;</span>\n\n<span class=\"token selector\">.title</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token property\">font-size</span><span class=\"token punctuation\">:</span> <span class=\"token variable\">@fontSize</span><span class=\"token punctuation\">;</span>\n  <span class=\"token property\">color</span><span class=\"token punctuation\">:</span> <span class=\"token variable\">@fontColor</span><span class=\"token punctuation\">;</span>\n  \n  <span class=\"token property\">user-select</span><span class=\"token punctuation\">:</span> none<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n</code></pre></div><p><strong>src/index.js</strong></p>\n<div class=\"language-diff\" data-ext=\"diff\" data-title=\"diff\"><pre class=\"language-diff\"><code><span class=\"token unchanged\"><span class=\"token prefix unchanged\"> </span><span class=\"token line\"> import _ from \"lodash-es\";\n</span><span class=\"token prefix unchanged\"> </span><span class=\"token line\"> import { sum } from \"./js/math.js\";\n</span><span class=\"token prefix unchanged\"> </span><span class=\"token line\">\n</span><span class=\"token prefix unchanged\"> </span><span class=\"token line\"> import \"./css/style.css\";\n</span></span><span class=\"token inserted-sign inserted\"><span class=\"token prefix inserted\">+</span><span class=\"token line\"> import \"./css/title.less\";\n</span></span>\n<span class=\"token unchanged\"><span class=\"token prefix unchanged\"> </span><span class=\"token line\"> console.log(\"Hello Vite!\");\n</span><span class=\"token prefix unchanged\"> </span><span class=\"token line\"> console.log(sum(10, 20));\n</span><span class=\"token prefix unchanged\"> </span><span class=\"token line\"> console.log(_.join([\"hello\", \"vite\"], \"-\"));\n</span></span>\n<span class=\"token inserted-sign inserted\"><span class=\"token prefix inserted\">+</span><span class=\"token line\"> const titleEl = document.createElement('div');\n</span><span class=\"token prefix inserted\">+</span><span class=\"token line\"> titleEl.className = \"title\";\n</span><span class=\"token prefix inserted\">+</span><span class=\"token line\"> titleEl.innerHTML = \"Hello Vite\";\n</span></span>\n<span class=\"token inserted-sign inserted\"><span class=\"token prefix inserted\">+</span><span class=\"token line\"> document.body.appendChild(titleEl);\n</span></span></code></pre></div><p>打开浏览器可以看到 <code>.less</code> 样式生效。</p>\n<h3>postcss</h3>\n<p>如果项目包含有效的 PostCSS 配置 (任何受 postcss-load-config 支持的格式，例如 <code>postcss.config.js</code>)，它将会自动应用于所有已导入的 CSS。</p>\n<p>首先安装 postcss 和 postcss-preset-env：</p>\n<div class=\"language-bash\" data-ext=\"sh\" data-title=\"sh\"><pre class=\"language-bash\"><code><span class=\"token function\">npm</span> <span class=\"token function\">install</span> postcss postcss-preset-env <span class=\"token parameter variable\">-D</span>\n</code></pre></div><p>在项目根目录下新建 <code>postcss.config.js</code>：</p>\n<p><strong>postcss.config.js</strong></p>\n<div class=\"language-javascript\" data-ext=\"js\" data-title=\"js\"><pre class=\"language-javascript\"><code>module<span class=\"token punctuation\">.</span>exports <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token literal-property property\">plugins</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">[</span>\n    <span class=\"token function\">require</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"postcss-preset-env\"</span><span class=\"token punctuation\">)</span>\n  <span class=\"token punctuation\">]</span>\n<span class=\"token punctuation\">}</span>\n</code></pre></div><p>这时候打开浏览器查看元素，可以发现已经帮助我们加上了前缀：</p>\n<div class=\"language-css\" data-ext=\"css\" data-title=\"css\"><pre class=\"language-css\"><code><span class=\"token selector\">.title</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token property\">font-size</span><span class=\"token punctuation\">:</span> 50px<span class=\"token punctuation\">;</span>\n  <span class=\"token property\">color</span><span class=\"token punctuation\">:</span> #999<span class=\"token punctuation\">;</span>\n  <span class=\"token property\">-webkit-user-select</span><span class=\"token punctuation\">:</span> none<span class=\"token punctuation\">;</span>\n     <span class=\"token property\">-moz-user-select</span><span class=\"token punctuation\">:</span> none<span class=\"token punctuation\">;</span>\n      <span class=\"token property\">-ms-user-select</span><span class=\"token punctuation\">:</span> none<span class=\"token punctuation\">;</span>\n          <span class=\"token property\">user-select</span><span class=\"token punctuation\">:</span> none<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n</code></pre></div><h2>图片</h2>\n<p>在 src 下新建 img 文件夹，并修改 <code>index.js</code> 文件：</p>\n<p><strong>index.js</strong></p>\n<div class=\"language-diff\" data-ext=\"diff\" data-title=\"diff\"><pre class=\"language-diff\"><code><span class=\"token unchanged\"><span class=\"token prefix unchanged\"> </span><span class=\"token line\"> import _ from \"lodash-es\";\n</span><span class=\"token prefix unchanged\"> </span><span class=\"token line\"> import { sum } from \"./js/math.js\";\n</span><span class=\"token prefix unchanged\"> </span><span class=\"token line\"> \n</span><span class=\"token prefix unchanged\"> </span><span class=\"token line\"> import \"./css/style.css\";\n</span><span class=\"token prefix unchanged\"> </span><span class=\"token line\"> import \"./css/title.less\";\n</span></span>\n<span class=\"token inserted-sign inserted\"><span class=\"token prefix inserted\">+</span><span class=\"token line\"> import avatarUrl from \"./img/avatar.png\";\n</span></span><span class=\"token unchanged\"><span class=\"token prefix unchanged\"> </span><span class=\"token line\"> \n</span><span class=\"token prefix unchanged\"> </span><span class=\"token line\"> console.log(\"Hello Vite!\");\n</span><span class=\"token prefix unchanged\"> </span><span class=\"token line\"> console.log(sum(10, 20));\n</span><span class=\"token prefix unchanged\"> </span><span class=\"token line\"> console.log(_.join([\"hello\", \"vite\"], \"-\"));\n</span><span class=\"token prefix unchanged\"> </span><span class=\"token line\"> \n</span><span class=\"token prefix unchanged\"> </span><span class=\"token line\"> const titleEl = document.createElement('div');\n</span><span class=\"token prefix unchanged\"> </span><span class=\"token line\"> titleEl.className = \"title\";\n</span><span class=\"token prefix unchanged\"> </span><span class=\"token line\"> titleEl.innerHTML = \"Hello Vite\";\n</span><span class=\"token prefix unchanged\"> </span><span class=\"token line\"> \n</span></span><span class=\"token inserted-sign inserted\"><span class=\"token prefix inserted\">+</span><span class=\"token line\"> const imgEl = document.createElement('img');\n</span><span class=\"token prefix inserted\">+</span><span class=\"token line\"> imgEl.src = avatarUrl;\n</span></span><span class=\"token unchanged\"><span class=\"token prefix unchanged\"> </span><span class=\"token line\"> \n</span><span class=\"token prefix unchanged\"> </span><span class=\"token line\"> document.body.appendChild(titleEl);\n</span></span><span class=\"token inserted-sign inserted\"><span class=\"token prefix inserted\">+</span><span class=\"token line\"> document.body.appendChild(imgEl);\n</span></span></code></pre></div><p>不用其他配置，浏览器就已经显示出了图片。</p>\n<h2>TypeScript</h2>\n<p>Vite 使用 <a href=\"https://github.com/evanw/esbuild\" target=\"_blank\" rel=\"noopener noreferrer\">esbuild</a> 将 TypeScript 转译到 JavaScript，约是 tsc 速度的 20~30 倍，同时 HMR 更新反映到浏览器的时间小于 50ms。</p>\n<p>src 下新建 ts 文件夹，并新增 <code>mul.ts</code> 文件，在 <code>index.js</code> 下使用：</p>\n<p><strong>src/ts/mul.ts</strong></p>\n<div class=\"language-typescript\" data-ext=\"ts\" data-title=\"ts\"><pre class=\"language-typescript\"><code><span class=\"token keyword\">export</span> <span class=\"token keyword\">default</span> <span class=\"token keyword\">function</span><span class=\"token punctuation\">(</span>num1<span class=\"token operator\">:</span> <span class=\"token builtin\">number</span><span class=\"token punctuation\">,</span> num2<span class=\"token operator\">:</span> <span class=\"token builtin\">number</span><span class=\"token punctuation\">)</span><span class=\"token operator\">:</span> <span class=\"token builtin\">number</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">return</span> num1 <span class=\"token operator\">*</span> num2<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n</code></pre></div><p><strong>src/index.js</strong></p>\n<div class=\"language-diff\" data-ext=\"diff\" data-title=\"diff\"><pre class=\"language-diff\"><code><span class=\"token unchanged\"><span class=\"token prefix unchanged\"> </span><span class=\"token line\"> import _ from \"lodash-es\";\n</span><span class=\"token prefix unchanged\"> </span><span class=\"token line\"> import { sum } from \"./js/math.js\";\n</span></span><span class=\"token inserted-sign inserted\"><span class=\"token prefix inserted\">+</span><span class=\"token line\"> import mul from \"./ts/mul.ts\";\n</span></span>\n<span class=\"token unchanged\"><span class=\"token prefix unchanged\"> </span><span class=\"token line\"> import \"./css/style.css\";\n</span><span class=\"token prefix unchanged\"> </span><span class=\"token line\"> import \"./css/title.less\";\n</span></span>\n<span class=\"token unchanged\"><span class=\"token prefix unchanged\"> </span><span class=\"token line\"> import avatarUrl from \"./img/avatar.png\";\n</span><span class=\"token prefix unchanged\"> </span><span class=\"token line\"> \n</span><span class=\"token prefix unchanged\"> </span><span class=\"token line\"> console.log(\"Hello Vite!\");\n</span><span class=\"token prefix unchanged\"> </span><span class=\"token line\"> console.log(sum(10, 20));\n</span><span class=\"token prefix unchanged\"> </span><span class=\"token line\"> console.log(_.join([\"hello\", \"vite\"], \"-\"));\n</span></span><span class=\"token inserted-sign inserted\"><span class=\"token prefix inserted\">+</span><span class=\"token line\"> console.log(mul(10, 20));\n</span></span><span class=\"token unchanged\"><span class=\"token prefix unchanged\"> </span><span class=\"token line\"> \n</span><span class=\"token prefix unchanged\"> </span><span class=\"token line\"> const titleEl = document.createElement('div');\n</span><span class=\"token prefix unchanged\"> </span><span class=\"token line\"> titleEl.className = \"title\";\n</span><span class=\"token prefix unchanged\"> </span><span class=\"token line\"> titleEl.innerHTML = \"Hello Vite\";\n</span><span class=\"token prefix unchanged\"> </span><span class=\"token line\"> \n</span><span class=\"token prefix unchanged\"> </span><span class=\"token line\"> const imgEl = document.createElement('img');\n</span><span class=\"token prefix unchanged\"> </span><span class=\"token line\"> imgEl.src = avatarUrl;\n</span><span class=\"token prefix unchanged\"> </span><span class=\"token line\"> \n</span><span class=\"token prefix unchanged\"> </span><span class=\"token line\"> document.body.appendChild(titleEl);\n</span><span class=\"token prefix unchanged\"> </span><span class=\"token line\"> document.body.appendChild(imgEl);\n</span></span></code></pre></div><p>浏览器正确的打印了 <code>200</code>。</p>\n<h2>Vue</h2>\n<p>Vite 为 Vue 提供第一优先级支持：</p>\n<ul>\n<li>Vue 3 单文件组件支持：@vitejs/plugin-vue</li>\n<li>Vue 3 JSX 支持：@vitejs/plugin-vue-jsx</li>\n<li>Vue 2 支持：underfin/vite-plugin-vue2</li>\n</ul>\n<p>首先安装 vue@next 和 @vitejs/plugin-vue：</p>\n<div class=\"language-bash\" data-ext=\"sh\" data-title=\"sh\"><pre class=\"language-bash\"><code><span class=\"token function\">npm</span> <span class=\"token function\">install</span> vue@next @vitejs/plugin-vue <span class=\"token parameter variable\">-D</span>\n</code></pre></div><p>接下来对项目文件进行修改：</p>\n<p><strong>index.html</strong></p>\n<div class=\"language-diff\" data-ext=\"diff\" data-title=\"diff\"><pre class=\"language-diff\"><code><span class=\"token unchanged\"><span class=\"token prefix unchanged\"> </span><span class=\"token line\">&lt;!DOCTYPE html&gt;\n</span><span class=\"token prefix unchanged\"> </span><span class=\"token line\">&lt;html lang=\"en\"&gt;\n</span><span class=\"token prefix unchanged\"> </span><span class=\"token line\">&lt;head&gt;\n</span><span class=\"token prefix unchanged\"> </span><span class=\"token line\">  &lt;meta charset=\"UTF-8\"&gt;\n</span><span class=\"token prefix unchanged\"> </span><span class=\"token line\">  &lt;meta http-equiv=\"X-UA-Compatible\" content=\"IE=edge\"&gt;\n</span><span class=\"token prefix unchanged\"> </span><span class=\"token line\">  &lt;meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\"&gt;\n</span><span class=\"token prefix unchanged\"> </span><span class=\"token line\">  &lt;title&gt;vite-demo&lt;/title&gt;\n</span><span class=\"token prefix unchanged\"> </span><span class=\"token line\">&lt;/head&gt;\n</span><span class=\"token prefix unchanged\"> </span><span class=\"token line\">&lt;body&gt;\n</span></span><span class=\"token inserted-sign inserted\"><span class=\"token prefix inserted\">+</span><span class=\"token line\">  &lt;div id=\"app\"&gt;&lt;/div&gt;\n</span></span><span class=\"token unchanged\"><span class=\"token prefix unchanged\"> </span><span class=\"token line\">  &lt;script src=\"./src/index.js\" type=\"module\"&gt;&lt;/script&gt;\n</span><span class=\"token prefix unchanged\"> </span><span class=\"token line\">&lt;/body&gt;\n</span></span><span class=\"token deleted-arrow deleted\"><span class=\"token prefix deleted\">&lt;</span><span class=\"token line\">/html&gt;\n</span></span></code></pre></div><p><strong>src/vue/App.vue</strong></p>\n<div class=\"language-vue\" data-ext=\"vue\" data-title=\"vue\"><pre class=\"language-vue\"><code><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>template</span><span class=\"token punctuation\">&gt;</span></span>\n  <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>div</span><span class=\"token punctuation\">&gt;</span></span>\n    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>h2</span><span class=\"token punctuation\">&gt;</span></span>{{message}}<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>h2</span><span class=\"token punctuation\">&gt;</span></span>\n  <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>div</span><span class=\"token punctuation\">&gt;</span></span>\n<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>template</span><span class=\"token punctuation\">&gt;</span></span>\n\n<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>script</span><span class=\"token punctuation\">&gt;</span></span><span class=\"token script\"><span class=\"token language-javascript\">\n  <span class=\"token keyword\">export</span> <span class=\"token keyword\">default</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token function\">data</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n      <span class=\"token keyword\">return</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token literal-property property\">message</span><span class=\"token operator\">:</span> <span class=\"token string\">\"Hello Vue\"</span>\n      <span class=\"token punctuation\">}</span>\n    <span class=\"token punctuation\">}</span>\n  <span class=\"token punctuation\">}</span>\n</span></span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>script</span><span class=\"token punctuation\">&gt;</span></span>\n\n<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>style</span> <span class=\"token attr-name\">scoped</span><span class=\"token punctuation\">&gt;</span></span><span class=\"token style\"><span class=\"token language-css\">\n</span></span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>style</span><span class=\"token punctuation\">&gt;</span></span>\n</code></pre></div><p><strong>src/index.js</strong></p>\n<div class=\"language-diff\" data-ext=\"diff\" data-title=\"diff\"><pre class=\"language-diff\"><code><span class=\"token inserted-sign inserted\"><span class=\"token prefix inserted\">+</span><span class=\"token line\"> import { createApp } from \"vue\";\n</span><span class=\"token prefix inserted\">+</span><span class=\"token line\"> import App from './vue/App.vue';\n</span></span><span class=\"token unchanged\"><span class=\"token prefix unchanged\"> </span><span class=\"token line\">\n</span><span class=\"token prefix unchanged\"> </span><span class=\"token line\"> ...\n</span><span class=\"token prefix unchanged\"> </span><span class=\"token line\">\n</span></span><span class=\"token inserted-sign inserted\"><span class=\"token prefix inserted\">+</span><span class=\"token line\"> createApp(App).mount('#app');\n</span></span></code></pre></div><p>新建 <code>vite.config.js</code> 使用 @vitejs/plugin-vue 来处理 .vue 文件：</p>\n<p><strong>vite.config.js</strong></p>\n<div class=\"language-javascript\" data-ext=\"js\" data-title=\"js\"><pre class=\"language-javascript\"><code><span class=\"token keyword\">const</span> vue <span class=\"token operator\">=</span> <span class=\"token function\">require</span><span class=\"token punctuation\">(</span><span class=\"token string\">'@vitejs/plugin-vue'</span><span class=\"token punctuation\">)</span>\n\nmodule<span class=\"token punctuation\">.</span>exports <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token literal-property property\">plugins</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">[</span>\n    <span class=\"token function\">vue</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n  <span class=\"token punctuation\">]</span>\n<span class=\"token punctuation\">}</span>\n</code></pre></div><h2>npm script</h2>\n<p><strong>package.json</strong></p>\n<div class=\"language-diff\" data-ext=\"diff\" data-title=\"diff\"><pre class=\"language-diff\"><code><span class=\"token unchanged\"><span class=\"token prefix unchanged\"> </span><span class=\"token line\"> \"scripts\": {\n</span><span class=\"token prefix unchanged\"> </span><span class=\"token line\">   \"test\": \"echo \\\"Error: no test specified\\\" &amp;&amp; exit 1\",\n</span></span><span class=\"token inserted-sign inserted\"><span class=\"token prefix inserted\">+</span><span class=\"token line\">   \"serve\": \"vite\",\n</span><span class=\"token prefix inserted\">+</span><span class=\"token line\">   \"build\": \"vite build\",\n</span><span class=\"token prefix inserted\">+</span><span class=\"token line\">   \"preview\": \"vite preview\"\n</span></span><span class=\"token unchanged\"><span class=\"token prefix unchanged\"> </span><span class=\"token line\"> },\n</span></span></code></pre></div><ul>\n<li><code>vite</code>：启动服务。</li>\n<li><code>vite build</code>：给项目进行打包。</li>\n<li><code>vite preview</code>：打包后进行预览。</li>\n</ul>\n<blockquote>\n<p>在进行 <code>npm run build</code> 打包后使用 <code>live server</code> 打开后页面显示空白，浏览器报错。需要在 <code>vite.config.js</code> 下配置 <code>base: './'</code>。</p>\n</blockquote>\n<h2>总结</h2>\n<p>通过上面的体验，可以发现 Vite 是真的很快，而且不需要像 webpack 那样大量的配置。</p>\n<p>以前的打包模式，项目启动时，需要先将所有文件打包成一个文件 bundle.js ，然后在 html 引入，这个 多文件 -&gt; bundle.js 的过程是非常耗时间的。</p>\n<figure><img src=\"/assets/image/frontend/tool/vite/001/bundle.png\" alt=\"bundle\" tabindex=\"0\" loading=\"lazy\"><figcaption>bundle</figcaption></figure>\n<p>而 Vite 以原生 ESM 方式提供源码，Vite 只需要在浏览器请求源码时进行转换并按需提供源码。根据情景动态导入代码，即只在当前屏幕上实际使用时才会被处理。</p>\n<figure><img src=\"/assets/image/frontend/tool/vite/001/vite.png\" alt=\"vite\" tabindex=\"0\" loading=\"lazy\"><figcaption>vite</figcaption></figure>\n",
      "image": "https://dribble-njr.github.io/blog/blog/assets/image/frontend/tool/vite/001/esm-problem.png",
      "date_published": "2022-05-18T00:00:00.000Z",
      "date_modified": "2024-01-07T08:28:24.000Z",
      "authors": [],
      "tags": [
        "工程化"
      ]
    },
    {
      "title": "webpack 基础打包",
      "url": "https://dribble-njr.github.io/blog/blog/frontend/engineering/build-tool/webpack/001-webpack-basic.html",
      "id": "https://dribble-njr.github.io/blog/blog/frontend/engineering/build-tool/webpack/001-webpack-basic.html",
      "summary": " 项目地址：https://github.com/Stephen-wzw/webpack-demo 基本安装 webpack 需要安装两个工具：webpack 和 webpack-cli（命令行接口）。 webpack 在执行时依赖 webpack-CLI，webpack-cli 提供了许多命令来使 webpack 的工作变得更简单。如果没有安装，运行...",
      "content_html": "<blockquote>\n<p>项目地址：<a href=\"https://github.com/Stephen-wzw/webpack-demo\" target=\"_blank\" rel=\"noopener noreferrer\">https://github.com/Stephen-wzw/webpack-demo</a></p>\n</blockquote>\n<h2>基本安装</h2>\n<p>webpack 需要安装两个工具：webpack 和 webpack-cli（命令行接口）。</p>\n<p>webpack 在执行时依赖 webpack-CLI，webpack-cli 提供了许多命令来使 webpack 的工作变得更简单。如果没有安装，运行 webpack 命令时会报错。</p>\n<div class=\"language-bash\" data-ext=\"sh\" data-title=\"sh\"><pre class=\"language-bash\"><code><span class=\"token comment\"># 全局安装</span>\n<span class=\"token function\">npm</span> <span class=\"token function\">install</span> webpack webpack-cli <span class=\"token parameter variable\">-g</span>\n\n<span class=\"token comment\"># 局部安装</span>\n<span class=\"token function\">npm</span> <span class=\"token function\">install</span> webpack webpack-cli <span class=\"token parameter variable\">-D</span>\n</code></pre></div><p>首先全局安装，在具体的项目中再使用局部安装。</p>\n<h2>为什么需要 webpack</h2>\n<p>首先创建一个目录，然后局部安装 webpack 和 webpack-cli。</p>\n<div class=\"language-bash\" data-ext=\"sh\" data-title=\"sh\"><pre class=\"language-bash\"><code><span class=\"token function\">mkdir</span> webpack-demo\n<span class=\"token builtin class-name\">cd</span> webpack-demo\n<span class=\"token function\">npm</span> init <span class=\"token parameter variable\">-y</span>\n<span class=\"token function\">npm</span> <span class=\"token function\">install</span> webpack webpack-cli <span class=\"token parameter variable\">-D</span>\n</code></pre></div><blockquote>\n<p>一个 JS 相关的项目往往都是从 package.json 文件开始的。<br>\nnpm 官方提供了 <code>npm init</code> 命令帮助我们快速初始化 package.json 文件。<br>\n执行之后会有一个交互式的命令行让你输入需要的字段值，当然如果你想直接使用默认值，也可以使用 npm init -y 来初始化。</p>\n</blockquote>\n<p>然后创建如下目录结构、文件和内容：</p>\n<p><strong>project</strong></p>\n<div class=\"language-diff\" data-ext=\"diff\" data-title=\"diff\"><pre class=\"language-diff\"><code><span class=\"token unchanged\"><span class=\"token prefix unchanged\"> </span><span class=\"token line\"> webpack-demo\n</span><span class=\"token prefix unchanged\"> </span><span class=\"token line\"> |- node_modules\n</span><span class=\"token prefix unchanged\"> </span><span class=\"token line\"> |- package-lock.json\n</span><span class=\"token prefix unchanged\"> </span><span class=\"token line\"> |- package.json\n</span></span><span class=\"token inserted-sign inserted\"><span class=\"token prefix inserted\">+</span><span class=\"token line\"> |- index.html\n</span><span class=\"token prefix inserted\">+</span><span class=\"token line\"> |- /src\n</span><span class=\"token prefix inserted\">+</span><span class=\"token line\">   |- /js\n</span><span class=\"token prefix inserted\">+</span><span class=\"token line\">     |- format.js\n</span><span class=\"token prefix inserted\">+</span><span class=\"token line\">     |- math.js  \n</span><span class=\"token prefix inserted\">+</span><span class=\"token line\">   |- index.js\n</span></span></code></pre></div><p><strong>index.html</strong></p>\n<div class=\"language-html\" data-ext=\"html\" data-title=\"html\"><pre class=\"language-html\"><code><span class=\"token doctype\"><span class=\"token punctuation\">&lt;!</span><span class=\"token doctype-tag\">DOCTYPE</span> <span class=\"token name\">html</span><span class=\"token punctuation\">&gt;</span></span>\n<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>html</span> <span class=\"token attr-name\">lang</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>en<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">&gt;</span></span>\n<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>head</span><span class=\"token punctuation\">&gt;</span></span>\n  <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>meta</span> <span class=\"token attr-name\">charset</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>UTF-8<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">&gt;</span></span>\n  <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>meta</span> <span class=\"token attr-name\">http-equiv</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>X-UA-Compatible<span class=\"token punctuation\">\"</span></span> <span class=\"token attr-name\">content</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>IE=edge<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">&gt;</span></span>\n  <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>meta</span> <span class=\"token attr-name\">name</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>viewport<span class=\"token punctuation\">\"</span></span> <span class=\"token attr-name\">content</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>width=device-width, initial-scale=1.0<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">&gt;</span></span>\n  <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>title</span><span class=\"token punctuation\">&gt;</span></span>webpack-demo<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>title</span><span class=\"token punctuation\">&gt;</span></span>\n<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>head</span><span class=\"token punctuation\">&gt;</span></span>\n<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>body</span><span class=\"token punctuation\">&gt;</span></span>\n  <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>script</span> <span class=\"token attr-name\">src</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>./src/index.js<span class=\"token punctuation\">\"</span></span> <span class=\"token attr-name\">type</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>module<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">&gt;</span></span><span class=\"token script\"></span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>script</span><span class=\"token punctuation\">&gt;</span></span>\n<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>body</span><span class=\"token punctuation\">&gt;</span></span>\n<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>html</span><span class=\"token punctuation\">&gt;</span></span>\n</code></pre></div><p><strong>src/js/format.js</strong></p>\n<div class=\"language-javascript\" data-ext=\"js\" data-title=\"js\"><pre class=\"language-javascript\"><code><span class=\"token keyword\">const</span> <span class=\"token function-variable function\">priceFormat</span> <span class=\"token operator\">=</span> <span class=\"token keyword\">function</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">return</span> <span class=\"token string\">\"￥100.8\"</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token comment\">// CommonJS</span>\nmodule<span class=\"token punctuation\">.</span>exports <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span>\n  priceFormat<span class=\"token punctuation\">,</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n</code></pre></div><p><strong>src/js/math.js</strong></p>\n<div class=\"language-javascript\" data-ext=\"js\" data-title=\"js\"><pre class=\"language-javascript\"><code><span class=\"token comment\">// ES Module</span>\n<span class=\"token keyword\">export</span> <span class=\"token keyword\">function</span> <span class=\"token function\">sum</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">num1<span class=\"token punctuation\">,</span> num2</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">return</span> num1 <span class=\"token operator\">+</span> num2<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n</code></pre></div><p><strong>src/index.js</strong></p>\n<div class=\"language-javascript\" data-ext=\"js\" data-title=\"js\"><pre class=\"language-javascript\"><code><span class=\"token keyword\">import</span> <span class=\"token punctuation\">{</span> sum <span class=\"token punctuation\">}</span> <span class=\"token keyword\">from</span> <span class=\"token string\">\"./js/math.js\"</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">const</span> <span class=\"token punctuation\">{</span> priceFormat <span class=\"token punctuation\">}</span> <span class=\"token operator\">=</span> <span class=\"token function\">require</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"./js/format\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\nconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token function\">sum</span><span class=\"token punctuation\">(</span><span class=\"token number\">10</span><span class=\"token punctuation\">,</span> <span class=\"token number\">20</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\nconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token function\">priceFormat</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n</code></pre></div><p>现在用浏览器打开 index.html 文件，再打开控制台，毫无疑问地报错了：</p>\n<div class=\"language-javascript\" data-ext=\"js\" data-title=\"js\"><pre class=\"language-javascript\"><code>Uncaught ReferenceError<span class=\"token operator\">:</span> require is not defined\n</code></pre></div><p>因为浏览器不知道 node.js 的语法，因此报错。</p>\n<p>那么如何让项目中使用 CommonJS 规范呢，这时候就需要利用 webpack 打包工具。另外项目中还需要加载图片和 CSS 资源，如何让 CSS 也支持导入？这也需要用到 webpack。</p>\n<h2>开始</h2>\n<p>继续刚才的项目，我们在命令行中输入：</p>\n<div class=\"language-bash\" data-ext=\"sh\" data-title=\"sh\"><pre class=\"language-bash\"><code>npx webpack\n</code></pre></div><blockquote>\n<p>npx webpack 会使用局部安装的 webpack，而非全局安装的 webpack。</p>\n</blockquote>\n<p>此时项目会生成一个 dist 文件夹，下面会有一个 main.js 文件：</p>\n<p><strong>project</strong></p>\n<div class=\"language-diff\" data-ext=\"diff\" data-title=\"diff\"><pre class=\"language-diff\"><code><span class=\"token unchanged\"><span class=\"token prefix unchanged\"> </span><span class=\"token line\"> webpack-demo\n</span></span><span class=\"token inserted-sign inserted\"><span class=\"token prefix inserted\">+</span><span class=\"token line\"> |- dist\n</span><span class=\"token prefix inserted\">+</span><span class=\"token line\">   |- main.js\n</span></span><span class=\"token unchanged\"><span class=\"token prefix unchanged\"> </span><span class=\"token line\"> |- node_modules\n</span><span class=\"token prefix unchanged\"> </span><span class=\"token line\"> |- package-lock.json\n</span><span class=\"token prefix unchanged\"> </span><span class=\"token line\"> |- package.json\n</span><span class=\"token prefix unchanged\"> </span><span class=\"token line\"> |- index.html\n</span><span class=\"token prefix unchanged\"> </span><span class=\"token line\"> |- /src\n</span><span class=\"token prefix unchanged\"> </span><span class=\"token line\">   |- /js\n</span><span class=\"token prefix unchanged\"> </span><span class=\"token line\">     |- format.js\n</span><span class=\"token prefix unchanged\"> </span><span class=\"token line\">     |- math.js  \n</span><span class=\"token prefix unchanged\"> </span><span class=\"token line\">   |- index.js\n</span></span></code></pre></div><p>修改 index.html:</p>\n<div class=\"language-diff\" data-ext=\"diff\" data-title=\"diff\"><pre class=\"language-diff\"><code><span class=\"token deleted-arrow deleted\"><span class=\"token prefix deleted\">&lt;</span><span class=\"token line\">!DOCTYPE html&gt;\n</span><span class=\"token prefix deleted\">&lt;</span><span class=\"token line\">html lang=\"en\"&gt;\n</span><span class=\"token prefix deleted\">&lt;</span><span class=\"token line\">head&gt;\n</span></span><span class=\"token unchanged\"><span class=\"token prefix unchanged\"> </span><span class=\"token line\"> &lt;meta charset=\"UTF-8\"&gt;\n</span><span class=\"token prefix unchanged\"> </span><span class=\"token line\"> &lt;meta http-equiv=\"X-UA-Compatible\" content=\"IE=edge\"&gt;\n</span><span class=\"token prefix unchanged\"> </span><span class=\"token line\"> &lt;meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\"&gt;\n</span><span class=\"token prefix unchanged\"> </span><span class=\"token line\"> &lt;title&gt;webpack-demo&lt;/title&gt;\n</span></span><span class=\"token deleted-arrow deleted\"><span class=\"token prefix deleted\">&lt;</span><span class=\"token line\">/head&gt;\n</span><span class=\"token prefix deleted\">&lt;</span><span class=\"token line\">body&gt;\n</span></span><span class=\"token deleted-sign deleted\"><span class=\"token prefix deleted\">-</span><span class=\"token line\">  &lt;script src=\"./src/index.js\" type=\"module\"&gt;&lt;/script&gt;\n</span></span><span class=\"token inserted-sign inserted\"><span class=\"token prefix inserted\">+</span><span class=\"token line\">  &lt;script src=\"./dist/main.js\" type=\"module\"&gt;&lt;/script&gt;\n</span></span><span class=\"token deleted-arrow deleted\"><span class=\"token prefix deleted\">&lt;</span><span class=\"token line\">/body&gt;\n</span><span class=\"token prefix deleted\">&lt;</span><span class=\"token line\">/html&gt;\n</span></span></code></pre></div><p>重新加载 index.html 文件，可以看到控制台正确的输出了结果：</p>\n<div class=\"language-javascript\" data-ext=\"js\" data-title=\"js\"><pre class=\"language-javascript\"><code><span class=\"token number\">30</span>\n￥<span class=\"token number\">100.8</span>\n</code></pre></div><h2>使用配置文件</h2>\n<p>通常在项目中需要一个配置文件，以满足复杂的项目需求。</p>\n<p><strong>project</strong></p>\n<div class=\"language-diff\" data-ext=\"diff\" data-title=\"diff\"><pre class=\"language-diff\"><code><span class=\"token unchanged\"><span class=\"token prefix unchanged\"> </span><span class=\"token line\"> webpack-demo\n</span><span class=\"token prefix unchanged\"> </span><span class=\"token line\"> |- dist\n</span><span class=\"token prefix unchanged\"> </span><span class=\"token line\">   |- main.js\n</span><span class=\"token prefix unchanged\"> </span><span class=\"token line\"> |- node_modules\n</span><span class=\"token prefix unchanged\"> </span><span class=\"token line\"> |- package-lock.json\n</span><span class=\"token prefix unchanged\"> </span><span class=\"token line\"> |- package.json\n</span><span class=\"token prefix unchanged\"> </span><span class=\"token line\"> |- index.html\n</span><span class=\"token prefix unchanged\"> </span><span class=\"token line\"> |- /src\n</span><span class=\"token prefix unchanged\"> </span><span class=\"token line\">   |- /js\n</span><span class=\"token prefix unchanged\"> </span><span class=\"token line\">     |- format.js\n</span><span class=\"token prefix unchanged\"> </span><span class=\"token line\">     |- math.js  \n</span><span class=\"token prefix unchanged\"> </span><span class=\"token line\">   |- index.js\n</span></span><span class=\"token inserted-sign inserted\"><span class=\"token prefix inserted\">+</span><span class=\"token line\"> |- webpack.config.js\n</span></span></code></pre></div><p><strong>webpack.config.js</strong></p>\n<div class=\"language-javascript\" data-ext=\"js\" data-title=\"js\"><pre class=\"language-javascript\"><code><span class=\"token keyword\">const</span> path <span class=\"token operator\">=</span> <span class=\"token function\">require</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"path\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\nmodule<span class=\"token punctuation\">.</span>exports <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token literal-property property\">entry</span><span class=\"token operator\">:</span> <span class=\"token string\">\"./src/index.js\"</span><span class=\"token punctuation\">,</span>\n  <span class=\"token literal-property property\">output</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token literal-property property\">filename</span><span class=\"token operator\">:</span> <span class=\"token string\">\"main.js\"</span><span class=\"token punctuation\">,</span>\n    <span class=\"token literal-property property\">path</span><span class=\"token operator\">:</span> path<span class=\"token punctuation\">.</span><span class=\"token function\">resolve</span><span class=\"token punctuation\">(</span>__dirname<span class=\"token punctuation\">,</span> <span class=\"token string\">\"dist\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>  <span class=\"token comment\">// 需要使用绝对路径</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n</code></pre></div><p>接下来使用 npm scripts 来执行 webpack 命令。为此需要在 package.json 中添加：</p>\n<div class=\"language-diff\" data-ext=\"diff\" data-title=\"diff\"><pre class=\"language-diff\"><code><span class=\"token unchanged\"><span class=\"token prefix unchanged\"> </span><span class=\"token line\">{\n</span><span class=\"token prefix unchanged\"> </span><span class=\"token line\">  \"name\": \"12_webpack-demo\",\n</span><span class=\"token prefix unchanged\"> </span><span class=\"token line\">  \"version\": \"1.0.0\",\n</span><span class=\"token prefix unchanged\"> </span><span class=\"token line\">  \"description\": \"\",\n</span><span class=\"token prefix unchanged\"> </span><span class=\"token line\">  \"main\": \"index.js\",\n</span><span class=\"token prefix unchanged\"> </span><span class=\"token line\">  \"scripts\": {\n</span><span class=\"token prefix unchanged\"> </span><span class=\"token line\">    \"test\": \"echo \\\"Error: no test specified\\\" &amp;&amp; exit 1\",\n</span></span><span class=\"token inserted-sign inserted\"><span class=\"token prefix inserted\">+</span><span class=\"token line\">    \"build\": \"webpack\" \n</span></span><span class=\"token unchanged\"><span class=\"token prefix unchanged\"> </span><span class=\"token line\">  },\n</span><span class=\"token prefix unchanged\"> </span><span class=\"token line\">  \"keywords\": [],\n</span><span class=\"token prefix unchanged\"> </span><span class=\"token line\">  \"author\": \"\",\n</span><span class=\"token prefix unchanged\"> </span><span class=\"token line\">  \"license\": \"ISC\",\n</span><span class=\"token prefix unchanged\"> </span><span class=\"token line\">  \"devDependencies\": {\n</span><span class=\"token prefix unchanged\"> </span><span class=\"token line\">    \"webpack\": \"^5.72.0\",\n</span><span class=\"token prefix unchanged\"> </span><span class=\"token line\">    \"webpack-cli\": \"^4.9.2\"\n</span><span class=\"token prefix unchanged\"> </span><span class=\"token line\">  }\n</span><span class=\"token prefix unchanged\"> </span><span class=\"token line\">}\n</span></span></code></pre></div><p>之后可以使用 <code>npm run build</code> 来代替之前的 <code>npx webpack</code> 命令。注意：npm scripts 会优先使用局部安装的包。</p>\n<div class=\"language-bash\" data-ext=\"sh\" data-title=\"sh\"><pre class=\"language-bash\"><code><span class=\"token function\">npm</span> run build\n</code></pre></div><p>浏览器打开 index.html 后，仍能正常显示正确结果。</p>\n<h2>总结</h2>\n<p>从这个案例中，我们首先安装了 webpack，并使用它对 JS 两种模块风格的代码进行了打包。</p>\n<p>而打包又可以使用 <code>webpack</code> 命令使用全局安装的 webpack 进行打包，也可以使用 <code>npx webpack</code> 使用局部安装的 webpack 进行打包。</p>\n<p>最后又引入了配置文件，并使用 npm scripts 来执行 webpack 命令。</p>\n",
      "date_published": "2022-04-29T00:00:00.000Z",
      "date_modified": "2024-01-07T08:28:24.000Z",
      "authors": [],
      "tags": [
        "工程化"
      ]
    },
    {
      "title": "webpack 打包 CSS",
      "url": "https://dribble-njr.github.io/blog/blog/frontend/engineering/build-tool/webpack/002-webpack-css.html",
      "id": "https://dribble-njr.github.io/blog/blog/frontend/engineering/build-tool/webpack/002-webpack-css.html",
      "summary": " 项目地址：https://github.com/Stephen-wzw/webpack-demo 继续使用，不过在以下文件做点修改： index.html webpack.config.js bundle.js 表示为打包的文件，见名知意。 修改完配置文件后，下面在项目中添加一个 style.css 文件，并将其 import 到 index.js ...",
      "content_html": "<blockquote>\n<p>项目地址：<a href=\"https://github.com/Stephen-wzw/webpack-demo\" target=\"_blank\" rel=\"noopener noreferrer\">https://github.com/Stephen-wzw/webpack-demo</a></p>\n</blockquote>\n<p>继续使用，不过在以下文件做点修改：</p>\n<p><strong>index.html</strong></p>\n<div class=\"language-diff\" data-ext=\"diff\" data-title=\"diff\"><pre class=\"language-diff\"><code><span class=\"token unchanged\"><span class=\"token prefix unchanged\"> </span><span class=\"token line\">&lt;!DOCTYPE html&gt;\n</span><span class=\"token prefix unchanged\"> </span><span class=\"token line\">&lt;html lang=\"en\"&gt;\n</span><span class=\"token prefix unchanged\"> </span><span class=\"token line\">&lt;head&gt;\n</span><span class=\"token prefix unchanged\"> </span><span class=\"token line\">  &lt;meta charset=\"UTF-8\"&gt;\n</span><span class=\"token prefix unchanged\"> </span><span class=\"token line\">  &lt;meta http-equiv=\"X-UA-Compatible\" content=\"IE=edge\"&gt;\n</span><span class=\"token prefix unchanged\"> </span><span class=\"token line\">  &lt;meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\"&gt;\n</span></span><span class=\"token deleted-sign deleted\"><span class=\"token prefix deleted\">-</span><span class=\"token line\">  &lt;title&gt;webpack-demo&lt;/title&gt;\n</span></span><span class=\"token inserted-sign inserted\"><span class=\"token prefix inserted\">+</span><span class=\"token line\">  &lt;title&gt;webpack-css&lt;/title&gt;\n</span></span><span class=\"token unchanged\"><span class=\"token prefix unchanged\"> </span><span class=\"token line\">&lt;/head&gt;\n</span><span class=\"token prefix unchanged\"> </span><span class=\"token line\">&lt;body&gt;\n</span></span><span class=\"token deleted-sign deleted\"><span class=\"token prefix deleted\">-</span><span class=\"token line\">  &lt;script src=\"./dist/main.js\" type=\"module\"&gt;&lt;/script&gt;\n</span></span><span class=\"token inserted-sign inserted\"><span class=\"token prefix inserted\">+</span><span class=\"token line\">  &lt;script src=\"./dist/bundle.js\" type=\"module\"&gt;&lt;/script&gt;\n</span></span><span class=\"token unchanged\"><span class=\"token prefix unchanged\"> </span><span class=\"token line\">&lt;/body&gt;\n</span><span class=\"token prefix unchanged\"> </span><span class=\"token line\">&lt;/html&gt;\n</span></span></code></pre></div><p><strong>webpack.config.js</strong></p>\n<div class=\"language-diff\" data-ext=\"diff\" data-title=\"diff\"><pre class=\"language-diff\"><code><span class=\"token unchanged\"><span class=\"token prefix unchanged\"> </span><span class=\"token line\">const path = require(\"path\");\n</span><span class=\"token prefix unchanged\"> </span><span class=\"token line\">\n</span><span class=\"token prefix unchanged\"> </span><span class=\"token line\">module.exports = {\n</span><span class=\"token prefix unchanged\"> </span><span class=\"token line\">  entry: \"./src/index.js\",\n</span><span class=\"token prefix unchanged\"> </span><span class=\"token line\">  output: {\n</span></span><span class=\"token deleted-sign deleted\"><span class=\"token prefix deleted\">-</span><span class=\"token line\">    filename: \"main.js\",\n</span></span><span class=\"token inserted-sign inserted\"><span class=\"token prefix inserted\">+</span><span class=\"token line\">    filename: \"bundle.js\",\n</span></span><span class=\"token unchanged\"><span class=\"token prefix unchanged\"> </span><span class=\"token line\">    path: path.resolve(__dirname, \"dist\"),  // 需要使用绝对路径\n</span><span class=\"token prefix unchanged\"> </span><span class=\"token line\">  },\n</span><span class=\"token prefix unchanged\"> </span><span class=\"token line\">};\n</span></span></code></pre></div><blockquote>\n<p>bundle.js 表示为打包的文件，见名知意。</p>\n</blockquote>\n<p>修改完配置文件后，下面在项目中添加一个 <code>style.css</code> 文件，并将其 <code>import</code> 到 <code>index.js</code> 中：</p>\n<p><strong>project</strong></p>\n<div class=\"language-diff\" data-ext=\"diff\" data-title=\"diff\"><pre class=\"language-diff\"><code><span class=\"token unchanged\"><span class=\"token prefix unchanged\"> </span><span class=\"token line\"> webpack-demo\n</span><span class=\"token prefix unchanged\"> </span><span class=\"token line\"> |- node_modules\n</span><span class=\"token prefix unchanged\"> </span><span class=\"token line\"> |- package-lock.json\n</span><span class=\"token prefix unchanged\"> </span><span class=\"token line\"> |- package.json\n</span><span class=\"token prefix unchanged\"> </span><span class=\"token line\"> |- index.html\n</span><span class=\"token prefix unchanged\"> </span><span class=\"token line\"> |- /src\n</span></span><span class=\"token inserted-sign inserted\"><span class=\"token prefix inserted\">+</span><span class=\"token line\">   |- /css\n</span><span class=\"token prefix inserted\">+</span><span class=\"token line\">     |- style.css\n</span></span><span class=\"token unchanged\"><span class=\"token prefix unchanged\"> </span><span class=\"token line\">   |- /js\n</span><span class=\"token prefix unchanged\"> </span><span class=\"token line\">     |- format.js\n</span><span class=\"token prefix unchanged\"> </span><span class=\"token line\">     |- math.js  \n</span><span class=\"token prefix unchanged\"> </span><span class=\"token line\">   |- index.js\n</span></span></code></pre></div><p><strong>style.css</strong></p>\n<div class=\"language-css\" data-ext=\"css\" data-title=\"css\"><pre class=\"language-css\"><code><span class=\"token selector\">.title</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token property\">color</span><span class=\"token punctuation\">:</span> #000<span class=\"token punctuation\">;</span>\n  <span class=\"token property\">font-weight</span><span class=\"token punctuation\">:</span> 700<span class=\"token punctuation\">;</span>\n  <span class=\"token property\">font-size</span><span class=\"token punctuation\">:</span> 30px<span class=\"token punctuation\">;</span>\n\n  <span class=\"token property\">user-select</span><span class=\"token punctuation\">:</span> none<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n</code></pre></div><p><strong>index.js</strong></p>\n<div class=\"language-diff\" data-ext=\"diff\" data-title=\"diff\"><pre class=\"language-diff\"><code><span class=\"token unchanged\"><span class=\"token prefix unchanged\"> </span><span class=\"token line\">import { sum } from \"./js/math.js\";\n</span><span class=\"token prefix unchanged\"> </span><span class=\"token line\">const { priceFormat } = require(\"./js/format\");\n</span></span><span class=\"token inserted-sign inserted\"><span class=\"token prefix inserted\">+</span><span class=\"token line\">import \"../css/style.css\";\n</span></span><span class=\"token unchanged\"><span class=\"token prefix unchanged\"> </span><span class=\"token line\">\n</span><span class=\"token prefix unchanged\"> </span><span class=\"token line\">console.log(sum(10, 20));\n</span><span class=\"token prefix unchanged\"> </span><span class=\"token line\">console.log(priceFormat());\n</span><span class=\"token prefix unchanged\"> </span><span class=\"token line\">\n</span></span><span class=\"token inserted-sign inserted\"><span class=\"token prefix inserted\">+</span><span class=\"token line\">const div = document.createElement(\"div\");\n</span><span class=\"token prefix inserted\">+</span><span class=\"token line\">div.className = \"title\";\n</span><span class=\"token prefix inserted\">+</span><span class=\"token line\">div.innerHTML = \"webpack-css\";\n</span><span class=\"token prefix inserted\">+</span><span class=\"token line\">document.body.appendChild(div);\n</span></span></code></pre></div><h2><code>css-loader</code></h2>\n<p>现在执行 <code>npm run build</code>，会看到报错：</p>\n<div class=\"language-bash\" data-ext=\"sh\" data-title=\"sh\"><pre class=\"language-bash\"><code>ERROR <span class=\"token keyword\">in</span> ./src/css/style.css <span class=\"token number\">1</span>:0\nModule parse failed: Unexpected token <span class=\"token punctuation\">(</span><span class=\"token number\">1</span>:0<span class=\"token punctuation\">)</span>\nYou may need an appropriate loader to handle this <span class=\"token function\">file</span> type, currently no loaders are configured to process this file. See https://webpack.js.org/concepts<span class=\"token comment\">#loaders</span>\n<span class=\"token operator\">&gt;</span> .title <span class=\"token punctuation\">{</span>\n<span class=\"token operator\">|</span>   color: <span class=\"token comment\">#000;</span>\n<span class=\"token operator\">|</span>   font-weight: <span class=\"token number\">700</span><span class=\"token punctuation\">;</span>\n @ ./src/index.js <span class=\"token number\">3</span>:0-25\n</code></pre></div><p>从报错信息中可以知道，需要用一个 loader 处理 css 文件。那么什么是 loader 呢？</p>\n<ul>\n<li>loader 用于对模块的源代码进行转换；</li>\n<li>loader 可以使你在 import 或 \"load(加载)\" 模块时预处理文件；</li>\n<li>loader 甚至允许你直接在 JavaScript 模块中 import CSS 文件！</li>\n</ul>\n<p>而为了能在项目中正常使用 css，需要用到 <code>css-loader</code>。</p>\n<div class=\"language-bash\" data-ext=\"sh\" data-title=\"sh\"><pre class=\"language-bash\"><code><span class=\"token function\">npm</span> <span class=\"token function\">install</span> css-loader <span class=\"token parameter variable\">-D</span>\n</code></pre></div><p>接下来需要在 <code>webpack.config.js</code> 中配置 <code>css-loader</code> 的使用：</p>\n<div class=\"language-diff\" data-ext=\"diff\" data-title=\"diff\"><pre class=\"language-diff\"><code><span class=\"token unchanged\"><span class=\"token prefix unchanged\"> </span><span class=\"token line\">const path = require('path');\n</span></span>\n<span class=\"token unchanged\"><span class=\"token prefix unchanged\"> </span><span class=\"token line\">module.exports = {\n</span><span class=\"token prefix unchanged\"> </span><span class=\"token line\">  entry: './src/index.js',\n</span><span class=\"token prefix unchanged\"> </span><span class=\"token line\">  output: {\n</span><span class=\"token prefix unchanged\"> </span><span class=\"token line\">    filename: 'bundle.js',\n</span><span class=\"token prefix unchanged\"> </span><span class=\"token line\">    path: path.resolve(__dirname, 'dist'),\n</span><span class=\"token prefix unchanged\"> </span><span class=\"token line\">  },\n</span></span><span class=\"token inserted-sign inserted\"><span class=\"token prefix inserted\">+</span><span class=\"token line\"> module: {\n</span><span class=\"token prefix inserted\">+</span><span class=\"token line\">   rules: [\n</span><span class=\"token prefix inserted\">+</span><span class=\"token line\">     {\n</span><span class=\"token prefix inserted\">+</span><span class=\"token line\">       test: /\\.css$/i,\n</span><span class=\"token prefix inserted\">+</span><span class=\"token line\">       use: ['css-loader'],\n</span><span class=\"token prefix inserted\">+</span><span class=\"token line\">     },\n</span><span class=\"token prefix inserted\">+</span><span class=\"token line\">   ],\n</span><span class=\"token prefix inserted\">+</span><span class=\"token line\"> },\n</span></span><span class=\"token unchanged\"><span class=\"token prefix unchanged\"> </span><span class=\"token line\">};\n</span></span></code></pre></div><p>此时再次执行 <code>npm run build</code>，虽然不报错了，但是样式并没有应用成功，这是为什么呢？难道是 css-loader 不起作用吗？</p>\n<p>这是因为 <code>css-loader</code> 只能将 .css 文件导入到 JavaScript 文件中，也就是它只负责<strong>解析</strong>，不负责<strong>将解析后的 css 插入到页面中</strong>。</p>\n<p>如果希望完成这个插入操作，需要用到 <code>style-loader</code>。</p>\n<h2><code>style-loader</code></h2>\n<div class=\"language-bash\" data-ext=\"sh\" data-title=\"sh\"><pre class=\"language-bash\"><code><span class=\"token function\">npm</span> <span class=\"token function\">install</span> style-loader <span class=\"token parameter variable\">-D</span>\n</code></pre></div><p>同时在 <code>webpack.config.js</code> 中配置 <code>style-loader</code> 的使用：</p>\n<div class=\"language-diff\" data-ext=\"diff\" data-title=\"diff\"><pre class=\"language-diff\"><code><span class=\"token unchanged\"><span class=\"token prefix unchanged\"> </span><span class=\"token line\">const path = require(\"path\");\n</span><span class=\"token prefix unchanged\"> </span><span class=\"token line\">\n</span><span class=\"token prefix unchanged\"> </span><span class=\"token line\">module.exports = {\n</span><span class=\"token prefix unchanged\"> </span><span class=\"token line\">  entry: \"./src/index.js\",\n</span><span class=\"token prefix unchanged\"> </span><span class=\"token line\">  output: {\n</span><span class=\"token prefix unchanged\"> </span><span class=\"token line\">    filename: \"bundle.js\",\n</span><span class=\"token prefix unchanged\"> </span><span class=\"token line\">    path: path.resolve(__dirname, \"dist\"),  // 需要使用绝对路径\n</span><span class=\"token prefix unchanged\"> </span><span class=\"token line\">  },\n</span><span class=\"token prefix unchanged\"> </span><span class=\"token line\">  module: {\n</span><span class=\"token prefix unchanged\"> </span><span class=\"token line\">    rules: [\n</span><span class=\"token prefix unchanged\"> </span><span class=\"token line\">      {\n</span><span class=\"token prefix unchanged\"> </span><span class=\"token line\">        test: /\\.css$/i,\n</span></span><span class=\"token deleted-sign deleted\"><span class=\"token prefix deleted\">-</span><span class=\"token line\">        use: ['css-loader'],\n</span></span><span class=\"token inserted-sign inserted\"><span class=\"token prefix inserted\">+</span><span class=\"token line\">        use: ['style-loader', 'css-loader'],\n</span></span><span class=\"token unchanged\"><span class=\"token prefix unchanged\"> </span><span class=\"token line\">      },\n</span><span class=\"token prefix unchanged\"> </span><span class=\"token line\">    ],\n</span><span class=\"token prefix unchanged\"> </span><span class=\"token line\">  },\n</span><span class=\"token prefix unchanged\"> </span><span class=\"token line\">};\n</span></span></code></pre></div><p><code>style-loader</code> 需要写在 <code>css-loader</code> 之前，因为 loader 的执行顺序是从后往前的。</p>\n<p>现在重新执行 <code>npm run build</code>，可以发现样式已经生效了。</p>\n<h2>less-loader</h2>\n<p>在实际开发中，我们可能会使用 less、sass 等预处理器来编写 css 样式，那么如何让项目中支持这些预处理器呢？比如说支持 less。</p>\n<p>现在在项目中新增 <code>title.less</code> 文件：</p>\n<p><strong>project</strong></p>\n<div class=\"language-diff\" data-ext=\"diff\" data-title=\"diff\"><pre class=\"language-diff\"><code><span class=\"token unchanged\"><span class=\"token prefix unchanged\"> </span><span class=\"token line\"> webpack-demo\n</span><span class=\"token prefix unchanged\"> </span><span class=\"token line\"> |- node_modules\n</span><span class=\"token prefix unchanged\"> </span><span class=\"token line\"> |- package-lock.json\n</span><span class=\"token prefix unchanged\"> </span><span class=\"token line\"> |- package.json\n</span><span class=\"token prefix unchanged\"> </span><span class=\"token line\"> |- index.html\n</span><span class=\"token prefix unchanged\"> </span><span class=\"token line\"> |- /src\n</span><span class=\"token prefix unchanged\"> </span><span class=\"token line\">   |- /css\n</span><span class=\"token prefix unchanged\"> </span><span class=\"token line\">     |- style.css\n</span></span><span class=\"token inserted-sign inserted\"><span class=\"token prefix inserted\">+</span><span class=\"token line\">     |- title.less\n</span></span><span class=\"token unchanged\"><span class=\"token prefix unchanged\"> </span><span class=\"token line\">   |- /js\n</span><span class=\"token prefix unchanged\"> </span><span class=\"token line\">     |- format.js\n</span><span class=\"token prefix unchanged\"> </span><span class=\"token line\">     |- math.js  \n</span><span class=\"token prefix unchanged\"> </span><span class=\"token line\">   |- index.js\n</span></span></code></pre></div><p><strong>title.less</strong></p>\n<div class=\"language-less\" data-ext=\"less\" data-title=\"less\"><pre class=\"language-less\"><code><span class=\"token variable\">@bgColor<span class=\"token punctuation\">:</span></span> blue<span class=\"token punctuation\">;</span>\n<span class=\"token variable\">@textDecoration<span class=\"token punctuation\">:</span></span> underline<span class=\"token punctuation\">;</span>\n\n<span class=\"token selector\">.title</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token property\">background-color</span><span class=\"token punctuation\">:</span> <span class=\"token variable\">@bgColor</span><span class=\"token punctuation\">;</span>\n  <span class=\"token property\">text-decoration</span><span class=\"token punctuation\">:</span> <span class=\"token variable\">@textDecoration</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n</code></pre></div><p><strong>index.js</strong></p>\n<div class=\"language-diff\" data-ext=\"diff\" data-title=\"diff\"><pre class=\"language-diff\"><code><span class=\"token unchanged\"><span class=\"token prefix unchanged\"> </span><span class=\"token line\">import { sum } from \"./js/math.js\";\n</span><span class=\"token prefix unchanged\"> </span><span class=\"token line\">const { priceFormat } = require(\"./js/format\");\n</span><span class=\"token prefix unchanged\"> </span><span class=\"token line\">import \"./css/style.css\";\n</span></span><span class=\"token inserted-sign inserted\"><span class=\"token prefix inserted\">+</span><span class=\"token line\">import \"./css/title.less\";\n</span></span><span class=\"token unchanged\"><span class=\"token prefix unchanged\"> </span><span class=\"token line\">\n</span><span class=\"token prefix unchanged\"> </span><span class=\"token line\">console.log(sum(10, 20));\n</span><span class=\"token prefix unchanged\"> </span><span class=\"token line\">console.log(priceFormat());\n</span><span class=\"token prefix unchanged\"> </span><span class=\"token line\">\n</span><span class=\"token prefix unchanged\"> </span><span class=\"token line\">const div = document.createElement(\"div\");\n</span><span class=\"token prefix unchanged\"> </span><span class=\"token line\">div.className = \"title\";\n</span><span class=\"token prefix unchanged\"> </span><span class=\"token line\">div.innerHTML = \"webpack-css\";\n</span><span class=\"token prefix unchanged\"> </span><span class=\"token line\">\n</span><span class=\"token prefix unchanged\"> </span><span class=\"token line\">document.body.appendChild(div);\n</span></span></code></pre></div><p>现在我们需要安装 <code>less-loader</code> 来处理 .less 文件：</p>\n<div class=\"language-bash\" data-ext=\"sh\" data-title=\"sh\"><pre class=\"language-bash\"><code><span class=\"token function\">npm</span> <span class=\"token function\">install</span> less-loader <span class=\"token parameter variable\">-D</span>\n</code></pre></div><blockquote>\n<p><code>less-loader</code> 会自动使用 less 工具将 .less 文件转换为 .css 文件。</p>\n</blockquote>\n<p>同时在 <code>webpack.config.js</code> 中配置 <code>less-loader</code> 的使用：</p>\n<div class=\"language-diff\" data-ext=\"diff\" data-title=\"diff\"><pre class=\"language-diff\"><code><span class=\"token unchanged\"><span class=\"token prefix unchanged\"> </span><span class=\"token line\">const path = require(\"path\");\n</span><span class=\"token prefix unchanged\"> </span><span class=\"token line\">\n</span><span class=\"token prefix unchanged\"> </span><span class=\"token line\">module.exports = {\n</span><span class=\"token prefix unchanged\"> </span><span class=\"token line\">  entry: \"./src/index.js\",\n</span><span class=\"token prefix unchanged\"> </span><span class=\"token line\">  output: {\n</span><span class=\"token prefix unchanged\"> </span><span class=\"token line\">    filename: \"bundle.js\",\n</span><span class=\"token prefix unchanged\"> </span><span class=\"token line\">    path: path.resolve(__dirname, \"dist\"),  // 需要使用绝对路径\n</span><span class=\"token prefix unchanged\"> </span><span class=\"token line\">  },\n</span><span class=\"token prefix unchanged\"> </span><span class=\"token line\">  module: {\n</span><span class=\"token prefix unchanged\"> </span><span class=\"token line\">    rules: [\n</span><span class=\"token prefix unchanged\"> </span><span class=\"token line\">      {\n</span></span><span class=\"token deleted-sign deleted\"><span class=\"token prefix deleted\">-</span><span class=\"token line\">        test: /\\.css$/i,\n</span></span><span class=\"token inserted-sign inserted\"><span class=\"token prefix inserted\">+</span><span class=\"token line\">        test: /\\.(less|css)$/,\n</span></span><span class=\"token deleted-sign deleted\"><span class=\"token prefix deleted\">-</span><span class=\"token line\">        use: ['style-loader', 'css-loader'],\n</span></span><span class=\"token inserted-sign inserted\"><span class=\"token prefix inserted\">+</span><span class=\"token line\">        use: ['style-loader', 'css-loader', 'less-loader'],\n</span></span><span class=\"token unchanged\"><span class=\"token prefix unchanged\"> </span><span class=\"token line\">      },\n</span><span class=\"token prefix unchanged\"> </span><span class=\"token line\">    ],\n</span><span class=\"token prefix unchanged\"> </span><span class=\"token line\">  },\n</span><span class=\"token prefix unchanged\"> </span><span class=\"token line\">};\n</span></span></code></pre></div><p>现在重新执行 <code>npm run build</code>，可以发现 less 样式已经生效了。</p>\n<h2><code>post-css-loader</code></h2>\n<p>开发中除了使用预处理器外，还可能需要使用 CSS 后处理器 <code>postcss</code>。他能帮我们进行 CSS 的转换和适配，比如自动添加浏览器前缀、CSS 样式的重置。</p>\n<p>首先安装 <code>postcss</code> 和 <code>postcss-loader</code>：</p>\n<div class=\"language-bash\" data-ext=\"sh\" data-title=\"sh\"><pre class=\"language-bash\"><code><span class=\"token function\">npm</span> <span class=\"token function\">install</span> postcss postcss-loader <span class=\"token parameter variable\">-D</span>\n</code></pre></div><p>还需要安装自动添加前缀的插件 <code>autoprefixer</code>：</p>\n<div class=\"language-bash\" data-ext=\"sh\" data-title=\"sh\"><pre class=\"language-bash\"><code><span class=\"token function\">npm</span> <span class=\"token function\">install</span> autoprefixer <span class=\"token parameter variable\">-D</span>\n</code></pre></div><p>此时配置 <code>webpack.config.js</code>：</p>\n<p><strong>webpack.config.js</strong></p>\n<div class=\"language-diff\" data-ext=\"diff\" data-title=\"diff\"><pre class=\"language-diff\"><code><span class=\"token unchanged\"><span class=\"token prefix unchanged\"> </span><span class=\"token line\"> const path = require(\"path\");\n</span><span class=\"token prefix unchanged\"> </span><span class=\"token line\"> \n</span><span class=\"token prefix unchanged\"> </span><span class=\"token line\"> module.exports = {\n</span><span class=\"token prefix unchanged\"> </span><span class=\"token line\">   entry: \"./src/index.js\",\n</span><span class=\"token prefix unchanged\"> </span><span class=\"token line\">   output: {\n</span><span class=\"token prefix unchanged\"> </span><span class=\"token line\">     filename: \"bundle.js\",\n</span><span class=\"token prefix unchanged\"> </span><span class=\"token line\">     path: path.resolve(__dirname, \"dist\"),  // 需要使用绝对路径\n</span><span class=\"token prefix unchanged\"> </span><span class=\"token line\">   },\n</span><span class=\"token prefix unchanged\"> </span><span class=\"token line\">   module: {\n</span><span class=\"token prefix unchanged\"> </span><span class=\"token line\">     rules: [\n</span><span class=\"token prefix unchanged\"> </span><span class=\"token line\">       {\n</span><span class=\"token prefix unchanged\"> </span><span class=\"token line\">         test: /\\.(less|css)$/,\n</span><span class=\"token prefix unchanged\"> </span><span class=\"token line\">         use: [\n</span><span class=\"token prefix unchanged\"> </span><span class=\"token line\">           'style-loader', \n</span><span class=\"token prefix unchanged\"> </span><span class=\"token line\">           'css-loader', \n</span></span><span class=\"token inserted-sign inserted\"><span class=\"token prefix inserted\">+</span><span class=\"token line\">           {\n</span><span class=\"token prefix inserted\">+</span><span class=\"token line\">             loader: 'postcss-loader',\n</span><span class=\"token prefix inserted\">+</span><span class=\"token line\">             options: {\n</span><span class=\"token prefix inserted\">+</span><span class=\"token line\">               postcssOptions: {\n</span><span class=\"token prefix inserted\">+</span><span class=\"token line\">                 plugins: [\n</span><span class=\"token prefix inserted\">+</span><span class=\"token line\">                   require(\"autoprefixer\")\n</span><span class=\"token prefix inserted\">+</span><span class=\"token line\">                 ]\n</span><span class=\"token prefix inserted\">+</span><span class=\"token line\">               }\n</span><span class=\"token prefix inserted\">+</span><span class=\"token line\">             }\n</span><span class=\"token prefix inserted\">+</span><span class=\"token line\">           },\n</span></span><span class=\"token unchanged\"><span class=\"token prefix unchanged\"> </span><span class=\"token line\">          'less-loader'],\n</span><span class=\"token prefix unchanged\"> </span><span class=\"token line\">       },\n</span><span class=\"token prefix unchanged\"> </span><span class=\"token line\">     ],\n</span><span class=\"token prefix unchanged\"> </span><span class=\"token line\">   },\n</span><span class=\"token prefix unchanged\"> </span><span class=\"token line\"> };\n</span></span></code></pre></div><p>执行 <code>npm run build</code> 打包，在浏览器中查看样式，即可看到 <code>postcss</code> 为我们自动添加了前缀：</p>\n<div class=\"language-css\" data-ext=\"css\" data-title=\"css\"><pre class=\"language-css\"><code><span class=\"token selector\">.title</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token property\">color</span><span class=\"token punctuation\">:</span> #000<span class=\"token punctuation\">;</span>\n  <span class=\"token property\">font-weight</span><span class=\"token punctuation\">:</span> 700<span class=\"token punctuation\">;</span>\n  <span class=\"token property\">font-size</span><span class=\"token punctuation\">:</span> 30px<span class=\"token punctuation\">;</span>\n  <span class=\"token property\">-webkit-user-select</span><span class=\"token punctuation\">:</span> none<span class=\"token punctuation\">;</span>\n     <span class=\"token property\">-moz-user-select</span><span class=\"token punctuation\">:</span> none<span class=\"token punctuation\">;</span>\n      <span class=\"token property\">-ms-user-select</span><span class=\"token punctuation\">:</span> none<span class=\"token punctuation\">;</span>\n          <span class=\"token property\">user-select</span><span class=\"token punctuation\">:</span> none<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n</code></pre></div><h3><code>postcss.config.js</code></h3>\n<p>以上的这些配置信息太长了，我们可以将它们单独在一个文件中进行配置，在项目根目录下新建 <code>postcss.config.js</code>。</p>\n<p><strong>postcss.config.js</strong></p>\n<div class=\"language-javascript\" data-ext=\"js\" data-title=\"js\"><pre class=\"language-javascript\"><code>module<span class=\"token punctuation\">.</span>exports <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token literal-property property\">plugins</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">[</span>\n    <span class=\"token function\">require</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"autoprefixer\"</span><span class=\"token punctuation\">)</span>\n  <span class=\"token punctuation\">]</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n</code></pre></div><p><strong>webpack.config.js</strong></p>\n<div class=\"language-diff\" data-ext=\"diff\" data-title=\"diff\"><pre class=\"language-diff\"><code>const path = require(\"path\");\n\nmodule.exports = {\n<span class=\"token unchanged\"><span class=\"token prefix unchanged\"> </span><span class=\"token line\"> entry: \"./src/index.js\",\n</span><span class=\"token prefix unchanged\"> </span><span class=\"token line\"> output: {\n</span><span class=\"token prefix unchanged\"> </span><span class=\"token line\">   filename: \"bundle.js\",\n</span><span class=\"token prefix unchanged\"> </span><span class=\"token line\">   path: path.resolve(__dirname, \"dist\"), // 需要使用绝对路径\n</span><span class=\"token prefix unchanged\"> </span><span class=\"token line\"> },\n</span><span class=\"token prefix unchanged\"> </span><span class=\"token line\"> module: {\n</span><span class=\"token prefix unchanged\"> </span><span class=\"token line\">   rules: [\n</span><span class=\"token prefix unchanged\"> </span><span class=\"token line\">     {\n</span><span class=\"token prefix unchanged\"> </span><span class=\"token line\">       test: /\\.(less|css)$/,\n</span></span><span class=\"token inserted-sign inserted\"><span class=\"token prefix inserted\">+</span><span class=\"token line\">       use: [\"style-loader\", \"css-loader\", \"postcss-loader\", \"less-loader\"],\n</span></span><span class=\"token unchanged\"><span class=\"token prefix unchanged\"> </span><span class=\"token line\">     },\n</span><span class=\"token prefix unchanged\"> </span><span class=\"token line\">   ],\n</span><span class=\"token prefix unchanged\"> </span><span class=\"token line\"> },\n</span></span>};\n</code></pre></div><p>重新打包后打开浏览器样式依然生效。</p>\n<h3><code>postcss-preset-env</code></h3>\n<p>事实上，在配置 <code>postcss-loader</code> 的时候，配置插件并不需要使用 <code>autoprefixer</code>。可以使用另一个插件 <code>postscc-preset-env</code>，它可以帮助我们将一些现代的 CSS 特性，转成大多数浏览器认识的 CSS，并且会根据目标浏览器或者运行时环境添加所需的 ployfill。</p>\n<blockquote>\n<p>ployfill 用来为旧浏览器提供它没有原生支持的较新的功能。比如说 polyfill 可以让 IE7 使用 Silverlight 插件来模拟 HTML Canvas 元素的功能，或模拟 CSS 实现 rem 单位的支持，或 text-shadow，或其他任何你想要的功能。</p>\n</blockquote>\n<p>这个插件也会自动帮我们添加 autoprefixer。</p>\n<div class=\"language-bash\" data-ext=\"sh\" data-title=\"sh\"><pre class=\"language-bash\"><code><span class=\"token function\">npm</span> <span class=\"token function\">install</span> postcss-preset-env <span class=\"token parameter variable\">-D</span>\n</code></pre></div><p>然后修改下 <code>postcss.config.js</code> 文件。</p>\n<p><strong>postcss.config.js</strong></p>\n<div class=\"language-diff\" data-ext=\"diff\" data-title=\"diff\"><pre class=\"language-diff\"><code><span class=\"token unchanged\"><span class=\"token prefix unchanged\"> </span><span class=\"token line\">module.exports = {\n</span><span class=\"token prefix unchanged\"> </span><span class=\"token line\">  plugins: [\n</span></span><span class=\"token deleted-sign deleted\"><span class=\"token prefix deleted\">-</span><span class=\"token line\">    require(\"autoprefixer\")\n</span></span><span class=\"token inserted-sign inserted\"><span class=\"token prefix inserted\">+</span><span class=\"token line\">    // 在使用某些插件时，也可以直接传入字符串\n</span><span class=\"token prefix inserted\">+</span><span class=\"token line\">    \"postcss-preset-env\"\n</span></span><span class=\"token unchanged\"><span class=\"token prefix unchanged\"> </span><span class=\"token line\">  ]\n</span><span class=\"token prefix unchanged\"> </span><span class=\"token line\">};\n</span></span></code></pre></div><p>重新打包后打开浏览器样式依然生效。</p>\n<h3><code>postcss-px-to-viewport</code></h3>\n<p>这个插件可以帮助我们将 px 单位转换为视口单位，这在进行移动端适配时尤为重要。详细使用见 。</p>\n<h2>总结</h2>\n<p>在这个案例里，我们分别使用了 <code>style-loader</code> 加载 css 样式， <code>css-loader</code> 处理 .css 文件， <code>less-loader</code> 处理 .less 文件，以及使用 <code>postcss</code> 给样式自动添加前缀。</p>\n<p>loader 的执行顺序是从后往前的，因此需要配置规则中写成 <code>use: [\"style-loader\", \"css-loader\", \"postcss-loader\", \"less-loader\"]</code>。</p>\n",
      "date_published": "2022-05-06T00:00:00.000Z",
      "date_modified": "2024-01-07T08:28:24.000Z",
      "authors": [],
      "tags": [
        "工程化"
      ]
    },
    {
      "title": "webpack 打包其他资源",
      "url": "https://dribble-njr.github.io/blog/blog/frontend/engineering/build-tool/webpack/003-webpack-assets.html",
      "id": "https://dribble-njr.github.io/blog/blog/frontend/engineering/build-tool/webpack/003-webpack-assets.html",
      "summary": " 项目地址：https://github.com/Stephen-wzw/webpack-demo 继续使用。 打包图片资源 在项目中引入图片文件夹，并添加两张图片： project 下面通过两种方式引入图片资源： img 元素，设置 src 属性； 其他元素，css 设置 background-image 属性。 index.js 为方式二修改 st...",
      "content_html": "<blockquote>\n<p>项目地址：<a href=\"https://github.com/Stephen-wzw/webpack-demo\" target=\"_blank\" rel=\"noopener noreferrer\">https://github.com/Stephen-wzw/webpack-demo</a></p>\n</blockquote>\n<p>继续使用。</p>\n<h2>打包图片资源</h2>\n<p>在项目中引入图片文件夹，并添加两张图片：</p>\n<p><strong>project</strong></p>\n<div class=\"language-diff\" data-ext=\"diff\" data-title=\"diff\"><pre class=\"language-diff\"><code><span class=\"token unchanged\"><span class=\"token prefix unchanged\"> </span><span class=\"token line\"> webpack-demo\n</span><span class=\"token prefix unchanged\"> </span><span class=\"token line\"> |- node_modules\n</span><span class=\"token prefix unchanged\"> </span><span class=\"token line\"> |- package-lock.json\n</span><span class=\"token prefix unchanged\"> </span><span class=\"token line\"> |- package.json\n</span><span class=\"token prefix unchanged\"> </span><span class=\"token line\"> |- index.html\n</span><span class=\"token prefix unchanged\"> </span><span class=\"token line\"> |- /src\n</span><span class=\"token prefix unchanged\"> </span><span class=\"token line\">   |- /css\n</span><span class=\"token prefix unchanged\"> </span><span class=\"token line\">     |- style.css\n</span><span class=\"token prefix unchanged\"> </span><span class=\"token line\">     |- title.less\n</span></span><span class=\"token inserted-sign inserted\"><span class=\"token prefix inserted\">+</span><span class=\"token line\">   |- /img\n</span><span class=\"token prefix inserted\">+</span><span class=\"token line\">     |- avatar.png\n</span><span class=\"token prefix inserted\">+</span><span class=\"token line\">     |- wallpaper.png\n</span></span><span class=\"token unchanged\"><span class=\"token prefix unchanged\"> </span><span class=\"token line\">   |- /js\n</span><span class=\"token prefix unchanged\"> </span><span class=\"token line\">     |- format.js\n</span><span class=\"token prefix unchanged\"> </span><span class=\"token line\">     |- math.js  \n</span><span class=\"token prefix unchanged\"> </span><span class=\"token line\">   |- index.js\n</span></span></code></pre></div><p>下面通过两种方式引入图片资源：</p>\n<ul>\n<li><code>img</code> 元素，设置 <code>src</code> 属性；</li>\n<li>其他元素，css 设置 <code>background-image</code> 属性。</li>\n</ul>\n<p><strong>index.js</strong></p>\n<div class=\"language-diff\" data-ext=\"diff\" data-title=\"diff\"><pre class=\"language-diff\"><code><span class=\"token unchanged\"><span class=\"token prefix unchanged\"> </span><span class=\"token line\"> import { sum } from \"./js/math.js\";\n</span><span class=\"token prefix unchanged\"> </span><span class=\"token line\"> const { priceFormat } = require(\"./js/format\");\n</span><span class=\"token prefix unchanged\"> </span><span class=\"token line\"> import \"./css/style.css\";\n</span><span class=\"token prefix unchanged\"> </span><span class=\"token line\"> import \"./css/title.less\";\n</span></span>\n<span class=\"token inserted-sign inserted\"><span class=\"token prefix inserted\">+</span><span class=\"token line\"> // 导入图片\n</span><span class=\"token prefix inserted\">+</span><span class=\"token line\"> import avatar from \"./img/avatar.png\";\n</span></span>\n<span class=\"token unchanged\"><span class=\"token prefix unchanged\"> </span><span class=\"token line\"> console.log(sum(10, 20));\n</span><span class=\"token prefix unchanged\"> </span><span class=\"token line\"> console.log(priceFormat());\n</span></span>\n<span class=\"token unchanged\"><span class=\"token prefix unchanged\"> </span><span class=\"token line\"> const div = document.createElement(\"div\");\n</span><span class=\"token prefix unchanged\"> </span><span class=\"token line\"> div.className = \"title\";\n</span><span class=\"token prefix unchanged\"> </span><span class=\"token line\"> div.innerHTML = \"webpack-css\";\n</span></span>\n<span class=\"token inserted-sign inserted\"><span class=\"token prefix inserted\">+</span><span class=\"token line\"> // 方式一：设置 img 元素的 src\n</span><span class=\"token prefix inserted\">+</span><span class=\"token line\"> const imgEl = document.createElement(\"img\");\n</span><span class=\"token prefix inserted\">+</span><span class=\"token line\"> imgEl.src = avatar;\n</span><span class=\"token prefix inserted\">+</span><span class=\"token line\"> \n</span><span class=\"token prefix inserted\">+</span><span class=\"token line\"> // 方式二：设置背景图片\n</span><span class=\"token prefix inserted\">+</span><span class=\"token line\"> const bgEl = document.createElement(\"div\");\n</span><span class=\"token prefix inserted\">+</span><span class=\"token line\"> bgEl.className = \"image-bg\";\n</span></span>\n<span class=\"token unchanged\"><span class=\"token prefix unchanged\"> </span><span class=\"token line\"> document.body.appendChild(div);\n</span></span><span class=\"token inserted-sign inserted\"><span class=\"token prefix inserted\">+</span><span class=\"token line\"> document.body.appendChild(imgEl);\n</span><span class=\"token prefix inserted\">+</span><span class=\"token line\"> document.body.appendChild(bgEl);\n</span></span></code></pre></div><p>为方式二修改 <code>style.css</code> 文件：</p>\n<p><strong>style.css</strong></p>\n<div class=\"language-diff\" data-ext=\"diff\" data-title=\"diff\"><pre class=\"language-diff\"><code>.title {\n<span class=\"token unchanged\"><span class=\"token prefix unchanged\"> </span><span class=\"token line\"> color: #000;\n</span><span class=\"token prefix unchanged\"> </span><span class=\"token line\"> font-weight: 700;\n</span><span class=\"token prefix unchanged\"> </span><span class=\"token line\"> font-size: 30px;\n</span></span>\n<span class=\"token unchanged\"><span class=\"token prefix unchanged\"> </span><span class=\"token line\"> user-select: none;\n</span></span>}\n\n<span class=\"token inserted-sign inserted\"><span class=\"token prefix inserted\">+</span><span class=\"token line\"> .image-bg {\n</span><span class=\"token prefix inserted\">+</span><span class=\"token line\">   background-image: url(\"../img/wallpaper.jpg\");\n</span><span class=\"token prefix inserted\">+</span><span class=\"token line\">   background-repeat: no-repeat;\n</span><span class=\"token prefix inserted\">+</span><span class=\"token line\">   background-size: contain;\n</span><span class=\"token prefix inserted\">+</span><span class=\"token line\">   width: 500px;\n</span><span class=\"token prefix inserted\">+</span><span class=\"token line\">   height: 300px;\n</span><span class=\"token prefix inserted\">+</span><span class=\"token line\"> }\n</span></span></code></pre></div><p>下面需要配置 <code>webpack.config.js</code>，在 webpack5 以前，图片等资源一般使用 <code>file-loader</code> 或 <code>url-loader</code> 进行打包，但是 webpack5 后，这两个 loader 在官方文档中已经被删掉了，因此使用它们会出现一系列的问题。现在更推荐使用**资源模块类型(asset module type)**进行打包。</p>\n<p>但是虽然官方已经不推荐使用了，了解下他们的各自用途还是必要的:</p>\n<ul>\n<li><code>file-loader</code>：将文件发送到输出目录；</li>\n<li><code>url-loader</code>：将文件作为 data URI 内联到 bundle 中，可以将较小的文件转成 base64 的 URI；</li>\n<li><code>raw-loader</code>：将文件导入为字符串。</li>\n</ul>\n<p>而在 webpack5 中，通过添加四种新的模块类型，替换上面这些 loader：</p>\n<ul>\n<li><code>asset/resource</code> 发送一个单独的文件并导出 URL。之前使用 <code>file-loader</code> 实现；</li>\n<li><code>asset/inline</code> 导出一个资源的 data URI。之前通过使用 <code>url-loader</code> 实现；</li>\n<li><code>asset/source</code> 导出资源的源代码。之前通过使用 <code>raw-loader</code> 实现；</li>\n<li><code>asset</code> 在导出一个 data URI 和发送一个单独的文件之间自动选择。之前通过使用 <code>url-loader</code>，并且配置资源体积限制实现。</li>\n</ul>\n<p>那么现在可以对 <code>webpack.config.js</code> 配置 <code>asset</code> 对图片进行打包：</p>\n<div class=\"language-diff\" data-ext=\"diff\" data-title=\"diff\"><pre class=\"language-diff\"><code><span class=\"token unchanged\"><span class=\"token prefix unchanged\"> </span><span class=\"token line\">const path = require(\"path\");\n</span><span class=\"token prefix unchanged\"> </span><span class=\"token line\">\n</span><span class=\"token prefix unchanged\"> </span><span class=\"token line\">module.exports = {\n</span><span class=\"token prefix unchanged\"> </span><span class=\"token line\">  entry: \"./src/index.js\",\n</span><span class=\"token prefix unchanged\"> </span><span class=\"token line\">  output: {\n</span><span class=\"token prefix unchanged\"> </span><span class=\"token line\">    filename: \"bundle.js\",\n</span><span class=\"token prefix unchanged\"> </span><span class=\"token line\">    path: path.resolve(__dirname, \"dist\"), // 需要使用绝对路径\n</span></span><span class=\"token inserted-sign inserted\"><span class=\"token prefix inserted\">+</span><span class=\"token line\">    publicPath: \"./dist/\",  // 保证 css url 导入时路径正确\n</span></span><span class=\"token unchanged\"><span class=\"token prefix unchanged\"> </span><span class=\"token line\">  },\n</span><span class=\"token prefix unchanged\"> </span><span class=\"token line\">  module: {\n</span><span class=\"token prefix unchanged\"> </span><span class=\"token line\">    rules: [\n</span><span class=\"token prefix unchanged\"> </span><span class=\"token line\">      {\n</span><span class=\"token prefix unchanged\"> </span><span class=\"token line\">        test: /\\.(less|css)$/,\n</span><span class=\"token prefix unchanged\"> </span><span class=\"token line\">        use: [\"style-loader\", \"css-loader\", \"less-loader\"]\n</span><span class=\"token prefix unchanged\"> </span><span class=\"token line\">      },\n</span></span><span class=\"token inserted-sign inserted\"><span class=\"token prefix inserted\">+</span><span class=\"token line\">      {\n</span><span class=\"token prefix inserted\">+</span><span class=\"token line\">        test: /\\.(jpe?g|png|gif|svg)$/,\n</span><span class=\"token prefix inserted\">+</span><span class=\"token line\">        type: \"asset\",\n</span><span class=\"token prefix inserted\">+</span><span class=\"token line\">        generator: {\n</span><span class=\"token prefix inserted\">+</span><span class=\"token line\">          filename: \"img/[name]_[hash:8][ext]\"\n</span><span class=\"token prefix inserted\">+</span><span class=\"token line\">        },\n</span><span class=\"token prefix inserted\">+</span><span class=\"token line\">        parser: {\n</span><span class=\"token prefix inserted\">+</span><span class=\"token line\">          dataUrlCondition: {\n</span><span class=\"token prefix inserted\">+</span><span class=\"token line\">            maxSize: 100 * 1024 // 100 kb\n</span><span class=\"token prefix inserted\">+</span><span class=\"token line\">          }\n</span><span class=\"token prefix inserted\">+</span><span class=\"token line\">        }\n</span><span class=\"token prefix inserted\">+</span><span class=\"token line\">      }\n</span></span><span class=\"token unchanged\"><span class=\"token prefix unchanged\"> </span><span class=\"token line\">    ],\n</span><span class=\"token prefix unchanged\"> </span><span class=\"token line\">  },\n</span><span class=\"token prefix unchanged\"> </span><span class=\"token line\">};\n</span></span></code></pre></div><p><code>generator</code> 可以配置生成器的选项，<code>parser</code> 可以配置解析器的选项。</p>\n<blockquote>\n<p>具体配置项可查阅<a href=\"https://webpack.docschina.org/configuration/module/\" target=\"_blank\" rel=\"noopener noreferrer\">官方文档</a>。</p>\n</blockquote>\n<p>其中 <code>dataUrlCondition</code> 的含义为：如果一个模块源码大小小于 maxSize，那么模块会被作为一个 Base64 编码的字符串注入到包中， 否则模块文件会被生成到输出的目标目录中。</p>\n<h2>打包字体资源</h2>\n<p>在项目中引入字体文件夹，并添加字体文件：</p>\n<p><strong>project</strong></p>\n<div class=\"language-diff\" data-ext=\"diff\" data-title=\"diff\"><pre class=\"language-diff\"><code><span class=\"token unchanged\"><span class=\"token prefix unchanged\"> </span><span class=\"token line\"> webpack-demo\n</span><span class=\"token prefix unchanged\"> </span><span class=\"token line\"> |- node_modules\n</span><span class=\"token prefix unchanged\"> </span><span class=\"token line\"> |- package-lock.json\n</span><span class=\"token prefix unchanged\"> </span><span class=\"token line\"> |- package.json\n</span><span class=\"token prefix unchanged\"> </span><span class=\"token line\"> |- index.html\n</span><span class=\"token prefix unchanged\"> </span><span class=\"token line\"> |- /src\n</span><span class=\"token prefix unchanged\"> </span><span class=\"token line\">   |- /css\n</span><span class=\"token prefix unchanged\"> </span><span class=\"token line\">     |- style.css\n</span><span class=\"token prefix unchanged\"> </span><span class=\"token line\">     |- title.less\n</span></span><span class=\"token inserted-sign inserted\"><span class=\"token prefix inserted\">+</span><span class=\"token line\">   |- /font\n</span><span class=\"token prefix inserted\">+</span><span class=\"token line\">     |- iconfont.css\n</span><span class=\"token prefix inserted\">+</span><span class=\"token line\">     |- iconfont.eot\n</span><span class=\"token prefix inserted\">+</span><span class=\"token line\">     |- iconfont.ttf\n</span><span class=\"token prefix inserted\">+</span><span class=\"token line\">     |- iconfont.woff\n</span><span class=\"token prefix inserted\">+</span><span class=\"token line\">     |- iconfont.woff2\n</span></span><span class=\"token unchanged\"><span class=\"token prefix unchanged\"> </span><span class=\"token line\">   |- /img\n</span><span class=\"token prefix unchanged\"> </span><span class=\"token line\">     |- avatar.png\n</span><span class=\"token prefix unchanged\"> </span><span class=\"token line\">     |- wallpaper.png\n</span><span class=\"token prefix unchanged\"> </span><span class=\"token line\">   |- /js\n</span><span class=\"token prefix unchanged\"> </span><span class=\"token line\">     |- format.js\n</span><span class=\"token prefix unchanged\"> </span><span class=\"token line\">     |- math.js  \n</span><span class=\"token prefix unchanged\"> </span><span class=\"token line\">   |- index.js\n</span></span></code></pre></div><p><strong>index.js</strong></p>\n<div class=\"language-diff\" data-ext=\"diff\" data-title=\"diff\"><pre class=\"language-diff\"><code><span class=\"token unchanged\"><span class=\"token prefix unchanged\"> </span><span class=\"token line\">import { sum } from \"./js/math.js\";\n</span><span class=\"token prefix unchanged\"> </span><span class=\"token line\">const { priceFormat } = require(\"./js/format\");\n</span><span class=\"token prefix unchanged\"> </span><span class=\"token line\">import \"./css/style.css\";\n</span><span class=\"token prefix unchanged\"> </span><span class=\"token line\">import \"./css/title.less\";\n</span></span><span class=\"token inserted-sign inserted\"><span class=\"token prefix inserted\">+</span><span class=\"token line\">import \"./font/iconfont.css\";\n</span></span><span class=\"token unchanged\"><span class=\"token prefix unchanged\"> </span><span class=\"token line\">\n</span><span class=\"token prefix unchanged\"> </span><span class=\"token line\">// 导入图片\n</span><span class=\"token prefix unchanged\"> </span><span class=\"token line\">import avatar from \"./img/avatar.png\";\n</span><span class=\"token prefix unchanged\"> </span><span class=\"token line\">\n</span><span class=\"token prefix unchanged\"> </span><span class=\"token line\">console.log(sum(10, 20));\n</span><span class=\"token prefix unchanged\"> </span><span class=\"token line\">console.log(priceFormat());\n</span><span class=\"token prefix unchanged\"> </span><span class=\"token line\">\n</span><span class=\"token prefix unchanged\"> </span><span class=\"token line\">const div = document.createElement(\"div\");\n</span><span class=\"token prefix unchanged\"> </span><span class=\"token line\">div.className = \"title\";\n</span><span class=\"token prefix unchanged\"> </span><span class=\"token line\">div.innerHTML = \"webpack-css\";\n</span><span class=\"token prefix unchanged\"> </span><span class=\"token line\">\n</span><span class=\"token prefix unchanged\"> </span><span class=\"token line\">// 方式一：设置 img 元素的 src\n</span><span class=\"token prefix unchanged\"> </span><span class=\"token line\">const imgEl = document.createElement(\"img\");\n</span><span class=\"token prefix unchanged\"> </span><span class=\"token line\">imgEl.src = avatar;\n</span><span class=\"token prefix unchanged\"> </span><span class=\"token line\">\n</span><span class=\"token prefix unchanged\"> </span><span class=\"token line\">// 方式二：设置背景图片\n</span><span class=\"token prefix unchanged\"> </span><span class=\"token line\">const bgEl = document.createElement(\"div\");\n</span><span class=\"token prefix unchanged\"> </span><span class=\"token line\">bgEl.className = \"image-bg\";\n</span></span>\n<span class=\"token inserted-sign inserted\"><span class=\"token prefix inserted\">+</span><span class=\"token line\">// i元素\n</span><span class=\"token prefix inserted\">+</span><span class=\"token line\">const iEl = document.createElement('i');\n</span><span class=\"token prefix inserted\">+</span><span class=\"token line\">iEl.className = \"iconfont icon-ashbin\";\n</span></span><span class=\"token unchanged\"><span class=\"token prefix unchanged\"> </span><span class=\"token line\">\n</span><span class=\"token prefix unchanged\"> </span><span class=\"token line\">document.body.appendChild(div);\n</span><span class=\"token prefix unchanged\"> </span><span class=\"token line\">document.body.appendChild(imgEl);\n</span><span class=\"token prefix unchanged\"> </span><span class=\"token line\">document.body.appendChild(bgEl);\n</span></span><span class=\"token inserted-sign inserted\"><span class=\"token prefix inserted\">+</span><span class=\"token line\">document.body.appendChild(iEl);\n</span></span></code></pre></div><p>修改 <code>webpack.config.js</code> 配置 <code>asset/resource</code> 对字体进行打包：</p>\n<div class=\"language-diff\" data-ext=\"diff\" data-title=\"diff\"><pre class=\"language-diff\"><code><span class=\"token unchanged\"><span class=\"token prefix unchanged\"> </span><span class=\"token line\">const path = require(\"path\");\n</span><span class=\"token prefix unchanged\"> </span><span class=\"token line\">\n</span><span class=\"token prefix unchanged\"> </span><span class=\"token line\">module.exports = {\n</span><span class=\"token prefix unchanged\"> </span><span class=\"token line\">  entry: \"./src/index.js\",\n</span><span class=\"token prefix unchanged\"> </span><span class=\"token line\">  output: {\n</span><span class=\"token prefix unchanged\"> </span><span class=\"token line\">    filename: \"bundle.js\",\n</span><span class=\"token prefix unchanged\"> </span><span class=\"token line\">    path: path.resolve(__dirname, \"dist\"), // 需要使用绝对路径\n</span><span class=\"token prefix unchanged\"> </span><span class=\"token line\">    publicPath: './dist/',\n</span><span class=\"token prefix unchanged\"> </span><span class=\"token line\">  },\n</span><span class=\"token prefix unchanged\"> </span><span class=\"token line\">  module: {\n</span><span class=\"token prefix unchanged\"> </span><span class=\"token line\">    rules: [\n</span><span class=\"token prefix unchanged\"> </span><span class=\"token line\">      {\n</span><span class=\"token prefix unchanged\"> </span><span class=\"token line\">        test: /\\.(less|css)$/,\n</span><span class=\"token prefix unchanged\"> </span><span class=\"token line\">        use: [\"style-loader\", \"css-loader\", \"less-loader\"]\n</span><span class=\"token prefix unchanged\"> </span><span class=\"token line\">      },\n</span><span class=\"token prefix unchanged\"> </span><span class=\"token line\">      {\n</span><span class=\"token prefix unchanged\"> </span><span class=\"token line\">        test: /\\.(jpe?g|png|gif|svg)$/,\n</span><span class=\"token prefix unchanged\"> </span><span class=\"token line\">        type: \"asset\",\n</span><span class=\"token prefix unchanged\"> </span><span class=\"token line\">        generator: {\n</span><span class=\"token prefix unchanged\"> </span><span class=\"token line\">          filename: \"img/[name]_[hash:8][ext]\"\n</span><span class=\"token prefix unchanged\"> </span><span class=\"token line\">        },\n</span><span class=\"token prefix unchanged\"> </span><span class=\"token line\">        parser: {\n</span><span class=\"token prefix unchanged\"> </span><span class=\"token line\">          dataUrlCondition: {\n</span><span class=\"token prefix unchanged\"> </span><span class=\"token line\">            maxSize: 100 * 1024\n</span><span class=\"token prefix unchanged\"> </span><span class=\"token line\">          }\n</span><span class=\"token prefix unchanged\"> </span><span class=\"token line\">        }\n</span><span class=\"token prefix unchanged\"> </span><span class=\"token line\">      },\n</span></span><span class=\"token inserted-sign inserted\"><span class=\"token prefix inserted\">+</span><span class=\"token line\">      {\n</span><span class=\"token prefix inserted\">+</span><span class=\"token line\">        test: /\\.(eot|ttf|woff2?)$/,\n</span><span class=\"token prefix inserted\">+</span><span class=\"token line\">        type: \"asset/resource\",\n</span><span class=\"token prefix inserted\">+</span><span class=\"token line\">        generator: {\n</span><span class=\"token prefix inserted\">+</span><span class=\"token line\">          filename: \"font/[name]_[hash:6][ext]\"\n</span><span class=\"token prefix inserted\">+</span><span class=\"token line\">        }\n</span><span class=\"token prefix inserted\">+</span><span class=\"token line\">      }\n</span></span><span class=\"token unchanged\"><span class=\"token prefix unchanged\"> </span><span class=\"token line\">    ],\n</span><span class=\"token prefix unchanged\"> </span><span class=\"token line\">  },\n</span><span class=\"token prefix unchanged\"> </span><span class=\"token line\">};\n</span></span></code></pre></div><p>执行 <code>npm run build</code> 打包，接下来打开浏览器可以看到 <code>i</code> 元素正常加载，控制台也未报错。</p>\n<h2>总结</h2>\n<p>webpack5 提供四种资源模块类型代替之前的 loader，可以对图片、字体等资源进行打包。</p>\n",
      "date_published": "2022-05-13T00:00:00.000Z",
      "date_modified": "2024-01-07T08:28:24.000Z",
      "authors": [],
      "tags": [
        "工程化"
      ]
    },
    {
      "title": "webpack 插件",
      "url": "https://dribble-njr.github.io/blog/blog/frontend/engineering/build-tool/webpack/004-webpack-plugin.html",
      "id": "https://dribble-njr.github.io/blog/blog/frontend/engineering/build-tool/webpack/004-webpack-plugin.html",
      "summary": " 项目地址：https://github.com/Stephen-wzw/webpack-demo 前面介绍了 webpack loader 打包 JavaScript、CSS、图片和字体等模块资源，这次介绍 webpack 中的另外一个核心：插件。 webpack 官方文档描述了二者区别：loader 用于转换某些类型的模块，而插件可以执行范围更广的...",
      "content_html": "<blockquote>\n<p>项目地址：<a href=\"https://github.com/Stephen-wzw/webpack-demo\" target=\"_blank\" rel=\"noopener noreferrer\">https://github.com/Stephen-wzw/webpack-demo</a></p>\n</blockquote>\n<p>前面介绍了 webpack loader 打包 JavaScript、CSS、图片和字体等模块资源，这次介绍 webpack 中的另外一个核心：<strong>插件</strong>。</p>\n<blockquote>\n<p>webpack 官方文档描述了二者区别：loader 用于转换某些类型的模块，而插件可以执行范围更广的任务，包括：打包优化、资源管理、注入环境变量等。</p>\n</blockquote>\n<h2>清理 dist 文件</h2>\n<p>在前面的项目中，每次重新打包其实都略去了一步：手动删除 dist 文件夹。在 webpack5 以前，可以借助 <code>CleanWebpackPlugin</code> 来帮我们完成这个操作。而 webpack5 中，在 <code>output</code> 中设置 <code>clean: true</code> 即可。</p>\n<div class=\"language-diff\" data-ext=\"diff\" data-title=\"diff\"><pre class=\"language-diff\"><code><span class=\"token unchanged\"><span class=\"token prefix unchanged\"> </span><span class=\"token line\"> const path = require(\"path\");\n</span><span class=\"token prefix unchanged\"> </span><span class=\"token line\"> \n</span><span class=\"token prefix unchanged\"> </span><span class=\"token line\"> module.exports = {\n</span><span class=\"token prefix unchanged\"> </span><span class=\"token line\">   entry: \"./src/index.js\",\n</span><span class=\"token prefix unchanged\"> </span><span class=\"token line\">   output: {\n</span><span class=\"token prefix unchanged\"> </span><span class=\"token line\">     filename: \"bundle.js\",\n</span><span class=\"token prefix unchanged\"> </span><span class=\"token line\">     path: path.resolve(__dirname, \"dist\"), // 需要使用绝对路径\n</span><span class=\"token prefix unchanged\"> </span><span class=\"token line\">     publicPath: './dist/',\n</span></span><span class=\"token inserted-sign inserted\"><span class=\"token prefix inserted\">+</span><span class=\"token line\">     clean: true\n</span></span><span class=\"token unchanged\"><span class=\"token prefix unchanged\"> </span><span class=\"token line\">   },\n</span><span class=\"token prefix unchanged\"> </span><span class=\"token line\">   module: {\n</span><span class=\"token prefix unchanged\"> </span><span class=\"token line\">     ...\n</span><span class=\"token prefix unchanged\"> </span><span class=\"token line\">   },\n</span><span class=\"token prefix unchanged\"> </span><span class=\"token line\"> };\n</span></span></code></pre></div><h2><code>HtmlWebpackPlugin</code></h2>\n<p>在之前的项目中，<code>index.html</code> 文件编写在根目录下，而最终打包的 dist 文件中没有 <code>index.html</code> 文件。在进行项目部署的时候，必然也是需要有对应的入口文件 <code>index.html</code>。</p>\n<p>对 <code>index.html</code> 进行打包处理可以使用 <code>HtmlWebpackPlugin</code>。</p>\n<div class=\"language-bash\" data-ext=\"sh\" data-title=\"sh\"><pre class=\"language-bash\"><code><span class=\"token function\">npm</span> <span class=\"token function\">install</span> html-webpack-plugin <span class=\"token parameter variable\">-D</span>\n</code></pre></div><div class=\"language-diff\" data-ext=\"diff\" data-title=\"diff\"><pre class=\"language-diff\"><code><span class=\"token unchanged\"><span class=\"token prefix unchanged\"> </span><span class=\"token line\"> const path = require(\"path\");\n</span></span><span class=\"token inserted-sign inserted\"><span class=\"token prefix inserted\">+</span><span class=\"token line\"> const HtmlWebpackPlugin = require(\"html-webpack-plugin\");\n</span></span><span class=\"token unchanged\"><span class=\"token prefix unchanged\"> </span><span class=\"token line\"> \n</span><span class=\"token prefix unchanged\"> </span><span class=\"token line\"> module.exports = {\n</span><span class=\"token prefix unchanged\"> </span><span class=\"token line\">   entry: \"./src/index.js\",\n</span><span class=\"token prefix unchanged\"> </span><span class=\"token line\">   output: {\n</span><span class=\"token prefix unchanged\"> </span><span class=\"token line\">     filename: \"bundle.js\",\n</span><span class=\"token prefix unchanged\"> </span><span class=\"token line\">     path: path.resolve(__dirname, \"dist\"), // 需要使用绝对路径\n</span></span><span class=\"token deleted-sign deleted\"><span class=\"token prefix deleted\">-</span><span class=\"token line\">     publicPath: './dist/',\n</span></span><span class=\"token inserted-sign inserted\"><span class=\"token prefix inserted\">+</span><span class=\"token line\">     publicPath: '',\n</span></span><span class=\"token unchanged\"><span class=\"token prefix unchanged\"> </span><span class=\"token line\">     clean: true\n</span><span class=\"token prefix unchanged\"> </span><span class=\"token line\">   },\n</span><span class=\"token prefix unchanged\"> </span><span class=\"token line\">   module: {\n</span><span class=\"token prefix unchanged\"> </span><span class=\"token line\">     ...\n</span><span class=\"token prefix unchanged\"> </span><span class=\"token line\">   },\n</span></span><span class=\"token inserted-sign inserted\"><span class=\"token prefix inserted\">+</span><span class=\"token line\">   plugins: [\n</span><span class=\"token prefix inserted\">+</span><span class=\"token line\">     new HtmlWebpackPlugin({\n</span><span class=\"token prefix inserted\">+</span><span class=\"token line\">       title: \"webpack-plugin\"\n</span><span class=\"token prefix inserted\">+</span><span class=\"token line\">     })\n</span><span class=\"token prefix inserted\">+</span><span class=\"token line\">   ]\n</span></span><span class=\"token unchanged\"><span class=\"token prefix unchanged\"> </span><span class=\"token line\"> };\n</span></span></code></pre></div><p>当执行 <code>npm run build</code> 时，会自动生成一个 <code>index.html</code> 文件，它在默认情况下是根据 ejs 的一个模板生成的。</p>\n<blockquote>\n<p>在 <code>HtmlWebpackPlugin</code> 源码中，有一个 <code>default_index.ejs</code> 模块。</p>\n</blockquote>\n<p>当我们想自定义一个模板时，比如开发 Vue 项目时，需要一个挂载后续组件的根标签。</p>\n<p>这时我们修改下项目目录结构：</p>\n<p><strong>project</strong></p>\n<div class=\"language-diff\" data-ext=\"diff\" data-title=\"diff\"><pre class=\"language-diff\"><code><span class=\"token unchanged\"><span class=\"token prefix unchanged\"> </span><span class=\"token line\"> webpack-demo\n</span><span class=\"token prefix unchanged\"> </span><span class=\"token line\"> |- node_modules\n</span><span class=\"token prefix unchanged\"> </span><span class=\"token line\"> |- package-lock.json\n</span><span class=\"token prefix unchanged\"> </span><span class=\"token line\"> |- package.json\n</span></span><span class=\"token deleted-sign deleted\"><span class=\"token prefix deleted\">-</span><span class=\"token line\"> |- index.html\n</span></span><span class=\"token inserted-sign inserted\"><span class=\"token prefix inserted\">+</span><span class=\"token line\"> |- /public\n</span><span class=\"token prefix inserted\">+</span><span class=\"token line\">   |- favicon.ico\n</span><span class=\"token prefix inserted\">+</span><span class=\"token line\">   |- index.html\n</span></span><span class=\"token unchanged\"><span class=\"token prefix unchanged\"> </span><span class=\"token line\"> |- /src\n</span><span class=\"token prefix unchanged\"> </span><span class=\"token line\">   |- /css\n</span><span class=\"token prefix unchanged\"> </span><span class=\"token line\">     |- style.css\n</span><span class=\"token prefix unchanged\"> </span><span class=\"token line\">     |- title.less\n</span><span class=\"token prefix unchanged\"> </span><span class=\"token line\">   |- /font\n</span><span class=\"token prefix unchanged\"> </span><span class=\"token line\">     |- iconfont.css\n</span><span class=\"token prefix unchanged\"> </span><span class=\"token line\">     |- iconfont.eot\n</span><span class=\"token prefix unchanged\"> </span><span class=\"token line\">     |- iconfont.ttf\n</span><span class=\"token prefix unchanged\"> </span><span class=\"token line\">     |- iconfont.woff\n</span><span class=\"token prefix unchanged\"> </span><span class=\"token line\">     |- iconfont.woff2\n</span><span class=\"token prefix unchanged\"> </span><span class=\"token line\">   |- /img\n</span><span class=\"token prefix unchanged\"> </span><span class=\"token line\">     |- avatar.png\n</span><span class=\"token prefix unchanged\"> </span><span class=\"token line\">     |- wallpaper.png\n</span><span class=\"token prefix unchanged\"> </span><span class=\"token line\">   |- /js\n</span><span class=\"token prefix unchanged\"> </span><span class=\"token line\">     |- format.js\n</span><span class=\"token prefix unchanged\"> </span><span class=\"token line\">     |- math.js  \n</span><span class=\"token prefix unchanged\"> </span><span class=\"token line\">   |- index.js\n</span></span></code></pre></div><p><strong>public/index.html</strong></p>\n<div class=\"language-html\" data-ext=\"html\" data-title=\"html\"><pre class=\"language-html\"><code><span class=\"token doctype\"><span class=\"token punctuation\">&lt;!</span><span class=\"token doctype-tag\">DOCTYPE</span> <span class=\"token name\">html</span><span class=\"token punctuation\">&gt;</span></span>\n<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>html</span> <span class=\"token attr-name\">lang</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span><span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">&gt;</span></span>\n  <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>head</span><span class=\"token punctuation\">&gt;</span></span>\n    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>meta</span> <span class=\"token attr-name\">charset</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>utf-8<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">&gt;</span></span>\n    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>meta</span> <span class=\"token attr-name\">http-equiv</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>X-UA-Compatible<span class=\"token punctuation\">\"</span></span> <span class=\"token attr-name\">content</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>IE=edge<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">&gt;</span></span>\n    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>meta</span> <span class=\"token attr-name\">name</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>viewport<span class=\"token punctuation\">\"</span></span> <span class=\"token attr-name\">content</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>width=device-width,initial-scale=1.0<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">&gt;</span></span>\n    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>link</span> <span class=\"token attr-name\">rel</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>icon<span class=\"token punctuation\">\"</span></span> <span class=\"token attr-name\">href</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>&lt;%= BASE_URL %&gt;favicon.ico<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">&gt;</span></span>\n    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>title</span><span class=\"token punctuation\">&gt;</span></span>&lt;%= htmlWebpackPlugin.options.title %&gt;<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>title</span><span class=\"token punctuation\">&gt;</span></span>\n  <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>head</span><span class=\"token punctuation\">&gt;</span></span>\n  <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>body</span><span class=\"token punctuation\">&gt;</span></span>\n    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>noscript</span><span class=\"token punctuation\">&gt;</span></span>\n      <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>strong</span><span class=\"token punctuation\">&gt;</span></span>We're sorry but &lt;%= htmlWebpackPlugin.options.title %&gt; doesn't work properly without JavaScript enabled. Please enable it to continue.<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>strong</span><span class=\"token punctuation\">&gt;</span></span>\n    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>noscript</span><span class=\"token punctuation\">&gt;</span></span>\n    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>div</span> <span class=\"token attr-name\">id</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>app<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">&gt;</span></span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>div</span><span class=\"token punctuation\">&gt;</span></span>\n    <span class=\"token comment\">&lt;!-- built files will be auto injected --&gt;</span>\n  <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>body</span><span class=\"token punctuation\">&gt;</span></span>\n<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>html</span><span class=\"token punctuation\">&gt;</span></span>\n</code></pre></div><p>这时可以修改 <code>webpack.config.js</code>：</p>\n<div class=\"language-diff\" data-ext=\"diff\" data-title=\"diff\"><pre class=\"language-diff\"><code><span class=\"token unchanged\"><span class=\"token prefix unchanged\"> </span><span class=\"token line\"> const path = require(\"path\");\n</span></span><span class=\"token inserted-sign inserted\"><span class=\"token prefix inserted\">+</span><span class=\"token line\"> const HtmlWebpackPlugin = require(\"html-webpack-plugin\");\n</span></span><span class=\"token unchanged\"><span class=\"token prefix unchanged\"> </span><span class=\"token line\"> \n</span><span class=\"token prefix unchanged\"> </span><span class=\"token line\"> module.exports = {\n</span><span class=\"token prefix unchanged\"> </span><span class=\"token line\">   entry: \"./src/index.js\",\n</span><span class=\"token prefix unchanged\"> </span><span class=\"token line\">   output: {\n</span><span class=\"token prefix unchanged\"> </span><span class=\"token line\">     filename: \"bundle.js\",\n</span><span class=\"token prefix unchanged\"> </span><span class=\"token line\">     path: path.resolve(__dirname, \"dist\"), // 需要使用绝对路径\n</span><span class=\"token prefix unchanged\"> </span><span class=\"token line\">     publicPath: '',\n</span><span class=\"token prefix unchanged\"> </span><span class=\"token line\">     clean: true\n</span><span class=\"token prefix unchanged\"> </span><span class=\"token line\">   },\n</span><span class=\"token prefix unchanged\"> </span><span class=\"token line\">   module: {\n</span><span class=\"token prefix unchanged\"> </span><span class=\"token line\">     ...\n</span><span class=\"token prefix unchanged\"> </span><span class=\"token line\">   },\n</span><span class=\"token prefix unchanged\"> </span><span class=\"token line\">   plugins: [\n</span><span class=\"token prefix unchanged\"> </span><span class=\"token line\">     new HtmlWebpackPlugin({\n</span><span class=\"token prefix unchanged\"> </span><span class=\"token line\">       title: \"webpack-plugin\",\n</span></span><span class=\"token inserted-sign inserted\"><span class=\"token prefix inserted\">+</span><span class=\"token line\">       template: \"./public/index.html\"\n</span></span><span class=\"token unchanged\"><span class=\"token prefix unchanged\"> </span><span class=\"token line\">     })\n</span><span class=\"token prefix unchanged\"> </span><span class=\"token line\">   ]\n</span><span class=\"token prefix unchanged\"> </span><span class=\"token line\"> };\n</span></span></code></pre></div><p>但是现在打包仍然会报错：</p>\n<div class=\"language-bash\" data-ext=\"sh\" data-title=\"sh\"><pre class=\"language-bash\"><code>ERROR <span class=\"token keyword\">in</span>   ReferenceError: BASE_URL is not defined\n</code></pre></div><p>因为在编译的时候，有一个 <code>BASE_URL</code>：<code>&lt;link rel=\"icon\" href=\"&lt;%= BASE_URL %&gt;favicon.ico\"&gt;</code>，但是我们并没有设置过这个值，因此会报错，这时我们可以使用 <code>DefinePlugin</code> 插件。</p>\n<h2><code>DefinePlugin</code></h2>\n<p><code>DefinePlugin</code> 允许在编译时创建配置的全局变量，是 webpack 内置的插件，不需要单独安装。</p>\n<p><strong>webpack.config.js</strong></p>\n<div class=\"language-diff\" data-ext=\"diff\" data-title=\"diff\"><pre class=\"language-diff\"><code><span class=\"token unchanged\"><span class=\"token prefix unchanged\"> </span><span class=\"token line\"> const path = require(\"path\");\n</span><span class=\"token prefix unchanged\"> </span><span class=\"token line\"> const HtmlWebpackPlugin = require(\"html-webpack-plugin\");\n</span></span><span class=\"token inserted-sign inserted\"><span class=\"token prefix inserted\">+</span><span class=\"token line\"> const { DefinePlugin } = require(\"webpack\");\n</span></span>\n<span class=\"token unchanged\"><span class=\"token prefix unchanged\"> </span><span class=\"token line\"> module.exports = {\n</span><span class=\"token prefix unchanged\"> </span><span class=\"token line\">   entry: \"./src/index.js\",\n</span><span class=\"token prefix unchanged\"> </span><span class=\"token line\">   output: {\n</span><span class=\"token prefix unchanged\"> </span><span class=\"token line\">     filename: \"bundle.js\",\n</span><span class=\"token prefix unchanged\"> </span><span class=\"token line\">     path: path.resolve(__dirname, \"dist\"), // 需要使用绝对路径\n</span><span class=\"token prefix unchanged\"> </span><span class=\"token line\">     publicPath: '',\n</span><span class=\"token prefix unchanged\"> </span><span class=\"token line\">     clean: true\n</span><span class=\"token prefix unchanged\"> </span><span class=\"token line\">   },\n</span><span class=\"token prefix unchanged\"> </span><span class=\"token line\">   module: {\n</span><span class=\"token prefix unchanged\"> </span><span class=\"token line\">     ...\n</span><span class=\"token prefix unchanged\"> </span><span class=\"token line\">   },\n</span><span class=\"token prefix unchanged\"> </span><span class=\"token line\">   plugins: [\n</span><span class=\"token prefix unchanged\"> </span><span class=\"token line\">     new HtmlWebpackPlugin({\n</span><span class=\"token prefix unchanged\"> </span><span class=\"token line\">       title: \"webpack-plugin\",\n</span><span class=\"token prefix unchanged\"> </span><span class=\"token line\">       template: \"./public/index.html\"\n</span><span class=\"token prefix unchanged\"> </span><span class=\"token line\">     }),\n</span></span><span class=\"token inserted-sign inserted\"><span class=\"token prefix inserted\">+</span><span class=\"token line\">     new DefinePlugin({\n</span><span class=\"token prefix inserted\">+</span><span class=\"token line\">       BASE_URL: \"'./'\"\n</span><span class=\"token prefix inserted\">+</span><span class=\"token line\">     })\n</span></span><span class=\"token unchanged\"><span class=\"token prefix unchanged\"> </span><span class=\"token line\">   ]\n</span><span class=\"token prefix unchanged\"> </span><span class=\"token line\"> };\n</span></span></code></pre></div><p>现在重新输入 <code>npm run build</code> 进行打包，则不会出现刚才的错误。</p>\n<h2><code>CopyWebpackPlugin</code></h2>\n<p>经过上述步骤的处理后，虽然打包成功，但是网站图标没有被打包进 <code>dist</code> 文件夹。在 Vue 项目的打包过程中，如果我们将一些文件夹放到 <code>public</code> 文件夹中，那么这个目录会被复制到 <code>dist</code> 文件夹中。</p>\n<p>这个功能可以通过 <code>CopyWebpackPlugin</code> 完成。</p>\n<div class=\"language-bash\" data-ext=\"sh\" data-title=\"sh\"><pre class=\"language-bash\"><code><span class=\"token function\">npm</span> <span class=\"token function\">install</span> copy-webpack-plugin <span class=\"token parameter variable\">-D</span>\n</code></pre></div><div class=\"language-diff\" data-ext=\"diff\" data-title=\"diff\"><pre class=\"language-diff\"><code><span class=\"token unchanged\"><span class=\"token prefix unchanged\"> </span><span class=\"token line\"> const path = require(\"path\");\n</span><span class=\"token prefix unchanged\"> </span><span class=\"token line\"> const HtmlWebpackPlugin = require(\"html-webpack-plugin\");\n</span><span class=\"token prefix unchanged\"> </span><span class=\"token line\"> const { DefinePlugin } = require(\"webpack\");\n</span></span><span class=\"token inserted-sign inserted\"><span class=\"token prefix inserted\">+</span><span class=\"token line\"> const CopyPlugin = require(\"copy-webpack-plugin\");\n</span></span>\n<span class=\"token unchanged\"><span class=\"token prefix unchanged\"> </span><span class=\"token line\"> module.exports = {\n</span><span class=\"token prefix unchanged\"> </span><span class=\"token line\">   entry: \"./src/index.js\",\n</span><span class=\"token prefix unchanged\"> </span><span class=\"token line\">   output: {\n</span><span class=\"token prefix unchanged\"> </span><span class=\"token line\">     filename: \"bundle.js\",\n</span><span class=\"token prefix unchanged\"> </span><span class=\"token line\">     path: path.resolve(__dirname, \"dist\"), // 需要使用绝对路径\n</span><span class=\"token prefix unchanged\"> </span><span class=\"token line\">     publicPath: '',\n</span><span class=\"token prefix unchanged\"> </span><span class=\"token line\">     clean: true\n</span><span class=\"token prefix unchanged\"> </span><span class=\"token line\">   },\n</span><span class=\"token prefix unchanged\"> </span><span class=\"token line\">   module: {\n</span><span class=\"token prefix unchanged\"> </span><span class=\"token line\">     ...\n</span><span class=\"token prefix unchanged\"> </span><span class=\"token line\">   },\n</span><span class=\"token prefix unchanged\"> </span><span class=\"token line\">   plugins: [\n</span><span class=\"token prefix unchanged\"> </span><span class=\"token line\">     new HtmlWebpackPlugin({\n</span><span class=\"token prefix unchanged\"> </span><span class=\"token line\">       title: \"webpack-plugin\",\n</span><span class=\"token prefix unchanged\"> </span><span class=\"token line\">       template: \"./public/index.html\"\n</span><span class=\"token prefix unchanged\"> </span><span class=\"token line\">     }),\n</span><span class=\"token prefix unchanged\"> </span><span class=\"token line\">     new DefinePlugin({\n</span><span class=\"token prefix unchanged\"> </span><span class=\"token line\">       BASE_URL: \"'./'\"\n</span><span class=\"token prefix unchanged\"> </span><span class=\"token line\">     }),\n</span></span><span class=\"token inserted-sign inserted\"><span class=\"token prefix inserted\">+</span><span class=\"token line\">     new CopyPlugin({\n</span><span class=\"token prefix inserted\">+</span><span class=\"token line\">       patterns: [\n</span><span class=\"token prefix inserted\">+</span><span class=\"token line\">         {\n</span><span class=\"token prefix inserted\">+</span><span class=\"token line\">           from: \"public\",\n</span><span class=\"token prefix inserted\">+</span><span class=\"token line\">           globOptions: {\n</span><span class=\"token prefix inserted\">+</span><span class=\"token line\">             ignore: ['**/index.html']\n</span><span class=\"token prefix inserted\">+</span><span class=\"token line\">           }\n</span><span class=\"token prefix inserted\">+</span><span class=\"token line\">         }\n</span><span class=\"token prefix inserted\">+</span><span class=\"token line\">       ]\n</span><span class=\"token prefix inserted\">+</span><span class=\"token line\">     })      \n</span></span><span class=\"token unchanged\"><span class=\"token prefix unchanged\"> </span><span class=\"token line\">   ]\n</span><span class=\"token prefix unchanged\"> </span><span class=\"token line\"> };\n</span></span></code></pre></div><p>复制的规则可以在 <code>patterns</code> 中设置：</p>\n<ul>\n<li><code>from</code>：设置从哪个源开始复制；</li>\n<li><code>to</code>：复制到的位置，省略则复制到打包的目录下；</li>\n<li><code>globOptions</code>：设置一些额外的选项。<code>ignore</code> 设置忽略的文件，这里设置为忽略 <code>index.html</code>，因为它已经通过 <code>HtmlWebpackPlugin</code> 完成了打包。</li>\n</ul>\n<p>重新执行 <code>npm run build</code> 进行打包，可以看到 <code>favicon.ico</code> 被复制到了 <code>dist</code> 文件夹中，并且浏览器也能正确显示网站图标了。</p>\n<blockquote>\n<p>若没显示网站图标，可以清下缓存试试。</p>\n</blockquote>\n<h2>Mode 配置</h2>\n<p>前面打包的过程中，其实一直报了一个警告：</p>\n<div class=\"language-bash\" data-ext=\"sh\" data-title=\"sh\"><pre class=\"language-bash\"><code>WARNING <span class=\"token keyword\">in</span> configuration\nThe <span class=\"token string\">'mode'</span> option has not been set, webpack will fallback to <span class=\"token string\">'production'</span> <span class=\"token keyword\">for</span> this value.\nSet <span class=\"token string\">'mode'</span> option to <span class=\"token string\">'development'</span> or <span class=\"token string\">'production'</span> to <span class=\"token builtin class-name\">enable</span> defaults <span class=\"token keyword\">for</span> each environment.\nYou can also <span class=\"token builtin class-name\">set</span> it to <span class=\"token string\">'none'</span> to disable any default behavior. Learn more: https://webpack.js.org/configuration/mode/\n</code></pre></div><p>webpack 提供 <code>mode</code> 配置选项，告知 webpack 使用相应模式的内置优化。</p>\n<ul>\n<li><code>development</code>：会将 <code>DefinePlugin</code> 中 <code>process.env.NODE_ENV</code> 的值设置为 <code>development</code>，为模块和 chunk 启用有效的名；</li>\n<li><code>production</code>：会将 <code>DefinePlugin</code> 中 <code>process.env.NODE_ENV</code> 的值设置为 <code>production</code>。为模块和 chunk 启用确定性的混淆名称，<code>FlagDependencyUsagePlugin</code>，<code>FlagIncludedChunksPlugin</code>，<code>ModuleConcatenationPlugin</code>，<code>NoEmitOnErrorsPlugin</code> 和 <code>TerserPlugin</code>。</li>\n<li><code>none</code>：不使用任何默认优化。</li>\n</ul>\n<figure><img src=\"/assets/image/frontend/tool/webpack/004/mode.png\" alt=\"mode配置\" tabindex=\"0\" loading=\"lazy\"><figcaption>mode配置</figcaption></figure>\n<p>在开发阶段，通常会设置 <code>mode: development</code>。</p>\n<p>为了演示它的作用，可以在 <code>format.js</code> 中写个错误代码：</p>\n<p><strong>format.js</strong></p>\n<div class=\"language-diff\" data-ext=\"diff\" data-title=\"diff\"><pre class=\"language-diff\"><code><span class=\"token unchanged\"><span class=\"token prefix unchanged\"> </span><span class=\"token line\"> const priceFormat = function () {\n</span><span class=\"token prefix unchanged\"> </span><span class=\"token line\">   return \"￥100.8\";\n</span><span class=\"token prefix unchanged\"> </span><span class=\"token line\"> };\n</span><span class=\"token prefix unchanged\"> </span><span class=\"token line\"> \n</span></span><span class=\"token inserted-sign inserted\"><span class=\"token prefix inserted\">+</span><span class=\"token line\"> const content = \"hello webpack\";\n</span><span class=\"token prefix inserted\">+</span><span class=\"token line\"> console.log(content1.length);\n</span></span><span class=\"token unchanged\"><span class=\"token prefix unchanged\"> </span><span class=\"token line\"> \n</span><span class=\"token prefix unchanged\"> </span><span class=\"token line\"> // CommonJS\n</span><span class=\"token prefix unchanged\"> </span><span class=\"token line\"> module.exports = {\n</span><span class=\"token prefix unchanged\"> </span><span class=\"token line\">   priceFormat,\n</span><span class=\"token prefix unchanged\"> </span><span class=\"token line\"> };\n</span></span></code></pre></div><p>控制台上会报错，但是不会显示具体在原文件的哪个位置。</p>\n<figure><img src=\"/assets/image/frontend/tool/webpack/004/source-map-1.png\" alt=\"without-source-map\" tabindex=\"0\" loading=\"lazy\"><figcaption>without-source-map</figcaption></figure>\n<p>如果需要显示错误的具体位置，那么需要在 <code>webpack.config.js</code> 中配置开发模式：</p>\n<div class=\"language-diff\" data-ext=\"diff\" data-title=\"diff\"><pre class=\"language-diff\"><code><span class=\"token unchanged\"><span class=\"token prefix unchanged\"> </span><span class=\"token line\">// 省略其他 \n</span><span class=\"token prefix unchanged\"> </span><span class=\"token line\">module.exports = {\n</span></span><span class=\"token inserted-sign inserted\"><span class=\"token prefix inserted\">+</span><span class=\"token line\">  mode: \"development\",\n</span><span class=\"token prefix inserted\">+</span><span class=\"token line\">  devtool: \"source-map\"\n</span></span><span class=\"token unchanged\"><span class=\"token prefix unchanged\"> </span><span class=\"token line\">}\n</span></span></code></pre></div><p>其中 <code>source-map</code> 可以帮我们快速定位错误位置，在开发模式中，会默认设置 <code>devtool: \"source-map\"</code>。</p>\n<p>此时重新打包后，在控制台就会出现错误的具体位置，能够快速帮我们解决 bug。</p>\n<figure><img src=\"/assets/image/frontend/tool/webpack/004/source-map-2.png\" alt=\"with-source-map\" tabindex=\"0\" loading=\"lazy\"><figcaption>with-source-map</figcaption></figure>\n<h2>总结</h2>\n<p>webpack5 除了 loader 外，还有插件这一核心概念，他能执行范围更广的任务。</p>\n<p>在这个案例中，我们首先介绍了如何清理 <code>dist</code> 文件夹；然后介绍如何打包 <code>index.html</code> 文件；接着是两个插件 <code>DefinePlugin</code> 和 <code>CopyWebpackPlugin</code> 的使用，它们可以帮助我们实现 Vue 打包中的一些功能；最后介绍了 webpack 的 <code>mode</code> 配置。</p>\n",
      "image": "https://dribble-njr.github.io/blog/blog/assets/image/frontend/tool/webpack/004/mode.png",
      "date_published": "2022-05-14T00:00:00.000Z",
      "date_modified": "2024-01-07T08:28:24.000Z",
      "authors": [],
      "tags": [
        "工程化"
      ]
    },
    {
      "title": "webpack-babel",
      "url": "https://dribble-njr.github.io/blog/blog/frontend/engineering/build-tool/webpack/005-webpack-babel.html",
      "id": "https://dribble-njr.github.io/blog/blog/frontend/engineering/build-tool/webpack/005-webpack-babel.html",
      "summary": " 项目地址：https://github.com/Stephen-wzw/webpack-demo babel 是一个工具链，主要用于旧浏览器或环境中将 ECMAScript 2015+ 的代码转换成向后兼容版本的 JavaScript。 安装 babel 本身可以作为一个独立的工具单独使用，但是在实际开发中，通常会在 webpack 等构建工具中配置...",
      "content_html": "<blockquote>\n<p>项目地址：<a href=\"https://github.com/Stephen-wzw/webpack-demo\" target=\"_blank\" rel=\"noopener noreferrer\">https://github.com/Stephen-wzw/webpack-demo</a></p>\n</blockquote>\n<p>babel 是一个工具链，主要用于旧浏览器或环境中将 ECMAScript 2015+ 的代码转换成向后兼容版本的 JavaScript。</p>\n<div class=\"language-javascript\" data-ext=\"js\" data-title=\"js\"><pre class=\"language-javascript\"><code><span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token number\">2</span><span class=\"token punctuation\">,</span> <span class=\"token number\">3</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">.</span><span class=\"token function\">map</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">n</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=&gt;</span> n <span class=\"token operator\">+</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token comment\">// babel 转换后</span>\n<span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token number\">2</span><span class=\"token punctuation\">,</span> <span class=\"token number\">3</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">.</span><span class=\"token function\">map</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">function</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">n</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">return</span> n <span class=\"token operator\">+</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n</code></pre></div><h2>安装</h2>\n<p>babel 本身可以作为一个独立的工具单独使用，但是在实际开发中，通常会在 webpack 等构建工具中配置 babel 来对其使用。</p>\n<div class=\"language-bash\" data-ext=\"sh\" data-title=\"sh\"><pre class=\"language-bash\"><code><span class=\"token function\">npm</span> <span class=\"token function\">install</span> babel-loader @babel/core <span class=\"token parameter variable\">-D</span>\n</code></pre></div><blockquote>\n<p><code>@babel/core</code> 是 babel 的核心代码，必须安装。</p>\n</blockquote>\n<h2>使用</h2>\n<p>安装完成后，修改 <code>webpack.config.js</code> 及 <code>index.js</code>：</p>\n<p><strong>webpack.config.js</strong></p>\n<div class=\"language-diff\" data-ext=\"diff\" data-title=\"diff\"><pre class=\"language-diff\"><code><span class=\"token unchanged\"><span class=\"token prefix unchanged\"> </span><span class=\"token line\"> ...\n</span></span>\n<span class=\"token unchanged\"><span class=\"token prefix unchanged\"> </span><span class=\"token line\"> module.exports = {\n</span><span class=\"token prefix unchanged\"> </span><span class=\"token line\">   mode: \"development\",\n</span><span class=\"token prefix unchanged\"> </span><span class=\"token line\">   devtool: \"source-map\",\n</span><span class=\"token prefix unchanged\"> </span><span class=\"token line\">   entry: \"./src/index.js\",\n</span><span class=\"token prefix unchanged\"> </span><span class=\"token line\">   output: {\n</span><span class=\"token prefix unchanged\"> </span><span class=\"token line\">     filename: \"bundle.js\",\n</span><span class=\"token prefix unchanged\"> </span><span class=\"token line\">     path: path.resolve(__dirname, \"dist\"), // 需要使用绝对路径\n</span><span class=\"token prefix unchanged\"> </span><span class=\"token line\">     publicPath: '',\n</span><span class=\"token prefix unchanged\"> </span><span class=\"token line\">     clean: true\n</span><span class=\"token prefix unchanged\"> </span><span class=\"token line\">   },\n</span><span class=\"token prefix unchanged\"> </span><span class=\"token line\">   module: {\n</span><span class=\"token prefix unchanged\"> </span><span class=\"token line\">     ...\n</span></span><span class=\"token inserted-sign inserted\"><span class=\"token prefix inserted\">+</span><span class=\"token line\">     {\n</span><span class=\"token prefix inserted\">+</span><span class=\"token line\">       test: /\\./js$/,\n</span><span class=\"token prefix inserted\">+</span><span class=\"token line\">       loader: \"babel-loader\"\n</span><span class=\"token prefix inserted\">+</span><span class=\"token line\">     }\n</span></span><span class=\"token unchanged\"><span class=\"token prefix unchanged\"> </span><span class=\"token line\">   },\n</span><span class=\"token prefix unchanged\"> </span><span class=\"token line\">   plugins: [\n</span><span class=\"token prefix unchanged\"> </span><span class=\"token line\">     ...\n</span><span class=\"token prefix unchanged\"> </span><span class=\"token line\">   ]\n</span><span class=\"token prefix unchanged\"> </span><span class=\"token line\"> };\n</span></span></code></pre></div><p><strong>index.js</strong></p>\n<div class=\"language-diff\" data-ext=\"diff\" data-title=\"diff\"><pre class=\"language-diff\"><code><span class=\"token unchanged\"><span class=\"token prefix unchanged\"> </span><span class=\"token line\"> ...\n</span></span>\n<span class=\"token inserted-sign inserted\"><span class=\"token prefix inserted\">+</span><span class=\"token line\"> // babel\n</span><span class=\"token prefix inserted\">+</span><span class=\"token line\"> const messages = [1, 2, 3];\n</span><span class=\"token prefix inserted\">+</span><span class=\"token line\"> messages.map((n) =&gt; n + 1);\n</span></span></code></pre></div><p>重新执行打包后，查看 <code>bundle.js</code>，发现打包后的文件仍然是 es6 语法：</p>\n<p><strong>bundle.js</strong></p>\n<div class=\"language-javascript\" data-ext=\"js\" data-title=\"js\"><pre class=\"language-javascript\"><code><span class=\"token keyword\">const</span> messages <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token number\">2</span><span class=\"token punctuation\">,</span> <span class=\"token number\">3</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\nmessages<span class=\"token punctuation\">.</span><span class=\"token function\">map</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">n</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=&gt;</span> n <span class=\"token operator\">+</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n</code></pre></div><p>这是因为 babel 在转换过程中，需要使用对应插件转换对应语法，因此我们需要安装相应插件。</p>\n<p>比如需要转换箭头函数，可以安装 <code>@babel/plugin-transform-arrow-functions</code>，需要将 <code>const</code> 转换为 <code>var</code>，则需要安装 <code>@babel/plugin-transform-block-scoping</code>。</p>\n<div class=\"language-bash\" data-ext=\"sh\" data-title=\"sh\"><pre class=\"language-bash\"><code><span class=\"token function\">npm</span> <span class=\"token function\">install</span> @babel/plugin-transform-arrow-functions @babel/plugin-transform-block-scoping <span class=\"token parameter variable\">-D</span>\n</code></pre></div><p>安装成功后修改下 <code>babel-loader</code> 的配置：</p>\n<div class=\"language-diff\" data-ext=\"diff\" data-title=\"diff\"><pre class=\"language-diff\"><code><span class=\"token unchanged\"><span class=\"token prefix unchanged\"> </span><span class=\"token line\"> {\n</span><span class=\"token prefix unchanged\"> </span><span class=\"token line\">   test: /\\.js$/,\n</span></span><span class=\"token deleted-sign deleted\"><span class=\"token prefix deleted\">-</span><span class=\"token line\">   loader: \"babel-loader\",\n</span></span><span class=\"token inserted-sign inserted\"><span class=\"token prefix inserted\">+</span><span class=\"token line\">   use: {\n</span><span class=\"token prefix inserted\">+</span><span class=\"token line\">     loader: \"babel-loader\",\n</span><span class=\"token prefix inserted\">+</span><span class=\"token line\">     options: {\n</span><span class=\"token prefix inserted\">+</span><span class=\"token line\">       plugins: [\n</span><span class=\"token prefix inserted\">+</span><span class=\"token line\">         \"@babel/plugin-transform-arrow-functions\",\n</span><span class=\"token prefix inserted\">+</span><span class=\"token line\">         \"@babel/plugin-transform-block-scoping\"\n</span><span class=\"token prefix inserted\">+</span><span class=\"token line\">       ]\n</span><span class=\"token prefix inserted\">+</span><span class=\"token line\">     }\n</span><span class=\"token prefix inserted\">+</span><span class=\"token line\">   }\n</span></span><span class=\"token unchanged\"><span class=\"token prefix unchanged\"> </span><span class=\"token line\"> }\n</span></span></code></pre></div><p>此时再执行下 <code>npm run build</code> 重新打包，查看 <code>bundle.js</code> 可以看到已经做了转换：</p>\n<p><strong>bundle.js</strong></p>\n<div class=\"language-javascript\" data-ext=\"js\" data-title=\"js\"><pre class=\"language-javascript\"><code><span class=\"token keyword\">var</span> messages <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token number\">2</span><span class=\"token punctuation\">,</span> <span class=\"token number\">3</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\nmessages<span class=\"token punctuation\">.</span><span class=\"token function\">map</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">function</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\">n</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">return</span> n <span class=\"token operator\">+</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n</code></pre></div><p>但是如果要转换的内容过多，一个个插件安装起来比较麻烦，可以使用 babel 提供的预设（preset）。</p>\n<p>常见的预设有三个：</p>\n<ul>\n<li>env</li>\n<li>react</li>\n<li>TypeScript</li>\n</ul>\n<p>在这里安装 <code>@babel/preset-env</code>：</p>\n<div class=\"language-bash\" data-ext=\"sh\" data-title=\"sh\"><pre class=\"language-bash\"><code><span class=\"token function\">npm</span> <span class=\"token function\">install</span> @babel/preset-env <span class=\"token parameter variable\">-D</span>\n</code></pre></div><p><strong>webpack.config.js</strong></p>\n<div class=\"language-diff\" data-ext=\"diff\" data-title=\"diff\"><pre class=\"language-diff\"><code><span class=\"token unchanged\"><span class=\"token prefix unchanged\"> </span><span class=\"token line\"> {\n</span><span class=\"token prefix unchanged\"> </span><span class=\"token line\">   test: /\\.js$/,\n</span><span class=\"token prefix unchanged\"> </span><span class=\"token line\">   use: {\n</span><span class=\"token prefix unchanged\"> </span><span class=\"token line\">     loader: \"babel-loader\",\n</span><span class=\"token prefix unchanged\"> </span><span class=\"token line\">     options: {\n</span></span><span class=\"token deleted-sign deleted\"><span class=\"token prefix deleted\">-</span><span class=\"token line\">       plugins: [\n</span><span class=\"token prefix deleted\">-</span><span class=\"token line\">         \"@babel/plugin-transform-arrow-functions\",\n</span><span class=\"token prefix deleted\">-</span><span class=\"token line\">         \"@babel/plugin-transform-block-scoping\"\n</span><span class=\"token prefix deleted\">-</span><span class=\"token line\">       ],\n</span></span><span class=\"token inserted-sign inserted\"><span class=\"token prefix inserted\">+</span><span class=\"token line\">       presets: [\n</span><span class=\"token prefix inserted\">+</span><span class=\"token line\">         \"@babel/preset-env\"\n</span><span class=\"token prefix inserted\">+</span><span class=\"token line\">       ]\n</span></span><span class=\"token unchanged\"><span class=\"token prefix unchanged\"> </span><span class=\"token line\">     }\n</span><span class=\"token prefix unchanged\"> </span><span class=\"token line\">   }\n</span><span class=\"token prefix unchanged\"> </span><span class=\"token line\"> }\n</span></span></code></pre></div><p>执行 <code>npm run build</code> 重新打包，查看 <code>bundle.js</code> 也可以达到一样的效果。</p>\n<h2>babel 的配置文件</h2>\n<p>可以将 bebel 的配置信息放到一个独立的文件，有两种方式：</p>\n<ul>\n<li>babel.config.json(或者 .js, .cjs, .mjs) 文件</li>\n<li>.babelrc.json(或者 .babelrc, .js, .cjs, .mjs) 文件</li>\n</ul>\n<p>这二者的区别在于前者是早期使用较多的配置方式，但是对于配置 Monorepos 项目比较麻烦；后者是 babel7 以后的配置方式，可以直接用于 Monorepos 项目的子包，更加推荐。</p>\n<p>在项目中新增 <code>babel.config.js</code>，并修改 <code>webpack.config.js</code>：</p>\n<p><strong>babel.config.js</strong></p>\n<div class=\"language-javascript\" data-ext=\"js\" data-title=\"js\"><pre class=\"language-javascript\"><code>module<span class=\"token punctuation\">.</span>exports <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token literal-property property\">presets</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">[</span>\n    <span class=\"token string\">\"@babel/preset-env\"</span>\n  <span class=\"token punctuation\">]</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n</code></pre></div><p><strong>webpack.config.js</strong></p>\n<div class=\"language-diff\" data-ext=\"diff\" data-title=\"diff\"><pre class=\"language-diff\"><code><span class=\"token deleted-sign deleted\"><span class=\"token prefix deleted\">-</span><span class=\"token line\"> {\n</span><span class=\"token prefix deleted\">-</span><span class=\"token line\">   test: /\\.js$/,\n</span><span class=\"token prefix deleted\">-</span><span class=\"token line\">   use: {\n</span><span class=\"token prefix deleted\">-</span><span class=\"token line\">     loader: \"babel-loader\",\n</span><span class=\"token prefix deleted\">-</span><span class=\"token line\">     options: {\n</span><span class=\"token prefix deleted\">-</span><span class=\"token line\">       // plugins: [\n</span><span class=\"token prefix deleted\">-</span><span class=\"token line\">       //   \"@babel/plugin-transform-arrow-functions\",\n</span><span class=\"token prefix deleted\">-</span><span class=\"token line\">       //   \"@babel/plugin-transform-block-scoping\"\n</span><span class=\"token prefix deleted\">-</span><span class=\"token line\">       // ],\n</span><span class=\"token prefix deleted\">-</span><span class=\"token line\">       presets: [\n</span><span class=\"token prefix deleted\">-</span><span class=\"token line\">         \"@babel/preset-env\"\n</span><span class=\"token prefix deleted\">-</span><span class=\"token line\">       ]\n</span><span class=\"token prefix deleted\">-</span><span class=\"token line\">     }\n</span><span class=\"token prefix deleted\">-</span><span class=\"token line\">   }\n</span><span class=\"token prefix deleted\">-</span><span class=\"token line\"> }\n</span></span><span class=\"token inserted-sign inserted\"><span class=\"token prefix inserted\">+</span><span class=\"token line\"> {\n</span><span class=\"token prefix inserted\">+</span><span class=\"token line\">   test: /\\.js$/,\n</span><span class=\"token prefix inserted\">+</span><span class=\"token line\">   loader: \"babel-loader\"\n</span><span class=\"token prefix inserted\">+</span><span class=\"token line\"> }\n</span></span></code></pre></div><p>重新打包后，语法转换仍然生效。</p>\n<h2>总结</h2>\n<p>webpack 中的 <code>babel-loader</code> 依赖于 <code>@babel/core</code>，而他生效需要借助不同的语法转换插件，当需要转换的内容过多时，可以使用 babel 提供的预设完成。同时 babel 还能单独写一个配置文件。</p>\n",
      "date_published": "2022-05-16T00:00:00.000Z",
      "date_modified": "2024-01-07T08:28:24.000Z",
      "authors": [],
      "tags": [
        "工程化"
      ]
    },
    {
      "title": "webpack-vue",
      "url": "https://dribble-njr.github.io/blog/blog/frontend/engineering/build-tool/webpack/006-webpack-vue.html",
      "id": "https://dribble-njr.github.io/blog/blog/frontend/engineering/build-tool/webpack/006-webpack-vue.html",
      "summary": " 项目地址：https://github.com/Stephen-wzw/webpack-demo 平时我们可以通过 Vue-cli 快速搭建 Vue 开发环境，但是要知道 Vue-cli 也是基于 webpack 构建的，那么如何使用 webpack 搭建 Vue 开发环境呢？ 前面已经了解了 webpack 如何对 js、css、图片、字体等其他资...",
      "content_html": "<blockquote>\n<p>项目地址：<a href=\"https://github.com/Stephen-wzw/webpack-demo\" target=\"_blank\" rel=\"noopener noreferrer\">https://github.com/Stephen-wzw/webpack-demo</a></p>\n</blockquote>\n<p>平时我们可以通过 Vue-cli 快速搭建 Vue 开发环境，但是要知道 Vue-cli 也是基于 webpack 构建的，那么如何使用 webpack 搭建 Vue 开发环境呢？</p>\n<p>前面已经了解了 webpack 如何对 js、css、图片、字体等其他资源进行打包处理，而想要搭建 Vue 开发环境，主要就是对 <code>.vue</code> 文件进行处理。</p>\n<h2>准备</h2>\n<p>现在 Vue@3.x 已经发布了，因此需要安装 <code>vue@next</code>。</p>\n<div class=\"language-bash\" data-ext=\"sh\" data-title=\"sh\"><pre class=\"language-bash\"><code><span class=\"token function\">npm</span> <span class=\"token function\">install</span> vue@next\n</code></pre></div><p>在 <code>src</code> 文件夹下新增 <code>vue</code> 文件夹，新建 <code>App.vue</code> 文件，同时在 <code>index.js</code> 中导入：</p>\n<p><strong>project</strong></p>\n<div class=\"language-diff\" data-ext=\"diff\" data-title=\"diff\"><pre class=\"language-diff\"><code><span class=\"token unchanged\"><span class=\"token prefix unchanged\"> </span><span class=\"token line\"> webpack-demo\n</span><span class=\"token prefix unchanged\"> </span><span class=\"token line\"> |- node_modules\n</span><span class=\"token prefix unchanged\"> </span><span class=\"token line\"> |- package-lock.json\n</span><span class=\"token prefix unchanged\"> </span><span class=\"token line\"> |- package.json\n</span><span class=\"token prefix unchanged\"> </span><span class=\"token line\"> |- postcss.config.js\n</span><span class=\"token prefix unchanged\"> </span><span class=\"token line\"> |- babel.config.js\n</span><span class=\"token prefix unchanged\"> </span><span class=\"token line\"> |- webpack.config.js\n</span><span class=\"token prefix unchanged\"> </span><span class=\"token line\"> |- /public\n</span><span class=\"token prefix unchanged\"> </span><span class=\"token line\">   |- favicon.ico\n</span><span class=\"token prefix unchanged\"> </span><span class=\"token line\">   |- index.html\n</span><span class=\"token prefix unchanged\"> </span><span class=\"token line\"> |- /src\n</span><span class=\"token prefix unchanged\"> </span><span class=\"token line\">   |- /css\n</span><span class=\"token prefix unchanged\"> </span><span class=\"token line\">     |- style.css\n</span><span class=\"token prefix unchanged\"> </span><span class=\"token line\">     |- title.less\n</span><span class=\"token prefix unchanged\"> </span><span class=\"token line\">   |- /font\n</span><span class=\"token prefix unchanged\"> </span><span class=\"token line\">     |- iconfont.css\n</span><span class=\"token prefix unchanged\"> </span><span class=\"token line\">     |- iconfont.eot\n</span><span class=\"token prefix unchanged\"> </span><span class=\"token line\">     |- iconfont.ttf\n</span><span class=\"token prefix unchanged\"> </span><span class=\"token line\">     |- iconfont.woff\n</span><span class=\"token prefix unchanged\"> </span><span class=\"token line\">     |- iconfont.woff2\n</span><span class=\"token prefix unchanged\"> </span><span class=\"token line\">   |- /img\n</span><span class=\"token prefix unchanged\"> </span><span class=\"token line\">     |- avatar.png\n</span><span class=\"token prefix unchanged\"> </span><span class=\"token line\">     |- wallpaper.png\n</span><span class=\"token prefix unchanged\"> </span><span class=\"token line\">   |- /js\n</span><span class=\"token prefix unchanged\"> </span><span class=\"token line\">     |- format.js\n</span><span class=\"token prefix unchanged\"> </span><span class=\"token line\">     |- math.js\n</span></span><span class=\"token inserted-sign inserted\"><span class=\"token prefix inserted\">+</span><span class=\"token line\">   |- /vue\n</span><span class=\"token prefix inserted\">+</span><span class=\"token line\">     |- App.vue\n</span></span><span class=\"token unchanged\"><span class=\"token prefix unchanged\"> </span><span class=\"token line\">   |- index.js\n</span></span></code></pre></div><p><strong>App.vue</strong></p>\n<div class=\"language-vue\" data-ext=\"vue\" data-title=\"vue\"><pre class=\"language-vue\"><code><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>template</span><span class=\"token punctuation\">&gt;</span></span>\n  <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>h2</span><span class=\"token punctuation\">&gt;</span></span>我是Vue渲染出来的<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>h2</span><span class=\"token punctuation\">&gt;</span></span>\n  <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>h2</span><span class=\"token punctuation\">&gt;</span></span>{{title}}<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>h2</span><span class=\"token punctuation\">&gt;</span></span>\n<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>template</span><span class=\"token punctuation\">&gt;</span></span>\n\n<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>script</span><span class=\"token punctuation\">&gt;</span></span><span class=\"token script\"><span class=\"token language-javascript\">\n<span class=\"token keyword\">export</span> <span class=\"token keyword\">default</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token function\">data</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">return</span> <span class=\"token punctuation\">{</span>\n      <span class=\"token literal-property property\">title</span><span class=\"token operator\">:</span> <span class=\"token string\">\"Hello Vue\"</span>\n    <span class=\"token punctuation\">}</span>\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n</span></span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>script</span><span class=\"token punctuation\">&gt;</span></span>\n\n<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>style</span><span class=\"token punctuation\">&gt;</span></span><span class=\"token style\"><span class=\"token language-css\">\n\n</span></span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>style</span><span class=\"token punctuation\">&gt;</span></span>\n</code></pre></div><p><strong>index.js</strong></p>\n<div class=\"language-diff\" data-ext=\"diff\" data-title=\"diff\"><pre class=\"language-diff\"><code><span class=\"token inserted-sign inserted\"><span class=\"token prefix inserted\">+</span><span class=\"token line\"> import { createApp } from \"vue\";\n</span></span><span class=\"token unchanged\"><span class=\"token prefix unchanged\"> </span><span class=\"token line\">\n</span><span class=\"token prefix unchanged\"> </span><span class=\"token line\"> import { sum } from \"./js/math.js\";\n</span><span class=\"token prefix unchanged\"> </span><span class=\"token line\"> const { priceFormat } = require(\"./js/format\");\n</span><span class=\"token prefix unchanged\"> </span><span class=\"token line\"> \n</span></span><span class=\"token inserted-sign inserted\"><span class=\"token prefix inserted\">+</span><span class=\"token line\"> import App from \"./vue/App.vue\";\n</span></span><span class=\"token unchanged\"><span class=\"token prefix unchanged\"> </span><span class=\"token line\"> \n</span><span class=\"token prefix unchanged\"> </span><span class=\"token line\"> import \"./css/style.css\";\n</span><span class=\"token prefix unchanged\"> </span><span class=\"token line\"> import \"./css/title.less\";\n</span><span class=\"token prefix unchanged\"> </span><span class=\"token line\"> import \"./font/iconfont.css\";\n</span><span class=\"token prefix unchanged\"> </span><span class=\"token line\"> \n</span><span class=\"token prefix unchanged\"> </span><span class=\"token line\"> // 导入图片\n</span><span class=\"token prefix unchanged\"> </span><span class=\"token line\"> import avatar from \"./img/avatar.png\";\n</span><span class=\"token prefix unchanged\"> </span><span class=\"token line\"> \n</span><span class=\"token prefix unchanged\"> </span><span class=\"token line\"> console.log(sum(10, 20));\n</span><span class=\"token prefix unchanged\"> </span><span class=\"token line\"> console.log(priceFormat());\n</span><span class=\"token prefix unchanged\"> </span><span class=\"token line\"> \n</span><span class=\"token prefix unchanged\"> </span><span class=\"token line\"> const div = document.createElement(\"div\");\n</span><span class=\"token prefix unchanged\"> </span><span class=\"token line\"> div.className = \"title\";\n</span><span class=\"token prefix unchanged\"> </span><span class=\"token line\"> div.innerHTML = \"webpack-css\";\n</span><span class=\"token prefix unchanged\"> </span><span class=\"token line\"> \n</span><span class=\"token prefix unchanged\"> </span><span class=\"token line\"> // 方式一：设置 img 元素的 src\n</span><span class=\"token prefix unchanged\"> </span><span class=\"token line\"> const imgEl = document.createElement(\"img\");\n</span><span class=\"token prefix unchanged\"> </span><span class=\"token line\"> imgEl.src = avatar;\n</span><span class=\"token prefix unchanged\"> </span><span class=\"token line\"> \n</span><span class=\"token prefix unchanged\"> </span><span class=\"token line\"> // 方式二：设置背景图片\n</span><span class=\"token prefix unchanged\"> </span><span class=\"token line\"> const bgEl = document.createElement(\"div\");\n</span><span class=\"token prefix unchanged\"> </span><span class=\"token line\"> bgEl.className = \"image-bg\";\n</span><span class=\"token prefix unchanged\"> </span><span class=\"token line\"> \n</span><span class=\"token prefix unchanged\"> </span><span class=\"token line\"> // i元素\n</span><span class=\"token prefix unchanged\"> </span><span class=\"token line\"> const iEl = document.createElement('i');\n</span><span class=\"token prefix unchanged\"> </span><span class=\"token line\"> iEl.className = \"iconfont icon-ashbin\";\n</span><span class=\"token prefix unchanged\"> </span><span class=\"token line\"> \n</span><span class=\"token prefix unchanged\"> </span><span class=\"token line\"> document.body.appendChild(div);\n</span><span class=\"token prefix unchanged\"> </span><span class=\"token line\"> document.body.appendChild(imgEl);\n</span><span class=\"token prefix unchanged\"> </span><span class=\"token line\"> document.body.appendChild(bgEl);\n</span><span class=\"token prefix unchanged\"> </span><span class=\"token line\"> document.body.appendChild(iEl);\n</span><span class=\"token prefix unchanged\"> </span><span class=\"token line\"> \n</span><span class=\"token prefix unchanged\"> </span><span class=\"token line\"> // babel\n</span><span class=\"token prefix unchanged\"> </span><span class=\"token line\"> const messages = [1, 2, 3];\n</span><span class=\"token prefix unchanged\"> </span><span class=\"token line\"> messages.map((n) =&gt; n + 1);\n</span><span class=\"token prefix unchanged\"> </span><span class=\"token line\"> \n</span></span><span class=\"token inserted-sign inserted\"><span class=\"token prefix inserted\">+</span><span class=\"token line\"> // vue\n</span><span class=\"token prefix inserted\">+</span><span class=\"token line\"> const app = createApp(App);\n</span><span class=\"token prefix inserted\">+</span><span class=\"token line\"> app.mount(\"#app\");\n</span></span></code></pre></div><h2>配置 webpack</h2>\n<p>默认情况下 <code>vue-loader</code> 是对 Vue@2.x 准备的，而我们是 Vue@3.x，因此需要安装 <code>vue-loader@next</code>，而 <code>vue-loader</code> 又依赖于 <code>@vue/compiler-sfc</code> 的，因此也需要安装。</p>\n<div class=\"language-bash\" data-ext=\"sh\" data-title=\"sh\"><pre class=\"language-bash\"><code><span class=\"token function\">npm</span> <span class=\"token function\">install</span> vue-loader@next @vue/compiler-sfc <span class=\"token parameter variable\">-D</span>\n</code></pre></div><p>修改 <code>webpack.config.js</code> 配置：</p>\n<p><strong>webpack.config.js</strong></p>\n<div class=\"language-diff\" data-ext=\"diff\" data-title=\"diff\"><pre class=\"language-diff\"><code><span class=\"token unchanged\"><span class=\"token prefix unchanged\"> </span><span class=\"token line\"> //...\n</span></span><span class=\"token inserted-sign inserted\"><span class=\"token prefix inserted\">+</span><span class=\"token line\"> const { VueLoaderPlugin } = require(\"vue-loader/dist/index\");\n</span></span><span class=\"token unchanged\"><span class=\"token prefix unchanged\"> </span><span class=\"token line\"> //...\n</span><span class=\"token prefix unchanged\"> </span><span class=\"token line\"> \n</span><span class=\"token prefix unchanged\"> </span><span class=\"token line\"> module.exports = {\n</span><span class=\"token prefix unchanged\"> </span><span class=\"token line\">   module: {\n</span><span class=\"token prefix unchanged\"> </span><span class=\"token line\">     rules: [\n</span><span class=\"token prefix unchanged\"> </span><span class=\"token line\">       ...\n</span></span><span class=\"token inserted-sign inserted\"><span class=\"token prefix inserted\">+</span><span class=\"token line\">       {\n</span><span class=\"token prefix inserted\">+</span><span class=\"token line\">         test: /\\.vue$/,\n</span><span class=\"token prefix inserted\">+</span><span class=\"token line\">         loader: \"vue-loader\"\n</span><span class=\"token prefix inserted\">+</span><span class=\"token line\">       }\n</span></span><span class=\"token unchanged\"><span class=\"token prefix unchanged\"> </span><span class=\"token line\">       //...\n</span><span class=\"token prefix unchanged\"> </span><span class=\"token line\">     ]\n</span><span class=\"token prefix unchanged\"> </span><span class=\"token line\">   }\n</span><span class=\"token prefix unchanged\"> </span><span class=\"token line\">   plugins: [\n</span><span class=\"token prefix unchanged\"> </span><span class=\"token line\">     ...\n</span></span><span class=\"token inserted-sign inserted\"><span class=\"token prefix inserted\">+</span><span class=\"token line\">     new VueLoaderPlugin()\n</span></span><span class=\"token unchanged\"><span class=\"token prefix unchanged\"> </span><span class=\"token line\">     ...\n</span><span class=\"token prefix unchanged\"> </span><span class=\"token line\">   ]\n</span><span class=\"token prefix unchanged\"> </span><span class=\"token line\"> }\n</span></span></code></pre></div><p>执行 <code>npm run build</code>，打开浏览器可以看到渲染正常。但是浏览器控制台出现了一个警告：</p>\n<div class=\"language-bash\" data-ext=\"sh\" data-title=\"sh\"><pre class=\"language-bash\"><code>runtime-core.esm-bundler.js:4432 Feature flags __VUE_OPTIONS_API__, __VUE_PROD_DEVTOOLS__ are not explicitly defined. You are running the esm-bundler build of Vue, <span class=\"token function\">which</span> expects these compile-time feature flags to be globally injected via the bundler config <span class=\"token keyword\">in</span> order to get better tree-shaking <span class=\"token keyword\">in</span> the production bundle.\n\nFor <span class=\"token function\">more</span> details, see https://link.vuejs.org/feature-flags.\n</code></pre></div><p>这是因为从 3.0.0-rc.3 开始，Vue 希望我们手动设置全局标识，这样做的好处是可以对最终的打包代码进行 tree-shaking 优化。</p>\n<p>全局标识有两个：</p>\n<ul>\n<li>__VUE_OPTIONS_API__（是否支持 Options API，默认为 <code>true</code>）</li>\n<li>__VUE_PROD_DEVTOOLS__（是否在生产环境中支持 devtools，默认为 <code>false</code>）</li>\n</ul>\n<p>为了在 webpack 中配置全局标识，可以使用 <code>DefinePlugin</code>。</p>\n<p><strong>webpack.config.js</strong></p>\n<div class=\"language-diff\" data-ext=\"diff\" data-title=\"diff\"><pre class=\"language-diff\"><code><span class=\"token unchanged\"><span class=\"token prefix unchanged\"> </span><span class=\"token line\"> module.exports = {\n</span><span class=\"token prefix unchanged\"> </span><span class=\"token line\">   plugins: [\n</span><span class=\"token prefix unchanged\"> </span><span class=\"token line\">     ...\n</span><span class=\"token prefix unchanged\"> </span><span class=\"token line\">     new DefinePlugin({\n</span><span class=\"token prefix unchanged\"> </span><span class=\"token line\">       BASE_URL: \"'./'\",\n</span></span><span class=\"token inserted-sign inserted\"><span class=\"token prefix inserted\">+</span><span class=\"token line\">       __VUE_OPTIONS_API__: true,\n</span><span class=\"token prefix inserted\">+</span><span class=\"token line\">       __VUE_PROD_DEVTOOLS__: false\n</span></span><span class=\"token unchanged\"><span class=\"token prefix unchanged\"> </span><span class=\"token line\">     }),\n</span><span class=\"token prefix unchanged\"> </span><span class=\"token line\">     ...\n</span><span class=\"token prefix unchanged\"> </span><span class=\"token line\">   ]\n</span><span class=\"token prefix unchanged\"> </span><span class=\"token line\"> }\n</span></span></code></pre></div><p>这时重新打包后，浏览器控制台的警告就会消除了。</p>\n<h2>总结</h2>\n<p>在这个案例中对 .vue 单文件进行了解析：安装 <code>vue-loader</code> 和 <code>@vue/compiler-sfc</code>，同时配置 <code>VueLoaderPlugin</code>，在重新打包后浏览器控制台会报一个全局标识的警告，通过配置 <code>DefinePlugin</code> 手动配置全局标识消除全局标识警告。</p>\n",
      "date_published": "2022-05-16T00:00:00.000Z",
      "date_modified": "2024-01-07T08:28:24.000Z",
      "authors": [],
      "tags": [
        "工程化"
      ]
    },
    {
      "title": "webpack-server",
      "url": "https://dribble-njr.github.io/blog/blog/frontend/engineering/build-tool/webpack/007-webpack-dev-server.html",
      "id": "https://dribble-njr.github.io/blog/blog/frontend/engineering/build-tool/webpack/007-webpack-dev-server.html",
      "summary": " 项目地址：https://github.com/Stephen-wzw/webpack-demo 目前我们开发的项目，为了运行需要有两个操作： 操作一：npm run build，编译相关的代码； 操作二：通过 live server 或者直接通过浏览器，打开 index.html 代码，查看效果。 这个过程会影响我们的开发效率，我们希望当文件发生改...",
      "content_html": "<blockquote>\n<p>项目地址：<a href=\"https://github.com/Stephen-wzw/webpack-demo\" target=\"_blank\" rel=\"noopener noreferrer\">https://github.com/Stephen-wzw/webpack-demo</a></p>\n</blockquote>\n<p>目前我们开发的项目，为了运行需要有两个操作：</p>\n<ul>\n<li>操作一：<code>npm run build</code>，编译相关的代码；</li>\n<li>操作二：通过 <code>live server</code> 或者直接通过浏览器，打开 <code>index.html</code> 代码，查看效果。</li>\n</ul>\n<p>这个过程会影响我们的开发效率，我们希望当文件发生改变后，可以自动的完成编译并展示。为了完成自动编译，webpack 提供了几种可选的方式：</p>\n<ul>\n<li>webpack watch mode</li>\n<li>webpack-dev-server</li>\n</ul>\n<h2><code>watch</code></h2>\n<p>webpack 给我们提供了 <code>watch</code> 模式，在该模式下，webpack 依赖图中的所有文件，只要有一个发生了更新，那么代码将会被重新编译，不需要再手动执行 <code>npm run build</code> 了。</p>\n<p>为了配置 <code>watch</code> 模式，可以直接在 <code>package.json</code> 中修改脚本命令：</p>\n<p><strong>package.json</strong></p>\n<div class=\"language-diff\" data-ext=\"diff\" data-title=\"diff\"><pre class=\"language-diff\"><code><span class=\"token unchanged\"><span class=\"token prefix unchanged\"> </span><span class=\"token line\"> \"scripts\": {\n</span><span class=\"token prefix unchanged\"> </span><span class=\"token line\">   \"test\": \"echo \\\"Error: no test specified\\\" &amp;&amp; exit 1\",\n</span><span class=\"token prefix unchanged\"> </span><span class=\"token line\">   \"build\": \"webpack\"\n</span></span><span class=\"token inserted-sign inserted\"><span class=\"token prefix inserted\">+</span><span class=\"token line\">   \"watch\": \"webpack --watch\"\n</span></span><span class=\"token unchanged\"><span class=\"token prefix unchanged\"> </span><span class=\"token line\"> },\n</span></span></code></pre></div><p>此时执行 <code>npm run watch</code>，webpack 会在配置中自动加上 <code>wathc: true</code> 的指令，这样以后所有的更新都会被检测到并重新编译。</p>\n<h2><code>webpack-dev-server</code></h2>\n<p>虽然 <code>watch</code> 方式可以很便捷的帮我们重新编译打包，但操作二自动刷新浏览器其实是 live server 帮我们完成的。为了在<strong>不使用</strong> live server 的情况下完成 live reloading （实时重新加载）的功能，需要使用 <code>webpack-dev-server</code>。</p>\n<blockquote>\n<p>开启 dev-server 后，<code>watch</code> 模式就不必要开启了。</p>\n</blockquote>\n<div class=\"language-bash\" data-ext=\"sh\" data-title=\"sh\"><pre class=\"language-bash\"><code><span class=\"token function\">npm</span> <span class=\"token function\">install</span> webpack-dev-server <span class=\"token parameter variable\">-D</span>\n</code></pre></div><p>在 <code>package.json</code> 中修改脚本命令：</p>\n<p><strong>package.json</strong></p>\n<div class=\"language-diff\" data-ext=\"diff\" data-title=\"diff\"><pre class=\"language-diff\"><code><span class=\"token unchanged\"><span class=\"token prefix unchanged\"> </span><span class=\"token line\"> \"scripts\": {\n</span><span class=\"token prefix unchanged\"> </span><span class=\"token line\">   \"test\": \"echo \\\"Error: no test specified\\\" &amp;&amp; exit 1\",\n</span><span class=\"token prefix unchanged\"> </span><span class=\"token line\">   \"build\": \"webpack\",\n</span><span class=\"token prefix unchanged\"> </span><span class=\"token line\">   \"watch\": \"webpack --watch\",\n</span></span><span class=\"token inserted-sign inserted\"><span class=\"token prefix inserted\">+</span><span class=\"token line\">   \"serve\": \"webpack serve\"\n</span></span><span class=\"token unchanged\"><span class=\"token prefix unchanged\"> </span><span class=\"token line\"> },\n</span></span></code></pre></div><p>执行 <code>npm run serve</code> 后，webpack 内部会找到 <code>webpack-dev-server</code> 来开启服务。</p>\n<blockquote>\n<p><code>webpack-dev-server</code> 在编译之后不会写入到任何输出文件，而是将打包的文件保留在内存中。</p>\n</blockquote>\n<h3>热模块替换（HMR）</h3>\n<p>热模块更新（Hot Module Replacement），指在应用程序运行过程中，替换、添加、删除模块，而无需重新刷新整个页面。</p>\n<p>HMR 通过以下几种方式，提升开发效率：</p>\n<ul>\n<li>不需重新加载整个页面，这样可以保留某些应用程序的状态不丢失；</li>\n<li>只更新需要变化的内容，节省开发时间；</li>\n<li>修改了 css、js 源代码，会立即在浏览器更新，相当于直接在浏览器的 devtools 中直接修改样式。</li>\n</ul>\n<p><code>webpack-dev-server</code> 内置支持 HMR，只需要开启即可。</p>\n<blockquote>\n<p>在不开启 HMR 的情况下，整个页面会重新刷新，使用的是 live reloading。</p>\n</blockquote>\n<p><strong>webpack.config.js</strong></p>\n<div class=\"language-diff\" data-ext=\"diff\" data-title=\"diff\"><pre class=\"language-diff\"><code><span class=\"token unchanged\"><span class=\"token prefix unchanged\"> </span><span class=\"token line\"> module.exports = {\n</span><span class=\"token prefix unchanged\"> </span><span class=\"token line\">   ...\n</span></span><span class=\"token inserted-sign inserted\"><span class=\"token prefix inserted\">+</span><span class=\"token line\">   devServer: {\n</span><span class=\"token prefix inserted\">+</span><span class=\"token line\">     hot: true\n</span><span class=\"token prefix inserted\">+</span><span class=\"token line\">   }\n</span></span><span class=\"token unchanged\"><span class=\"token prefix unchanged\"> </span><span class=\"token line\"> }\n</span></span></code></pre></div><p>在开启后，修改内容仍然是进行整个页面的重新刷新，因为你还没有告知 webpack 哪些模块需要热更新。现在修改 <code>index.js</code>。</p>\n<p><strong>index.js</strong></p>\n<div class=\"language-diff\" data-ext=\"diff\" data-title=\"diff\"><pre class=\"language-diff\"><code><span class=\"token unchanged\"><span class=\"token prefix unchanged\"> </span><span class=\"token line\"> ...\n</span><span class=\"token prefix unchanged\"> </span><span class=\"token line\"> import { sum } from \"./js/math.js\";\n</span></span><span class=\"token inserted-sign inserted\"><span class=\"token prefix inserted\">+</span><span class=\"token line\"> if (module.hot) {\n</span><span class=\"token prefix inserted\">+</span><span class=\"token line\">   module.hot.accept(\"./js/math.js\", () =&gt; {\n</span><span class=\"token prefix inserted\">+</span><span class=\"token line\">     console.log(\"模块更新了\");\n</span><span class=\"token prefix inserted\">+</span><span class=\"token line\">   })\n</span><span class=\"token prefix inserted\">+</span><span class=\"token line\"> }\n</span></span><span class=\"token unchanged\"><span class=\"token prefix unchanged\"> </span><span class=\"token line\"> ...\n</span></span></code></pre></div><p>这时再修改 <code>math.js</code>，浏览器就不会再重新刷新整个页面了。</p>\n<div class=\"language-bash\" data-ext=\"sh\" data-title=\"sh\"><pre class=\"language-bash\"><code><span class=\"token punctuation\">[</span>webpack-dev-server<span class=\"token punctuation\">]</span> App updated. Recompiling<span class=\"token punctuation\">..</span>.\n<span class=\"token punctuation\">[</span>webpack-dev-server<span class=\"token punctuation\">]</span> App hot update<span class=\"token punctuation\">..</span>.\n<span class=\"token punctuation\">[</span>HMR<span class=\"token punctuation\">]</span> Checking <span class=\"token keyword\">for</span> updates on the server<span class=\"token punctuation\">..</span>.\nHMR111\n模块更新了\n<span class=\"token punctuation\">[</span>HMR<span class=\"token punctuation\">]</span> Updated modules:\n<span class=\"token punctuation\">[</span>HMR<span class=\"token punctuation\">]</span>  - ./src/js/math.js\n<span class=\"token punctuation\">[</span>HMR<span class=\"token punctuation\">]</span> App is up to date.\n</code></pre></div><p>而在真实开发中，难道每个文件都需要手动指定 HMR 吗？事实上不需要这么麻烦。</p>\n<p>在 Vue 开发中，使用 <code>vue-loader</code> 就能支持 vue 组件的 HMR。React 开发中，有 React Hot Loader，实时调整 React 组件（目前 React 官方已经弃用了，改成使用 react-refresh）；</p>\n<p>可以试试修改之前的 <code>App.vue</code> 组件，不需任何手动配置即可达到 HMR 的效果。</p>\n<h3>其他配置</h3>\n<h4><code>host</code></h4>\n<p>可以设置主机地址，默认值为 localhost，还可以设置为 0.0.0.0。</p>\n<p>localhost 和 0.0.0.0 的区别：</p>\n<ul>\n<li>localhost：本质上是一个域名，通常情况下会被解析成 127.0.0.1；</li>\n<li>127.0.0.1：回环地址(Loop Back Address)，表达的意思其实是我们主机自己发出去的包，直接被自己接收，正常的数据包经过应用层 - 传输层 - 网络层 - 数据链路层 - 物理层，而回环地址，是在网络层直接就被获取到了，是不会经过数据链路层和物理层的。比如我们监听 127.0.0.1 时，在同一个网段下的主机中，通过 ip 地址是不能访问的，只能本机访问；</li>\n<li>0.0.0.0：监听 IPV4 上所有的地址，再根据端口找到不同的应用程序，比如我们监听 0.0.0.0 时，在同一个网段下的主机中，通过 ip 地址是可以访问的;</li>\n</ul>\n<h4><code>port</code></h4>\n<p>可以配置端口号。</p>\n<h4><code>open</code></h4>\n<p>默认值为 false，设置为 true 会自动打开浏览器，也可以设置 Chrome Google 等值。</p>\n<h4><code>compress</code></h4>\n<p>是否为静态文件开启 gzip 压缩，默认值为 false，可以设置为 true。</p>\n<h4><code>proxy</code></h4>\n<p>可以设置代理解决跨域访问的问题。比如一个 api 请求是 <a href=\"http://localhost:8888\" target=\"_blank\" rel=\"noopener noreferrer\">http://localhost:8888</a>，但是本地客户端的域名是 <a href=\"http://localhost:8000\" target=\"_blank\" rel=\"noopener noreferrer\">http://localhost:8000</a>，这时发送请求就会出现跨域的问题。</p>\n<p>这时可以先将请求发送到一个代理服务器，代理服务器和 API 服务器没有跨域问题，就可以解决跨域问题。<code>proxy</code> 有如下设置：</p>\n<div class=\"language-javascript\" data-ext=\"js\" data-title=\"js\"><pre class=\"language-javascript\"><code>module<span class=\"token punctuation\">.</span>exports <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token literal-property property\">devServer</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token literal-property property\">proxy</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">{</span>\n      <span class=\"token string-property property\">\"/api\"</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token literal-property property\">target</span><span class=\"token operator\">:</span> <span class=\"token string\">\"http://localhost:8888\"</span><span class=\"token punctuation\">,</span>\n        <span class=\"token literal-property property\">pathRewrite</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">{</span>\n          <span class=\"token string-property property\">\"^/api\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"\"</span>\n        <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n        <span class=\"token literal-property property\">secure</span><span class=\"token operator\">:</span> <span class=\"token boolean\">false</span><span class=\"token punctuation\">,</span>\n        <span class=\"token literal-property property\">changeOrigin</span><span class=\"token operator\">:</span> <span class=\"token boolean\">true</span>\n      <span class=\"token punctuation\">}</span>\n    <span class=\"token punctuation\">}</span>\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n</code></pre></div><ul>\n<li><code>target</code>：表示代理到的目标地址，比如 target:  /api/moment 会被代理到 <a href=\"http://localhost:8888/api/moment%EF%BC%9B\" target=\"_blank\" rel=\"noopener noreferrer\">http://localhost:8888/api/moment；</a></li>\n<li><code>pathRewrite</code>：默认情况下，/api 也会被写入到 URL 中（<a href=\"http://localhost:8888/api/moment%EF%BC%89%EF%BC%8C%E5%A6%82%E6%9E%9C%E5%B8%8C%E6%9C%9B%E5%88%A0%E9%99%A4%EF%BC%8C%E5%8F%AF%E4%BB%A5%E4%BD%BF%E7%94%A8\" target=\"_blank\" rel=\"noopener noreferrer\">http://localhost:8888/api/moment），如果希望删除，可以使用</a> <code>pathRewrite</code>；</li>\n<li><code>secure</code>：默认（true）情况下不接收转发到 http 服务器上，如果希望支持 http，可以设置为 false；</li>\n<li><code>changeOrigin</code>：是否更新代理后请求的 headers 中 host 地址。</li>\n</ul>\n<blockquote>\n<p>关于 <code>changeOrigin</code>：因为我们真实的请求虽然是通过 <a href=\"http://localhost:8888\" target=\"_blank\" rel=\"noopener noreferrer\">http://localhost:8888</a> 来代理的，但是默认情况下 host 的值还会是 <a href=\"http://localhost:8000\" target=\"_blank\" rel=\"noopener noreferrer\">http://localhost:8000</a>，如果我们需要修改为 <a href=\"http://localhost:8888\" target=\"_blank\" rel=\"noopener noreferrer\">http://localhost:8888</a>，那么可以将 <code>changeOrigin</code> 设置为 true 即可。<br>\n修改 host 的原因在于有些服务器可能为了防止爬虫，在服务器中做了关于 headers 的校验，因此一般将 <code>changeOrigin</code> 设置为 true。</p>\n</blockquote>\n<h2>总结</h2>\n<p>这个案例中搭建了本地开发服务器，有两种方式：<code>watch</code> 和 <code>webpack-dev-server</code>。<code>webpack-dev-server</code> 中自带 HMR，可以指定某个模块开启 HMR，以及 dev-server 中的一些其他配置。</p>\n",
      "date_published": "2022-05-17T00:00:00.000Z",
      "date_modified": "2024-01-07T08:28:24.000Z",
      "authors": [],
      "tags": [
        "工程化"
      ]
    },
    {
      "title": "webpack-resolve",
      "url": "https://dribble-njr.github.io/blog/blog/frontend/engineering/build-tool/webpack/008-webpack-resolve.html",
      "id": "https://dribble-njr.github.io/blog/blog/frontend/engineering/build-tool/webpack/008-webpack-resolve.html",
      "summary": " 项目地址：https://github.com/Stephen-wzw/webpack-demo 在开发中会有各种各样的模块，这些文件可能自己编写，也可能来自第三方库。resolve 选项能设置模块如何被解析。webpack 会提供合理的默认值，但是还是可能会修改一些解析的细节。 webpack 解析规则 绝对路径 由于以及获得文件的绝对路径，因此不...",
      "content_html": "<blockquote>\n<p>项目地址：<a href=\"https://github.com/Stephen-wzw/webpack-demo\" target=\"_blank\" rel=\"noopener noreferrer\">https://github.com/Stephen-wzw/webpack-demo</a></p>\n</blockquote>\n<p>在开发中会有各种各样的模块，这些文件可能自己编写，也可能来自第三方库。<code>resolve</code> 选项能设置模块如何被解析。webpack 会提供合理的默认值，但是还是可能会修改一些解析的细节。</p>\n<h2>webpack 解析规则</h2>\n<h3>绝对路径</h3>\n<div class=\"language-javascript\" data-ext=\"js\" data-title=\"js\"><pre class=\"language-javascript\"><code><span class=\"token keyword\">import</span> <span class=\"token string\">'/home/me/file'</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">import</span> <span class=\"token string\">'C:\\\\Users\\\\me\\\\file'</span><span class=\"token punctuation\">;</span>\n</code></pre></div><p>由于以及获得文件的绝对路径，因此不需要再做进一步解析。</p>\n<h3>相对路径</h3>\n<div class=\"language-javascript\" data-ext=\"js\" data-title=\"js\"><pre class=\"language-javascript\"><code><span class=\"token keyword\">import</span> <span class=\"token string\">'../src/file1'</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">import</span> <span class=\"token string\">'./file2'</span><span class=\"token punctuation\">;</span>\n</code></pre></div><p>在这种情况下，使用 <code>import</code> 或 <code>require</code> 的资源文件所处的目录，被认为是上下文目录。在 <code>import/require</code> 中给定的相对路径，会拼接此上下文路径，来生成模块的绝对路径。</p>\n<h3>模块路径</h3>\n<div class=\"language-javascript\" data-ext=\"js\" data-title=\"js\"><pre class=\"language-javascript\"><code><span class=\"token keyword\">import</span> <span class=\"token string\">'module'</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">import</span> <span class=\"token string\">'module/lib/file'</span><span class=\"token punctuation\">;</span>\n</code></pre></div><p>模块会在 resolve.modules 中指定检索模块，默认值为 ['node_modules]，所以默认是从 <code>node_modules</code> 下查找文件。</p>\n<h3>确定文件还是文件夹</h3>\n<p>一旦根据上述规则解析路径后，resolver 将会检查路径是指向文件还是文件夹。如果路径指向文件：</p>\n<ul>\n<li>如果文件具有扩展名，则直接将文件打包。</li>\n<li>否则，将使用 <code>resolve.extensions</code> 选项作为文件扩展名来解析，此选项会告诉解析器在解析中能够接受那些扩展名（例如 .js，.jsx）。</li>\n</ul>\n<p>如果路径指向一个文件夹，则进行如下步骤寻找具有正确扩展名的文件：</p>\n<ul>\n<li>根据 <code>resolve.mainFields</code> 配置中的字段顺序查找，默认值是 <code>['index']</code>；</li>\n<li>然后使用 <code>resolve.extensions</code> 选项，以类似的方式解析文件扩展名。</li>\n</ul>\n<h2><code>extensions</code> 和 <code>alias</code> 配置</h2>\n<p><code>extensions</code> 选项可以在解析到文件时自动添加扩展名。默认值为 <code>['.wasm', '.mjs', '.js', '.json']</code>。</p>\n<p><code>alias</code> 可以为路径配置别名，当项目结构比较深时，一个文件的路径可能加上 <code>../../../</code> 这种路径片段。就可以给常见的路径配置别名了。</p>\n<div class=\"language-javascript\" data-ext=\"js\" data-title=\"js\"><pre class=\"language-javascript\"><code><span class=\"token literal-property property\">resolve</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token literal-property property\">extensions</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">[</span><span class=\"token string\">'.wasm'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'.mjs'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'.js'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'.json'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'.jsx'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'.vue'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'.ts'</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span>\n  <span class=\"token literal-property property\">alias</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token string-property property\">'@'</span><span class=\"token operator\">:</span> path<span class=\"token punctuation\">.</span><span class=\"token function\">resolve</span><span class=\"token punctuation\">(</span>__dirname<span class=\"token punctuation\">,</span> <span class=\"token string\">'./src'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>\n    <span class=\"token string-property property\">'js'</span><span class=\"token operator\">:</span> path<span class=\"token punctuation\">.</span><span class=\"token function\">resolve</span><span class=\"token punctuation\">(</span>__dirname<span class=\"token punctuation\">,</span> <span class=\"token string\">'./src/js'</span><span class=\"token punctuation\">)</span>\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n</code></pre></div>",
      "date_published": "2022-05-17T00:00:00.000Z",
      "date_modified": "2024-01-07T08:28:24.000Z",
      "authors": [],
      "tags": [
        "工程化"
      ]
    },
    {
      "title": "webpack 环境分离",
      "url": "https://dribble-njr.github.io/blog/blog/frontend/engineering/build-tool/webpack/009-webpack-env-split.html",
      "id": "https://dribble-njr.github.io/blog/blog/frontend/engineering/build-tool/webpack/009-webpack-env-split.html",
      "summary": " 项目地址：https://github.com/Stephen-wzw/webpack-demo development(开发环境) 和 production(生产环境) 这两个环境下的构建目标存在着巨大差异。由于要遵循逻辑分离，需要为每个环境编写彼此独立的 webpack 配置。 配置 先安装 webpack-merge。 project webp...",
      "content_html": "<blockquote>\n<p>项目地址：<a href=\"https://github.com/Stephen-wzw/webpack-demo\" target=\"_blank\" rel=\"noopener noreferrer\">https://github.com/Stephen-wzw/webpack-demo</a></p>\n</blockquote>\n<p>development(开发环境) 和 production(生产环境) 这两个环境下的构建目标存在着巨大差异。由于要遵循逻辑分离，需要为每个环境编写彼此独立的 webpack 配置。</p>\n<h2>配置</h2>\n<p>先安装 <code>webpack-merge</code>。</p>\n<div class=\"language-bash\" data-ext=\"sh\" data-title=\"sh\"><pre class=\"language-bash\"><code><span class=\"token function\">npm</span> <span class=\"token function\">install</span> webpack-merge <span class=\"token parameter variable\">-D</span>\n</code></pre></div><p><strong>project</strong></p>\n<div class=\"language-diff\" data-ext=\"diff\" data-title=\"diff\"><pre class=\"language-diff\"><code>webpack-demo\n<span class=\"token unchanged\"><span class=\"token prefix unchanged\"> </span><span class=\"token line\"> |- node_modules\n</span><span class=\"token prefix unchanged\"> </span><span class=\"token line\"> |- package-lock.json\n</span><span class=\"token prefix unchanged\"> </span><span class=\"token line\"> |- package.json\n</span><span class=\"token prefix unchanged\"> </span><span class=\"token line\"> |- postcss.config.js\n</span><span class=\"token prefix unchanged\"> </span><span class=\"token line\"> |- babel.config.js\n</span></span><span class=\"token deleted-sign deleted\"><span class=\"token prefix deleted\">-</span><span class=\"token line\"> |- webpack.config.js\n</span></span><span class=\"token inserted-sign inserted\"><span class=\"token prefix inserted\">+</span><span class=\"token line\"> |- webpack.common.js\n</span><span class=\"token prefix inserted\">+</span><span class=\"token line\"> |- webpack.prod.js\n</span><span class=\"token prefix inserted\">+</span><span class=\"token line\"> |- webpack.dev.js\n</span></span><span class=\"token unchanged\"><span class=\"token prefix unchanged\"> </span><span class=\"token line\"> |- /public\n</span><span class=\"token prefix unchanged\"> </span><span class=\"token line\"> |- /src\n</span></span></code></pre></div><p><strong>webpack.common.js</strong></p>\n<div class=\"language-javascript\" data-ext=\"js\" data-title=\"js\"><pre class=\"language-javascript\"><code><span class=\"token keyword\">const</span> path <span class=\"token operator\">=</span> <span class=\"token function\">require</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"path\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">const</span> HtmlWebpackPlugin <span class=\"token operator\">=</span> <span class=\"token function\">require</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"html-webpack-plugin\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">const</span> <span class=\"token punctuation\">{</span> DefinePlugin <span class=\"token punctuation\">}</span> <span class=\"token operator\">=</span> <span class=\"token function\">require</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"webpack\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">const</span> <span class=\"token punctuation\">{</span> VueLoaderPlugin <span class=\"token punctuation\">}</span> <span class=\"token operator\">=</span> <span class=\"token function\">require</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"vue-loader/dist/index\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\nmodule<span class=\"token punctuation\">.</span>exports <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token literal-property property\">entry</span><span class=\"token operator\">:</span> <span class=\"token string\">\"./src/index.js\"</span><span class=\"token punctuation\">,</span>\n  <span class=\"token literal-property property\">output</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token literal-property property\">filename</span><span class=\"token operator\">:</span> <span class=\"token string\">\"bundle.js\"</span><span class=\"token punctuation\">,</span>\n    <span class=\"token literal-property property\">path</span><span class=\"token operator\">:</span> path<span class=\"token punctuation\">.</span><span class=\"token function\">resolve</span><span class=\"token punctuation\">(</span>__dirname<span class=\"token punctuation\">,</span> <span class=\"token string\">\"dist\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> <span class=\"token comment\">// 需要使用绝对路径</span>\n    <span class=\"token literal-property property\">publicPath</span><span class=\"token operator\">:</span> <span class=\"token string\">''</span><span class=\"token punctuation\">,</span>\n    <span class=\"token literal-property property\">clean</span><span class=\"token operator\">:</span> <span class=\"token boolean\">true</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n  <span class=\"token literal-property property\">resolve</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token literal-property property\">extensions</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">[</span><span class=\"token string\">'.wasm'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'.mjs'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'.js'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'.json'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'.jsx'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'.vue'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'.ts'</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span>\n    <span class=\"token literal-property property\">alias</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">{</span>\n      <span class=\"token string-property property\">'@'</span><span class=\"token operator\">:</span> path<span class=\"token punctuation\">.</span><span class=\"token function\">resolve</span><span class=\"token punctuation\">(</span>__dirname<span class=\"token punctuation\">,</span> <span class=\"token string\">'./src'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>\n      <span class=\"token string-property property\">'js'</span><span class=\"token operator\">:</span> path<span class=\"token punctuation\">.</span><span class=\"token function\">resolve</span><span class=\"token punctuation\">(</span>__dirname<span class=\"token punctuation\">,</span> <span class=\"token string\">'./src/js'</span><span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">}</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n  <span class=\"token literal-property property\">module</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token literal-property property\">rules</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">[</span>\n      <span class=\"token punctuation\">{</span>\n        <span class=\"token literal-property property\">test</span><span class=\"token operator\">:</span> <span class=\"token regex\"><span class=\"token regex-delimiter\">/</span><span class=\"token regex-source language-regex\">\\.(less|css)$</span><span class=\"token regex-delimiter\">/</span></span><span class=\"token punctuation\">,</span>\n        <span class=\"token literal-property property\">use</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">[</span><span class=\"token string\">\"style-loader\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"css-loader\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"postcss-loader\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"less-loader\"</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span>\n      <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n      <span class=\"token punctuation\">{</span>\n        <span class=\"token literal-property property\">test</span><span class=\"token operator\">:</span> <span class=\"token regex\"><span class=\"token regex-delimiter\">/</span><span class=\"token regex-source language-regex\">\\.(jpe?g|png|gif|svg)$</span><span class=\"token regex-delimiter\">/</span></span><span class=\"token punctuation\">,</span>\n        <span class=\"token literal-property property\">type</span><span class=\"token operator\">:</span> <span class=\"token string\">\"asset\"</span><span class=\"token punctuation\">,</span>\n        <span class=\"token literal-property property\">generator</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">{</span>\n          <span class=\"token literal-property property\">filename</span><span class=\"token operator\">:</span> <span class=\"token string\">\"img/[name]_[hash:8][ext]\"</span>\n        <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n        <span class=\"token literal-property property\">parser</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">{</span>\n          <span class=\"token literal-property property\">dataUrlCondition</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">{</span>\n            <span class=\"token literal-property property\">maxSize</span><span class=\"token operator\">:</span> <span class=\"token number\">100</span> <span class=\"token operator\">*</span> <span class=\"token number\">1024</span>\n          <span class=\"token punctuation\">}</span>\n        <span class=\"token punctuation\">}</span>\n      <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n      <span class=\"token punctuation\">{</span>\n        <span class=\"token literal-property property\">test</span><span class=\"token operator\">:</span> <span class=\"token regex\"><span class=\"token regex-delimiter\">/</span><span class=\"token regex-source language-regex\">\\.(eot|ttf|woff2?)$</span><span class=\"token regex-delimiter\">/</span></span><span class=\"token punctuation\">,</span>\n        <span class=\"token literal-property property\">type</span><span class=\"token operator\">:</span> <span class=\"token string\">\"asset/resource\"</span><span class=\"token punctuation\">,</span>\n        <span class=\"token literal-property property\">generator</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">{</span>\n          <span class=\"token literal-property property\">filename</span><span class=\"token operator\">:</span> <span class=\"token string\">\"font/[name]_[hash:6][ext]\"</span>\n        <span class=\"token punctuation\">}</span>\n      <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n      <span class=\"token punctuation\">{</span>\n        <span class=\"token literal-property property\">test</span><span class=\"token operator\">:</span> <span class=\"token regex\"><span class=\"token regex-delimiter\">/</span><span class=\"token regex-source language-regex\">\\.js$</span><span class=\"token regex-delimiter\">/</span></span><span class=\"token punctuation\">,</span>\n        <span class=\"token literal-property property\">loader</span><span class=\"token operator\">:</span> <span class=\"token string\">\"babel-loader\"</span>\n      <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n      <span class=\"token punctuation\">{</span>\n        <span class=\"token literal-property property\">test</span><span class=\"token operator\">:</span> <span class=\"token regex\"><span class=\"token regex-delimiter\">/</span><span class=\"token regex-source language-regex\">\\.vue$</span><span class=\"token regex-delimiter\">/</span></span><span class=\"token punctuation\">,</span>\n        <span class=\"token literal-property property\">loader</span><span class=\"token operator\">:</span> <span class=\"token string\">\"vue-loader\"</span>\n      <span class=\"token punctuation\">}</span>\n    <span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n  <span class=\"token literal-property property\">plugins</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">[</span>\n    <span class=\"token keyword\">new</span> <span class=\"token class-name\">HtmlWebpackPlugin</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span>\n      <span class=\"token literal-property property\">title</span><span class=\"token operator\">:</span> <span class=\"token string\">\"webpack-plugin\"</span><span class=\"token punctuation\">,</span>\n      <span class=\"token literal-property property\">template</span><span class=\"token operator\">:</span> <span class=\"token string\">\"./public/index.html\"</span>\n    <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>\n    <span class=\"token keyword\">new</span> <span class=\"token class-name\">DefinePlugin</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span>\n      <span class=\"token constant\">BASE_URL</span><span class=\"token operator\">:</span> <span class=\"token string\">\"'./'\"</span><span class=\"token punctuation\">,</span>\n      <span class=\"token literal-property property\">__VUE_OPTIONS_API__</span><span class=\"token operator\">:</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">,</span>\n      <span class=\"token literal-property property\">__VUE_PROD_DEVTOOLS__</span><span class=\"token operator\">:</span> <span class=\"token boolean\">false</span>\n    <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>\n    <span class=\"token keyword\">new</span> <span class=\"token class-name\">VueLoaderPlugin</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n  <span class=\"token punctuation\">]</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n</code></pre></div><p><strong>webpack.dev.js</strong></p>\n<div class=\"language-javascript\" data-ext=\"js\" data-title=\"js\"><pre class=\"language-javascript\"><code><span class=\"token keyword\">const</span> <span class=\"token punctuation\">{</span> merge <span class=\"token punctuation\">}</span> <span class=\"token operator\">=</span> <span class=\"token function\">require</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"webpack-merge\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">const</span> common <span class=\"token operator\">=</span> <span class=\"token function\">require</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"./webpack.common.js\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\nmodule<span class=\"token punctuation\">.</span>exports <span class=\"token operator\">=</span> <span class=\"token function\">merge</span><span class=\"token punctuation\">(</span>common<span class=\"token punctuation\">,</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token literal-property property\">mode</span><span class=\"token operator\">:</span> <span class=\"token string\">\"development\"</span><span class=\"token punctuation\">,</span>\n  <span class=\"token literal-property property\">devtool</span><span class=\"token operator\">:</span> <span class=\"token string\">\"source-map\"</span><span class=\"token punctuation\">,</span>\n  <span class=\"token literal-property property\">devServer</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token literal-property property\">hot</span><span class=\"token operator\">:</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">,</span>\n    <span class=\"token literal-property property\">host</span><span class=\"token operator\">:</span> <span class=\"token string\">\"0.0.0.0\"</span><span class=\"token punctuation\">,</span>\n    <span class=\"token literal-property property\">port</span><span class=\"token operator\">:</span> <span class=\"token number\">8000</span><span class=\"token punctuation\">,</span>\n    <span class=\"token literal-property property\">open</span><span class=\"token operator\">:</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">,</span>\n    <span class=\"token literal-property property\">compress</span><span class=\"token operator\">:</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">,</span>\n    <span class=\"token literal-property property\">proxy</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">{</span>\n      <span class=\"token string-property property\">\"/api\"</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token literal-property property\">target</span><span class=\"token operator\">:</span> <span class=\"token string\">\"http://localhost:8888\"</span><span class=\"token punctuation\">,</span>\n        <span class=\"token literal-property property\">pathRewrite</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">{</span>\n          <span class=\"token string-property property\">\"^/api\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"\"</span>\n        <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n        <span class=\"token literal-property property\">secure</span><span class=\"token operator\">:</span> <span class=\"token boolean\">false</span><span class=\"token punctuation\">,</span>\n        <span class=\"token literal-property property\">changeOrigin</span><span class=\"token operator\">:</span> <span class=\"token boolean\">true</span>\n      <span class=\"token punctuation\">}</span>\n    <span class=\"token punctuation\">}</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span>\n</code></pre></div><p><strong>webpack.prod.js</strong></p>\n<div class=\"language-javascript\" data-ext=\"js\" data-title=\"js\"><pre class=\"language-javascript\"><code><span class=\"token keyword\">const</span> <span class=\"token punctuation\">{</span> merge <span class=\"token punctuation\">}</span> <span class=\"token operator\">=</span> <span class=\"token function\">require</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"webpack-merge\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">const</span> common <span class=\"token operator\">=</span> <span class=\"token function\">require</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"./webpack.common.js\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">const</span> CopyPlugin <span class=\"token operator\">=</span> <span class=\"token function\">require</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"copy-webpack-plugin\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\nmodule<span class=\"token punctuation\">.</span>exports <span class=\"token operator\">=</span> <span class=\"token function\">merge</span><span class=\"token punctuation\">(</span>common<span class=\"token punctuation\">,</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token literal-property property\">mode</span><span class=\"token operator\">:</span> <span class=\"token string\">\"production\"</span><span class=\"token punctuation\">,</span>\n  <span class=\"token literal-property property\">plugins</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">[</span>\n    <span class=\"token keyword\">new</span> <span class=\"token class-name\">CopyPlugin</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span>\n      <span class=\"token literal-property property\">patterns</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">[</span>\n        <span class=\"token punctuation\">{</span>\n          <span class=\"token literal-property property\">from</span><span class=\"token operator\">:</span> <span class=\"token string\">\"public\"</span><span class=\"token punctuation\">,</span>\n          <span class=\"token literal-property property\">globOptions</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">{</span>\n            <span class=\"token literal-property property\">ignore</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">[</span><span class=\"token string\">'**/index.html'</span><span class=\"token punctuation\">]</span>\n          <span class=\"token punctuation\">}</span>\n        <span class=\"token punctuation\">}</span>\n      <span class=\"token punctuation\">]</span>\n    <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>\n  <span class=\"token punctuation\">]</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span>\n</code></pre></div><p><strong>package.json</strong></p>\n<div class=\"language-diff\" data-ext=\"diff\" data-title=\"diff\"><pre class=\"language-diff\"><code><span class=\"token unchanged\"><span class=\"token prefix unchanged\"> </span><span class=\"token line\"> \"scripts\": {\n</span><span class=\"token prefix unchanged\"> </span><span class=\"token line\">   \"test\": \"echo \\\"Error: no test specified\\\" &amp;&amp; exit 1\",\n</span></span><span class=\"token deleted-sign deleted\"><span class=\"token prefix deleted\">-</span><span class=\"token line\">   \"build\": \"webpack\",\n</span></span><span class=\"token inserted-sign inserted\"><span class=\"token prefix inserted\">+</span><span class=\"token line\">   \"build\": \"webpack --config webpack.prod.js\",\n</span></span><span class=\"token unchanged\"><span class=\"token prefix unchanged\"> </span><span class=\"token line\">   \"watch\": \"webpack --watch\",\n</span></span><span class=\"token deleted-sign deleted\"><span class=\"token prefix deleted\">-</span><span class=\"token line\">   \"serve\": \"webpack serve\"\n</span></span><span class=\"token inserted-sign inserted\"><span class=\"token prefix inserted\">+</span><span class=\"token line\">   \"serve\": \"webpack serve --config webpack.dev.js\"\n</span></span><span class=\"token unchanged\"><span class=\"token prefix unchanged\"> </span><span class=\"token line\"> },\n</span></span></code></pre></div>",
      "date_published": "2022-05-17T00:00:00.000Z",
      "date_modified": "2024-01-07T08:28:24.000Z",
      "authors": [],
      "tags": [
        "工程化"
      ]
    },
    {
      "title": "介绍",
      "url": "https://dribble-njr.github.io/blog/blog/reading/patterns/vanilla/",
      "id": "https://dribble-njr.github.io/blog/blog/reading/patterns/vanilla/",
      "summary": " 提示 内容来自：patterns。 设计模式是软件开发的基本组成部分，因为它们为软件设计中经常出现的问题提供了典型的解决方案。 与其说设计模式提供了具体的软件，不如说设计模式只是一种概念，可以用一种优化的方式处理重复出现的问题。 在过去几年中，Web 开发的生态系统发生了巨大的变化。一些众所周知的设计模式可能已经不再像以前那样有价值，而另一些设计模式...",
      "content_html": "<div class=\"hint-container tip\">\n<p class=\"hint-container-title\">提示</p>\n<p>内容来自：<a href=\"https://www.patterns.dev/\" target=\"_blank\" rel=\"noopener noreferrer\">patterns</a>。</p>\n</div>\n<p>设计模式是软件开发的基本组成部分，因为它们为软件设计中经常出现的问题提供了典型的解决方案。</p>\n<p>与其说设计模式提供了具体的软件，不如说设计模式只是一种概念，可以用一种优化的方式处理重复出现的问题。</p>\n<p>在过去几年中，Web 开发的生态系统发生了巨大的变化。一些众所周知的设计模式可能已经不再像以前那样有价值，而另一些设计模式则已经发展到可以利用新技术解决现代问题。</p>\n<p>Facebook 的 JavaScript 库 React 在过去五年中取得了巨大的发展，与 <a href=\"https://angular.io/docs\" target=\"_blank\" rel=\"noopener noreferrer\">Angular</a>、<a href=\"https://vuejs.org/guide/introduction.html\" target=\"_blank\" rel=\"noopener noreferrer\">Vue</a>、<a href=\"https://api.emberjs.com/ember/release\" target=\"_blank\" rel=\"noopener noreferrer\">Ember</a> 和 <a href=\"https://svelte.dev/docs/introduction\" target=\"_blank\" rel=\"noopener noreferrer\">Svelte</a> 等相比，React 是目前 <a href=\"https://npmtrends.com/@angular/core-vs-angular-vs-ember-source-vs-react-vs-svelte-vs-vue\" target=\"_blank\" rel=\"noopener noreferrer\">NPM 上下载次数最多</a> 的框架。</p>\n<p>由于 React 的流行，设计模式不断被修改、优化和创建，以便为当前的现代网络开发生态系统提供价值。最新版本的 React 引入了名为 Hooks 的新功能，它在应用程序设计中扮演着非常重要的角色，可以取代许多传统的设计模式。</p>\n<p>现代网络开发涉及许多不同类型的模式。本项目涵盖使用 ES2015+ 的常见设计模式的实现、优点和缺陷，React 特有的设计模式及其可能的修改和使用 React Hooks 的实现，以及更多有助于改进现代网络应用程序的模式和优化！</p>\n",
      "date_published": "2024-01-07T00:00:00.000Z",
      "date_modified": "2024-02-07T04:26:52.000Z",
      "authors": [
        {
          "name": "patterns"
        }
      ],
      "tags": [
        "reading"
      ]
    },
    {
      "title": "前端工程化",
      "url": "https://dribble-njr.github.io/blog/blog/frontend/engineering/",
      "id": "https://dribble-njr.github.io/blog/blog/frontend/engineering/",
      "summary": "开发、部署、线上过程中的管理工具，降低开发成本、提高开发效率。 开发环节 模块化：按职责划分功能，降低耦合 组件化 规范化：代码规范，打包规范，目录结构，文件命名 构建环节 各种打包工具：Webpack/Vite|Rollup/Rspack.... 性能优化等等 部署及线上 自动化：CI/CD 可衡量：支持灰度、页面性能指标 可恢复：快速定位、可回滚 ...",
      "content_html": "<p>开发、部署、线上过程中的管理工具，降低开发成本、提高开发效率。</p>\n<h3>开发环节</h3>\n<ul>\n<li>模块化：按职责划分功能，降低耦合</li>\n<li>组件化</li>\n<li>规范化：代码规范，打包规范，目录结构，文件命名</li>\n</ul>\n<h3>构建环节</h3>\n<p>各种打包工具：Webpack/Vite|Rollup/Rspack....</p>\n<p>性能优化等等</p>\n<h3>部署及线上</h3>\n<ul>\n<li>自动化：CI/CD</li>\n<li>可衡量：支持灰度、页面性能指标</li>\n<li>可恢复：快速定位、可回滚</li>\n</ul>\n<h3>开发上线流程</h3>\n<p>联调</p>\n",
      "date_published": "2023-12-23T00:00:00.000Z",
      "date_modified": "2023-12-24T06:41:05.000Z",
      "authors": [],
      "tags": [
        "工程化"
      ]
    },
    {
      "title": "Grid 布局",
      "url": "https://dribble-njr.github.io/blog/blog/frontend/basic/css/012-grid.html",
      "id": "https://dribble-njr.github.io/blog/blog/frontend/basic/css/012-grid.html",
      "summary": "什么是 grid 布局 flex 布局是 一维布局 模型，当面对一些场景时无法满足要求，比如下面这种情况，会出现最后一行无法左侧对齐的场景。 此时就需要使用 grid 布局，先看具体效果。 基本概念 容器和项目 和 flex 一样，采用网格布局的区域，被称为容器，其中的子元素称为项目。 行、列、间距 一个网格通常具有许多的列（column）与行（row...",
      "content_html": "<h2>什么是 grid 布局</h2>\n<p>flex 布局是 <strong>一维布局</strong> 模型，当面对一些场景时无法满足要求，比如下面这种情况，会出现最后一行无法左侧对齐的场景。</p>\n\n<p>此时就需要使用 grid 布局，先看具体效果。</p>\n\n<h2>基本概念</h2>\n<h3>容器和项目</h3>\n<p>和 flex 一样，采用网格布局的区域，被称为容器，其中的子元素称为项目。</p>\n<h3>行、列、间距</h3>\n<p>一个网格通常具有许多的列（column）与行（row），以及行与行、列与列之间的间隙，这个间隙一般被称为间距（gutter）。</p>\n<figure><img src=\"https://raw.githubusercontent.com/dribble-njr/typora-njr/master/img/20231224110006.png\" alt=\"grid\" tabindex=\"0\" loading=\"lazy\"><figcaption>grid</figcaption></figure>\n<h3>单元格</h3>\n<p>行和列的交叉区域就是单元格，正常情况下，n 行和 m 列会产生 n x m 个单元格。比如，3 行 3 列会产生 9 个单元格。</p>\n<h3>网格线</h3>\n<p>划分网格的线，称为\"网格线\"（grid line）。水平网格线划分出行，垂直网格线划分出列。</p>\n<p>正常情况下，n 行有 n + 1 根水平网格线，m 列有 m + 1 根垂直网格线，比如三行就有四根水平网格线。</p>\n<h2>容器属性</h2>\n<h3><code>display</code></h3>\n<p><code>display: grid</code> 指定一个容器采用网格布局。</p>\n\n<p>默认情况下，容器元素都是块级元素，但是也可以设置为行内元素 <code>display: inline-grid</code>。</p>\n\n<div class=\"hint-container warning\">\n<p class=\"hint-container-title\">注意</p>\n<p>注意，设为网格布局以后，容器子元素（项目）的 <code>float</code>、<code>display: inline-block</code>、<code>display: table-cell</code>、<code>vertical-align</code> 和 <code>column-\\*</code> 等设置都将失效。</p>\n</div>\n<h3><code>grid-template-columns</code> 和 <code>grid-template-rows</code></h3>\n<p>容器指定了网格布局后，需要设置行和列信息。<code>grid-template-columns</code> 属性定义每一列的列宽，<code>grid-template-rows</code> 属性定义每一行的行高。</p>\n<div class=\"language-css\" data-ext=\"css\" data-title=\"css\"><pre class=\"language-css\"><code><span class=\"token selector\">#container</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token property\">display</span><span class=\"token punctuation\">:</span> grid<span class=\"token punctuation\">;</span>\n  <span class=\"token property\">grid-template-columns</span><span class=\"token punctuation\">:</span> 50px 50px 50px<span class=\"token punctuation\">;</span>\n  <span class=\"token property\">grid-template-rows</span><span class=\"token punctuation\">:</span> 50px 50px 50px<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n</code></pre></div><p>上述代码指定了一个 3 x 3 的网格，行高列高都是 50px。</p>\n<h4><code>repeat()</code></h4>\n<p>一般情况下，可以使用 <code>repeat()</code> 函数避免重复书写同样的值。</p>\n<div class=\"language-css\" data-ext=\"css\" data-title=\"css\"><pre class=\"language-css\"><code><span class=\"token selector\">.container</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token property\">display</span><span class=\"token punctuation\">:</span> grid<span class=\"token punctuation\">;</span>\n  <span class=\"token property\">grid-template-columns</span><span class=\"token punctuation\">:</span> <span class=\"token function\">repeat</span><span class=\"token punctuation\">(</span>3<span class=\"token punctuation\">,</span> 50px<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token property\">grid-template-rows</span><span class=\"token punctuation\">:</span> <span class=\"token function\">repeat</span><span class=\"token punctuation\">(</span>3<span class=\"token punctuation\">,</span> 50px<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n</code></pre></div><p><code>repeat()</code> 接受两个参数，第一个参数是重复的次数（上例是 3），第二个参数是所要重复的值。</p>\n<p><code>repeat()</code> 重复某种模式也是可以的，下面代码表示定义了 6 列，第一列和第四列的宽度为 <code>100px</code>，第二列和第五列为 <code>20px</code>，第三列和第六列为 <code>80px</code>。</p>\n<div class=\"language-css\" data-ext=\"css\" data-title=\"css\"><pre class=\"language-css\"><code><span class=\"token property\">grid-template-columns</span><span class=\"token punctuation\">:</span> <span class=\"token function\">repeat</span><span class=\"token punctuation\">(</span>2<span class=\"token punctuation\">,</span> 100px 20px 80px<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n</code></pre></div>\n<h4><code>auto-fill</code></h4>\n<p>有时，单元格的大小是固定的，但是容器的大小不确定。如果希望每一行（或每一列）容纳尽可能多的单元格，这时可以使用 <code>auto-fill</code> 关键字表示自动填充。</p>\n<div class=\"hint-container info\">\n<p class=\"hint-container-title\">注意</p>\n<p>非常有用，开发中经常出现这种情况。</p>\n</div>\n\n<p>除了 <code>auto-fill</code>，还有一个关键字 <code>auto-fit</code>，两者的行为基本是相同的。只有当容器足够宽，可以在一行容纳所有单元格，并且单元格宽度不固定的时候，才会有 <a href=\"https://css-tricks.com/auto-sizing-columns-css-grid-auto-fill-vs-auto-fit/\" target=\"_blank\" rel=\"noopener noreferrer\">行为差异</a>：<code>auto-fill</code> 会用空格子填满剩余宽度，<code>auto-fit</code> 则会尽量扩大单元格的宽度。</p>\n<h4><code>fr</code></h4>\n<p>为了方便表示比例关系，网格布局提供了 <code>fr</code> 关键字（fraction 的缩写，意为\"片段\"）。如果两列的宽度分别为 <code>1fr</code> 和 <code>2fr</code>，就表示后者是前者的两倍。</p>\n\n<p><code>fr</code> 可以与绝对长度的单位结合使用，这时会非常方便，<code>grid-template-columns: 150px 1fr 2fr;</code> 表示第一列的宽度为 150 像素，第二列的宽度是第三列的一半。</p>\n\n<h4><code>minmax()</code></h4>\n<p><code>minmax()</code> 函数产生一个长度范围，表示长度就在这个范围之中。它接受两个参数，分别为最小值和最大值。</p>\n<div class=\"language-css\" data-ext=\"css\" data-title=\"css\"><pre class=\"language-css\"><code><span class=\"token property\">grid-template-columns</span><span class=\"token punctuation\">:</span> 1fr 1fr <span class=\"token function\">minmax</span><span class=\"token punctuation\">(</span>100px<span class=\"token punctuation\">,</span> 1fr<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n</code></pre></div><p>上面代码中，<code>minmax(100px, 1fr)</code> 表示列宽不小于 <code>100px</code>，不大于 <code>1fr</code>。</p>\n<h4>布局实例</h4>\n<p><code>grid-template-columns</code> 属性对于网页布局非常有用。两栏式布局只需要一行代码。</p>\n<div class=\"language-css\" data-ext=\"css\" data-title=\"css\"><pre class=\"language-css\"><code><span class=\"token selector\">.wrapper</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token property\">display</span><span class=\"token punctuation\">:</span> grid<span class=\"token punctuation\">;</span>\n  <span class=\"token property\">grid-template-columns</span><span class=\"token punctuation\">:</span> 70% 30%<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n</code></pre></div><p>上面代码将左边栏设为 70%，右边栏设为 30%。</p>\n<p>传统的十二网格布局，写起来也很容易。</p>\n<div class=\"language-css\" data-ext=\"css\" data-title=\"css\"><pre class=\"language-css\"><code><span class=\"token property\">grid-template-columns</span><span class=\"token punctuation\">:</span> <span class=\"token function\">repeat</span><span class=\"token punctuation\">(</span>12<span class=\"token punctuation\">,</span> 1fr<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n</code></pre></div><h3><code>grid-row-gap</code> <code>grid-column-gap</code> <code>grid-gap</code></h3>\n<p>控制了行和列，接下来还有行列之间的间距需要控制。</p>\n<p><code>grid-row-gap</code> 属性设置行与行的间隔（行间距），<code>grid-column-gap</code> 属性设置列与列的间隔（列间距）。</p>\n<div class=\"language-css\" data-ext=\"css\" data-title=\"css\"><pre class=\"language-css\"><code><span class=\"token selector\">.container</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token property\">grid-row-gap</span><span class=\"token punctuation\">:</span> 20px<span class=\"token punctuation\">;</span>\n  <span class=\"token property\">grid-column-gap</span><span class=\"token punctuation\">:</span> 20px<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n</code></pre></div><p><code>grid-gap</code> 属性是 <code>grid-column-gap</code> 和 <code>grid-row-gap</code> 的合并简写形式，语法如下。</p>\n<div class=\"language-css\" data-ext=\"css\" data-title=\"css\"><pre class=\"language-css\"><code><span class=\"token property\">grid-gap</span><span class=\"token punctuation\">:</span> &lt;grid-row-gap&gt; &lt;grid-column-gap&gt;<span class=\"token punctuation\">;</span>\n</code></pre></div><p>因此，上面一段 CSS 代码等同于下面的代码。</p>\n<div class=\"language-css\" data-ext=\"css\" data-title=\"css\"><pre class=\"language-css\"><code><span class=\"token selector\">.container</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token property\">grid-gap</span><span class=\"token punctuation\">:</span> 20px 20px<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n</code></pre></div><p>如果 <code>grid-gap</code> 省略了第二个值，浏览器认为第二个值等于第一个值。</p>\n<div class=\"hint-container info\">\n<p class=\"hint-container-title\">注意</p>\n<p>根据最新标准，上面三个属性名的 <code>grid-</code> 前缀已经删除，<code>grid-column-gap</code> 和 <code>grid-row-gap</code> 写成 <code>column-gap</code> 和 <code>row-gap</code>，<code>grid-gap</code> 写成 <code>gap</code>。</p>\n<p>间隙距离可以用任何长度单位包括百分比来表示，但不能使用 <code>fr</code> 单位。</p>\n</div>\n<h3><code>grid-template-areas</code></h3>\n<p>定义好网格后（行、列、间距），需要设定网格中放置元素的规则。</p>\n<div class=\"hint-container info\">\n<p class=\"hint-container-title\">注意</p>\n<p>可以使用 <a href=\"https://developer.mozilla.org/zh-CN/docs/Learn/CSS/CSS_layout/Grids#%E5%9F%BA%E4%BA%8E%E7%BA%BF%E7%9A%84%E5%85%83%E7%B4%A0%E6%94%BE%E7%BD%AE\" target=\"_blank\" rel=\"noopener noreferrer\">网格线</a> 放置元素内容，但是该方式不太直观，因此推荐使用网格区域放置元素。</p>\n</div>\n<div class=\"language-css\" data-ext=\"css\" data-title=\"css\"><pre class=\"language-css\"><code><span class=\"token selector\">.container</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token property\">display</span><span class=\"token punctuation\">:</span> grid<span class=\"token punctuation\">;</span>\n  <span class=\"token property\">grid-template-columns</span><span class=\"token punctuation\">:</span> 100px 100px 100px<span class=\"token punctuation\">;</span>\n  <span class=\"token property\">grid-template-rows</span><span class=\"token punctuation\">:</span> 100px 100px 100px<span class=\"token punctuation\">;</span>\n  <span class=\"token property\">grid-template-areas</span><span class=\"token punctuation\">:</span>\n    <span class=\"token string\">'a b c'</span>\n    <span class=\"token string\">'d e f'</span>\n    <span class=\"token string\">'g h i'</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n</code></pre></div><p>上面代码先划分出 9 个单元格，然后将其定名为 <code>a</code> 到 <code>i</code> 的九个区域，分别对应这九个单元格。</p>\n<p>如果某些区域不需要利用，则使用\"点\" <code>.</code> 表示。</p>\n<div class=\"language-css\" data-ext=\"css\" data-title=\"css\"><pre class=\"language-css\"><code><span class=\"token property\">grid-template-areas</span><span class=\"token punctuation\">:</span>\n  <span class=\"token string\">'a . c'</span>\n  <span class=\"token string\">'d . f'</span>\n  <span class=\"token string\">'g . i'</span><span class=\"token punctuation\">;</span>\n</code></pre></div><p>上面代码中，中间一列为点，表示没有用到该单元格，或者该单元格不属于任何区域。</p>\n<p>下面看一个实例，太强大了有没有。</p>\n\n<p>再来看一个更复杂的例子。</p>\n\n<h3><code>justify-items</code> <code>align-items</code> <code>place-items</code></h3>\n<p><code>justify-items</code> 设置单元格内容水平位置，<code>align-items</code> 设置单元格垂直方向位置。</p>\n<div class=\"language-css\" data-ext=\"css\" data-title=\"css\"><pre class=\"language-css\"><code><span class=\"token selector\">.container</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token property\">justify-items</span><span class=\"token punctuation\">:</span> start | end | center | stretch<span class=\"token punctuation\">;</span>\n  <span class=\"token property\">align-items</span><span class=\"token punctuation\">:</span> start | end | center | stretch<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n</code></pre></div><p>这两个属性的写法完全相同，都可以取下面这些值。</p>\n<ul>\n<li><code>start</code>：对齐单元格的起始边缘。</li>\n<li><code>end</code>：对齐单元格的结束边缘。</li>\n<li><code>center</code>：单元格内部居中。</li>\n<li><code>stretch</code>：拉伸，占满单元格的整个宽度（默认值）。</li>\n</ul>\n\n<p>可以使用检查器查看排列状态。</p>\n<figure><img src=\"https://raw.githubusercontent.com/dribble-njr/typora-njr/master/img/20231224134438.png\" alt=\"grid inspection\" tabindex=\"0\" loading=\"lazy\"><figcaption>grid inspection</figcaption></figure>\n<p><code>place-items</code> 属性是 <code>align-items</code> 属性和 <code>justify-items</code> 属性的合并简写形式。</p>\n<div class=\"language-css\" data-ext=\"css\" data-title=\"css\"><pre class=\"language-css\"><code><span class=\"token property\">place-items</span><span class=\"token punctuation\">:</span> &lt;align-items&gt; &lt;justify-items&gt;<span class=\"token punctuation\">;</span>\n</code></pre></div><p>下面是一个例子。</p>\n<div class=\"language-css\" data-ext=\"css\" data-title=\"css\"><pre class=\"language-css\"><code><span class=\"token property\">place-items</span><span class=\"token punctuation\">:</span> start end<span class=\"token punctuation\">;</span>\n</code></pre></div><p>如果省略第二个值，则浏览器认为与第一个值相等。</p>\n<h2>项目属性</h2>\n<h3><code>grid-column-start</code> <code>grid-column-end</code> <code>grid-row-start</code> <code>grid-row-end</code></h3>\n<p>项目的位置是可以指定的，具体方法就是指定项目的四个边框，分别定位在哪根网格线。</p>\n<ul>\n<li><code>grid-column-start</code> 属性：左边框所在的垂直网格线</li>\n<li><code>grid-column-end</code> 属性：右边框所在的垂直网格线</li>\n<li><code>grid-row-start</code> 属性：上边框所在的水平网格线</li>\n<li><code>grid-row-end</code> 属性：下边框所在的水平网格线</li>\n</ul>\n<p><code>grid-column</code> 属性是 <code>grid-column-start</code> 和 <code>grid-column-end</code> 的合并简写形式，<code>grid-row</code> 属性是 <code>grid-row-start</code> 属性和 <code>grid-row-end</code> 的合并简写形式。</p>\n<div class=\"language-css\" data-ext=\"css\" data-title=\"css\"><pre class=\"language-css\"><code><span class=\"token selector\">.item</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token property\">grid-column</span><span class=\"token punctuation\">:</span> &lt;start-line&gt; / &lt;end-line&gt;<span class=\"token punctuation\">;</span>\n  <span class=\"token property\">grid-row</span><span class=\"token punctuation\">:</span> &lt;start-line&gt; / &lt;end-line&gt;<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n</code></pre></div>\n<div class=\"hint-container tip\">\n<p class=\"hint-container-title\">提示</p>\n<p>项目重叠可以使用 <code>z-index</code> 调整顺序。</p>\n</div>\n<h3><code>grid-area</code></h3>\n<p><code>grid-area</code> 属性指定项目放在哪一个区域。如上面的 <a href=\"#grid-template-areas\">基于网格区域放置元素 - 2</a>。</p>\n<p><code>grid-area</code> 属性还可用作 <code>grid-row-start</code>、<code>grid-column-start</code>、<code>grid-row-end</code>、<code>grid-column-end</code> 的合并简写形式，直接指定项目的位置。</p>\n<div class=\"language-css\" data-ext=\"css\" data-title=\"css\"><pre class=\"language-css\"><code><span class=\"token selector\">.item</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token property\">grid-area</span><span class=\"token punctuation\">:</span> &lt;row-start&gt; / &lt;column-start&gt; / &lt;row-end&gt; / &lt;column-end&gt;<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n</code></pre></div><p>下面是一个例子。</p>\n\n<h3><code>justify-self</code> <code>align-self</code> <code>place-self</code></h3>\n<p><code>justify-self</code> 属性设置单元格内容的水平位置（左中右），跟<code>justify-items</code> `属性的用法完全一致，但只作用于单个项目。</p>\n<p><code>align-self</code> 属性设置单元格内容的垂直位置（上中下），跟 <code>align-items</code> 属性的用法完全一致，也是只作用于单个项目。</p>\n<div class=\"language-css\" data-ext=\"css\" data-title=\"css\"><pre class=\"language-css\"><code><span class=\"token selector\">.item</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token property\">justify-self</span><span class=\"token punctuation\">:</span> start | end | center | stretch<span class=\"token punctuation\">;</span>\n  <span class=\"token property\">align-self</span><span class=\"token punctuation\">:</span> start | end | center | stretch<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n</code></pre></div><p>这两个属性都可以取下面四个值。</p>\n<ul>\n<li><code>start</code>：对齐单元格的起始边缘。</li>\n<li><code>end</code>：对齐单元格的结束边缘。</li>\n<li><code>center</code>：单元格内部居中。</li>\n<li><code>stretch</code>：拉伸，占满单元格的整个宽度（默认值）。</li>\n</ul>\n\n<p><code>place-self</code> 属性是 <code>align-self</code> 属性和 <code>justify-self</code> 属性的合并简写形式。</p>\n<div class=\"language-css\" data-ext=\"css\" data-title=\"css\"><pre class=\"language-css\"><code><span class=\"token property\">place-self</span><span class=\"token punctuation\">:</span> &lt;align-self&gt; &lt;justify-self&gt;<span class=\"token punctuation\">;</span>\n</code></pre></div><p>如果省略第二个值，<code>place-self</code> 属性会认为这两个值相等。</p>\n<h2>参考指南</h2>\n<div class=\"hint-container tip\">\n<p class=\"hint-container-title\">提示</p>\n<p>可以尝试 <a href=\"https://developer.mozilla.org/zh-CN/docs/Learn/CSS/CSS_layout/Grid_skills\" target=\"_blank\" rel=\"noopener noreferrer\">技能测试：网格布局</a> 查看掌握程度。</p>\n</div>\n<ul>\n<li><a href=\"https://developer.mozilla.org/zh-CN/docs/Web/CSS/CSS_grid_layout\" target=\"_blank\" rel=\"noopener noreferrer\">MDN 网格布局</a></li>\n<li><a href=\"https://www.ruanyifeng.com/blog/2019/03/grid-layout-tutorial.html\" target=\"_blank\" rel=\"noopener noreferrer\">CSS Grid 网格布局教程</a></li>\n</ul>\n",
      "image": "https://raw.githubusercontent.com/dribble-njr/typora-njr/master/img/20231224110006.png",
      "date_published": "2023-12-23T00:00:00.000Z",
      "date_modified": "2023-12-30T10:18:48.000Z",
      "authors": [],
      "tags": [
        "CSS"
      ]
    },
    {
      "title": "Canvas 和 SVG 的区别",
      "url": "https://dribble-njr.github.io/blog/blog/frontend/basic/html/008-canvas-svg.html",
      "id": "https://dribble-njr.github.io/blog/blog/frontend/basic/html/008-canvas-svg.html",
      "summary": "Canvas Canvas 是画布，通过 JavaScript 来绘制 2D 图形，是逐像素进行绘制，位置发生改变，就会重新进行绘制。 特点如下： 依赖分辨率 不支持事件处理器 弱的文本渲染能力 能够以 .png 或 .jpg 格式保存图片 最适合图像密集型的游戏，其中的许多对象会被频繁绘制 SVG 可缩放矢量图形（Scalable Vector Gr...",
      "content_html": "<h2>Canvas</h2>\n<p>Canvas 是画布，通过 JavaScript 来绘制 2D 图形，是逐像素进行绘制，位置发生改变，就会重新进行绘制。</p>\n\n<p>特点如下：</p>\n<ul>\n<li>依赖分辨率</li>\n<li>不支持事件处理器</li>\n<li>弱的文本渲染能力</li>\n<li>能够以 <code>.png</code> 或 <code>.jpg</code> 格式保存图片</li>\n<li>最适合图像密集型的游戏，其中的许多对象会被频繁绘制</li>\n</ul>\n<h2>SVG</h2>\n<p>可缩放矢量图形（Scalable Vector Graphics，SVG）是基于可扩展标记语言 XML 描述的 2D 图形语言，SVG 可以为某个元素附加 JavaScript 事件处理器。</p>\n\n<p>其特点如下：</p>\n<ul>\n<li>不依赖分辨率</li>\n<li>支持事件处理器</li>\n<li>最适合带有大型渲染区域的应用程序（比如谷歌地图）</li>\n<li>复杂度高会减慢渲染速度</li>\n<li>不适合游戏应用</li>\n</ul>\n",
      "date_published": "2022-08-02T00:00:00.000Z",
      "date_modified": "2024-01-07T13:07:06.000Z",
      "authors": [],
      "tags": [
        "HTML"
      ]
    },
    {
      "title": "视频和音频",
      "url": "https://dribble-njr.github.io/blog/blog/frontend/basic/html/007-media-tag.html",
      "id": "https://dribble-njr.github.io/blog/blog/frontend/basic/html/007-media-tag.html",
      "summary": "HTML5 中加入了视频和音频标签，增强网页的表达能力。 <audio> 音频 以下就是使用 <audio> 的最简单例子，其中 controls 属性为音频控件，autopaly 为是否自动播放，loop 为循环播放。 详细属性见 MDN audio。 <video> 视频 一些属性的含义与 <audio> 音频元素相同。 详细属性见 MDN vid...",
      "content_html": "<p>HTML5 中加入了视频和音频标签，增强网页的表达能力。</p>\n<h2><code>&lt;audio&gt;</code> 音频</h2>\n<p>以下就是使用 <code>&lt;audio&gt;</code> 的最简单例子，其中 <code>controls</code> 属性为音频控件，<code>autopaly</code> 为是否自动播放，<code>loop</code> 为循环播放。</p>\n<p>详细属性见 <a href=\"https://developer.mozilla.org/zh-CN/docs/Web/HTML/Element/audio\" target=\"_blank\" rel=\"noopener noreferrer\">MDN audio</a>。</p>\n<div class=\"language-html\" data-ext=\"html\" data-title=\"html\"><pre class=\"language-html\"><code><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>audio</span> <span class=\"token attr-name\">controls</span> <span class=\"token attr-name\">src</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>xxx<span class=\"token punctuation\">\"</span></span> <span class=\"token attr-name\">autopaly</span> <span class=\"token attr-name\">loop</span><span class=\"token punctuation\">&gt;</span></span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>audio</span><span class=\"token punctuation\">&gt;</span></span>\n</code></pre></div><h2><code>&lt;video&gt;</code> 视频</h2>\n<p>一些属性的含义与 <code>&lt;audio&gt;</code> 音频元素相同。</p>\n<p>详细属性见 <a href=\"https://developer.mozilla.org/zh-CN/docs/Web/HTML/Element/video\" target=\"_blank\" rel=\"noopener noreferrer\">MDN video</a>。</p>\n<div class=\"language-html\" data-ext=\"html\" data-title=\"html\"><pre class=\"language-html\"><code><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>video</span> <span class=\"token attr-name\">controls</span> <span class=\"token attr-name\">src</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>xxx<span class=\"token punctuation\">\"</span></span> <span class=\"token attr-name\">autopaly</span> <span class=\"token attr-name\">loop</span><span class=\"token punctuation\">&gt;</span></span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>video</span><span class=\"token punctuation\">&gt;</span></span>\n</code></pre></div><h2><code>&lt;source&gt;</code> 标签</h2>\n<p>因为浏览器对视频格式的支持程度不一样，为了能兼容不同的浏览器，可以通过 <code>&lt;source&gt;</code> 标签指定视频源或音频源。</p>\n<div class=\"language-html\" data-ext=\"html\" data-title=\"html\"><pre class=\"language-html\"><code><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>video</span> <span class=\"token attr-name\">controls</span> <span class=\"token attr-name\">width</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>250<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">&gt;</span></span>\n  <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>source</span> <span class=\"token attr-name\">src</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>/media/flower.webm<span class=\"token punctuation\">\"</span></span> <span class=\"token attr-name\">type</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>video/webm<span class=\"token punctuation\">\"</span></span> <span class=\"token punctuation\">/&gt;</span></span>\n  <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>source</span> <span class=\"token attr-name\">src</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>/media/flower.mp4<span class=\"token punctuation\">\"</span></span> <span class=\"token attr-name\">type</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>video/mp4<span class=\"token punctuation\">\"</span></span> <span class=\"token punctuation\">/&gt;</span></span>\n  Sorry, your browser doesn't support embedded videos.\n<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>video</span><span class=\"token punctuation\">&gt;</span></span>\n</code></pre></div>",
      "date_published": "2022-07-25T00:00:00.000Z",
      "date_modified": "2024-03-04T11:41:47.000Z",
      "authors": [],
      "tags": [
        "HTML"
      ]
    },
    {
      "title": "语义化标签",
      "url": "https://dribble-njr.github.io/blog/blog/frontend/basic/html/006-semantically-meaningful-tags.html",
      "id": "https://dribble-njr.github.io/blog/blog/frontend/basic/html/006-semantically-meaningful-tags.html",
      "summary": "HTML5 中加入了一些语义化标签，来更清晰的表达文档结构。 语义化标签语义化标签 <header>：页眉。 <nav>：导航栏。 <main>：主内容。主内容中还可以有各种子内容区段，可用 <article>、<section> 和 <div> 等元素表示。 <aside>：侧边栏，经常嵌套在 <main> 中。 <footer>：页脚。 语义化优点...",
      "content_html": "<p>HTML5 中加入了一些语义化标签，来更清晰的表达文档结构。</p>\n<figure><img src=\"https://raw.githubusercontent.com/dribble-njr/typora-njr/master/img/tag.png\" alt=\"语义化标签\" tabindex=\"0\" loading=\"lazy\"><figcaption>语义化标签</figcaption></figure>\n<ul>\n<li><code>&lt;header&gt;</code>：页眉。</li>\n<li><code>&lt;nav&gt;</code>：导航栏。</li>\n<li><code>&lt;main&gt;</code>：主内容。主内容中还可以有各种子内容区段，可用 <code>&lt;article&gt;</code>、<code>&lt;section&gt;</code> 和 <code>&lt;div&gt;</code> 等元素表示。</li>\n<li><code>&lt;aside&gt;</code>：侧边栏，经常嵌套在 <code>&lt;main&gt;</code> 中。</li>\n<li><code>&lt;footer&gt;</code>：页脚。</li>\n</ul>\n<p>语义化优点：</p>\n<ul>\n<li>易于用户阅读，在丢失 CSS 样式的时候仍能呈现清晰的结构；</li>\n<li>方便屏幕阅读器解析，如盲人阅读器根据标签渲染网页；</li>\n<li>提升用户体验，例如 title、alt 可以用于解释名称或图片信息；</li>\n<li>便于 SEO 搜索引擎优化，搜索引擎根据标签来确定上下文和关键字的权重；</li>\n<li>有利于开发人员维护。</li>\n</ul>\n<p>缺点：</p>\n<ul>\n<li>存在兼容性问题，HTML5 语义化标签在 IE8 下，默认当成行内元素展示。</li>\n</ul>\n",
      "image": "https://raw.githubusercontent.com/dribble-njr/typora-njr/master/img/tag.png",
      "date_published": "2022-04-30T00:00:00.000Z",
      "date_modified": "2024-01-07T13:07:06.000Z",
      "authors": [],
      "tags": [
        "HTML"
      ]
    },
    {
      "title": "样式单位",
      "url": "https://dribble-njr.github.io/blog/blog/frontend/basic/css/010-unit.html",
      "id": "https://dribble-njr.github.io/blog/blog/frontend/basic/css/010-unit.html",
      "summary": " 相关信息 更详细的内容可见 MDN。 CSS 布局里有一些不同的样式单位，常见如下： px：绝对单位，像素； em：相对于自身字体大小的单位； rem：相对于 html 标签字体大小的单位； vh：相对于视口高度大小的单位，20vh == (视口高度/100)*20； vw：相对于视口宽度大小的单位, 20vw == (视口宽度/100)*20； %...",
      "content_html": "<div class=\"hint-container info\">\n<p class=\"hint-container-title\">相关信息</p>\n<p>更详细的内容可见 MDN。</p>\n</div>\n<p>CSS 布局里有一些不同的样式单位，常见如下：</p>\n<ul>\n<li>px：绝对单位，像素；</li>\n<li>em：相对于自身字体大小的单位；</li>\n<li>rem：相对于 html 标签字体大小的单位；</li>\n<li>vh：相对于视口高度大小的单位，20vh == (视口高度/100)*20；</li>\n<li>vw：相对于视口宽度大小的单位, 20vw == (视口宽度/100)*20；</li>\n<li>%：父元素的百分比。</li>\n</ul>\n",
      "date_published": "2022-07-18T00:00:00.000Z",
      "date_modified": "2024-03-04T10:51:20.000Z",
      "authors": [],
      "tags": [
        "CSS"
      ]
    },
    {
      "title": "居中",
      "url": "https://dribble-njr.github.io/blog/blog/frontend/basic/css/011-center.html",
      "id": "https://dribble-njr.github.io/blog/blog/frontend/basic/css/011-center.html",
      "summary": "元素居中是比较常见的一个需求，有几种常见方法。 行内元素水平垂直居中 设置父级标签。 水平居中： text-align: center 垂直居中： line-height：盒子高度 块级元素水平垂直居中 flex 只需给父元素设置 flex 即可。 定位 有两种方案，先给父元素设置 relative，再给子元素设置 absolute，最后给子元素设置：...",
      "content_html": "<p>元素居中是比较常见的一个需求，有几种常见方法。</p>\n<h2>行内元素水平垂直居中</h2>\n<p>设置父级标签。</p>\n<ul>\n<li>水平居中： <code>text-align: center</code></li>\n<li>垂直居中： <code>line-height：盒子高度</code></li>\n</ul>\n<h2>块级元素水平垂直居中</h2>\n<h3>flex</h3>\n<p>只需给父元素设置 <code>flex</code> 即可。</p>\n\n<h3>定位</h3>\n<p>有两种方案，先给父元素设置 <code>relative</code>，再给子元素设置 <code>absolute</code>，最后给子元素设置：</p>\n<ul>\n<li><code>transform</code>：不会触发重排，推荐使用；</li>\n<li><code>margin</code> 负值：需要知道子元素宽高。</li>\n</ul>\n<p>原理是 <strong>通过定位改变文档流，再通过 <code>top</code> 等属性改变子元素位置，最后调整到居中位置</strong>。</p>\n\n\n",
      "date_published": "2022-07-01T00:00:00.000Z",
      "date_modified": "2023-10-22T12:39:17.000Z",
      "authors": [],
      "tags": [
        "CSS"
      ]
    },
    {
      "title": "Flex 布局",
      "url": "https://dribble-njr.github.io/blog/blog/frontend/basic/css/009-flex.html",
      "id": "https://dribble-njr.github.io/blog/blog/frontend/basic/css/009-flex.html",
      "summary": "一、基本概念 1.1 flexbox 是什么 CSS3 的新布局模式，是一种当页面需要适应不同屏幕大小以及设备类型时确保元素拥有恰当的行为的布局方式。 flex 弹性盒是一个 一维布局 模型，可以在界面中的项目之间提供空间分布和强大对齐功能的布局方式。 所谓一维布局模型是指：flex 在同一时刻只控制行或列。这和 二维布局模型 Grid Layout ...",
      "content_html": "<h2>一、基本概念</h2>\n<h3>1.1 flexbox 是什么</h3>\n<p>CSS3 的新布局模式，是一种当页面需要适应不同屏幕大小以及设备类型时确保元素拥有恰当的行为的布局方式。</p>\n<p>flex 弹性盒是一个 <strong>一维布局</strong> 模型，可以在界面中的项目之间提供空间分布和强大对齐功能的布局方式。</p>\n<p>所谓一维布局模型是指：flex 在同一时刻只控制行或列。这和 <strong>二维布局模型</strong> Grid Layout （同时控制行和列）相反。</p>\n<h3>1.2 flexbox 的两个轴</h3>\n<p>flexbox 有两个轴——主轴和交叉轴。主轴由 <code>flex-direction</code> 属性定义，而交叉轴和主轴垂直。对 flexbox 做的一切操作都涉及到这两个轴，flexbox 的特点是可以将内容沿着主轴或交叉轴对齐和调整。</p>\n<h3>1.3 起始线和终止线</h3>\n<p>flexbox 不会对文档的书写模式提供假设。过去，CSS 的书写模式主要被认为是水平的，从左到右的。现代的布局方式涵盖了书写模式的范围，所以不再假设一行文字是从文档的左上角开始向右书写, 新的行也不是必须出现在另一行的下面。</p>\n<h3>1.4 flex 容器和项目</h3>\n<p>文档中采用了 flexbox 的区域就叫做 <strong>flex 容器（简称”容器“）</strong>。为了创建容器， 我们把一个容器的 <code>display</code> 属性值改为 <code>flex</code> （块级）或者 <code>inline-flex</code>（行级） 。完成这一步之后，容器中的直系子元素就会变为 <strong>flex 项目（简称“项目”）</strong>。</p>\n<h2>二、容器属性</h2>\n<p>以下都是父元素的属性。</p>\n<ul>\n<li><code>flex-direction</code>：决定主轴方向（即项目的排列方向）</li>\n<li><code>flex-wrap</code>：决定项目是否换行</li>\n<li><code>flex-flow</code>： <code>flex-direction</code> 和 <code>flex-wrap</code> 的简写</li>\n<li><code>justify-content</code>：项目在主轴上的对齐方式</li>\n<li><code>align-items</code>：项目在交叉轴上的对齐方式</li>\n<li><code>align-content</code>：控制多行项目的对齐方式</li>\n</ul>\n<h3>2.1 flex-direction</h3>\n<p><code>flex-direction</code> 决定主轴方向、起始线和终止线位置。</p>\n<p>它有四个<strong>取值</strong>：</p>\n<ul>\n<li><code>row</code> （默认）：主轴方向为水平方向，主轴的起始线是左边，终止线是右边</li>\n<li><code>row-reverse</code>：主轴方向为水平方向，主轴的起始线和终止线位置交换</li>\n<li><code>column</code>：主轴方向为垂直方向，主轴的起始线是上边，终止线是下边</li>\n<li><code>column-reverse</code>：主轴方向为垂直方向，主轴的起始线和终止线交换</li>\n</ul>\n<p>使用场景：网页整体布局、导航栏等等</p>\n<h3>2.2 flex-wrap</h3>\n<p><code>flex-wrap</code> 决定 flex 项目是否换行，可实现多行 flex 容器，这样做时，应把每行都看作一个新的 flex 容器。</p>\n<p>默认情况下子元素是不换行的，如果一条轴线排不下，就可以设置它来换行。</p>\n<p><strong>属性值</strong>：</p>\n<ul>\n<li><code>nowrap</code>（默认）：不换行</li>\n<li><code>wrap</code>：换行，第一行在上方</li>\n<li><code>wrap-reverse</code>：换行，第一行在下方</li>\n</ul>\n<h3>2.3 flex-flow</h3>\n<p><code>flex-flow</code> 是 <code>flex-direction</code> 和 <code>flex-wrap</code> 的简写，表示 <code>flex</code> 布局的流动特性。第一个指定的值为 <code>flex-direction</code> ，第二个指定的值为 <code>flex-wrap</code>。默认值当然是 <code>row nowrap</code>。</p>\n<h3>2.4 justify-content</h3>\n<p><code>justify-content</code> 决定项目在<strong>主轴</strong>上的排列（对齐）方式（属性决定了水平方向子项的对齐和分布方式）。</p>\n<p>有以下<strong>取值</strong>：</p>\n<ul>\n<li><code>flex-start</code> （默认值）：起始线对齐（项目从容器的起始线开始排列）</li>\n<li><code>flex-end</code>：终止线对齐（项目从容器的终止线开始排列）</li>\n<li><code>center</code>：居中对齐</li>\n<li><code>space-around</code>：每个项目两侧的间隔相等。所以，项目之间的间隔比项目与边框的间隔大一倍。around 是环绕的意思，意思是每个 flex 子项两侧都环绕互不干扰的等宽的空白间距，最终视觉上边缘两侧的空白只有中间空白宽度一半</li>\n<li><code>space-between</code>：两端对齐，项目之间的间隔都相等，between 是中间的意思，意思是多余的空白间距只在元素中间区域分配</li>\n<li><code>space-evenly</code>：均匀分布每个项目，每个 flex 子项两侧空白间距完全相等，项目之间的间隔和项目与边框之间的间隔相等</li>\n</ul>\n<h3>2.5 align-items</h3>\n<p><code>align-items</code> 定义项目在<strong>交叉轴</strong>上的排列（对齐）方式。</p>\n<p><strong>取值</strong>：</p>\n<ul>\n<li><code>stretch</code>（默认值）：如项目没有设置高度，或者高度为 auto，则占满整个容器</li>\n<li><code>flex-start</code>：起始线对齐</li>\n<li><code>flex-end</code>：终止线对齐</li>\n<li><code>center</code>：居中对齐</li>\n<li><code>baseline</code>： 项目的第一行文字的基线对齐</li>\n</ul>\n<h3>2.6 align-content</h3>\n<p><code>align-content</code> 用于控制多行项目在交叉轴上的对齐方式，如果项目<strong>只有一行则不会起作用</strong>。</p>\n<p><strong>取值</strong>：</p>\n<ul>\n<li><code>stretch</code>（默认值）：即在项目没设置高度，或高度为 auto 情况下让项目填满整个容器，与 align-items 类似</li>\n<li><code>flex-start</code>：与交叉轴起始线对齐</li>\n<li><code>flex-end</code>：与交叉轴的终点对齐</li>\n<li><code>center</code>：与交叉轴的中点对齐</li>\n<li><code>space-between</code>：同上</li>\n<li><code>space-around</code>：同上</li>\n<li><code>space-evenly</code>：同上</li>\n</ul>\n\n<h2>三、项目属性</h2>\n<p>项目属性针对子元素。</p>\n<ul>\n<li><code>order</code>：定义项目的排列顺序</li>\n<li><code>flex-grow</code>：定义项目放大比例</li>\n<li><code>flex-shrink</code>：定义了项目的缩小比例</li>\n<li><code>flex-basis</code>：设置项目宽度</li>\n<li><code>flex</code>：简写属性</li>\n<li><code>align-self</code>：控制单个项目在交叉轴上的排列对齐方式</li>\n</ul>\n<h3>3.1 order</h3>\n<p><code>order</code> 属性定义项目的排列顺序，数值越小，排列越靠前。</p>\n<p><strong>取值</strong>：</p>\n<ul>\n<li>默认为 0，取值为整数</li>\n</ul>\n<h3>3.2 flex-grow</h3>\n<p><code>flex-grow</code> 定义项目放大比例，放大的前提是父元素有足够空间。实际上是定义子元素占容器空间的份数。若没定义此属性，则空间按自己本身内容撑开。</p>\n<blockquote>\n<p>grow 是扩展的意思，扩展的就是 flex 子项所占据的宽度，扩展所侵占的空间就是除去元素外的剩余的空白间隙。</p>\n<p>注意：即使设置了固定宽度，若有剩余空间依旧会放大。</p>\n</blockquote>\n<p><strong>取值</strong>：</p>\n<ul>\n<li>默认为 0，不放大，取值为数值</li>\n</ul>\n<h3>3.3 flex-shrink</h3>\n<p><code>flex-shrink</code> 定义项目缩小比例，默认为 1，即如果空间不足，该项目将缩小。</p>\n<blockquote>\n<p>注意：即使设置了固定宽度，也会缩小。</p>\n<p>但如果某个项目的 flex-shrink 属性设置为 0 ，即使空间不足，自身也不缩小。</p>\n</blockquote>\n<p><strong>取值</strong>：</p>\n<ul>\n<li>默认为 1，正数</li>\n</ul>\n<h3>3.4 flex-basis</h3>\n<p>用于设置项目宽度，定义了在分配剩余空间之前元素的默认大小。默认 auto 时，项目会保持默认宽度，或者以 width 为自身的宽度，但<strong>如果设置了 flex-basis，权重会 width 属性高，因此会覆盖 width 属性。</strong></p>\n<blockquote>\n<p>实际上不建议对 flex 子项使用<code>width</code>属性，因为不够弹性。</p>\n</blockquote>\n<p><strong>取值</strong>：</p>\n<ul>\n<li>默认为 auto</li>\n</ul>\n<h3>3.5 flex</h3>\n<p><code>flex</code> 属性是 <code>flex-grow</code> ，<code>flex-shrink</code> 与 <code>flex-basis</code> 三个属性的简写，用于定义项目放大，缩小与宽度。默认为 <code>flex: 0 1 auto</code>；后两个属性值可以简写。</p>\n<p>常用：<code>flex: 1</code> 等分容器空间。</p>\n<h3>3.6 align-self</h3>\n<p><code>align-self</code> 指控制单独某一个 flex 子项的垂直对齐方式，写在 flex 容器上的这个 <code>align-items</code> 属性，后面是 items，有个 s，表示子项们，是全体；这里是 self，单独一个个体。其他区别不大，语法几乎一样：</p>\n<p><code>align-self: auto | flex-start | flex-end | center | baseline | stretch;</code></p>\n<p>唯一区别就是<code>align-self</code>多了个<code>auto</code>（默认值），表示继承自 flex 容器的<code>align-items</code>属性值。其他属性值含义一模一样。</p>\n",
      "date_published": "2021-11-18T00:00:00.000Z",
      "date_modified": "2023-12-24T06:39:15.000Z",
      "authors": [],
      "tags": [
        "CSS"
      ]
    },
    {
      "title": "浮动",
      "url": "https://dribble-njr.github.io/blog/blog/frontend/basic/css/008-float.html",
      "id": "https://dribble-njr.github.io/blog/blog/frontend/basic/css/008-float.html",
      "summary": "浮动可以让元素脱离标准文档流，指定一个元素应沿其容器的左侧或右侧放置，允许文本和内联元素环绕它。 开启浮动 浮动的基本语法 float: <keyword>。取值如下： left：表明元素必须浮动在其所在的块容器左侧。 right：表明元素必须浮动在其所在的块容器右侧。 none：表明元素不进行浮动。 inline-start：表明元素必须浮动在其所在...",
      "content_html": "<p>浮动可以让元素脱离标准文档流，指定一个元素应沿其容器的左侧或右侧放置，允许文本和内联元素环绕它。</p>\n<h2>开启浮动</h2>\n<p>浮动的基本语法 <code>float: &lt;keyword&gt;</code>。取值如下：</p>\n<ul>\n<li><code>left</code>：表明元素必须浮动在其所在的块容器左侧。</li>\n<li><code>right</code>：表明元素必须浮动在其所在的块容器右侧。</li>\n<li><code>none</code>：表明元素不进行浮动。</li>\n<li><code>inline-start</code>：表明元素必须浮动在其所在块容器的开始一侧，在 ltr 脚本中是左侧，在 rtl 脚本中是右侧。</li>\n<li><code>inline-end</code>：表明元素必须浮动在其所在块容器的结束一侧，在 ltr 脚本中是右侧，在 rtl 脚本中是左侧。</li>\n</ul>\n<p>当一个元素浮动之后，它会被移出正常的文档流，然后向左或者向右平移，一直平移直到碰到了所处的容器的边框，或者碰到另外一个浮动的元素。</p>\n<p>在下面的图片中，有三个红色的正方形。其中有两个向左浮动，一个向右浮动。要注意到第二个向左浮动的正方形被放在第一个向左浮动的正方形的右边。如果还有更多的正方形这样浮动，它们会继续向右堆放，直到填满容器一整行，之后换行至下一行。</p>\n<p>浮动元素至少要与其最高的嵌套浮动子元素一样高。给父元素设置了 <code>width: 600px</code>，并将其设为浮动元素，以确保其高度足够包含其中的浮动子元素，并确保其宽度足以容纳这些元素。</p>\n\n<h2>清除浮动</h2>\n<p>由于浮动会将元素移除标准文档流，因此浮动元素会影响上下文中的其他元素，所以必须要给浮动元素清除浮动。</p>\n\n<p>以下三种方法均可清除浮动。</p>\n<div class=\"language-css\" data-ext=\"css\" data-title=\"css\"><pre class=\"language-css\"><code><span class=\"token comment\">/* 1、父级标签定义伪类 */</span>\n<span class=\"token selector\">.clearfix::after</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token property\">content</span><span class=\"token punctuation\">:</span> <span class=\"token string\">''</span><span class=\"token punctuation\">;</span>\n  <span class=\"token property\">display</span><span class=\"token punctuation\">:</span> table<span class=\"token punctuation\">;</span>\n  <span class=\"token property\">clear</span><span class=\"token punctuation\">:</span> both<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n<span class=\"token comment\">/* 兼容IE低版本 */</span>\n<span class=\"token selector\">.clearfix</span> <span class=\"token punctuation\">{</span>\n  *<span class=\"token property\">zoom</span><span class=\"token punctuation\">:</span> 1<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token comment\">/* 2、父级标签 overflow */</span>\n<span class=\"token selector\">.clearfix</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token property\">overflow</span><span class=\"token punctuation\">:</span> hidden<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token comment\">/* 3、添加空 div 标签 */</span>\n<span class=\"token selector\">.clearfix</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token property\">clear</span><span class=\"token punctuation\">:</span> both<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n</code></pre></div><p>第三种方式的 demo 如下，其余两种可以自行尝试。</p>\n\n<h2>圣杯布局和双飞翼布局</h2>\n<div class=\"hint-container tip\">\n<p class=\"hint-container-title\">提示</p>\n<p>利用浮动可以实现两个经典布局。</p>\n</div>\n<h3>作用</h3>\n<ul>\n<li>实现 pc 端三栏布局，中间一栏最先渲染</li>\n<li>实现两边宽度固定，中间自适应</li>\n</ul>\n<p>效果如下：</p>\n<figure><img src=\"https://raw.githubusercontent.com/dribble-njr/typora-njr/master/img/three-cols.png\" alt=\"three-cols\" tabindex=\"0\" loading=\"lazy\"><figcaption>three-cols</figcaption></figure>\n<h3>圣杯布局</h3>\n\n",
      "image": "https://raw.githubusercontent.com/dribble-njr/typora-njr/master/img/three-cols.png",
      "date_published": "2022-07-18T00:00:00.000Z",
      "date_modified": "2024-01-07T13:07:06.000Z",
      "authors": [],
      "tags": [
        "CSS"
      ]
    },
    {
      "title": "阅读笔记",
      "url": "https://dribble-njr.github.io/blog/blog/reading/",
      "id": "https://dribble-njr.github.io/blog/blog/reading/",
      "summary": "阅读笔记 经典书籍阅读笔记。 ",
      "content_html": "\n<p>经典书籍阅读笔记。</p>\n",
      "date_published": "2023-09-28T03:42:49.000Z",
      "date_modified": "2023-09-28T03:42:49.000Z",
      "authors": [],
      "tags": []
    },
    {
      "title": "起步",
      "url": "https://dribble-njr.github.io/blog/blog/reading/pro-git/01-getting-started.html",
      "id": "https://dribble-njr.github.io/blog/blog/reading/pro-git/01-getting-started.html",
      "summary": "关于版本控制 版本控制系统类型： 本地版本控制——复制项目保存不同版本 集中式版本控制——服务器损坏则丢失所有数据 分布式版本控制——本地和服务器都保存版本历史 Git 是什么 直接记录快照，而非差异比较 大部分版本控制系统以文件变更列表的方式存储信息，这类系统（CVS、Subversion、Perforce、Bazaar 等等） 将它们存储的信息看作...",
      "content_html": "<h2>关于版本控制</h2>\n<p>版本控制系统类型：</p>\n<ol>\n<li>本地版本控制——复制项目保存不同版本</li>\n<li>集中式版本控制——服务器损坏则丢失所有数据</li>\n<li>分布式版本控制——本地和服务器都保存版本历史</li>\n</ol>\n<h2>Git 是什么</h2>\n<h3>直接记录快照，而非差异比较</h3>\n<p>大部分版本控制系统以文件变更列表的方式存储信息，这类系统（CVS、Subversion、Perforce、Bazaar 等等） 将它们存储的信息看作是一组基本文件和每个文件随时间逐步累积的差异 （它们通常称作 <strong>基于差异（delta-based）</strong> 的版本控制）。</p>\n<figure><img src=\"https://raw.githubusercontent.com/dribble-njr/typora-njr/master/img/deltas.png\" alt=\"存储每个文件与初始版本的差异。\" tabindex=\"0\" loading=\"lazy\"><figcaption>存储每个文件与初始版本的差异。</figcaption></figure>\n<p>Git 将数据视为一系列快照。每当提交更新或保存项目状态时，Git 就会对当时的全部文件创建一个快照并保存这个快照的索引。如果文件没有修改，Git 不会重新存储该文件，而是只保留一个链接指向之前存储的文件。整个方式更像是一个 <strong>快照流</strong>。</p>\n<figure><img src=\"https://raw.githubusercontent.com/dribble-njr/typora-njr/master/img/snapshots.png\" alt=\"Git 存储项目随时间改变的快照。\" tabindex=\"0\" loading=\"lazy\"><figcaption>Git 存储项目随时间改变的快照。</figcaption></figure>\n<h3>近乎所有操作都是本地执行</h3>\n<p>Git 绝大多数操作都只需要访问本地文件和资源，一般不需要网络。</p>\n<h3>Git 保证完整性</h3>\n<p>Git 中的所有数据在存储前都会使用哈希值来计算校验和，因此可以保证整个项目的完整性。</p>\n<p>SHA-1 散列（hash, 哈希）由 40 个十六进制字符（0-9 和 a-f）组成的字符串，基于 Git 中文件的内容或目录结构计算出来。 SHA-1 哈希看起来是这样：</p>\n<div class=\"language-text\" data-ext=\"text\" data-title=\"text\"><pre class=\"language-text\"><code>24b9da6552252987aa493b52f8696cd6d3b00373\n</code></pre></div><h3>Git 一般只添加数据</h3>\n<p>执行的 Git 操作，几乎只往 Git 数据库中 <strong>添加</strong> 数据，Git 几乎不会执行任何可能导致文件不可恢复的操作。</p>\n<h3>Git 三种状态</h3>\n<p>Git 有三种状态，你的文件可能处于其中之一： <strong>已提交（committed）</strong>、<strong>已修改（modified）</strong> 和 <strong>已暂存（staged）</strong>。</p>\n<ul>\n<li>已提交表示数据已经安全地保存在本地数据库中。</li>\n<li>已修改表示修改了文件，但还没保存到数据库中。</li>\n<li>已暂存表示对一个已修改文件的当前版本做了标记，使之包含在下次提交的快照中。</li>\n</ul>\n<p>这会让我们的 Git 项目拥有三个阶段：工作区、暂存区以及 Git 目录。</p>\n<figure><img src=\"https://raw.githubusercontent.com/dribble-njr/typora-njr/master/img/areas.png\" alt=\"工作区、暂存区以及 Git 目录。\" tabindex=\"0\" loading=\"lazy\"><figcaption>工作区、暂存区以及 Git 目录。</figcaption></figure>\n<p>工作区是对项目的某个版本独立提取出来的内容。 这些从 Git 仓库的压缩数据库中提取出来的文件，放在磁盘上供你使用或修改。</p>\n<p>暂存区是一个文件，保存了下次将要提交的文件列表信息，一般在 Git 仓库目录中。 按照 Git 的术语叫做「索引」，不过一般说法还是叫「暂存区」。</p>\n<p>Git 仓库目录是 Git 用来保存项目的元数据和对象数据库的地方。 这是 Git 中最重要的部分，从其它计算机克隆仓库时，复制的就是这里的数据。</p>\n<p>基本的 Git 工作流程如下：</p>\n<ol>\n<li>在工作区中修改文件。</li>\n<li>将你想要下次提交的更改选择性地暂存，这样只会将更改的部分添加到暂存区。</li>\n<li>提交更新，找到暂存区的文件，将快照永久性存储到 Git 目录。</li>\n</ol>\n<p>如果 Git 目录中保存着特定版本的文件，就属于 <strong>已提交</strong> 状态。 如果文件已修改并放入暂存区，就属于 <strong>已暂存</strong> 状态。 如果自上次检出后，作了修改但还没有放到暂存区域，就是 <strong>已修改</strong> 状态。</p>\n<h2>初始化配置</h2>\n<p>Git 自带一个 <code>git config</code> 工具帮助设置控制 Git 外观和行为的配置变量，这些变量存储在三个不同的位置：</p>\n<ol>\n<li><code>/etc/gitconfig</code> 文件: 包含系统上每一个用户及他们仓库的通用配置。 如果在执行 <code>git config</code> 时带上 <code>--system</code> 选项，那么它就会读写该文件中的配置变量。 （由于它是系统配置文件，因此你需要管理员或超级用户权限来修改它。）</li>\n<li><code>~/.gitconfig</code> 或 <code>~/.config/git/config</code> 文件：只针对当前用户。 你可以传递 <code>--global</code> 选项让 Git 读写此文件，这会对你系统上 <strong>所有</strong> 的仓库生效。</li>\n<li>当前使用仓库的 Git 目录中的 <code>config</code> 文件（即 <code>.git/config</code>）：针对该仓库。 你可以传递 <code>--local</code> 选项让 Git 强制读写此文件，虽然默认情况下用的就是它。（当然，你需要进入某个 Git 仓库中才能让该选项生效。）</li>\n</ol>\n<p>每一个级别会覆盖上一级别的配置，所以 <code>.git/config</code> 的配置变量会覆盖 <code>/etc/gitconfig</code> 中的配置变量。</p>\n<p>使用以下命令查看所有配置及它们所在的文件：</p>\n<div class=\"language-bash\" data-ext=\"sh\" data-title=\"sh\"><pre class=\"language-bash\"><code><span class=\"token function\">git</span> config <span class=\"token parameter variable\">--list</span> --show-origin\n</code></pre></div><h3>用户信息</h3>\n<p>每一个 Git 提交都会使用这些信息，它们会写入到你的每一次提交中，不可更改：</p>\n<div class=\"language-bash\" data-ext=\"sh\" data-title=\"sh\"><pre class=\"language-bash\"><code><span class=\"token function\">git</span> config <span class=\"token parameter variable\">--global</span> user.name <span class=\"token string\">\"John Doe\"</span>\n<span class=\"token function\">git</span> config <span class=\"token parameter variable\">--global</span> user.email johndoe@example.com\n</code></pre></div><h3>检查配置信息</h3>\n<p>可以使用 <code>git config --list</code> 命令来列出所有 Git 当时能找到的配置。</p>\n<div class=\"language-bash\" data-ext=\"sh\" data-title=\"sh\"><pre class=\"language-bash\"><code><span class=\"token function\">git</span> config <span class=\"token parameter variable\">--list</span>\n</code></pre></div><h2>获取帮助</h2>\n<p>使用 <code>git help</code> 获取 Git 命令的全面帮助手册。</p>\n<p>使用 <code>git -h</code> 获取更加简明的输出。</p>\n",
      "image": "https://raw.githubusercontent.com/dribble-njr/typora-njr/master/img/deltas.png",
      "date_published": "2023-09-28T00:00:00.000Z",
      "date_modified": "2024-02-07T08:47:58.000Z",
      "authors": [],
      "tags": [
        "READING"
      ]
    },
    {
      "title": "Git 基础",
      "url": "https://dribble-njr.github.io/blog/blog/reading/pro-git/02-git-basics.html",
      "id": "https://dribble-njr.github.io/blog/blog/reading/pro-git/02-git-basics.html",
      "summary": "初始化 Git 仓库 有两种方式： git clone git init 记录更新 工作目录下的每一个文件都不外乎两种状态：已跟踪 或 未跟踪。 已跟踪的文件是指那些被纳入了版本控制的文件，在上一次快照中有它们的记录，在工作一段时间后， 它们的状态可能是未修改，已修改或已放入暂存区。简而言之，已跟踪的文件就是 Git 已经知道的文件。 工作目录中除已跟...",
      "content_html": "<h2>初始化 Git 仓库</h2>\n<p>有两种方式：</p>\n<ol>\n<li><code>git clone</code></li>\n<li><code>git init</code></li>\n</ol>\n<h2>记录更新</h2>\n<p>工作目录下的每一个文件都不外乎两种状态：<strong>已跟踪</strong> 或 <strong>未跟踪</strong>。</p>\n<p>已跟踪的文件是指那些被纳入了版本控制的文件，在上一次快照中有它们的记录，在工作一段时间后， 它们的状态可能是未修改，已修改或已放入暂存区。简而言之，已跟踪的文件就是 Git 已经知道的文件。</p>\n<p>工作目录中除已跟踪文件外的其它所有文件都属于未跟踪文件，它们既不存在于上次快照的记录中，也没有被放入暂存区。</p>\n<p>编辑过某些文件之后，由于自上次提交后你对它们做了修改，Git 将它们标记为已修改文件。 在工作时，你可以选择性地将这些修改过的文件放入暂存区，然后提交所有已暂存的修改，如此反复。</p>\n<figure><img src=\"https://raw.githubusercontent.com/dribble-njr/typora-njr/master/img/lifecycle.png\" alt=\"Git 下文件生命周期图。\" tabindex=\"0\" loading=\"lazy\"><figcaption>Git 下文件生命周期图。</figcaption></figure>\n<h3>检查状态</h3>\n<p>使用 <code>git status</code> 查看文件处于什么状态。如果在克隆仓库后立即使用此命令，会看到类似这样的输出：</p>\n<div class=\"language-bash\" data-ext=\"sh\" data-title=\"sh\"><pre class=\"language-bash\"><code>$ <span class=\"token function\">git</span> status\nOn branch master\nYour branch is up-to-date with <span class=\"token string\">'origin/master'</span><span class=\"token builtin class-name\">.</span>\nnothing to commit, working directory clean\n</code></pre></div><p>上面的信息表明：</p>\n<ul>\n<li>现在的工作目录相当干净。换句话说，所有已跟踪文件在上次提交后都未被更改过。</li>\n<li>此外，当前目录下没有出现任何处于未跟踪状态的新文件，否则 Git 会在这里列出来。</li>\n<li>最后，该命令还显示了当前所在分支，并告诉你这个分支同远程服务器上对应的分支没有偏离。 现在，分支名是 <code>master</code>（默认的分支名）。</li>\n</ul>\n<h3>跟踪新文件</h3>\n<p>如果新增一个文件，意味着此为 <code>Untracked files</code>，Git 在之前的快照（提交）中没有这些文件。</p>\n<div class=\"language-bash\" data-ext=\"sh\" data-title=\"sh\"><pre class=\"language-bash\"><code>$ <span class=\"token function\">git</span> status\nOn branch master\nYour branch is up-to-date with <span class=\"token string\">'origin/master'</span><span class=\"token builtin class-name\">.</span>\nUntracked files:\n  <span class=\"token punctuation\">(</span>use <span class=\"token string\">\"git add &lt;file&gt;...\"</span> to include <span class=\"token keyword\">in</span> what will be committed<span class=\"token punctuation\">)</span>\n\n    README\n\nnothing added to commit but untracked files present <span class=\"token punctuation\">(</span>use <span class=\"token string\">\"git add\"</span> to track<span class=\"token punctuation\">)</span>\n</code></pre></div><p>使用 <code>git add README</code> 跟踪文件，并检查状态：</p>\n<div class=\"language-bash\" data-ext=\"sh\" data-title=\"sh\"><pre class=\"language-bash\"><code>$ <span class=\"token function\">git</span> <span class=\"token function\">add</span> README\n$ <span class=\"token function\">git</span> status\nYour branch is up-to-date with <span class=\"token string\">'origin/master'</span><span class=\"token builtin class-name\">.</span>\nChanges to be committed:\n  <span class=\"token punctuation\">(</span>use <span class=\"token string\">\"git restore --staged &lt;file&gt;...\"</span> to unstage<span class=\"token punctuation\">)</span>\n\n    new file:   README\n</code></pre></div><p>只要在 <code>Changes to be committed</code> 这行下面的，就说明是已暂存状态。 如果此时提交，那么该文件在你运行 <code>git add</code> 时的版本将被留存在后续的历史记录中。</p>\n<h3>暂存已修改的文件</h3>\n<p>如果修改一个文件，运行 <code>git status</code>，会看到以下内容：</p>\n<div class=\"language-bash\" data-ext=\"sh\" data-title=\"sh\"><pre class=\"language-bash\"><code>$ <span class=\"token function\">git</span> status\nOn branch master\nYour branch is up-to-date with <span class=\"token string\">'origin/master'</span><span class=\"token builtin class-name\">.</span>\nChanges to be committed:\n  <span class=\"token punctuation\">(</span>use <span class=\"token string\">\"git reset HEAD &lt;file&gt;...\"</span> to unstage<span class=\"token punctuation\">)</span>\n\n    new file:   README\n\nChanges not staged <span class=\"token keyword\">for</span> commit:\n  <span class=\"token punctuation\">(</span>use <span class=\"token string\">\"git add &lt;file&gt;...\"</span> to update what will be committed<span class=\"token punctuation\">)</span>\n  <span class=\"token punctuation\">(</span>use <span class=\"token string\">\"git checkout -- &lt;file&gt;...\"</span> to discard changes <span class=\"token keyword\">in</span> working directory<span class=\"token punctuation\">)</span>\n\n    modified:   CONTRIBUTING.md\n</code></pre></div><p>文件 <code>CONTRIBUTING.md</code> 出现在 <code>Changes not staged for commit</code> 这行下面，说明已跟踪文件的内容发生了变化，但还没有放到暂存区。 要暂存这次更新，需要运行 <code>git add</code> 命令。 这是个多功能命令：</p>\n<ol>\n<li>开始跟踪新文件；</li>\n<li>把已跟踪的文件放到暂存区；</li>\n<li>合并时把有冲突的文件标记为已解决状态等。</li>\n</ol>\n<p>将这个命令理解为「精确地将内容添加到下一次提交中」而不是「将一个文件添加到项目中」要更加合适。</p>\n<p>现在让我们运行 <code>git add</code> 将 <code>CONTRIBUTING.md</code> 放到暂存区，然后再看看 <code>git status</code> 的输出：</p>\n<div class=\"language-bash\" data-ext=\"sh\" data-title=\"sh\"><pre class=\"language-bash\"><code>$ <span class=\"token function\">git</span> <span class=\"token function\">add</span> CONTRIBUTING.md\n$ <span class=\"token function\">git</span> status\nOn branch master\nYour branch is up-to-date with <span class=\"token string\">'origin/master'</span><span class=\"token builtin class-name\">.</span>\nChanges to be committed:\n  <span class=\"token punctuation\">(</span>use <span class=\"token string\">\"git reset HEAD &lt;file&gt;...\"</span> to unstage<span class=\"token punctuation\">)</span>\n\n    new file:   README\n    modified:   CONTRIBUTING.md\n</code></pre></div><p>如果再次修改 <code>CONTRIBUTING.md</code> 文件，检查状态：</p>\n<div class=\"language-bash\" data-ext=\"sh\" data-title=\"sh\"><pre class=\"language-bash\"><code>$ <span class=\"token function\">git</span> status\nOn branch master\nYour branch is up-to-date with <span class=\"token string\">'origin/master'</span><span class=\"token builtin class-name\">.</span>\nChanges to be committed:\n  <span class=\"token punctuation\">(</span>use <span class=\"token string\">\"git reset HEAD &lt;file&gt;...\"</span> to unstage<span class=\"token punctuation\">)</span>\n\n    new file:   README\n    modified:   CONTRIBUTING.md\n\nChanges not staged <span class=\"token keyword\">for</span> commit:\n  <span class=\"token punctuation\">(</span>use <span class=\"token string\">\"git add &lt;file&gt;...\"</span> to update what will be committed<span class=\"token punctuation\">)</span>\n  <span class=\"token punctuation\">(</span>use <span class=\"token string\">\"git checkout -- &lt;file&gt;...\"</span> to discard changes <span class=\"token keyword\">in</span> working directory<span class=\"token punctuation\">)</span>\n\n    modified:   CONTRIBUTING.md\n</code></pre></div><p>现在 <code>CONTRIBUTING.md</code> 文件同时出现在暂存区和非暂存区。Git 只不过暂存了你运行 <code>git add</code> 命令时的版本。 如果你现在提交，<code>CONTRIBUTING.md</code> 的版本是你最后一次运行 <code>git add</code> 命令时的那个版本，而不是你运行 <code>git commit</code> 时，在工作目录中的当前版本。 所以，运行了 <code>git add</code> 之后又作了修订的文件，需要重新运行 <code>git add</code> 把最新版本重新暂存起来：</p>\n<div class=\"language-bash\" data-ext=\"sh\" data-title=\"sh\"><pre class=\"language-bash\"><code>$ <span class=\"token function\">git</span> <span class=\"token function\">add</span> CONTRIBUTING.md\n$ <span class=\"token function\">git</span> status\nOn branch master\nYour branch is up-to-date with <span class=\"token string\">'origin/master'</span><span class=\"token builtin class-name\">.</span>\nChanges to be committed:\n  <span class=\"token punctuation\">(</span>use <span class=\"token string\">\"git reset HEAD &lt;file&gt;...\"</span> to unstage<span class=\"token punctuation\">)</span>\n\n    new file:   README\n    modified:   CONTRIBUTING.md\n</code></pre></div><h3>状态简览</h3>\n<p>使用 <code>git status -s</code> 得到更加简洁的输出：</p>\n<div class=\"language-bash\" data-ext=\"sh\" data-title=\"sh\"><pre class=\"language-bash\"><code>$ <span class=\"token function\">git</span> status <span class=\"token parameter variable\">-s</span>\n M README\nMM Rakefile\nA  lib/git.rb\nM  lib/simplegit.rb\n?? LICENSE.txt\n</code></pre></div><p>输出中有两栏，左栏指明了暂存区的状态，右栏指明了工作区的状态。</p>\n<p>新添加的未跟踪文件前面有 <code>??</code> 标记，新添加到暂存区中的文件前面有 <code>A</code> 标记，修改过的文件前面有 <code>M</code> 标记。</p>\n<div class=\"hint-container tip\">\n<p class=\"hint-container-title\">提示</p>\n<p>上面的状态报告显示：</p>\n<p><code>README</code> 文件在工作区已修改但尚未暂存，而 <code>lib/simplegit.rb</code> 文件已修改且已暂存。</p>\n<p><code>Rakefile</code> 文件已修改，暂存后又作了修改，因此该文件的修改中既有已暂存的部分，又有未暂存的部分。</p>\n</div>\n<h3>忽略文件</h3>\n<p>创建一个名为 <code>.gitignore</code> 的文件，列出要忽略的文件的模式。</p>\n<div class=\"language-bash\" data-ext=\"sh\" data-title=\"sh\"><pre class=\"language-bash\"><code>*.<span class=\"token punctuation\">[</span>oa<span class=\"token punctuation\">]</span>\n*~\n</code></pre></div><p>文件 <code>.gitignore</code> 的格式规范如下：</p>\n<ul>\n<li>所有空行或者以 <code>#</code> 开头的行都会被 Git 忽略。</li>\n<li>可以使用标准的 glob 模式匹配，它会递归地应用在整个工作区中。</li>\n<li>匹配模式可以以（<code>/</code>）开头防止递归。</li>\n<li>匹配模式可以以（<code>/</code>）结尾指定目录。</li>\n<li>要忽略指定模式以外的文件或目录，可以在模式前加上叹号（<code>!</code>）取反。</li>\n</ul>\n<h3>查看修改</h3>\n<p><code>git diff</code> 能通过文件补丁的格式更加具体地显示哪些行发生了改变。</p>\n<div class=\"hint-container tip\">\n<p class=\"hint-container-title\">提示</p>\n<p>可以通过 IDE 查看工作树的变更。</p>\n</div>\n<h3>提交更新</h3>\n<p>每次准备提交前，先用 <code>git status</code> 看下，你所需要的文件是不是都已暂存起来了， 然后再运行提交命令 <code>git commit</code>：</p>\n<div class=\"language-bash\" data-ext=\"sh\" data-title=\"sh\"><pre class=\"language-bash\"><code>$ <span class=\"token function\">git</span> commit\n</code></pre></div><p>这样会启动你选择的文本编辑器来输入提交说明。</p>\n<p>也可以直接在 <code>commit</code> 命令后添加 <code>-m</code> 选项，将提交信息与命令放在同一行，如下所示：</p>\n<div class=\"language-bash\" data-ext=\"sh\" data-title=\"sh\"><pre class=\"language-bash\"><code>$ <span class=\"token function\">git</span> commit <span class=\"token parameter variable\">-m</span> <span class=\"token string\">\"Story 182: Fix benchmarks for speed\"</span>\n<span class=\"token punctuation\">[</span>master 463dc4f<span class=\"token punctuation\">]</span> Story <span class=\"token number\">182</span>: Fix benchmarks <span class=\"token keyword\">for</span> speed\n <span class=\"token number\">2</span> files changed, <span class=\"token number\">2</span> insertions<span class=\"token punctuation\">(</span>+<span class=\"token punctuation\">)</span>\n create mode <span class=\"token number\">100644</span> README\n</code></pre></div><p>提交后它会告诉你，当前是在哪个分支（<code>master</code>）提交的，本次提交的完整 SHA-1 校验和是什么（<code>463dc4f</code>），以及在本次提交中，有多少文件修订过，多少行添加和删改过。</p>\n<blockquote>\n<p>提交时记录的是放在暂存区域的快照。 任何还未暂存文件的仍然保持已修改状态，可以在下次提交时纳入版本管理。 每一次运行提交操作，都是对你项目作一次快照，以后可以回到这个状态，或者进行比较。</p>\n</blockquote>\n<h3>跳过使用暂存区域</h3>\n<p>只要在提交的时候，给 <code>git commit</code> 加上 <code>-a</code> 选项，Git 就会自动把所有已经跟踪过的文件暂存起来一并提交，从而跳过 <code>git add</code> 步骤：</p>\n<div class=\"language-bash\" data-ext=\"sh\" data-title=\"sh\"><pre class=\"language-bash\"><code>$ <span class=\"token function\">git</span> status\nOn branch master\nYour branch is up-to-date with <span class=\"token string\">'origin/master'</span><span class=\"token builtin class-name\">.</span>\nChanges not staged <span class=\"token keyword\">for</span> commit:\n  <span class=\"token punctuation\">(</span>use <span class=\"token string\">\"git add &lt;file&gt;...\"</span> to update what will be committed<span class=\"token punctuation\">)</span>\n  <span class=\"token punctuation\">(</span>use <span class=\"token string\">\"git checkout -- &lt;file&gt;...\"</span> to discard changes <span class=\"token keyword\">in</span> working directory<span class=\"token punctuation\">)</span>\n\n    modified:   CONTRIBUTING.md\n\nno changes added to commit <span class=\"token punctuation\">(</span>use <span class=\"token string\">\"git add\"</span> and/or <span class=\"token string\">\"git commit -a\"</span><span class=\"token punctuation\">)</span>\n$ <span class=\"token function\">git</span> commit <span class=\"token parameter variable\">-a</span> <span class=\"token parameter variable\">-m</span> <span class=\"token string\">'added new benchmarks'</span>\n<span class=\"token punctuation\">[</span>master 83e38c7<span class=\"token punctuation\">]</span> added new benchmarks\n <span class=\"token number\">1</span> <span class=\"token function\">file</span> changed, <span class=\"token number\">5</span> insertions<span class=\"token punctuation\">(</span>+<span class=\"token punctuation\">)</span>, <span class=\"token number\">0</span> deletions<span class=\"token punctuation\">(</span>-<span class=\"token punctuation\">)</span>\n</code></pre></div><h3>移除文件</h3>\n<p>可以用 <code>git rm</code> 命令从暂存区域移除文件，它同时会从工作目录删除指定的文件。</p>\n<p>另外一种情况是，你想让文件保留在磁盘，但是并不想让 Git 继续跟踪。</p>\n<div class=\"hint-container tip\">\n<p class=\"hint-container-title\">提示</p>\n<p>当你忘记添加 <code>.gitignore</code> 文件，不小心把一个很大的日志文件或一堆 <code>.a</code> 这样的编译生成文件添加到暂存区时，这一做法尤其有用。</p>\n</div>\n<p>为达到这一目的，使用 <code>--cached</code> 选项：</p>\n<div class=\"language-bash\" data-ext=\"sh\" data-title=\"sh\"><pre class=\"language-bash\"><code>$ <span class=\"token function\">git</span> <span class=\"token function\">rm</span> <span class=\"token parameter variable\">--cached</span> node_modules\n</code></pre></div><h3>移动文件</h3>\n<p>如果在 Git 中重命名了某个文件，仓库中存储的元数据并不会体现出这是一次改名操作。</p>\n<p>要在 Git 中对文件改名，可以这么做：</p>\n<div class=\"language-bash\" data-ext=\"sh\" data-title=\"sh\"><pre class=\"language-bash\"><code>$ <span class=\"token function\">git</span> <span class=\"token function\">mv</span> file_from file_to\n</code></pre></div><p>例如：</p>\n<div class=\"language-bash\" data-ext=\"sh\" data-title=\"sh\"><pre class=\"language-bash\"><code>$ <span class=\"token function\">git</span> <span class=\"token function\">mv</span> README.md README\n$ <span class=\"token function\">git</span> status\nOn branch master\nYour branch is up-to-date with <span class=\"token string\">'origin/master'</span><span class=\"token builtin class-name\">.</span>\nChanges to be committed:\n  <span class=\"token punctuation\">(</span>use <span class=\"token string\">\"git reset HEAD &lt;file&gt;...\"</span> to unstage<span class=\"token punctuation\">)</span>\n\n    renamed:    README.md -<span class=\"token operator\">&gt;</span> README\n</code></pre></div><p>其实，运行 <code>git mv</code> 就相当于运行了下面三条命令：</p>\n<div class=\"language-bash\" data-ext=\"sh\" data-title=\"sh\"><pre class=\"language-bash\"><code>$ <span class=\"token function\">mv</span> README.md README\n$ <span class=\"token function\">git</span> <span class=\"token function\">rm</span> README.md\n$ <span class=\"token function\">git</span> <span class=\"token function\">add</span> README\n</code></pre></div><h2>查看提交历史</h2>\n<p>使用 <code>git log</code> 命令可以查看项目的提交历史。</p>\n<p>不传入任何参数的默认情况下，<code>git log</code> 会按时间先后顺序列出所有的提交，最近的更新排在最上面。 这个命令会列出每个提交的 SHA-1 校验和、作者的名字和电子邮件地址、提交时间以及提交说明。</p>\n<p><code>git log</code> 有许多选项可以帮助你搜寻你所要找的提交。</p>\n<p>| 选项              | 说明                                                                                                        |<br>\n| :</p>\n",
      "image": "https://raw.githubusercontent.com/dribble-njr/typora-njr/master/img/lifecycle.png",
      "date_published": "2023-09-28T00:00:00.000Z",
      "date_modified": "2024-02-07T08:47:58.000Z",
      "authors": [],
      "tags": [
        "READING"
      ]
    },
    {
      "title": "定位",
      "url": "https://dribble-njr.github.io/blog/blog/frontend/basic/css/007-position.html",
      "id": "https://dribble-njr.github.io/blog/blog/frontend/basic/css/007-position.html",
      "summary": "为什么会有 positon 定位 HTML 中每个元素都是盒子，布局就像搭积木一样，从上往下挨个堆盒子，就能完成各式各样的页面，然而多实现几个页面就会发现：文档流中任意一个元素位置调整都会影响后面的元素。 这种布局方式称为标准流。它按从左到右、从上到下布局页面，互相不存在层叠现象。 image-20230829181307056image-202308...",
      "content_html": "<h2>为什么会有 positon 定位</h2>\n<p>HTML 中每个元素都是盒子，布局就像搭积木一样，从上往下挨个堆盒子，就能完成各式各样的页面，然而多实现几个页面就会发现：<strong>文档流中任意一个元素位置调整都会影响后面的元素</strong>。</p>\n<p>这种布局方式称为<strong>标准流</strong>。它按从左到右、从上到下布局页面，互相不存在层叠现象。</p>\n<figure><img src=\"https://raw.githubusercontent.com/dribble-njr/typora-njr/master/img/image-20230829181307056.png\" alt=\"image-20230829181307056\" tabindex=\"0\" loading=\"lazy\"><figcaption>image-20230829181307056</figcaption></figure>\n<p>这种布局方式无法实现「元素层叠」效果，如果希望元素跳出文档流，应该如何做？</p>\n<p>有一种脱离文档流的解决办法就是浮动，但浮动规则的局限性很大，它会向左上角或右上角靠过去，然而这两个方向并不是布局的全部。日益增长的网页复杂度，和落后的 CSS 布局方式之间的矛盾越来越大，让定位需求变得越来越复杂。</p>\n<h2>基于定位的常见需求</h2>\n<p>在开发中，常见的定位需求有如下几个：</p>\n<ol>\n<li>让元素可以相对于它自己的位置定位；</li>\n<li>让元素可以在父元素（某个祖先级容器）范围内任意位置定位；</li>\n<li>让元素可以在屏幕范围内任意位置定位；</li>\n<li>让元素在满足某个条件时固定。</li>\n</ol>\n<h2>不同需求的解决方案</h2>\n<h3><code>positon: relative</code></h3>\n<p><strong>第一种需求：可以使用 <code>relative</code> 定位</strong>。</p>\n<p>首先设置元素的 <code>position</code> 为 <code>relative</code>，让元素准备偏移，此时从视觉上来看它并没有发生任何变化。</p>\n<p>接下来设置 <code>top</code>、<code>right</code>、<code>bottom</code>、<code>left</code> 来让元素偏移。</p>\n<div class=\"language-css\" data-ext=\"css\" data-title=\"css\"><pre class=\"language-css\"><code><span class=\"token selector\">.relative-box</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token property\">position</span><span class=\"token punctuation\">:</span> relative<span class=\"token punctuation\">;</span>\n  <span class=\"token property\">top</span><span class=\"token punctuation\">:</span> 20px<span class=\"token punctuation\">;</span> <span class=\"token comment\">/* 元素上边界与它原本位置的上边界距离20px，其他类似 */</span>\n<span class=\"token punctuation\">}</span>\n</code></pre></div><div class=\"hint-container warning\">\n<p class=\"hint-container-title\">注意</p>\n<ol>\n<li>定位参照对象是自己原来的位置；</li>\n<li>相对定位的元素没有脱离文档流；</li>\n<li>相对定位不会影响其他元素；</li>\n<li>对非定位元素设置 <code>top</code> 等方向属性是没有效果的。</li>\n</ol>\n</div>\n<h3><code>positon: absolute</code></h3>\n<p><strong>第二种需求：使用 <code>absolute</code> 定位</strong>。</p>\n<p>想要设置某个元素相对于某个祖先级元素容器定位，这就意味着元素不被限制在父容器内，因此浮动是肯定不行的（浮动只能在父容器里作威作福）。这就需要一种完全<strong>脱离文档流</strong>的定位方式：<code>positon: absolute</code>。</p>\n<p>不再区分这个元素是块级元素还是行内元素，它的父容器会将它视为不存在，即：<strong>绝对定位元素不占据空间</strong>。</p>\n<p>首先设置元素的 <code>position</code> 为 <code>absolute</code>，然后对它的祖先级元素容器设置标识 <code>position: relative</code>，这样就可以让它可以相对于被标识的元素定位，最后通过 <code>top</code> <code>right</code> <code>bottom</code> <code>left</code> 来让该元素在标识容器内偏移。</p>\n<div class=\"hint-container tip\">\n<p class=\"hint-container-title\">提示</p>\n<p>绝对定位元素相对于最近的非 <code>static</code> 祖先元素定位（开发中一般标记为 <code>relative</code>）。当这样的祖先元素不存在时，则相对于视口定位。</p>\n</div>\n<h3><code>positon: fixed</code></h3>\n<p><strong>第三种需求：使用 <code>fixed</code> 定位。</strong></p>\n<p>这种定位方式会讲元素<strong>移出正常文档流</strong>，并且它是相对于**屏幕视口（文档的可视区域）**来指定元素位置。<strong>元素的位置在屏幕滚动时不会改变</strong>。</p>\n<p>首先为元素设置 <code>position: fixed</code>，<strong>这时候必须为该元素设置宽高</strong>，最后通过 <code>top</code> <code>right</code> <code>bottom</code> <code>left</code> 来让该元素偏移。</p>\n<div class=\"language-css\" data-ext=\"css\" data-title=\"css\"><pre class=\"language-css\"><code><span class=\"token selector\">.fixed</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token property\">position</span><span class=\"token punctuation\">:</span> fixed<span class=\"token punctuation\">;</span>\n  <span class=\"token property\">right</span><span class=\"token punctuation\">:</span> 10px<span class=\"token punctuation\">;</span>\n  <span class=\"token property\">bottom</span><span class=\"token punctuation\">:</span> 10px<span class=\"token punctuation\">;</span>\n  <span class=\"token property\">width</span><span class=\"token punctuation\">:</span> 20px<span class=\"token punctuation\">;</span>\n  <span class=\"token property\">height</span><span class=\"token punctuation\">:</span> 20px<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n</code></pre></div><div class=\"hint-container tip\">\n<p class=\"hint-container-title\">提示</p>\n<p>当元素祖先的 <code>transform</code>、<code>perspective</code>、<code>filter</code> 或 <code>backdrop-filter</code> 属性非 <code>none</code> 时，容器由视口改为该祖先。</p>\n</div>\n<h3><code>positon: sticky</code></h3>\n<p><strong>第四种需求：使用 <code>sticky</code> 定位</strong>。</p>\n<p>粘性定位可以被认为是相对定位和固定定位的混合。元素在跨越特定阈值前为相对定位，之后为固定定位。例如：</p>\n<div class=\"language-css\" data-ext=\"css\" data-title=\"css\"><pre class=\"language-css\"><code><span class=\"token selector\">.sticky</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token property\">position</span><span class=\"token punctuation\">:</span> sticky<span class=\"token punctuation\">;</span>\n  <span class=\"token property\">top</span><span class=\"token punctuation\">:</span> 10px<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n</code></pre></div><p>在屏幕视口滚动到元素 <code>top</code> 距离小于 <code>10px</code> 之前，元素为相对定位。之后，元素将固定在与顶部距离 <code>10px</code> 的位置，直到屏幕回滚到阈值以下。常用来做<strong>吸顶效果</strong>。</p>\n<h2>总结</h2>\n<p>|            | 脱离标准流 | 定位元素 | 绝对定位元素 | 定位参考对象       |<br>\n|</p>\n",
      "image": "https://raw.githubusercontent.com/dribble-njr/typora-njr/master/img/image-20230829181307056.png",
      "date_published": "2022-05-02T00:00:00.000Z",
      "date_modified": "2023-12-24T06:39:15.000Z",
      "authors": [],
      "tags": [
        "CSS"
      ]
    },
    {
      "title": "从零开发组件库（一）：搭建项目",
      "url": "https://dribble-njr.github.io/blog/blog/project/tyro-ui/001-init-project.html",
      "id": "https://dribble-njr.github.io/blog/blog/project/tyro-ui/001-init-project.html",
      "summary": "初始化项目 新建 tyro-ui 项目并初始化。 初始化 git 仓库，添加 .gitignore 文件。 .gitignore 使用 dumi 建立文档站： 提示 由于会出现 Issues with peer dependencies found 错误，因此需要开启 pnpm peer dependencies auto-install。 在项目根目...",
      "content_html": "<h2>初始化项目</h2>\n<p>新建 <code>tyro-ui</code> 项目并初始化。</p>\n<div class=\"language-bash\" data-ext=\"sh\" data-title=\"sh\"><pre class=\"language-bash\"><code><span class=\"token function\">mkdir</span> tyro-ui <span class=\"token operator\">&amp;&amp;</span> <span class=\"token builtin class-name\">cd</span> tyro-ui\n<span class=\"token function\">npm</span> init <span class=\"token parameter variable\">-y</span>\n</code></pre></div><p>初始化 <code>git</code> 仓库，添加 <code>.gitignore</code> 文件。</p>\n<div class=\"language-bash\" data-ext=\"sh\" data-title=\"sh\"><pre class=\"language-bash\"><code><span class=\"token function\">git</span> init\n</code></pre></div><p><strong><code>.gitignore</code></strong></p>\n<div class=\"language-bash\" data-ext=\"sh\" data-title=\"sh\"><pre class=\"language-bash\"><code>node_modules\n</code></pre></div><p>使用 <code>dumi</code> 建立文档站：</p>\n<div class=\"hint-container tip\">\n<p class=\"hint-container-title\">提示</p>\n<p>由于会出现 <code>Issues with peer dependencies found</code> 错误，因此需要开启 <code>pnpm peer dependencies auto-install</code>。</p>\n<p>在项目根目录下新建 <code>.npmrc</code> 文件，添加 <code>auto-install-peers = true</code> 内容。</p>\n</div>\n<p>再安装 <code>dumi</code>：</p>\n<div class=\"language-bash\" data-ext=\"sh\" data-title=\"sh\"><pre class=\"language-bash\"><code><span class=\"token function\">pnpm</span> <span class=\"token function\">add</span> dumi <span class=\"token parameter variable\">-D</span>\n</code></pre></div><p>新建配置文件 <strong>.dumirc.ts</strong></p>\n<div class=\"language-typescript\" data-ext=\"ts\" data-title=\"ts\"><pre class=\"language-typescript\"><code><span class=\"token keyword\">import</span> <span class=\"token punctuation\">{</span> defineConfig <span class=\"token punctuation\">}</span> <span class=\"token keyword\">from</span> <span class=\"token string\">'dumi'</span>\n\n<span class=\"token keyword\">export</span> <span class=\"token keyword\">default</span> <span class=\"token function\">defineConfig</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span>\n  title<span class=\"token operator\">:</span> <span class=\"token string\">'tyro-ui'</span><span class=\"token punctuation\">,</span>\n  <span class=\"token comment\">// 更多配置项...</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span>\n</code></pre></div><p>根目录下新建 <code>docs</code> 文件夹，并添加 <code>index.md</code>，输入以下内容：</p>\n<div class=\"language-markdown\" data-ext=\"md\" data-title=\"md\"><pre class=\"language-markdown\"><code></code></pre></div>",
      "date_published": "2023-01-14T00:00:00.000Z",
      "date_modified": "2023-07-04T14:00:38.000Z",
      "authors": [],
      "tags": [
        "Project"
      ]
    },
    {
      "title": "高级元素",
      "url": "https://dribble-njr.github.io/blog/blog/frontend/basic/html/005-advanced-element.html",
      "id": "https://dribble-njr.github.io/blog/blog/frontend/basic/html/005-advanced-element.html",
      "summary": "除了标题、超链接等元素，还有一些比较复杂的元素：表格和表单。 表格 HTML 表格是一种用于结构化数据的方式，使用 HTML 的标签 <table> 来创建。一个基本的 HTML 表格包含以下组成部分： <table>：表格开始的标签。 <tr>：表示行（table row）。 <td>：表示列/单元格（table data）。 此外，还有几个其他的标...",
      "content_html": "<p>除了标题、超链接等元素，还有一些比较复杂的元素：表格和表单。</p>\n<h2>表格</h2>\n<p>HTML 表格是一种用于结构化数据的方式，使用 HTML 的标签 <code>&lt;table&gt;</code> 来创建。一个基本的 HTML 表格包含以下组成部分：</p>\n<ul>\n<li><code>&lt;table&gt;</code>：表格开始的标签。</li>\n<li><code>&lt;tr&gt;</code>：表示行（table row）。</li>\n<li><code>&lt;td&gt;</code>：表示列/单元格（table data）。</li>\n</ul>\n<p>此外，还有几个其他的标签可以用来更精确地定义表格：</p>\n<ul>\n<li><code>&lt;thead&gt;</code>：用于表示表格的头部区域。</li>\n<li><code>&lt;tbody&gt;</code>：表示主体内容区域。</li>\n<li><code>&lt;tfoot&gt;</code>：表示底部总结区域。</li>\n<li><code>&lt;th&gt;</code>：表示表头。</li>\n</ul>\n<p>这些标签使得你可以更清晰地定义表格的结构，并且可能会使你的表格获得更好的可访问性。</p>\n<div class=\"hint-container tip\">\n<p class=\"hint-container-title\">提示</p>\n<p>即使你不给表格添加你自己的样式，表格标题也会带有一些默认样式：加粗和居中，让标题可以突出显示。</p>\n</div>\n<p>以下是一个基本的 HTML 表格结构的例子：</p>\n\n<h3>通过 CSS 控制表格样式</h3>\n<p>需要用到一个非常重要的属性：<code>border-collapse</code>。这个属性用于控制表格边框的合并方式，它有两个值：</p>\n<ul>\n<li><code>collapse</code>：合并边框。</li>\n<li><code>separate</code>：分离边框。</li>\n</ul>\n<div class=\"hint-container tip\">\n<p class=\"hint-container-title\">提示</p>\n<p><code>border-collapse</code> 属性只能用于 <code>&lt;table&gt;</code> 元素，不能用于 <code>&lt;div&gt;</code> 等其他元素。</p>\n</div>\n<p>以下是一个例子：</p>\n\n<h3>跨列和跨行</h3>\n<p>有时候，我们需要让某个单元格跨越多列或多行，这时候就需要用到 <code>colspan</code> 和 <code>rowspan</code> 属性。</p>\n<ul>\n<li><code>colspan</code>：跨列。</li>\n<li><code>rowspan</code>：跨行。</li>\n</ul>\n\n<h2>表单</h2>\n<p>HTML 表单是用于收集用户输入的一种交互式元素。它可以包含各种类型的输入元素，例如文本字段，复选框，单选按钮，下拉列表等。</p>\n<p>HTML 表单的基本结构如下：</p>\n\n<h3><code>&lt;form&gt;</code> 元素</h3>\n<p><code>&lt;form&gt;</code> 元素用于创建 HTML 表单，它有两个重要的属性：</p>\n<ul>\n<li><code>action</code>：用于指定表单提交的地址。</li>\n<li><code>method</code>：用于指定表单提交的方式，有两个值：<code>get</code> 和 <code>post</code>。</li>\n</ul>\n<h3><code>&lt;label&gt;</code>、<code>&lt;input&gt;</code>、<code>&lt;textarea&gt;</code> 和 <code>&lt;button&gt;</code> 元素</h3>\n<p><code>&lt;label&gt;</code> 元素用于定义表单元素的标签，它有一个重要的属性：</p>\n<ul>\n<li><code>for</code>：用于指定它所对应的表单元素的 <code>id</code> 属性。</li>\n</ul>\n<p><code>&lt;input&gt;</code> 元素用于创建表单元素，它有一个重要的属性：</p>\n<ul>\n<li><code>type</code>：用于指定表单元素的类型。</li>\n</ul>\n<p><code>&lt;textarea&gt;</code> 元素用于创建多行文本输入框。</p>\n<p><code>&lt;button&gt;</code> 元素用于创建按钮，它有一个重要的属性：</p>\n<ul>\n<li><code>type</code>：用于指定按钮的类型。</li>\n</ul>\n<div class=\"hint-container tip\">\n<p class=\"hint-container-title\">提示</p>\n<p>各元素包含的属性详见 MDN 文档：<a href=\"https://developer.mozilla.org/zh-CN/\" target=\"_blank\" rel=\"noopener noreferrer\">https://developer.mozilla.org/zh-CN/</a></p>\n</div>\n",
      "date_published": "2023-04-28T00:00:00.000Z",
      "date_modified": "2024-03-04T11:41:47.000Z",
      "authors": [],
      "tags": [
        "HTML"
      ]
    },
    {
      "title": "背景和边框",
      "url": "https://dribble-njr.github.io/blog/blog/frontend/basic/css/006-background-border.html",
      "id": "https://dribble-njr.github.io/blog/blog/frontend/basic/css/006-background-border.html",
      "summary": "在网页开发中，背景和边框是常用的 CSS 属性，可以帮助我们美化网页的外观和布局。 背景属性 CSS 中的 background 属性可以为元素设置背景颜色、图片、渐变色、重复模式等。下面是一些常见的 CSS 背景属性。 background-color background-color 属性用于设置元素的背景颜色。它可以接受各种颜色值，例如颜色名称、...",
      "content_html": "<p>在网页开发中，背景和边框是常用的 CSS 属性，可以帮助我们美化网页的外观和布局。</p>\n<h2>背景属性</h2>\n<p>CSS 中的 <code>background</code> 属性可以为元素设置背景颜色、图片、渐变色、重复模式等。下面是一些常见的 CSS 背景属性。</p>\n<h3><code>background-color</code></h3>\n<p><code>background-color</code> 属性用于设置元素的背景颜色。它可以接受各种颜色值，例如颜色名称、十六进制颜色码、RGB 颜色等。例如，我们可以使用以下代码为一个段落元素设置背景颜色：</p>\n<div class=\"language-css\" data-ext=\"css\" data-title=\"css\"><pre class=\"language-css\"><code><span class=\"token selector\">p</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token property\">background-color</span><span class=\"token punctuation\">:</span> #f0f0f0<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n</code></pre></div><h3><code>background-image</code></h3>\n<p><code>background-image</code> 属性用于设置元素的背景图片。它可以接受一个图片的 URL 地址作为值。例如，我们可以使用以下代码为一个 <code>div</code> 元素设置背景图片：</p>\n<div class=\"language-css\" data-ext=\"css\" data-title=\"css\"><pre class=\"language-css\"><code><span class=\"token selector\">div</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token property\">background-image</span><span class=\"token punctuation\">:</span> <span class=\"token url\"><span class=\"token function\">url</span><span class=\"token punctuation\">(</span><span class=\"token string url\">'background.jpg'</span><span class=\"token punctuation\">)</span></span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n</code></pre></div><h3><code>background-repeat</code></h3>\n<p><code>background-repeat</code> 属性用于设置背景图片的重复方式。</p>\n<p>默认情况下，背景图片会在水平和垂直方向上重复。</p>\n<p>但是我们可以使用 <code>background-repeat</code> 属性来指定只在水平方向上或垂直方向上重复，或者不重复。有以下取值：</p>\n<ul>\n<li><code>no-repeat</code> — 不重复。</li>\n<li><code>repeat-x</code> — 水平重复。</li>\n<li><code>repeat-y</code> — 垂直重复。</li>\n<li><code>repeat</code> — 在两个方向重复。</li>\n</ul>\n<p>例如，以下代码可以使背景图片只在水平方向上重复：</p>\n<div class=\"language-css\" data-ext=\"css\" data-title=\"css\"><pre class=\"language-css\"><code><span class=\"token selector\">div</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token property\">background-image</span><span class=\"token punctuation\">:</span> <span class=\"token url\"><span class=\"token function\">url</span><span class=\"token punctuation\">(</span><span class=\"token string url\">'background.jpg'</span><span class=\"token punctuation\">)</span></span><span class=\"token punctuation\">;</span>\n  <span class=\"token property\">background-repeat</span><span class=\"token punctuation\">:</span> repeat-x<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n</code></pre></div><h3><code>background-size</code></h3>\n<p><code>background-size</code> 属性用于设置背景图片的大小。它可以接受像素值和百分比值调整图片的大小。</p>\n<div class=\"language-css\" data-ext=\"css\" data-title=\"css\"><pre class=\"language-css\"><code><span class=\"token selector\">div</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token property\">background-image</span><span class=\"token punctuation\">:</span> <span class=\"token url\"><span class=\"token function\">url</span><span class=\"token punctuation\">(</span><span class=\"token string url\">'background.jpg'</span><span class=\"token punctuation\">)</span></span><span class=\"token punctuation\">;</span>\n  <span class=\"token property\">background-size</span><span class=\"token punctuation\">:</span> 10px 20px<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n</code></pre></div><p>也可以通过 <code>cover</code> 和 <code>contain</code> 关键字：</p>\n<ul>\n<li><code>cover</code> — 浏览器将使图像足够大，使它完全覆盖了盒子区，同时仍然保持其高宽比。在这种情况下，有些图像可能会跳出盒子外。</li>\n<li><code>contain</code> — 浏览器将使图像的大小适合盒子内。在这种情况下，如果图像的长宽比与盒子的长宽比不同，则可能在图像的任何一边或顶部和底部出现间隙。</li>\n</ul>\n<p>例如，以下代码可以将背景图片缩放到与元素相同的大小：</p>\n<div class=\"language-css\" data-ext=\"css\" data-title=\"css\"><pre class=\"language-css\"><code><span class=\"token selector\">div</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token property\">background-image</span><span class=\"token punctuation\">:</span> <span class=\"token url\"><span class=\"token function\">url</span><span class=\"token punctuation\">(</span><span class=\"token string url\">'background.jpg'</span><span class=\"token punctuation\">)</span></span><span class=\"token punctuation\">;</span>\n  <span class=\"token property\">background-size</span><span class=\"token punctuation\">:</span> cover<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n</code></pre></div><h3><code>background-position</code></h3>\n<p><code>background-position</code> 属性允许您选择背景图像显示在其应用到的盒子中的位置。它使用的坐标系中，框的左上角是 <code>(0,0)</code>，框沿着水平 (<code>x</code>) 和垂直 (<code>y</code>) 轴定位。</p>\n<div class=\"hint-container tip\">\n<p class=\"hint-container-title\">提示</p>\n<p>默认的背景位置值是 <code>(0,0)</code>。</p>\n</div>\n<p>最常见的背景位置值有两个单独的值——一个水平值后面跟着一个垂直值。</p>\n<p>你可以使用像 <code>top</code> 和 <code>right</code> 这样的关键字:</p>\n<div class=\"language-css\" data-ext=\"css\" data-title=\"css\"><pre class=\"language-css\"><code><span class=\"token selector\">.box</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token property\">background-image</span><span class=\"token punctuation\">:</span> <span class=\"token url\"><span class=\"token function\">url</span><span class=\"token punctuation\">(</span>star.png<span class=\"token punctuation\">)</span></span><span class=\"token punctuation\">;</span>\n  <span class=\"token property\">background-repeat</span><span class=\"token punctuation\">:</span> no-repeat<span class=\"token punctuation\">;</span>\n  <span class=\"token property\">background-position</span><span class=\"token punctuation\">:</span> top center<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n</code></pre></div><p>或者使用长度值和百分比：</p>\n<div class=\"language-css\" data-ext=\"css\" data-title=\"css\"><pre class=\"language-css\"><code><span class=\"token selector\">.box</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token property\">background-image</span><span class=\"token punctuation\">:</span> <span class=\"token url\"><span class=\"token function\">url</span><span class=\"token punctuation\">(</span>star.png<span class=\"token punctuation\">)</span></span><span class=\"token punctuation\">;</span>\n  <span class=\"token property\">background-repeat</span><span class=\"token punctuation\">:</span> no-repeat<span class=\"token punctuation\">;</span>\n  <span class=\"token property\">background-position</span><span class=\"token punctuation\">:</span> 20px 10%<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n</code></pre></div><p>你也可以混合使用关键字，长度值以及百分比，例如：</p>\n<div class=\"language-css\" data-ext=\"css\" data-title=\"css\"><pre class=\"language-css\"><code><span class=\"token selector\">.box</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token property\">background-image</span><span class=\"token punctuation\">:</span> <span class=\"token url\"><span class=\"token function\">url</span><span class=\"token punctuation\">(</span>star.png<span class=\"token punctuation\">)</span></span><span class=\"token punctuation\">;</span>\n  <span class=\"token property\">background-repeat</span><span class=\"token punctuation\">:</span> no-repeat<span class=\"token punctuation\">;</span>\n  <span class=\"token property\">background-position</span><span class=\"token punctuation\">:</span> top 20px<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n</code></pre></div><p>最后，您还可以使用 4-value 语法来指示到盒子的某些边的距离——在本例中，长度单位是与其前面的值的偏移量。所以在下面的 CSS 中，我们将背景从顶部调整 <code>20px</code>，从右侧调整 <code>10px</code>:</p>\n<div class=\"language-css\" data-ext=\"css\" data-title=\"css\"><pre class=\"language-css\"><code><span class=\"token selector\">.box</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token property\">background-image</span><span class=\"token punctuation\">:</span> <span class=\"token url\"><span class=\"token function\">url</span><span class=\"token punctuation\">(</span>star.png<span class=\"token punctuation\">)</span></span><span class=\"token punctuation\">;</span>\n  <span class=\"token property\">background-repeat</span><span class=\"token punctuation\">:</span> no-repeat<span class=\"token punctuation\">;</span>\n  <span class=\"token property\">background-position</span><span class=\"token punctuation\">:</span> top 20px right 10px<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n</code></pre></div><h3><code>background</code></h3>\n<p>简写属性，通常使用语法如下：</p>\n<div class=\"language-text\" data-ext=\"text\" data-title=\"text\"><pre class=\"language-text\"><code>background =\n  &lt;'background-color'&gt;            ||\n  &lt;bg-image&gt;                      ||\n  &lt;bg-position&gt; [ / &lt;bg-size&gt; ]?  ||\n  &lt;repeat-style&gt;                  ||\n</code></pre></div><p>详见 <a href=\"https://developer.mozilla.org/zh-CN/docs/Web/CSS/background\" target=\"_blank\" rel=\"noopener noreferrer\">MDN background</a>。</p>\n<h2>边框属性</h2>\n<p>CSS 中的边框属性可以为元素设置边框样式、边框宽度、边框颜色等。</p>\n<p>下面是一些常见的 CSS 边框属性。这些边框属性是设置元素四个边框颜色的快捷属性。</p>\n<h3><code>border-style</code></h3>\n<p><code>border-style</code> 属性用于设置元素的边框样式。它可以接受 <code>solid</code>、<code>dashed</code>、<code>dotted</code>、<code>double</code>、<code>groove</code>、<code>ridge</code>、<code>inset</code>、<code>outset</code> 和 <code>none</code> 等值。例如，以下代码可以为一个 <code>div</code> 元素设置虚线边框：</p>\n<div class=\"language-css\" data-ext=\"css\" data-title=\"css\"><pre class=\"language-css\"><code><span class=\"token selector\">div</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token property\">border-style</span><span class=\"token punctuation\">:</span> dashed<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n</code></pre></div><h3><code>border-width</code></h3>\n<p><code>border-width</code> 属性用于设置元素的边框宽度。它可以接受像素值、百分比值等单位。例如，以下代码可以为一个 <code>div</code> 元素设置边框宽度为 2 个像素：</p>\n<div class=\"language-css\" data-ext=\"css\" data-title=\"css\"><pre class=\"language-css\"><code><span class=\"token selector\">div</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token property\">border-width</span><span class=\"token punctuation\">:</span> 2px<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n</code></pre></div><h3><code>border-color</code></h3>\n<p><code>border-color</code> 属性用于设置元素四个边框颜色。</p>\n<div class=\"language-css\" data-ext=\"css\" data-title=\"css\"><pre class=\"language-css\"><code><span class=\"token selector\">div</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token property\">border-color</span><span class=\"token punctuation\">:</span> red<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n</code></pre></div><h3><code>border</code></h3>\n<p>上述三个属性的简写属性，基本语法如下：</p>\n<div class=\"language-text\" data-ext=\"text\" data-title=\"text\"><pre class=\"language-text\"><code>border =\n  &lt;line-width&gt;  ||\n  &lt;line-style&gt;  ||\n  &lt;color&gt;\n</code></pre></div>\n<h3>使用边框画三角形</h3>\n<p>可以利用 <code>border</code> 属性特性画三角形。</p>\n<p>每个 HTML 元素的盒模型由内容区域、内边距区域、边框区域和外边距区域构成。边框区域的宽度、样式和颜色由 <code>border</code> 属性控制。</p>\n<p>当你设置一个元素的一个或几个边框，这个元素会产生视觉效果，就像它有一只或几只“箭头”指向特定方向。这是因为边框实际上是从中心点斜向外延伸的。比如，如果你设置了元素的顶边框，这个元素就会看起来有一只“箭头”指向上方。</p>\n<p>所以，你可以通过使用透明边框和可见边框的组合，让元素看起来像一个三角形。</p>\n\n\n",
      "date_published": "2023-04-26T00:00:00.000Z",
      "date_modified": "2023-08-21T11:06:57.000Z",
      "authors": [],
      "tags": [
        "CSS"
      ]
    },
    {
      "title": "层叠和继承",
      "url": "https://dribble-njr.github.io/blog/blog/frontend/basic/css/005-cascade-inheritance.html",
      "id": "https://dribble-njr.github.io/blog/blog/frontend/basic/css/005-cascade-inheritance.html",
      "summary": " W3C 规范 REC-css-cascade-3。 CSS 的基本设计原则之一是 层叠，它允许多个样式表影响文档的表示。 当不同的声明尝试为同一元素设置值时，必须以某种方式解决冲突。 而在默认情况下，若没有声明为元素设置值时，则会通过 继承 或使用属性的默认值来计算最终的结果。 相关信息 与层叠密切相关的概念是 。 值的计算过程 一旦浏览器将 HTM...",
      "content_html": "<div class=\"hint-container tip\">\n<p class=\"hint-container-title\">W3C 规范</p>\n<p><a href=\"https://www.w3.org/TR/2021/REC-css-cascade-3-20210211\" target=\"_blank\" rel=\"noopener noreferrer\">REC-css-cascade-3</a>。</p>\n</div>\n<p>CSS 的基本设计原则之一是 <a href=\"#%E5%B1%82%E5%8F%A0\">层叠</a>，它允许多个样式表影响文档的表示。</p>\n<p>当不同的声明尝试为同一元素设置值时，必须以某种方式解决冲突。</p>\n<p>而在默认情况下，若没有声明为元素设置值时，则会通过 <a href=\"#%E7%BB%A7%E6%89%BF\">继承</a> 或使用属性的默认值来计算最终的结果。</p>\n<div class=\"hint-container info\">\n<p class=\"hint-container-title\">相关信息</p>\n<p>与层叠密切相关的概念是 。</p>\n</div>\n<h2>值的计算过程</h2>\n<p>一旦浏览器将 HTML 文档解析并生成了 DOM Tree，那么必须给每一个元素都设置对应的样式。</p>\n<p>最终的 CSS 属性值会经过多个步骤的计算：</p>\n<ul>\n<li>首先，收集每个元素上每一个属性应用的所有 <a href=\"#%E5%A3%B0%E6%98%8E%E5%80%BC-declared-values\">声明值</a>；</li>\n<li>层叠产生 <a href=\"#%E5%B1%82%E5%8F%A0%E5%80%BC-cascaded-values\">层叠值</a>，每个元素的每个属性最多有一个层叠值；</li>\n<li>默认值将产生 <a href=\"#%E6%8C%87%E5%AE%9A%E5%80%BC-specified-values\">指定值</a>，每个元素的每个属性正好有一个指定值；</li>\n<li>解析值的依赖关系将产生 <a href=\"#%E8%AE%A1%E7%AE%97%E5%80%BC-computed-values\">计算值</a>，每个元素的每个属性正好有一个计算值；</li>\n<li>格式化文档会生成 <a href=\"#%E4%BD%BF%E7%94%A8%E5%80%BC-used-values\">使用值</a>，一个元素只有在一个给定的属性适用于该元素时才具有该属性的使用值；\n<blockquote>\n<p>我的理解是：若一个元素没有该属性，则没有使用值。</p>\n</blockquote>\n</li>\n<li>最后，根据显示环境的不同，将使用值转换为 <a href=\"#%E5%AE%9E%E9%99%85%E5%80%BC-actual-values\">实际值</a>。与使用值一样，元素上的给定属性可能有也可能没有实际值。</li>\n</ul>\n<h3>声明值 Declared Values</h3>\n<p>每个应用于元素的属性声明都会给该属性提供一个声明值，这些值会被层叠处理以选择一个单一的「获胜值」。</p>\n<h3>层叠值 Cascaded Values</h3>\n<p>层叠值代表层叠的结果：它是赢得层叠的声明值（在层叠的输出中被排序在前面）。如果层叠的输出是一个空列表，那就没有层叠值。</p>\n<h3>指定值 Specified Values</h3>\n<p>指定值是一个给定的属性值，是样式表作者为该元素设置的。它是把层叠值通过默认过程处理的结果，保证每个元素上的每个属性都有一个指定的值。</p>\n<p>在许多情况下，指定值是层叠的值。然而，如果根本没有层叠值，那么就会取默认的值。</p>\n<h3>计算值 Computed Values</h3>\n<p>计算值是对指定值进行解析的结果，通常是将其绝对化以准备继承。</p>\n<div class=\"hint-container tip\">\n<p class=\"hint-container-title\">注意</p>\n<p>计算值是在继承过程中父代传递给子代的值。由于历史原因，它不一定是 <code>getComputedStyle()</code> 函数返回的值，该函数有可能会返回 <a href=\"#%E4%BD%BF%E7%94%A8%E5%80%BC-used-values\">使用值</a>。<code>CSSOM</code> 除外，计算值是一个抽象的数据表示：它们的定义反映了该数据表示，而不是该数据如何被序列化。例如，序列化规则通常允许省略某些在解析过程中隐含的值，但这些值仍然是计算值的一部分。</p>\n</div>\n<div class=\"hint-container info\">\n<p class=\"hint-container-title\">EXAMPLE</p>\n<p>一个指定的值可以是绝对的（如 <code>red</code> 或 <code>2px</code>），也可以是相对的（如 <code>auto</code>、<code>2em</code>）。计算一个相对值通常会将其绝对化：</p>\n<ul>\n<li>相对单位的值（<code>em</code>、<code>ex</code>、<code>vh</code>、<code>vw</code>）必须通过与合适的参考尺寸相乘而成为绝对值</li>\n<li>某些关键字（如 <code>smaller</code>、<code>bloder</code>）必须根据其定义进行替换</li>\n<li>某些属性的百分比必须乘以一个参考值（由属性定义）</li>\n<li>有效的相对 URL 必须被解析为绝对值</li>\n</ul>\n</div>\n<div class=\"hint-container tip\">\n<p class=\"hint-container-title\">注意</p>\n<p>一般来说，计算值会尽可能地解析指定值，而不需要执行其他难以并行的操作，例如解析网络请求或从元素和它的父级元素以外的地方检索值。</p>\n</div>\n<p>即使该属性不适用，计算值也会存在。然而一些属性可能会根据该属性是否适用于该元素而改变它们确定计算值的方式。</p>\n<h3>使用值 Used Values</h3>\n<p>使用值是将计算值和完成任何剩余计算的结果，使其成为文档格式化中使用的绝对理论值。</p>\n<div class=\"hint-container info\">\n<p class=\"hint-container-title\">EXAMPLE</p>\n<p>比如，在不知道该元素的祖先布局的情况下，<code>width: auto</code> 声明不能被解析为一个长度，所以计算值是 <code>auto</code>，而使用值是一个绝对长度，如 <code>100px</code>。</p>\n</div>\n<p>如果一个属性不适用于这个元素或盒子类型，那么它对该类型的盒子或元素没有直接的格式化效果，因此对该属性没有使用值。</p>\n<div class=\"hint-container info\">\n<p class=\"hint-container-title\">EXAMPLE</p>\n<p>例如，<code>flex</code> 属性在不是 <code>flex</code> 项目的元素上没有使用值。</p>\n</div>\n<div class=\"hint-container tip\">\n<p class=\"hint-container-title\">注意</p>\n<p>定义为适用于「所有元素」的属性适用于所有元素和显示类型，但不一定适用于所有伪元素类型，因为伪元素通常有自己的特定渲染模型或其他限制。然而，<code>::before</code> 和 <code>::after</code> 伪元素被定义为几乎完全像普通元素一样，因此被定义为接受所有适用于「所有元素」的属性。</p>\n</div>\n<h3>实际值 Actual Values</h3>\n<p>原则上，一个使用值是可以被使用的，但是用户代理可能无法在特定的环境中使用这个值。</p>\n<p>例如，用户代理可能只能呈现整数像素宽度的边框，因此必须近似宽度的使用值。</p>\n<p>另外，一个元素的字体大小可能需要根据字体的可用性和字体大小调整属性的值来调整。</p>\n<p>实际值就是进行此类调整后的使用值。</p>\n<h3>例子</h3>\n<blockquote>\n<p>完整例子见 <a href=\"https://www.w3.org/TR/2021/REC-css-cascade-3-20210211/#stages-examples\" target=\"_blank\" rel=\"noopener noreferrer\">Examples</a></p>\n</blockquote>\n<p>|      属性      |         获胜值          |  层叠值   |       指定值       |  计算值  |  使用值   | 实际值  |<br>\n| :</p>\n",
      "date_published": "2023-03-28T00:00:00.000Z",
      "date_modified": "2023-04-25T03:55:49.000Z",
      "authors": [],
      "tags": [
        "CSS"
      ]
    },
    {
      "title": "文本和字体",
      "url": "https://dribble-njr.github.io/blog/blog/frontend/basic/css/004-text-font.html",
      "id": "https://dribble-njr.github.io/blog/blog/frontend/basic/css/004-text-font.html",
      "summary": " 提示 仅介绍一些常用属性，详见 CSS 参考。 文本布局 文本布局可以作用于文本的间距以及其他布局功能的属性，比如，允许操纵行与字之间的空间，以及在内容框中，文本如何对齐。 text-align text-align 用来定义行内内容（例如文字）如何相对它的块父元素对齐，比如左对齐、居中、右对齐等等。 left：左对齐 right：右对齐； cent...",
      "content_html": "<div class=\"hint-container tip\">\n<p class=\"hint-container-title\">提示</p>\n<p>仅介绍一些常用属性，详见 <a href=\"https://developer.mozilla.org/zh-CN/docs/Web/CSS/Reference\" target=\"_blank\" rel=\"noopener noreferrer\">CSS 参考</a>。</p>\n</div>\n<h2>文本布局</h2>\n<p>文本布局可以作用于文本的间距以及其他布局功能的属性，比如，允许操纵行与字之间的空间，以及在内容框中，文本如何对齐。</p>\n<h3><code>text-align</code></h3>\n<p><code>text-align</code> 用来定义行内内容（例如文字）如何相对它的块父元素对齐，比如左对齐、居中、右对齐等等。</p>\n<ul>\n<li><code>left</code>：左对齐</li>\n<li><code>right</code>：右对齐；</li>\n<li><code>center</code>：居中对齐</li>\n<li><code>justify</code>：两端对齐。</li>\n</ul>\n<div class=\"hint-container warning\">\n<p class=\"hint-container-title\">注意</p>\n<p><code>text-align</code> 并不控制块元素自己的对齐，只控制它的行内内容的对齐。</p>\n<p>常用于做行内元素的居中效果。</p>\n</div>\n\n\n\n\n<h3><code>line-height</code></h3>\n<p><code>line-height</code> 设置文本每行之间的高。</p>\n<p>通常无单位是比较好的做法。行高由此值乘以 <code>font-size</code> 生成。</p>\n<div class=\"language-css\" data-ext=\"css\" data-title=\"css\"><pre class=\"language-css\"><code><span class=\"token selector\">selector</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token property\">line-height</span><span class=\"token punctuation\">:</span> 1.5<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n</code></pre></div><p>由于文字总是会在行框的中间，因此如果设置 <code>line-height</code> 与 <code>height</code> 值相等可以做到内联元素垂直居中，若在加上 <code>text-align</code>，则可以做到<strong>内联元素</strong>水平垂直居中。</p>\n\n<h2>字体样式</h2>\n<p>字体样式作用于字体的属性，会直接应用到文本中，比如使用哪种字体，字体的大小是怎样的，字体是粗体还是斜体，等等。</p>\n<h3><code>color</code></h3>\n<p><code>color</code> 属性用来设置选中元素的前景色，通常指文本颜色。</p>\n\n<h3>font-size</h3>\n<p><code>font-size</code> 决定文字的大小。</p>\n\n<h3><code>font-family</code></h3>\n<p><code>font-family</code> 用于设置文字的字体名称，可以设置一个或多个字体，浏览器会选择列表中第一个该计算机有安装的字体。</p>\n<p>标准的 Web fonts 包括一些基本字体，如 Arial，Georgia，Times New Roman 等。但是很多时候，为了提供更独特和富有吸引力的用户界面，会使用特别的字体，需要载入外部的 Web fonts。</p>\n<p>使用 Web fonts 的步骤：</p>\n<ol>\n<li><code>@font-face</code> 加载一个自定义的字体;</li>\n<li><code>font-family</code> 使用字体。</li>\n</ol>\n<div class=\"language-css\" data-ext=\"css\" data-title=\"css\"><pre class=\"language-css\"><code><span class=\"token atrule\"><span class=\"token rule\">@font-face</span></span> <span class=\"token punctuation\">{</span>\n  <span class=\"token property\">font-family</span><span class=\"token punctuation\">:</span> <span class=\"token string\">'MyFont'</span><span class=\"token punctuation\">;</span>\n  <span class=\"token property\">src</span><span class=\"token punctuation\">:</span> <span class=\"token url\"><span class=\"token function\">url</span><span class=\"token punctuation\">(</span><span class=\"token string url\">'myfont.woff2'</span><span class=\"token punctuation\">)</span></span> <span class=\"token function\">format</span><span class=\"token punctuation\">(</span><span class=\"token string\">'woff2'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> <span class=\"token url\"><span class=\"token function\">url</span><span class=\"token punctuation\">(</span><span class=\"token string url\">'myfont.woff'</span><span class=\"token punctuation\">)</span></span> <span class=\"token function\">format</span><span class=\"token punctuation\">(</span><span class=\"token string\">'woff'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token selector\">body</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token property\">font-family</span><span class=\"token punctuation\">:</span> <span class=\"token string\">'MyFont'</span><span class=\"token punctuation\">,</span> Fallback<span class=\"token punctuation\">,</span> sans-serif<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n</code></pre></div><div class=\"hint-container tip\">\n<p class=\"hint-container-title\">提示</p>\n<p><code>src</code> 用于指定字体资源：</p>\n<ul>\n<li><code>url</code> 指定资源的路径</li>\n<li><code>format</code> 用于帮助浏览器快速识别字体的格式;</li>\n</ul>\n</div>\n<p>字体可以设计成各式各样的形状，那么能不能把字体直接设计成图标的样子呢？</p>\n<p>当然可以，这个就叫做字体图标。</p>\n<p>字体图标的好处：</p>\n<ul>\n<li>放大不会失真</li>\n<li>可以任意切换颜色</li>\n<li>用到很多个图标时，文件相对图片较小</li>\n</ul>\n<p>字体图标的使用：</p>\n<ul>\n<li>登录 <a href=\"https://www.iconfont.cn/\" target=\"_blank\" rel=\"noopener noreferrer\">阿里 icons</a></li>\n<li>下载代码，并且拷贝到项目中</li>\n</ul>\n\n<div class=\"hint-container tip\">\n<p class=\"hint-container-title\">提示</p>\n<p>其他更多使用方式：<a href=\"https://www.iconfont.cn/help/detail?spm=a313x.help_detail.i1.d8d11a391.7bb83a81XO2rxN&amp;helptype=code\" target=\"_blank\" rel=\"noopener noreferrer\">iconfonts 代码应用</a>。</p>\n</div>\n<h3><code>font-weight</code></h3>\n<p><code>font-weight</code> 用于设置文字的粗细，常见的取值有 <code>100 | 200 | 300 | 400 | 500 | 600 | 700 | 800 | 900</code>，也可以用关键字，<code>normal</code> 等于 <code>400</code>，<code>bold</code> 等于 <code>700</code>。</p>\n\n<h3><code>font</code></h3>\n<p><code>font</code> 是一个缩写属性，用来作为 <a href=\"https://developer.mozilla.org/zh-CN/docs/Web/CSS/font-style\" target=\"_blank\" rel=\"noopener noreferrer\"><code>font-sytle</code></a>、<a href=\"https://developer.mozilla.org/zh-CN/docs/Web/CSS/font-variant\" target=\"_blank\" rel=\"noopener noreferrer\"><code>font-variant</code></a>、<code>font-weight</code>、<code>font-size</code>、<code>line-height</code> 和 <code>font-family</code> 的简写。</p>\n<div class=\"hint-container tip\">\n<p class=\"hint-container-title\">提示</p>\n<p>书写规则：<code>font-style font-variant font-weight font-size/line-height font-family</code></p>\n<ul>\n<li><code>font-sytle</code>、<code>font-variant</code> 和 <code>font-weight</code> 可以随意调换顺序，也可以省略；</li>\n<li><code>/line-height</code> 可以省略，如果不省略，必须跟在 <code>font-size</code> 后面；</li>\n<li><code>font-size</code> 和 <code>font-family</code> 不可以调换顺序，也不可省略。</li>\n</ul>\n</div>\n\n",
      "date_published": "2023-03-28T00:00:00.000Z",
      "date_modified": "2023-08-22T10:50:30.000Z",
      "authors": [],
      "tags": [
        "CSS"
      ]
    },
    {
      "title": "快速开始",
      "url": "https://dribble-njr.github.io/blog/blog/frontend/basic/css/001-quick-start.html",
      "id": "https://dribble-njr.github.io/blog/blog/frontend/basic/css/001-quick-start.html",
      "summary": " CSS 层叠样式表（Cascading Style Sheet, CSS）是一种用于给网页添加样式的计算机语言，它并不是真正的编程语言，甚至不是标记语言，只是一种样式表语言。 历史 早期的网页是通过 HTML 编写的，随着 Web 的逐渐发展，人们希望 HTML 页面可以更加丰富，因此为浏览器增加了很多具备特殊样式的元素，比如 i、strong、de...",
      "content_html": "<div class=\"hint-container tip\">\n<p class=\"hint-container-title\">CSS</p>\n<p>层叠样式表（<strong>C</strong>ascading <strong>S</strong>tyle <strong>S</strong>heet, CSS）是一种用于给网页添加样式的计算机语言，它并不是真正的编程语言，甚至不是标记语言，只是一种样式表语言。</p>\n</div>\n<h2>历史</h2>\n<p>早期的网页是通过 HTML 编写的，随着 Web 的逐渐发展，人们希望 HTML 页面可以更加丰富，因此为浏览器增加了很多具备特殊样式的元素，比如 <code>i</code>、<code>strong</code>、<code>del</code> 等。</p>\n<p>后来不同的浏览器厂商实现各自的样式语言，但是没有统一的规划。CSS 的发展历史如下：</p>\n<ul>\n<li>1994 年，哈肯·维姆·莱和伯特·波斯一起合作设计 CSS，于 1996 年发布 CSS1；</li>\n<li>1997 年，W3C 成立 CSS 工作组，于 1998 年发布了 CSS2；</li>\n<li>2006 ~ 2009 年，<code>div</code> + <code>css</code> 布局方式逐渐成为网页内容布局的主流方案（2007 年出现 CSS2.1）；</li>\n<li>CSS3 将所有的 CSS 分成了不同的模块，每一个模块都有于 CSS2 中额外增加的功能，并且支持向后兼容。</li>\n</ul>\n<div class=\"hint-container tip\">\n<p class=\"hint-container-title\">提示</p>\n<p>CSS3标准已部分公布，但仍未全部制订完毕，还会有其它新内容继续加入。 <a href=\"https://www.w3.org/TR/css3-roadmap/\" target=\"_blank\" rel=\"noopener noreferrer\">CSS3发展过程报告. W3C.</a></p>\n</div>\n<h2>基本语法</h2>\n<p>CSS 可以设置元素的样式，比如使用 <code>color: red</code> 将字体改为红色。</p>\n\n<p>CSS 的基本语法规则为：选择器 + 属性声明：</p>\n<div class=\"language-text\" data-ext=\"text\" data-title=\"text\"><pre class=\"language-text\"><code>selector {\n  property: property value;\n}\n</code></pre></div><ul>\n<li>：通过选择器选择了一个或多个需要添加样式的元素（在这个例子中就是 <code>p</code> 元素）。</li>\n<li>声明（Declaration）：一个单独的规则，如 <code>color: red</code>; 用来指定添加样式元素的属性。</li>\n<li>属性（Properties）：改变 HTML 元素样式的途径，本例中 <code>color</code> 就是 <code>&lt;p&gt;</code> 元素的属性。</li>\n<li>属性的值（Property value）：在属性的右边，<code>:</code> 后面即属性的值，它用来指定属性的值。</li>\n</ul>\n<div class=\"hint-container warning\">\n<p class=\"hint-container-title\">注意</p>\n<p>注意其他重要的语法：</p>\n<ul>\n<li>每个规则集（除了选择器的部分）都应该包含在成对的大括号里（<code>{}</code>）。</li>\n<li>在每个声明里要用冒号（<code>:</code>）将属性与属性值分隔开。</li>\n<li>在每个规则集里要用分号（<code>;</code>）将各个声明分隔开。</li>\n</ul>\n</div>\n<h2>引入 CSS</h2>\n<p>引入 CSS 可以分为三种方式：</p>\n<ul>\n<li>内联样式</li>\n<li>内部样式表</li>\n<li>外部样式表</li>\n</ul>\n<h3>内联样式</h3>\n<p>内联样式的使用方式是使用 HTML 元素的 <code>style</code> 属性：</p>\n\n<h3>内部样式表</h3>\n<p>将 CSS 放在 HTML 文件 <code>&lt;head&gt;</code> 元素里的 <code>&lt;style&gt;</code>元素之中。</p>\n\n<h3>外部样式表</h3>\n<p>将 CSS 编写一个独立的文件中，并且 通过 <code>&lt;link&gt;</code> 元素引入进来：</p>\n<div class=\"language-html\" data-ext=\"html\" data-title=\"html\"><pre class=\"language-html\"><code><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>head</span><span class=\"token punctuation\">&gt;</span></span>\n  <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>link</span> <span class=\"token attr-name\">rel</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>stylesheet<span class=\"token punctuation\">\"</span></span> <span class=\"token attr-name\">href</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>example.css<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">&gt;</span></span>\n<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>head</span><span class=\"token punctuation\">&gt;</span></span>\n<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>p</span><span class=\"token punctuation\">&gt;</span></span>我是一个段落<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>p</span><span class=\"token punctuation\">&gt;</span></span>\n</code></pre></div><p><strong>example.css</strong></p>\n<div class=\"language-css\" data-ext=\"css\" data-title=\"css\"><pre class=\"language-css\"><code><span class=\"token selector\">p</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token property\">color</span><span class=\"token punctuation\">:</span> red<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n</code></pre></div><h2>@规则</h2>\n<p><code>@rules</code> 是一种特殊的规则，为 CSS 提供一些关于如何表现的指导。有些 <code>@rules</code> 规则很简单，有规则名和值。</p>\n<p>要将额外的样式表导入主 CSS 样式表，可以使用 <code>@import</code>：</p>\n<div class=\"language-css\" data-ext=\"css\" data-title=\"css\"><pre class=\"language-css\"><code>@import <span class=\"token string\">'example.css'</span>\n</code></pre></div><p>最常见的 <code>@rules</code> 之一是 <code>@media</code>，它允许使用媒体查询来应用 CSS，仅当某些条件成立 (例如，当屏幕分辨率高于某一数量，或屏幕宽度大于某一宽度时)。</p>\n<p>在下面的 CSS 中，我们将给 <code>&lt;body&gt;</code> 元素一个粉红色的背景色。但是，我们随后使用 <code>@media</code> 创建样式表的一个部分，该部分仅适用于视口小于 <code>540px</code> 的浏览器。如果浏览器的宽度小于 <code>540px</code>，则背景色将为蓝色。</p>\n\n<h2>注释</h2>\n<p>CSS 注释以 <code>/*</code> 开始，以 <code>*/</code> 结束。</p>\n<div class=\"language-css\" data-ext=\"css\" data-title=\"css\"><pre class=\"language-css\"><code><span class=\"token comment\">/* 这是个注释 */</span>\n<span class=\"token selector\">p</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token comment\">/* 这是另一个注释 */</span>\n  <span class=\"token property\">color</span><span class=\"token punctuation\">:</span> red<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\n</code></pre></div>",
      "date_published": "2023-03-25T00:00:00.000Z",
      "date_modified": "2023-03-28T03:50:27.000Z",
      "authors": [],
      "tags": [
        "CSS"
      ]
    },
    {
      "title": "选择器",
      "url": "https://dribble-njr.github.io/blog/blog/frontend/basic/css/002-selector.html",
      "id": "https://dribble-njr.github.io/blog/blog/frontend/basic/css/002-selector.html",
      "summary": "CSS 中可以通过选择器来选中 HTML 文档中的元素。 种类 CSS 的选择器一共分为四种，分别是： 基本选择器 选择符 伪类 伪元素 基本选择器 基本选择器共五个，是指平时使用的通配符选择器、标签选择器、ID 选择器、类选择器、属性选择器。 提示 一个元素的 id 唯一，不能重复。 选择符 选择符一共有五个，分别如下： 伪类 伪类的特征是前面会有一...",
      "content_html": "<p>CSS 中可以通过选择器来选中 HTML 文档中的元素。</p>\n<h2>种类</h2>\n<p>CSS 的选择器一共分为四种，分别是：</p>\n<ol>\n<li>基本选择器</li>\n<li>选择符</li>\n<li>伪类</li>\n<li>伪元素</li>\n</ol>\n<h3>基本选择器</h3>\n<p>基本选择器共五个，是指平时使用的通配符选择器、标签选择器、ID 选择器、类选择器、属性选择器。</p>\n<div class=\"language-css\" data-ext=\"css\" data-title=\"css\"><pre class=\"language-css\"><code><span class=\"token comment\">/* 通配符选择器，效率较低 */</span>\n<span class=\"token selector\">*</span> <span class=\"token punctuation\">{</span><span class=\"token punctuation\">}</span> \n\n<span class=\"token comment\">/* 标签选择器 */</span>\n<span class=\"token selector\">body</span> <span class=\"token punctuation\">{</span><span class=\"token punctuation\">}</span>\n\n<span class=\"token comment\">/* ID 选择器 */</span>\n<span class=\"token selector\">#id</span> <span class=\"token punctuation\">{</span><span class=\"token punctuation\">}</span>\n\n<span class=\"token comment\">/* 类选择器 */</span>\n<span class=\"token selector\">.class</span> <span class=\"token punctuation\">{</span><span class=\"token punctuation\">}</span>\n\n<span class=\"token comment\">/* 属性选择器 */</span>\n<span class=\"token selector\">[attr=val]</span> <span class=\"token punctuation\">{</span><span class=\"token punctuation\">}</span> <span class=\"token comment\">/* 属性等于某个值 */</span>\n<span class=\"token selector\">[attr]</span> <span class=\"token punctuation\">{</span><span class=\"token punctuation\">}</span>     <span class=\"token comment\">/* 拥有某一个属性 */</span>\n</code></pre></div><div class=\"hint-container tip\">\n<p class=\"hint-container-title\">提示</p>\n<p>一个元素的 id 唯一，不能重复。</p>\n</div>\n<h3>选择符</h3>\n<p>选择符一共有五个，分别如下：</p>\n<div class=\"language-css\" data-ext=\"css\" data-title=\"css\"><pre class=\"language-css\"><code><span class=\"token comment\">/* 后代关系 */</span>\n<span class=\"token selector\">.container img</span> <span class=\"token punctuation\">{</span><span class=\"token punctuation\">}</span>\n\n<span class=\"token comment\">/* 父子关系 */</span>\n<span class=\"token selector\">ol &gt; li</span> <span class=\"token punctuation\">{</span><span class=\"token punctuation\">}</span>\n\n<span class=\"token comment\">/* 相邻兄弟关系 */</span>\n<span class=\"token selector\">button + button</span> <span class=\"token punctuation\">{</span><span class=\"token punctuation\">}</span>\n\n<span class=\"token comment\">/* 普通兄弟关系 */</span>\n<span class=\"token selector\">button ~ button</span> <span class=\"token punctuation\">{</span><span class=\"token punctuation\">}</span>\n\n<span class=\"token comment\">/* 列（不常见） */</span>\n<span class=\"token selector\">.col || td</span> <span class=\"token punctuation\">{</span><span class=\"token punctuation\">}</span>\n</code></pre></div>\n\n\n\n<h3>伪类</h3>\n<p>伪类的特征是前面会有一个冒号 <code>:</code>，通常与浏览器行为和用户行为相关联，代表元素的某种状态，不会产生新的元素。</p>\n<p>以动态伪类为例：</p>\n<ul>\n<li><code>a:link</code> 未访问的链接；</li>\n<li><code>a:visited</code> 已访问的链接</li>\n<li><code>a:hover</code> 鼠标移动到链接上</li>\n<li><code>a:active</code> 激活的链接（鼠标在链接上长按未松开）</li>\n</ul>\n\n<div class=\"hint-container tip\">\n<p class=\"hint-container-title\">使用注意</p>\n<ul>\n<li><code>:hover</code> 必须放在 <code>:link</code> 和 <code>:visited</code> 后面才能生效；</li>\n<li><code>:active</code> 必须放在 <code>:hover</code> 后面才能生效；</li>\n</ul>\n<p>因此建议的编写顺序为：<code>:link</code>、<code>:visited</code>、<code>:hover</code>、<code>:active</code>。</p>\n<p>除了 <code>&lt;a&gt;</code> 元素外，<code>:hover</code>、<code>:active</code> 也能用在其他元素上。</p>\n<p>直接给 <code>&lt;a&gt;</code> 元素设置样式，相当于给 <code>&lt;a&gt;</code> 元素所有状态伪类都设置了相同的样式。</p>\n</div>\n<div class=\"hint-container info\">\n<p class=\"hint-container-title\">相关信息</p>\n<p><a href=\"https://developer.mozilla.org/zh-CN/docs/Web/CSS/Pseudo-classes\" target=\"_blank\" rel=\"noopener noreferrer\">MDN 伪类</a></p>\n</div>\n<h3>伪元素</h3>\n<p>伪元素的特征是前面会有两个冒号 <code>::</code>，允许你对被选择元素的特定部分修改样式，但是这些元素实际上不会在文档中生产，只会在外部显示可见。</p>\n<p>一些常见的伪元素：</p>\n<ul>\n<li><code>::before</code> 用来创建一个伪元素，作为已选中元素的第一个子元素，通常会配合 <code>content</code> 属性来为该元素添加装饰内容，默认是行内元素；</li>\n<li><code>::after</code> 用来创建一个伪元素，作为已选中元素的最后一个子元素，通常会配合 <code>content</code> 属性来为该元素添加装饰内容，默认是行内元素；</li>\n<li><code>::first-letter</code> 会选中某块级元素第一行的第一个字母，并且文字所处的行之前没有其他内容（如图片和内联的表格）；</li>\n<li><code>::first-line</code> 会选中某块级元素的第一行。</li>\n</ul>\n\n\n\n\n<div class=\"hint-container info\">\n<p class=\"hint-container-title\">相关信息</p>\n<p><a href=\"https://developer.mozilla.org/zh-CN/docs/Web/CSS/Pseudo-elements\" target=\"_blank\" rel=\"noopener noreferrer\">MDN 伪元素</a></p>\n</div>\n<h2>选择器列表</h2>\n<p>如果有多个使用相同样式的 CSS 选择器，那么这些单独的选择器可以被混编为一个「选择器列表」，这样，规则就可以应用到所有的单个选择器上了。</p>\n<div class=\"language-css\" data-ext=\"css\" data-title=\"css\"><pre class=\"language-css\"><code><span class=\"token selector\">h1, .special</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token property\">color</span><span class=\"token punctuation\">:</span> blue<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n<span class=\"token comment\">/* 等价于 */</span>\n<span class=\"token selector\">h1</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token property\">color</span><span class=\"token punctuation\">:</span> blue<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token selector\">.special</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token property\">color</span><span class=\"token punctuation\">:</span> blue<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n</code></pre></div><div class=\"hint-container warning\">\n<p class=\"hint-container-title\">注意</p>\n<p>当使用选择器列表时，如果任何一个选择器无效 (存在语法错误)，那么整条规则都会被忽略。</p>\n</div>\n<h2>优先级</h2>\n<p>CSS 优先级可以分为 0~5 级共 6 个等级，前 4 个等级由选择器决定，后 2 个等级由书写形式和特定语法决定。</p>\n<p>优先级大小可以由数值计算出，出现一个 0 级选择器，优先值数值加 0，1 级选择器加 1，2 级选择器加 10，3 级选择器加 100，以此类推。</p>\n<p>0 级优先级包括：通配符选择器、选择符（5 种）和逻辑组合伪类（<code>:not()</code> <code>:is()</code> <code>:where</code>）。</p>\n<p>1 级优先级就是标签选择器。</p>\n<p>2 级优先级包括：类选择器、属性选择器和其他伪类。</p>\n<p>3 级优先级为 ID 选择器。</p>\n<p>4 级优先级为内联样式。</p>\n<p>5 级优先级为 <code>!important</code>。</p>\n",
      "date_published": "2022-08-03T00:00:00.000Z",
      "date_modified": "2023-03-27T10:15:15.000Z",
      "authors": [],
      "tags": [
        "CSS"
      ]
    },
    {
      "title": "盒模型",
      "url": "https://dribble-njr.github.io/blog/blog/frontend/basic/css/003-box-model.html",
      "id": "https://dribble-njr.github.io/blog/blog/frontend/basic/css/003-box-model.html",
      "summary": "盒模型 所有的 HTML 元素都可以看作一个盒子，他由外边距 margin、边框 border、内边距 padding和内容区 content 组成。 盒模型盒模型 标准盒模型和怪异盒模型 在 中提到了浏览器的渲染模式，现代的浏览器一般都有两种渲染模式：标准模式和怪异模式。 他们表现在盒模型中差异： 标准盒模型：width 和 height 的计算值都...",
      "content_html": "<h2>盒模型</h2>\n<p>所有的 HTML 元素都可以看作一个盒子，他由外边距 <code>margin</code>、边框 <code>border</code>、内边距 <code>padding</code>和内容区 <code>content</code> 组成。</p>\n<figure><img src=\"/assets/image/frontend/basic/css/003/box.png\" alt=\"盒模型\" tabindex=\"0\" loading=\"lazy\"><figcaption>盒模型</figcaption></figure>\n<h2>标准盒模型和怪异盒模型</h2>\n<p>在  中提到了浏览器的渲染模式，现代的浏览器一般都有两种渲染模式：标准模式和怪异模式。</p>\n<p>他们表现在盒模型中差异：</p>\n<ul>\n<li>标准盒模型：<code>width</code> 和 <code>height</code> 的计算值都不包含 <code>border</code> 和 <code>padding</code>，而只会应用到这个元素的 <code>content</code>。</li>\n</ul>\n<figure><img src=\"/assets/image/frontend/basic/css/003/normal-box.png\" alt=\"标准盒模型\" width=\"50%\" height=\"50%\" tabindex=\"0\" loading=\"lazy\"><figcaption>标准盒模型</figcaption></figure>\n<ul>\n<li>怪异盒模型：<code>width</code> 和 <code>height</code> 属性包括 <code>content</code>、<code>padding</code> 和 <code>border</code>，不算 <code>margin</code>。</li>\n</ul>\n<figure><img src=\"/assets/image/frontend/basic/css/003/abnormal-box.png\" alt=\"怪异盒模型\" width=\"50%\" height=\"50%\" tabindex=\"0\" loading=\"lazy\"><figcaption>怪异盒模型</figcaption></figure>\n<h2>box-sizing</h2>\n<p>在 CSS 中，可以设置 <code>box-sizing</code> 属性来设置盒子模型。语法如下：</p>\n<div class=\"language-css\" data-ext=\"css\" data-title=\"css\"><pre class=\"language-css\"><code><span class=\"token property\">box-sizing</span><span class=\"token punctuation\">:</span> content-box|border-box|inherit<span class=\"token punctuation\">;</span>\n</code></pre></div><ul>\n<li><code>content-box</code>：标准盒模型；</li>\n<li><code>border-box</code>：怪异盒模型；</li>\n<li><code>inherit</code>：规定应从父元素继承 <code>box-sizing</code> 属性的值。</li>\n</ul>\n<p>一般希望将 <code>box-sizing</code> 设置为 <code>border-box</code>，能使我们更容易地设定一个元素的宽高：</p>\n<div class=\"language-css\" data-ext=\"css\" data-title=\"css\"><pre class=\"language-css\"><code><span class=\"token selector\">*</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token property\">box-sizing</span><span class=\"token punctuation\">:</span> border-box<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n</code></pre></div><h2>块级盒子和内联盒子</h2>\n<p>CSS 中的盒子有三种表现形式 —— 块级盒子（block box）、内联盒子（inline box）和行内块盒子（inline-block box）。这两种盒子在文档流中会表现出不一样的行为。</p>\n<p>可以通过对盒子 <code>display</code> 属性的设置，比如 <code>inline</code>、 <code>block</code> 或 <code>inline-block</code>，来控制盒子的外部显示类型。</p>\n<h3>块级盒子</h3>\n<p>一个被定义成块级的（block）盒子会表现出以下行为：</p>\n<ul>\n<li>盒子会在内联的方向上扩展并占据父容器在该方向上的所有可用空间，在绝大数情况下意味着盒子会和父容器一样宽。</li>\n<li>每个盒子都会换行。</li>\n<li><code>width</code> 和 <code>height</code> 属性可以发挥作用。</li>\n<li>内边距（<code>padding</code>）, 外边距（<code>margin</code>）和 边框（<code>border</code>）会将其他元素从当前盒子周围「推开」。</li>\n</ul>\n<p>除非特殊指定，诸如标题 (<code>&lt;h1&gt;</code>等) 和段落 (<code>&lt;p&gt;</code>) 默认情况下都是块级的盒子。</p>\n\n<h3>内联盒子</h3>\n<p>如果一个盒子对外显示为 <code>inline</code>，那么他的行为如下：</p>\n<ul>\n<li>盒子不会产生换行。</li>\n<li><code>width</code> 和 <code>height</code> 属性将不起作用。</li>\n<li>垂直方向的内边距、外边距以及边框会被应用但是不会把其他处于 <code>inline</code> 状态的盒子「推开」。</li>\n<li>水平方向的内边距、外边距以及边框会被应用且会把其他处于 <code>inline</code> 状态的盒子「推开」。</li>\n</ul>\n<p>用做链接的 <code>&lt;a&gt;</code> 元素、<code>&lt;span&gt;</code>、<code>&lt;em&gt;</code> 以及 <code>&lt;strong&gt;</code> 都是默认处于 <code>inline</code> 状态的。</p>\n\n<h3>行内块盒子</h3>\n<p><code>display</code> 有一个特殊的值，它在内联和块之间提供了一个中间状态。这对于以下情况非常有用：您不希望一个项切换到新行，但希望它可以设定宽度和高度，并避免上面看到的重叠。</p>\n<p>一个元素使用 <code>display: inline-block</code>，实现我们需要的块级的部分效果：</p>\n<ul>\n<li>设置 <code>width</code> 和 <code>height</code> 属性会生效。</li>\n<li><code>padding</code>, <code>margin</code>, 以及 <code>border</code> 会推开其他元素。</li>\n</ul>\n<p>但是，它不会跳转到新行，如果显式添加 <code>width</code> 和 <code>height</code> 属性，它只会变得比其内容更大。</p>\n\n",
      "image": "https://dribble-njr.github.io/blog/blog/assets/image/frontend/basic/css/003/box.png",
      "date_published": "2022-04-28T00:00:00.000Z",
      "date_modified": "2023-04-25T05:40:28.000Z",
      "authors": [],
      "tags": [
        "CSS"
      ]
    },
    {
      "title": "字符编码",
      "url": "https://dribble-njr.github.io/blog/blog/computer-science/operating-system/001-character-encoding.html",
      "id": "https://dribble-njr.github.io/blog/blog/computer-science/operating-system/001-character-encoding.html",
      "summary": "在计算机中，所有数据都是以二进制数的形式存储的，字符也不例外。为了表示字符，我们需要建立一套「字符集」，规定每个字符和二进制数之间的一一对应关系。有了字符集之后，计算机就可以通过查表完成二进制数到字符的转换。 ",
      "content_html": "<p>在计算机中，所有数据都是以二进制数的形式存储的，字符也不例外。为了表示字符，我们需要建立一套「字符集」，规定每个字符和二进制数之间的一一对应关系。有了字符集之后，计算机就可以通过查表完成二进制数到字符的转换。</p>\n",
      "date_published": "2024-01-24T00:00:00.000Z",
      "date_modified": "2024-02-07T05:30:24.000Z",
      "authors": [],
      "tags": [
        "operating-system"
      ]
    },
    {
      "title": "常见元素",
      "url": "https://dribble-njr.github.io/blog/blog/frontend/basic/html/004-common-element.html",
      "id": "https://dribble-njr.github.io/blog/blog/frontend/basic/html/004-common-element.html",
      "summary": "HTML 中包含大量元素，本文将介绍一些常用元素。 标题和段落 网页通常由标题和段落组成，在 HTML 中，通过 <h1> ~ <h6> 表示 6 个不同级别的标题，通过 <p> 元素表示基本段落。 提示 h 是 heading 的缩写，p 是 paragraph 的缩写。 最佳实践 在编写 HTML 时，需要保证层次结构是合理的。因此需要记住一些最佳...",
      "content_html": "<p>HTML 中包含大量元素，本文将介绍一些常用元素。</p>\n<h2>标题和段落</h2>\n<p>网页通常由标题和段落组成，在 HTML 中，通过 <code>&lt;h1&gt;</code> ~ <code>&lt;h6&gt;</code> 表示 6 个不同级别的标题，通过 <code>&lt;p&gt;</code> 元素表示基本段落。</p>\n<div class=\"hint-container tip\">\n<p class=\"hint-container-title\">提示</p>\n<p>h 是 heading 的缩写，p 是 paragraph 的缩写。</p>\n</div>\n\n\n<h3>最佳实践</h3>\n<p>在编写 HTML 时，需要保证层次结构是合理的。因此需要记住一些最佳实践：</p>\n<ul>\n<li>最好只对每个页面使用一次 <code>&lt;h1&gt;</code> —— 这是顶级标题，所有其他标题位于层次结构中的下方。</li>\n<li>确保在层次结构中以正确的顺序使用标题。不要使用 <code>&lt;h3&gt;</code> 来表示副标题，后面再跟 <code>&lt;h2&gt;</code> 来表示二级副标题——这是没有意义的，会导致奇怪的结果。</li>\n<li>在现有的六个标题层次中，除非觉得有必要，否则应该争取每页使用不超过三个。有很多层次的文件（例如，深层次的标题层次）会变得笨重，难以浏览。在这种情况下，如果可能的话，建议将内容分散到多个页面。</li>\n</ul>\n<h2>图片</h2>\n<p>使用 <code>&lt;img&gt;</code> 在页面中嵌入图片元素。如：</p>\n\n<h2>列表</h2>\n<p>列表分为三种：</p>\n<ul>\n<li>无序列表（unordered list）</li>\n<li>有序列表（ordered list）</li>\n<li>描述列表（description list）</li>\n</ul>\n<h3>无序列表</h3>\n<p>无序列表用于标记列表项目顺序无关紧要的列表。</p>\n<p>每份无序的清单从 <code>&lt;ul&gt;</code>(unordered list) 元素开始，需要包裹清单上所有被列出的项目，然后就是用 <code>&lt;li&gt;</code>(list item) 元素把每个列出的项目单独包裹起来。</p>\n<div class=\"hint-container tip\">\n<p class=\"hint-container-title\">注意</p>\n<p>无序列表 <code>&lt;ul&gt;</code> 的直接子元素只能是 <code>&lt;li&gt;</code>。</p>\n</div>\n\n<h3>有序列表</h3>\n<p>有序列表需要按照项目的顺序列出来。</p>\n<p>需要用 <code>&lt;ol&gt;</code>(ordered list) 元素将所有项目包裹，而不是 <code>&lt;ul&gt;</code>。</p>\n<div class=\"hint-container tip\">\n<p class=\"hint-container-title\">注意</p>\n<p>有序列表 <code>&lt;ol&gt;</code> 的直接子元素也只能是 <code>&lt;li&gt;</code>。</p>\n</div>\n\n<h3>描述列表</h3>\n<p>描述列表的目的是标记一组项目及其相关描述，例如术语和定义，或者是问题和答案等。</p>\n<p>描述列表使用与其他列表类型不同的闭合标签 —— <code>&lt;dl&gt;</code>(description list)；此外，每一项都用 <code>&lt;dt&gt;</code>(description term) 元素闭合。每个描述都用 <code>&lt;dd&gt;</code>（description definition）元素闭合。</p>\n\n<h2>超链接</h2>\n<p>使用 <code>&lt;a&gt;</code> 元素可以跳转到另一个链接。如下，可以跳转到本站首页：</p>\n<div class=\"hint-container tip\">\n<p class=\"hint-container-title\">提示</p>\n<p>a 是 anchor（锚）的缩写。</p>\n</div>\n\n<p><code>&lt;a&gt;</code> 元素有两个常见的属性：</p>\n<ul>\n<li><code>href</code> (Hypertext Reference)：指定要打开的 URL 地址。</li>\n<li><code>target</code>：指定在何处显示链接的资源。\n<ul>\n<li><code>_self</code>：默认值，在当前窗口打开 URL；</li>\n<li><code>_blank</code>：在新窗口打开 URL；</li>\n<li>其它常用于 <code>&lt;iframe&gt;</code> 元素中，不常用。</li>\n</ul>\n</li>\n</ul>\n<h3>块级链接</h3>\n<p>任何内容都可以作为链接，如果想将一个标题作为链接，则可以将标题元素包裹在锚点元素中：</p>\n\n<h3>图片链接</h3>\n<p>如果有需要作为链接的图片，使用 <code>&lt;a&gt;</code> 元素来包裹要引用图片的 <code>&lt;img&gt;</code> 元素。</p>\n\n<h3>锚点链接</h3>\n<p><code>&lt;a&gt;</code> 元素还可以用来做锚点链接，可以跳转到网页中的具体位置：</p>\n<ol>\n<li>在要跳转的元素定义一个 <code>id</code> 属性；</li>\n<li>定义 <code>&lt;a&gt;</code> 元素，设置它的 <code>href</code> 属性为对应 <code>id</code>。</li>\n</ol>\n<div class=\"language-html\" data-ext=\"html\" data-title=\"html\"><pre class=\"language-html\"><code><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>h1</span> <span class=\"token attr-name\">id</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>one<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">&gt;</span></span>标题<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>h1</span><span class=\"token punctuation\">&gt;</span></span>\n\n<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>a</span> <span class=\"token attr-name\">href</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>#one<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">&gt;</span></span>首页<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>a</span><span class=\"token punctuation\">&gt;</span></span>\n</code></pre></div><h3>电子邮件链接</h3>\n<p>其最基本和最常用的使用形式为一个指明收件人电子邮件地址的 <code>mailto:</code> 链接。例如：</p>\n\n<p>实际上，电子邮件地址是可选的。如果 <code>href</code> 属性仅仅只是简单的 <code>mailto:</code>，发送新的电子邮件的窗口也会被用户的邮件客户端打开，只是没有收件人的地址信息，这通常在「分享」链接时起到作用，用户可以给他们选择的地址发送邮件。</p>\n<h3>最佳实践</h3>\n<h4>使用清晰的链接措辞</h4>\n\n\n<h4>链接到非 HTML 资源时留下清晰的指示</h4>\n\n<h4>在下载链接时使用 <code>download</code> 属性</h4>\n<p>当你链接到要下载的资源而不是在浏览器中打开时，你可以使用 <code>download</code> 属性来提供一个默认的保存文件名。</p>\n\n<h2><code>&lt;iframe&gt;</code> 元素</h2>\n<p>利用 <code>&lt;iframe&gt;</code> 元素可以实现在 HTML 文档中嵌入其他 HTML 文档。</p>\n\n<p>由于 <code>&lt;iframe&gt;</code> 元素可以嵌套，因此 <code>&lt;a&gt;</code> 元素 <code>target</code> 属性的其他值可以在 <code>&lt;iframe&gt;</code> 元素中生效：</p>\n<ul>\n<li><code>_parent</code>：在父窗口打开 URL；</li>\n<li><code>_top</code>：在顶层窗口打开 URL。</li>\n</ul>\n<h2><code>&lt;div&gt;</code> 和 <code>&lt;span&gt;</code></h2>\n<div class=\"hint-container tip\">\n<p class=\"hint-container-title\">提示</p>\n<p>div 为 division 的缩写，意为分开，span 以为范围、跨度。</p>\n</div>\n<p>在 Web 发展的早期，由于没有 CSS，因此需要通过语义化的元素告知浏览器一段文字如何显示。</p>\n<p>后来出现 CSS，结构和样式开始分离，HTML 只需要负责结构即可。</p>\n<p>此时，就出现了 <code>&lt;div&gt;</code> 和 <code>&lt;span&gt;</code> 来编写 HTML 中的所有结构。</p>\n<p><code>&lt;div&gt;</code> 会在不同的行显示，而多个 <code>&lt;span&gt;</code> 包裹的内容会在同一行显示。</p>\n\n",
      "date_published": "2023-03-24T00:00:00.000Z",
      "date_modified": "2024-03-04T11:41:47.000Z",
      "authors": [],
      "tags": [
        "HTML"
      ]
    },
    {
      "title": "快速开始",
      "url": "https://dribble-njr.github.io/blog/blog/frontend/basic/html/002-quick-start.html",
      "id": "https://dribble-njr.github.io/blog/blog/frontend/basic/html/002-quick-start.html",
      "summary": " HTML 超文本标记语言（HyperText Markup Language, HTML）是一种用于创建网页的标记语言。 HTML 不是一个编程语言，而是一个用于定义文档内容结构的标记语言。由于它不仅能插入普通的文本，还可以插入图片、音频、视频、超链接等内容，因此被称为超文本标记语言。 比如，对于一段文字，可以如下进行表示： p 元素 p 即为 pa...",
      "content_html": "<div class=\"hint-container tip\">\n<p class=\"hint-container-title\">HTML</p>\n<p>超文本标记语言（<strong>H</strong>yper<strong>T</strong>ext <strong>M</strong>arkup <strong>L</strong>anguage, HTML）是一种用于创建网页的标记语言。</p>\n</div>\n<p>HTML 不是一个编程语言，而是一个用于定义文档内容结构的标记语言。由于它不仅能插入普通的文本，还可以插入图片、音频、视频、超链接等内容，因此被称为<strong>超文本</strong>标记语言。</p>\n<p>比如，对于一段文字，可以如下进行表示：</p>\n\n<div class=\"hint-container tip\">\n<p class=\"hint-container-title\">p 元素</p>\n<p>p 即为 paragraphs 的缩写，表示段落元素。</p>\n</div>\n<h2>HTML 元素语法</h2>\n<p>HTML 文档由元素和文本组成，例如在上述的例子中：</p>\n<div class=\"language-html\" data-ext=\"html\" data-title=\"html\"><pre class=\"language-html\"><code><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>p</span><span class=\"token punctuation\">&gt;</span></span>Neymar is one of the best footballers dribbling.<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>p</span><span class=\"token punctuation\">&gt;</span></span>\n</code></pre></div><p>这个 <code>&lt;p&gt;</code> 元素由开始标签 <code>&lt;p&gt;</code>、内容（content）和结束标签 <code>&lt;/p&gt;</code> 组成。</p>\n<h3>元素</h3>\n<p>在 HTML 中，元素由三个部分组成：</p>\n<ul>\n<li>开始标签（Opening tag）：包含元素的名称（本例为 p），被 <code>&lt;</code>、<code>&gt;</code> 所包围。开头标签标志着元素开始或开始生效的地方。</li>\n<li>内容（Content）：元素的内容，本例中就是段落的文本。</li>\n<li>结束标签（Closing tag）：与开始标签相似，只是其在元素名之前包含了一个 <code>/</code>。这标志着该元素的结束。</li>\n</ul>\n<div class=\"hint-container warning\">\n<p class=\"hint-container-title\">注意</p>\n<p>没有包含关闭标签会产生奇怪的结果。</p>\n</div>\n<div class=\"hint-container tip\">\n<p class=\"hint-container-title\">提示</p>\n<p>某些情况下一些标签可以被省略，详见 <a href=\"https://html.spec.whatwg.org/multipage/syntax.html#optional-tags\" target=\"_blank\" rel=\"noopener noreferrer\">optional-tags</a></p>\n</div>\n<h3>块级元素和内联元素</h3>\n<p>块级元素在页面中以块的形式展现。一个块级元素出现在它前面的内容之后的新行上。任何跟在块级元素后面的内容也会出现在新的行上。</p>\n<p>块级元素通常是页面上的结构元素。例如，一个块级元素可能代表标题、段落、列表、导航菜单或页脚。</p>\n<p>一个块级元素不会嵌套在一个内联元素里面，但它可能嵌套在另一个块级元素里面。</p>\n<p>内联元素通常出现在块级元素中并环绕文档内容的一小部分，而不是一整个段落或者一组内容。内联元素不会导致文本换行。它通常与文本一起使用，例如，<code>&lt;a&gt;</code> 元素创建一个超链接，<code>&lt;em&gt;</code> 和 <code>&lt;strong&gt;</code> 等元素创建强调。</p>\n<div class=\"hint-container tip\">\n<p class=\"hint-container-title\">提示</p>\n<p>HTML5 重新定义了元素的类别：见 <a href=\"https://html.spec.whatwg.org/multipage/indices.html#element-content-categories\" target=\"_blank\" rel=\"noopener noreferrer\">元素内容分类</a>。尽管这些新的定义更精确，但却比「块级元素」和「内联元素」更难理解。</p>\n<p>在这篇文章中提到的「块」和「内联」，不应该与 CSS 盒子的类型中的同名术语相混淆。尽管它们默认是相关的，但改变 CSS 显示类型并不会改变元素的分类，也不会影响它可以包含和被包含于哪些元素。防止这种混淆也是 HTML5 摒弃这些术语的原因之一。</p>\n<p>你可以查阅包含了块级元素和内联元素列表的参考页面。参见 <a href=\"https://developer.mozilla.org/zh-CN/docs/Glossary/Block-level_content\" target=\"_blank\" rel=\"noopener noreferrer\">块级元素</a> 和 <a href=\"https://developer.mozilla.org/zh-CN/docs/Glossary/Inline-level_content\" target=\"_blank\" rel=\"noopener noreferrer\">内联元素</a> 页面。</p>\n</div>\n<h3>元素嵌套</h3>\n<p>元素可以进行嵌套，比如：</p>\n\n<h3>空元素</h3>\n<p>不是所有的元素都拥有开始标签、内容合结束标签。一些元素只有一个标签，用来在此元素的位置插入/嵌入一些东西，这些元素称为<strong>空元素</strong>。</p>\n\n<div class=\"hint-container note\">\n<p class=\"hint-container-title\">注</p>\n<p>HTML 中，无需在一个空元素的标签末尾添加 <code>/</code>，例如 <code>&lt;img src=\"\" alt=\"\" /&gt;</code>。</p>\n<p>然而，当你希望你的 HTML 是有效的 XML 时，这也是一种有效的语法。</p>\n</div>\n<h2>属性</h2>\n<p>在上述例子中，元素中包含了<strong>属性</strong>，用来控制元素的工作方式。</p>\n<div class=\"language-html\" data-ext=\"html\" data-title=\"html\"><pre class=\"language-html\"><code><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>img</span> <span class=\"token attr-name\">width</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>50px<span class=\"token punctuation\">\"</span></span> <span class=\"token attr-name\">src</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>/assets/image/frontend/basic/html/002/avatar.jpg<span class=\"token punctuation\">\"</span></span> <span class=\"token punctuation\">/&gt;</span></span>\n</code></pre></div><p>属性被放置在开始标签，并由一组被 <code>=</code> 分开的 <code>name</code> 和 <code>value</code> 组成，通常情况下用 <code>\"\"</code> 包裹 <code>value</code>。</p>\n<p>属性与元素名称之间包含一个空格，如果有多个属性，属性之间由空格隔开。</p>\n<div class=\"hint-container tip\">\n<p class=\"hint-container-title\">提示</p>\n<p>建议始终添加引号——这样可以避免很多问题，并且使代码更易读。</p>\n</div>\n<h3>常用属性</h3>\n<p>以下属性使用于所有元素。</p>\n<p>| 属性  |        描述        |<br>\n| :</p>\n",
      "date_published": "2023-03-22T00:00:00.000Z",
      "date_modified": "2024-03-04T11:41:47.000Z",
      "authors": [],
      "tags": [
        "HTML"
      ]
    },
    {
      "title": "DOCTYPE",
      "url": "https://dribble-njr.github.io/blog/blog/frontend/basic/html/003-doctype.html",
      "id": "https://dribble-njr.github.io/blog/blog/frontend/basic/html/003-doctype.html",
      "summary": "在 HTML 中，每个 HTML 文档必须以 DOCTYPE 开头，它的目的在于告诉浏览器应该以什么样的文档类型定义（Document Type Definition, DTD）来解析文档。 DTD DTD：文档类型定义，是一套关于标记符的语法规则。 在 HTML5 以前，HTML 都是基于标准通用标记语言（Standard Generalized M...",
      "content_html": "<p>在 HTML 中，每个 HTML 文档必须以 DOCTYPE 开头，它的目的在于告诉浏览器应该以什么样的文档类型定义（Document Type Definition, DTD）来解析文档。</p>\n<div class=\"hint-container info\">\n<p class=\"hint-container-title\">DTD</p>\n<p>DTD：文档类型定义，是一套关于标记符的语法规则。</p>\n<p>在 HTML5 以前，HTML 都是基于标准通用标记语言（Standard Generalized Markup Language，SGML）来实现的，而 SGML 使用 DTD 来定义不同版本的语法。</p>\n</div>\n<p>那么不同的 DOCTYPE 有什么区别呢，这就涉及到了浏览器的渲染模式。</p>\n<h2>浏览器渲染模式</h2>\n<p>目前浏览器的排版引擎使用三种渲染模式，之所以会出现三种渲染模式，是因为以前并没有一个统一的标准，当 W3C 创立网络标准后，现在需要兼容以前的页面，因此出现了不同的渲染模式。</p>\n<ul>\n<li>怪异模式（Quirks mode）：以一种宽松的向后兼容的方式解析页面；</li>\n<li>接近标准模式（Almost standards mode）：尝试以新标准处理旧标准的页面；</li>\n<li>标准模式（Standards mode）：遵循浏览器支持的最新标准渲染解析页面。</li>\n</ul>\n<p>不同的 DOCTYPE 会决定浏览器以不同的渲染模式解析页面，如果文档没有声明或者使用了错误的 DOCTYPE，那么会导致浏览器以怪异模式来渲染页面。</p>\n<h2>HTML4 DOCTYPE</h2>\n<p>HTML4 的 DOCTYPE 类型一共有三种：</p>\n<p><strong>HTML4 Strict</strong></p>\n<div class=\"language-html\" data-ext=\"html\" data-title=\"html\"><pre class=\"language-html\"><code><span class=\"token doctype\"><span class=\"token punctuation\">&lt;!</span><span class=\"token doctype-tag\">DOCTYPE</span> <span class=\"token name\">html</span> <span class=\"token name\">PUBLIC</span> <span class=\"token string\">\"-//W3C//DTD HTML 4.01//EN\"</span> <span class=\"token string\">\"http://www.w3.org/TR/html4/strict.dtd\"</span><span class=\"token punctuation\">&gt;</span></span>\n</code></pre></div><p><strong>HTML4 Transitional</strong></p>\n<div class=\"language-html\" data-ext=\"html\" data-title=\"html\"><pre class=\"language-html\"><code><span class=\"token doctype\"><span class=\"token punctuation\">&lt;!</span><span class=\"token doctype-tag\">DOCTYPE</span> <span class=\"token name\">html</span> <span class=\"token name\">PUBLIC</span> <span class=\"token string\">\"-//W3C//DTD HTML 4.01 Transitional//EN\"</span> <span class=\"token string\">\"http://www.w3.org/TR/html4/loose.dtd\"</span><span class=\"token punctuation\">&gt;</span></span>\n</code></pre></div><p><strong>HTML4 Frameset</strong></p>\n<div class=\"language-html\" data-ext=\"html\" data-title=\"html\"><pre class=\"language-html\"><code><span class=\"token doctype\"><span class=\"token punctuation\">&lt;!</span><span class=\"token doctype-tag\">DOCTYPE</span> <span class=\"token name\">html</span> <span class=\"token name\">PUBLIC</span> <span class=\"token string\">\"-//W3C//DTD HTML 4.01 Frameset//EN\"</span> <span class=\"token string\">\"http://www.w3.org/TR/html4/frameset.dtd\"</span><span class=\"token punctuation\">&gt;</span></span>\n</code></pre></div><h2>HTML5 DOCTYPE</h2>\n<p>因为 HTML5 不基于 SGML，没有为之定义的 DTD，所以理论上 HTML5 不需要再声明 DOCTYPE。</p>\n<p>但是前面提到了：<strong>如果文档没有声明或者使用了错误的 DOCTYPE，那么会导致浏览器以怪异模式来渲染页面</strong>。因此，HTML5 使用了以下 DOCTYPE：</p>\n<div class=\"language-html\" data-ext=\"html\" data-title=\"html\"><pre class=\"language-html\"><code><span class=\"token doctype\"><span class=\"token punctuation\">&lt;!</span><span class=\"token doctype-tag\">DOCTYPE</span> <span class=\"token name\">html</span><span class=\"token punctuation\">&gt;</span></span>\n</code></pre></div>",
      "date_published": "2023-03-22T00:00:00.000Z",
      "date_modified": "2024-03-04T11:41:47.000Z",
      "authors": [],
      "tags": [
        "HTML"
      ]
    },
    {
      "title": "历史",
      "url": "https://dribble-njr.github.io/blog/blog/frontend/basic/html/001-html-history.html",
      "id": "https://dribble-njr.github.io/blog/blog/frontend/basic/html/001-html-history.html",
      "summary": "历史 1990 年，Tim Berners-Lee 创建了 HTML，旨在使科学研究人员可以更容易地在不同的计算机系统之间共享文档。 随着互联网的不断发展，HTML 不仅能插入普通的文本，还可以插入图片、音视频、链接等超文本内容，逐渐成为创建网页的标准语言。 在最初的五年（1990-1995）中，HTML 先后在 CERN（欧洲核子研究中心） 和 IE...",
      "content_html": "<h2>历史</h2>\n<p>1990 年，Tim Berners-Lee 创建了 HTML，旨在使科学研究人员可以更容易地在不同的计算机系统之间共享文档。</p>\n<p>随着互联网的不断发展，HTML 不仅能插入普通的文本，还可以插入图片、音视频、链接等超文本内容，逐渐成为创建网页的标准语言。</p>\n<p>在最初的五年（1990-1995）中，HTML 先后在 CERN（欧洲核子研究中心） 和 IETF（互联网工程任务组） 托管。</p>\n<ul>\n<li>1991-1993 年，由 IETF 发布各项草案。</li>\n<li>1995 年，<strong>HTML 2.0</strong> 发布。</li>\n</ul>\n<p>在 IETF 主持下，HTML 的进一步发展由于利益冲突而停滞不前。因此，1994 年，Berners-Lee 为了 Web 发展而成立了 W3C，随后 HTML 标准由 W3C 指定。</p>\n<ul>\n<li>1995 年，W3C 第一次扩展 HTML 的尝试失败，该标准被称为 HTML 3.0，详情见 <a href=\"https://zh.wikipedia.org/wiki/%E6%B5%8F%E8%A7%88%E5%99%A8%E5%A4%A7%E6%88%98\" target=\"_blank\" rel=\"noopener noreferrer\">浏览器大战</a>。</li>\n<li>1997 年，<strong>HTML 3.2</strong> 发布，它引入了一些重要的新特性，如表格、框架、样式表等。</li>\n<li>1998 年，<strong>HTML 4.0</strong> 发布，它引入了一些新的特性，如嵌套标签、样式表、客户端脚本等。</li>\n<li>1999 年，<strong>HTML 4.01</strong> 发布，它是 HTML 4.0 的一个修订版，它主要是修复了一些错误和不规范的用法。</li>\n</ul>\n<p>在 HTML 4.01 之后，W3C 决定停止发展 HTML，开始开发 XHTML（可扩展超文本标记语言），它是 HTML 的一个基于 XML 的变种。XHTML 更加严格，更加规范，具有更好的可读性和可维护性，但也更加复杂和冗长。</p>\n<p>XHTML 1.0 对 HTML4 进行了重新表述，除了加入新的序列化之外，没有增加任何新特性，这项工作于 2000 年完成。在 XHTML 1.0 之后，W3C 的重点转向使其他组织更容易扩展 XHTML。与此同时，W3C 还开发了一种与早期 HTML 和 XHTML 语言不兼容的新语言，命名为 XHTML2。</p>\n<p>2004 年，在 W3C 的一次研讨会上，Mozilla 和 Opera 联合向 W3C 提案认为应该重新发展 HTML。然而，由于该提案与之前选择的 Web 发展方向相冲突，该提案被拒绝，W3C 员工和成员投票决定继续开发基于 XML 的替代品。</p>\n<p>此后不久，Apple、 Mozilla 和 Opera 共同宣布成立 WHATWG（Web Hypertext Application Technology Working Group，网页超文本应用技术工作小组）开始开发 HTML5。</p>\n<p>2006 年，W3C 表示有兴趣参与 HTML5 的开发，并于 2007 年成立了一个特许工作组，与 WHATWG 合作开发 HTML5 规范。</p>\n<p>2008 年，WHATWG 与 W3C 共同交付 <strong>HTML5</strong>，并于 2014 年 10 月 28 日完成标准化。</p>\n<p>2019 年，WHATWG 和 W3C 签署了一项协议，双方合作开发 HTML 的单一版本: <a href=\"https://html.spec.whatwg.org/multipage/\" target=\"_blank\" rel=\"noopener noreferrer\">HTML Living Standard</a>。</p>\n<div class=\"hint-container tip\">\n<p class=\"hint-container-title\">总结</p>\n<p>HTML 主要版本：</p>\n<ul>\n<li>HTML 2.0</li>\n<li>HTML 3.2</li>\n<li>HTML 4.0</li>\n<li>HTML 5</li>\n</ul>\n</div>\n<h2>参考</h2>\n<ul>\n<li><a href=\"https://html.spec.whatwg.org/multipage/introduction.html#history-2\" target=\"_blank\" rel=\"noopener noreferrer\">WHATWG</a></li>\n<li><a href=\"https://en.wikipedia.org/wiki/HTML\" target=\"_blank\" rel=\"noopener noreferrer\">维基百科</a></li>\n</ul>\n",
      "date_published": "2023-03-22T00:00:00.000Z",
      "date_modified": "2024-02-07T05:30:24.000Z",
      "authors": [],
      "tags": [
        "HTML"
      ]
    },
    {
      "title": "Intro Page",
      "url": "https://dribble-njr.github.io/blog/blog/intro.html",
      "id": "https://dribble-njr.github.io/blog/blog/intro.html",
      "summary": "Intro Page Place your introduction and profile here. ",
      "content_html": "\n<p>Place your introduction and profile here.</p>\n",
      "date_published": "2023-03-02T05:00:27.000Z",
      "date_modified": "2023-03-02T05:00:27.000Z",
      "authors": [],
      "tags": []
    },
    {
      "title": "Slide page",
      "url": "https://dribble-njr.github.io/blog/blog/slides.html",
      "id": "https://dribble-njr.github.io/blog/blog/slides.html",
      "summary": " ",
      "content_html": "<!-- markdownlint-disable MD024 MD033 MD051 -->\n",
      "image": "https://dribble-njr.github.io/blog/blog/logo.svg",
      "date_published": "2023-03-02T05:00:27.000Z",
      "date_modified": "2023-03-02T05:00:27.000Z",
      "authors": [],
      "tags": []
    },
    {
      "title": "Project",
      "url": "https://dribble-njr.github.io/blog/blog/project/",
      "id": "https://dribble-njr.github.io/blog/blog/project/",
      "summary": "个人开发 开源项目 ",
      "content_html": "<h2>个人开发</h2>\n<ul>\n<li></li>\n<li></li>\n</ul>\n<h2>开源项目</h2>\n<ul>\n<li></li>\n</ul>\n",
      "date_published": "2023-03-02T05:00:27.000Z",
      "date_modified": "2024-02-29T11:17:41.000Z",
      "authors": [],
      "tags": []
    },
    {
      "title": "二叉树",
      "url": "https://dribble-njr.github.io/blog/blog/computer-science/algorithm/0001%E3%80%81%E4%BA%8C%E5%8F%89%E6%A0%91.html",
      "id": "https://dribble-njr.github.io/blog/blog/computer-science/algorithm/0001%E3%80%81%E4%BA%8C%E5%8F%89%E6%A0%91.html",
      "summary": "通常二叉树有两种做法，分别对应着回溯算法和动态规划： 一次遍历二叉树：用 traverse 函数配合外部变量，实质上是一个回溯框架； 分解问题：通过分解为左右子树问题解决，实质上是动态规划。 一次遍历（回溯） 二叉树的最大深度 在前序位置（进入当前节点）中将当前深度 +1，并计算最大深度，再后序位置（离开当前节点）中将深度 -1。本质上就是一个回溯算法...",
      "content_html": "<p>通常二叉树有两种做法，分别对应着回溯算法和动态规划：</p>\n<ol>\n<li>一次遍历二叉树：用 <code>traverse</code> 函数配合外部变量，实质上是一个<strong>回溯框架</strong>；</li>\n<li>分解问题：通过分解为左右子树问题解决，实质上是<strong>动态规划</strong>。</li>\n</ol>\n<h2>一次遍历（回溯）</h2>\n<h3><a class=\"header-anchor\" href=\"#二叉树的最大深度\"><span></span></a><a href=\"https://leetcode.cn/problems/maximum-depth-of-binary-tree/\" target=\"_blank\" rel=\"noopener noreferrer\">二叉树的最大深度</a></h3>\n<p>在前序位置（进入当前节点）中将当前深度 <code>+1</code>，并计算最大深度，再后序位置（离开当前节点）中将深度 <code>-1</code>。本质上就是一个回溯算法。</p>\n<div class=\"language-typescript\" data-ext=\"ts\" data-title=\"ts\"><pre class=\"language-typescript\"><code><span class=\"token keyword\">function</span> <span class=\"token function\">maxDepth</span><span class=\"token punctuation\">(</span>root<span class=\"token operator\">:</span> TreeNode <span class=\"token operator\">|</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">)</span><span class=\"token operator\">:</span> <span class=\"token builtin\">number</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">let</span> depth<span class=\"token operator\">:</span> <span class=\"token builtin\">number</span> <span class=\"token operator\">=</span> <span class=\"token number\">0</span>\n  <span class=\"token keyword\">let</span> res<span class=\"token operator\">:</span> <span class=\"token builtin\">number</span> <span class=\"token operator\">=</span> <span class=\"token number\">0</span>\n\n  <span class=\"token keyword\">const</span> <span class=\"token function-variable function\">traverse</span> <span class=\"token operator\">=</span> <span class=\"token keyword\">function</span><span class=\"token punctuation\">(</span>root<span class=\"token operator\">:</span> TreeNode <span class=\"token operator\">|</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>root <span class=\"token operator\">==</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">return</span><span class=\"token punctuation\">;</span>\n\n    depth<span class=\"token operator\">++</span>\n    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>root<span class=\"token punctuation\">.</span>left <span class=\"token operator\">==</span> <span class=\"token keyword\">null</span> <span class=\"token operator\">&amp;&amp;</span> root<span class=\"token punctuation\">.</span>right <span class=\"token operator\">==</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n      res <span class=\"token operator\">=</span> Math<span class=\"token punctuation\">.</span><span class=\"token function\">max</span><span class=\"token punctuation\">(</span>res<span class=\"token punctuation\">,</span> depth<span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">}</span>\n    <span class=\"token function\">traverse</span><span class=\"token punctuation\">(</span>root<span class=\"token punctuation\">.</span>left<span class=\"token punctuation\">)</span>\n    <span class=\"token function\">traverse</span><span class=\"token punctuation\">(</span>root<span class=\"token punctuation\">.</span>right<span class=\"token punctuation\">)</span>\n    depth<span class=\"token operator\">--</span>\n  <span class=\"token punctuation\">}</span>\n\n  <span class=\"token function\">traverse</span><span class=\"token punctuation\">(</span>root<span class=\"token punctuation\">)</span>\n\n  <span class=\"token keyword\">return</span> res\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n</code></pre></div><h3><a class=\"header-anchor\" href=\"#路径总和\"><span></span></a><a href=\"https://leetcode.cn/problems/path-sum/\" target=\"_blank\" rel=\"noopener noreferrer\">路径总和</a></h3>\n<p>回溯过程中判断到达根节点时和是否和目标和相等。</p>\n<div class=\"language-typescript\" data-ext=\"ts\" data-title=\"ts\"><pre class=\"language-typescript\"><code><span class=\"token keyword\">function</span> <span class=\"token function\">hasPathSum</span><span class=\"token punctuation\">(</span>root<span class=\"token operator\">:</span> TreeNode <span class=\"token operator\">|</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">,</span> targetSum<span class=\"token operator\">:</span> <span class=\"token builtin\">number</span><span class=\"token punctuation\">)</span><span class=\"token operator\">:</span> <span class=\"token builtin\">boolean</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>root <span class=\"token operator\">==</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">return</span> <span class=\"token boolean\">false</span>\n  \n  <span class=\"token keyword\">let</span> sum <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">,</span> res <span class=\"token operator\">=</span> <span class=\"token boolean\">false</span>\n\n  <span class=\"token keyword\">const</span> <span class=\"token function-variable function\">traverse</span> <span class=\"token operator\">=</span> <span class=\"token keyword\">function</span><span class=\"token punctuation\">(</span>root<span class=\"token operator\">:</span> TreeNode<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>root <span class=\"token operator\">==</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n      <span class=\"token keyword\">return</span>\n    <span class=\"token punctuation\">}</span>\n\n    sum <span class=\"token operator\">+=</span> root<span class=\"token punctuation\">.</span>val\n    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>root<span class=\"token punctuation\">.</span>left <span class=\"token operator\">==</span> <span class=\"token keyword\">null</span> <span class=\"token operator\">&amp;&amp;</span> root<span class=\"token punctuation\">.</span>right <span class=\"token operator\">==</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n      <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>sum <span class=\"token operator\">==</span> targetSum<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        res <span class=\"token operator\">=</span> <span class=\"token boolean\">true</span>\n      <span class=\"token punctuation\">}</span>\n    <span class=\"token punctuation\">}</span>\n          \n    <span class=\"token function\">traverse</span><span class=\"token punctuation\">(</span>root<span class=\"token punctuation\">.</span>left<span class=\"token punctuation\">)</span>\n    <span class=\"token function\">traverse</span><span class=\"token punctuation\">(</span>root<span class=\"token punctuation\">.</span>right<span class=\"token punctuation\">)</span>\n    sum <span class=\"token operator\">-=</span> root<span class=\"token punctuation\">.</span>val\n  <span class=\"token punctuation\">}</span>\n\n  <span class=\"token function\">traverse</span><span class=\"token punctuation\">(</span>root<span class=\"token punctuation\">)</span>\n\n  <span class=\"token keyword\">return</span> res\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n</code></pre></div><h3><a class=\"header-anchor\" href=\"#路径总和ii\"><span></span></a><a href=\"https://leetcode.cn/problems/path-sum-ii/submissions/\" target=\"_blank\" rel=\"noopener noreferrer\">路径总和Ⅱ</a></h3>\n<p>和上一题一样，只不过多维护一个路径数组。</p>\n<div class=\"language-typescript\" data-ext=\"ts\" data-title=\"ts\"><pre class=\"language-typescript\"><code><span class=\"token keyword\">function</span> <span class=\"token function\">pathSum</span><span class=\"token punctuation\">(</span>root<span class=\"token operator\">:</span> TreeNode <span class=\"token operator\">|</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">,</span> targetSum<span class=\"token operator\">:</span> <span class=\"token builtin\">number</span><span class=\"token punctuation\">)</span><span class=\"token operator\">:</span> <span class=\"token builtin\">number</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>root <span class=\"token operator\">==</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">return</span> <span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span>\n\n  <span class=\"token comment\">// 路径、最终结果及当前和</span>\n  <span class=\"token keyword\">const</span> path<span class=\"token operator\">:</span> <span class=\"token builtin\">number</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span> res<span class=\"token operator\">:</span> <span class=\"token builtin\">number</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span>\n  <span class=\"token keyword\">let</span> curSum <span class=\"token operator\">=</span> <span class=\"token number\">0</span>\n\n  <span class=\"token keyword\">const</span> <span class=\"token function-variable function\">traverse</span> <span class=\"token operator\">=</span> <span class=\"token keyword\">function</span><span class=\"token punctuation\">(</span>root<span class=\"token operator\">:</span> TreeNode<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>root <span class=\"token operator\">==</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">return</span>\n\n    curSum <span class=\"token operator\">+=</span> root<span class=\"token punctuation\">.</span>val\n    path<span class=\"token punctuation\">.</span><span class=\"token function\">push</span><span class=\"token punctuation\">(</span>root<span class=\"token punctuation\">.</span>val<span class=\"token punctuation\">)</span>\n    <span class=\"token comment\">// 到达叶子节点时判断是否满足条件</span>\n    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>root<span class=\"token punctuation\">.</span>left <span class=\"token operator\">==</span> <span class=\"token keyword\">null</span> <span class=\"token operator\">&amp;&amp;</span> root<span class=\"token punctuation\">.</span>right <span class=\"token operator\">==</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n      <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>curSum <span class=\"token operator\">==</span> targetSum<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        res<span class=\"token punctuation\">.</span><span class=\"token function\">push</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">[</span><span class=\"token operator\">...</span>path<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span>\n      <span class=\"token punctuation\">}</span>\n    <span class=\"token punctuation\">}</span>\n\n    <span class=\"token function\">traverse</span><span class=\"token punctuation\">(</span>root<span class=\"token punctuation\">.</span>left<span class=\"token punctuation\">)</span>\n    <span class=\"token function\">traverse</span><span class=\"token punctuation\">(</span>root<span class=\"token punctuation\">.</span>right<span class=\"token punctuation\">)</span>\n\n    <span class=\"token comment\">// 回溯</span>\n    curSum <span class=\"token operator\">-=</span> root<span class=\"token punctuation\">.</span>val\n    path<span class=\"token punctuation\">.</span><span class=\"token function\">pop</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n  <span class=\"token punctuation\">}</span>\n\n  <span class=\"token function\">traverse</span><span class=\"token punctuation\">(</span>root<span class=\"token punctuation\">)</span>\n\n  <span class=\"token keyword\">return</span> res\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n</code></pre></div><h3><a class=\"header-anchor\" href=\"#求根节点到叶节点数字之和\"><span></span></a><a href=\"https://leetcode.cn/problems/sum-root-to-leaf-numbers/\" target=\"_blank\" rel=\"noopener noreferrer\">求根节点到叶节点数字之和</a></h3>\n<p>记录所有路径即可求和。</p>\n<div class=\"language-typescript\" data-ext=\"ts\" data-title=\"ts\"><pre class=\"language-typescript\"><code><span class=\"token keyword\">function</span> <span class=\"token function\">sumNumbers</span><span class=\"token punctuation\">(</span>root<span class=\"token operator\">:</span> TreeNode <span class=\"token operator\">|</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">)</span><span class=\"token operator\">:</span> <span class=\"token builtin\">number</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>root <span class=\"token operator\">==</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">return</span> <span class=\"token number\">0</span>\n\n  <span class=\"token keyword\">let</span> path<span class=\"token operator\">:</span> <span class=\"token builtin\">string</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span> res <span class=\"token operator\">=</span> <span class=\"token number\">0</span>\n\n  <span class=\"token keyword\">const</span> <span class=\"token function-variable function\">traverse</span> <span class=\"token operator\">=</span> <span class=\"token keyword\">function</span><span class=\"token punctuation\">(</span>root<span class=\"token operator\">:</span> TreeNode<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>root <span class=\"token operator\">==</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">return</span>\n    \n    path<span class=\"token punctuation\">.</span><span class=\"token function\">push</span><span class=\"token punctuation\">(</span>root<span class=\"token punctuation\">.</span>val <span class=\"token operator\">+</span> <span class=\"token string\">''</span><span class=\"token punctuation\">)</span>\n    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>root<span class=\"token punctuation\">.</span>left <span class=\"token operator\">==</span> <span class=\"token keyword\">null</span> <span class=\"token operator\">&amp;&amp;</span> root<span class=\"token punctuation\">.</span>right <span class=\"token operator\">==</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n      res <span class=\"token operator\">+=</span> <span class=\"token function\">Number</span><span class=\"token punctuation\">(</span>path<span class=\"token punctuation\">.</span><span class=\"token function\">join</span><span class=\"token punctuation\">(</span><span class=\"token string\">''</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">}</span>\n    <span class=\"token function\">traverse</span><span class=\"token punctuation\">(</span>root<span class=\"token punctuation\">.</span>left<span class=\"token punctuation\">)</span>\n    <span class=\"token function\">traverse</span><span class=\"token punctuation\">(</span>root<span class=\"token punctuation\">.</span>right<span class=\"token punctuation\">)</span>\n    path<span class=\"token punctuation\">.</span><span class=\"token function\">pop</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n  <span class=\"token punctuation\">}</span>\n\n  <span class=\"token function\">traverse</span><span class=\"token punctuation\">(</span>root<span class=\"token punctuation\">)</span>\n\n  <span class=\"token keyword\">return</span> res\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n</code></pre></div><h3><a class=\"header-anchor\" href=\"#二叉树的所有路径\"><span></span></a><a href=\"https://leetcode.cn/problems/binary-tree-paths/\" target=\"_blank\" rel=\"noopener noreferrer\">二叉树的所有路径</a></h3>\n<p>将上面的题改一些代码即可。</p>\n<div class=\"language-typescript\" data-ext=\"ts\" data-title=\"ts\"><pre class=\"language-typescript\"><code><span class=\"token keyword\">function</span> <span class=\"token function\">binaryTreePaths</span><span class=\"token punctuation\">(</span>root<span class=\"token operator\">:</span> TreeNode <span class=\"token operator\">|</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">)</span><span class=\"token operator\">:</span> <span class=\"token builtin\">string</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>root <span class=\"token operator\">==</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">return</span> <span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span>\n\n  <span class=\"token keyword\">let</span> path<span class=\"token operator\">:</span> <span class=\"token builtin\">number</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span> res<span class=\"token operator\">:</span> <span class=\"token builtin\">string</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span>\n\n  <span class=\"token keyword\">const</span> <span class=\"token function-variable function\">traverse</span> <span class=\"token operator\">=</span> <span class=\"token keyword\">function</span><span class=\"token punctuation\">(</span>root<span class=\"token operator\">:</span> TreeNode<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>root <span class=\"token operator\">==</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">return</span>\n    \n    path<span class=\"token punctuation\">.</span><span class=\"token function\">push</span><span class=\"token punctuation\">(</span>root<span class=\"token punctuation\">.</span>val<span class=\"token punctuation\">)</span>\n    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>root<span class=\"token punctuation\">.</span>left <span class=\"token operator\">==</span> <span class=\"token keyword\">null</span> <span class=\"token operator\">&amp;&amp;</span> root<span class=\"token punctuation\">.</span>right <span class=\"token operator\">==</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n      res<span class=\"token punctuation\">.</span><span class=\"token function\">push</span><span class=\"token punctuation\">(</span>path<span class=\"token punctuation\">.</span><span class=\"token function\">join</span><span class=\"token punctuation\">(</span><span class=\"token string\">'-&gt;'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">}</span>\n    <span class=\"token function\">traverse</span><span class=\"token punctuation\">(</span>root<span class=\"token punctuation\">.</span>left<span class=\"token punctuation\">)</span>\n    <span class=\"token function\">traverse</span><span class=\"token punctuation\">(</span>root<span class=\"token punctuation\">.</span>right<span class=\"token punctuation\">)</span>\n    path<span class=\"token punctuation\">.</span><span class=\"token function\">pop</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n  <span class=\"token punctuation\">}</span>\n\n  <span class=\"token function\">traverse</span><span class=\"token punctuation\">(</span>root<span class=\"token punctuation\">)</span>\n\n  <span class=\"token keyword\">return</span> res\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n</code></pre></div><h3><a class=\"header-anchor\" href=\"#左叶子之和\"><span></span></a><a href=\"https://leetcode.cn/problems/sum-of-left-leaves/\" target=\"_blank\" rel=\"noopener noreferrer\">左叶子之和</a></h3>\n<p>一次遍历找到左叶子即可。</p>\n<div class=\"language-typescript\" data-ext=\"ts\" data-title=\"ts\"><pre class=\"language-typescript\"><code><span class=\"token keyword\">function</span> <span class=\"token function\">sumOfLeftLeaves</span><span class=\"token punctuation\">(</span>root<span class=\"token operator\">:</span> TreeNode <span class=\"token operator\">|</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">)</span><span class=\"token operator\">:</span> <span class=\"token builtin\">number</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>root <span class=\"token operator\">==</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">return</span> <span class=\"token number\">0</span>\n\n  <span class=\"token keyword\">let</span> res <span class=\"token operator\">=</span> <span class=\"token number\">0</span>\n\n  <span class=\"token keyword\">const</span> <span class=\"token function-variable function\">traverse</span> <span class=\"token operator\">=</span> <span class=\"token keyword\">function</span><span class=\"token punctuation\">(</span>root<span class=\"token operator\">:</span> TreeNode<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>root <span class=\"token operator\">==</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">return</span> <span class=\"token number\">0</span>\n\n    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>root<span class=\"token punctuation\">.</span>left<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n      <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>root<span class=\"token punctuation\">.</span>left<span class=\"token punctuation\">.</span>left <span class=\"token operator\">==</span> <span class=\"token keyword\">null</span> <span class=\"token operator\">&amp;&amp;</span> root<span class=\"token punctuation\">.</span>left<span class=\"token punctuation\">.</span>right <span class=\"token operator\">==</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        res <span class=\"token operator\">+=</span> root<span class=\"token punctuation\">.</span>left<span class=\"token punctuation\">.</span>val\n      <span class=\"token punctuation\">}</span>\n    <span class=\"token punctuation\">}</span>\n    <span class=\"token function\">traverse</span><span class=\"token punctuation\">(</span>root<span class=\"token punctuation\">.</span>left<span class=\"token punctuation\">)</span>\n    <span class=\"token function\">traverse</span><span class=\"token punctuation\">(</span>root<span class=\"token punctuation\">.</span>right<span class=\"token punctuation\">)</span>\n  <span class=\"token punctuation\">}</span>\n\n  <span class=\"token function\">traverse</span><span class=\"token punctuation\">(</span>root<span class=\"token punctuation\">)</span>\n\n  <span class=\"token keyword\">return</span> res\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n</code></pre></div><h2>分解问题（动态规划）</h2>\n<h3><a class=\"header-anchor\" href=\"#二叉树的最大深度-1\"><span></span></a><a href=\"https://leetcode.cn/problems/maximum-depth-of-binary-tree/\" target=\"_blank\" rel=\"noopener noreferrer\">二叉树的最大深度</a></h3>\n<p>这个题可以一次遍历解决问题，同样也能计算左右子树的最大深度，从而计算出整棵树的最大深度。这就是动态规划，而动态规划必须明确函数的意义，这个题的函数就是输入一个根节点，计算最大深度。</p>\n<div class=\"language-typescript\" data-ext=\"ts\" data-title=\"ts\"><pre class=\"language-typescript\"><code><span class=\"token keyword\">function</span> <span class=\"token function\">maxDepth</span><span class=\"token punctuation\">(</span>root<span class=\"token operator\">:</span> TreeNode <span class=\"token operator\">|</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">)</span><span class=\"token operator\">:</span> <span class=\"token builtin\">number</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>root <span class=\"token operator\">==</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">return</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n\n  <span class=\"token keyword\">const</span> left <span class=\"token operator\">=</span> <span class=\"token function\">maxDepth</span><span class=\"token punctuation\">(</span>root<span class=\"token punctuation\">.</span>left<span class=\"token punctuation\">)</span>\n  <span class=\"token keyword\">const</span> right <span class=\"token operator\">=</span> <span class=\"token function\">maxDepth</span><span class=\"token punctuation\">(</span>root<span class=\"token punctuation\">.</span>right<span class=\"token punctuation\">)</span>\n\n  <span class=\"token comment\">// 左右子树的最大深度 + 根节点</span>\n  <span class=\"token keyword\">return</span> Math<span class=\"token punctuation\">.</span><span class=\"token function\">max</span><span class=\"token punctuation\">(</span>left<span class=\"token punctuation\">,</span> right<span class=\"token punctuation\">)</span> <span class=\"token operator\">+</span> <span class=\"token number\">1</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n</code></pre></div><h3><a class=\"header-anchor\" href=\"#二叉树的最小深度\"><span></span></a><a href=\"https://leetcode.cn/problems/minimum-depth-of-binary-tree/\" target=\"_blank\" rel=\"noopener noreferrer\">二叉树的最小深度</a></h3>\n<div class=\"language-typescript\" data-ext=\"ts\" data-title=\"ts\"><pre class=\"language-typescript\"><code><span class=\"token keyword\">function</span> <span class=\"token function\">minDepth</span><span class=\"token punctuation\">(</span>root<span class=\"token operator\">:</span> TreeNode <span class=\"token operator\">|</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">)</span><span class=\"token operator\">:</span> <span class=\"token builtin\">number</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>root <span class=\"token operator\">==</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">return</span> <span class=\"token number\">0</span>\n\n  <span class=\"token keyword\">const</span> left <span class=\"token operator\">=</span> <span class=\"token function\">minDepth</span><span class=\"token punctuation\">(</span>root<span class=\"token punctuation\">.</span>left<span class=\"token punctuation\">)</span>\n  <span class=\"token keyword\">const</span> right <span class=\"token operator\">=</span> <span class=\"token function\">minDepth</span><span class=\"token punctuation\">(</span>root<span class=\"token punctuation\">.</span>right<span class=\"token punctuation\">)</span>\n\n  <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>root<span class=\"token punctuation\">.</span>left <span class=\"token operator\">==</span> <span class=\"token keyword\">null</span> <span class=\"token operator\">&amp;&amp;</span> root<span class=\"token punctuation\">.</span>right <span class=\"token operator\">!=</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">return</span> <span class=\"token number\">1</span> <span class=\"token operator\">+</span> right\n  <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>root<span class=\"token punctuation\">.</span>left <span class=\"token operator\">!=</span> <span class=\"token keyword\">null</span> <span class=\"token operator\">&amp;&amp;</span> root<span class=\"token punctuation\">.</span>right <span class=\"token operator\">==</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">return</span> <span class=\"token number\">1</span> <span class=\"token operator\">+</span> left\n\n  <span class=\"token keyword\">return</span> <span class=\"token number\">1</span> <span class=\"token operator\">+</span> Math<span class=\"token punctuation\">.</span><span class=\"token function\">min</span><span class=\"token punctuation\">(</span>left<span class=\"token punctuation\">,</span> right<span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n</code></pre></div><h3><a class=\"header-anchor\" href=\"#平衡二叉树\"><span></span></a><a href=\"https://leetcode.cn/problems/balanced-binary-tree/\" target=\"_blank\" rel=\"noopener noreferrer\">平衡二叉树</a></h3>\n<p>在计算二叉树深度的同时判断是否为平衡二叉树。</p>\n<div class=\"language-typescript\" data-ext=\"ts\" data-title=\"ts\"><pre class=\"language-typescript\"><code><span class=\"token keyword\">function</span> <span class=\"token function\">isBalanced</span><span class=\"token punctuation\">(</span>root<span class=\"token operator\">:</span> TreeNode <span class=\"token operator\">|</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">)</span><span class=\"token operator\">:</span> <span class=\"token builtin\">boolean</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>root <span class=\"token operator\">==</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">return</span> <span class=\"token boolean\">true</span>\n\n  <span class=\"token keyword\">let</span> isBalanced <span class=\"token operator\">=</span> <span class=\"token boolean\">true</span>\n\n  <span class=\"token keyword\">const</span> <span class=\"token function-variable function\">getDepth</span> <span class=\"token operator\">=</span> <span class=\"token keyword\">function</span><span class=\"token punctuation\">(</span>root<span class=\"token operator\">:</span> TreeNode<span class=\"token punctuation\">)</span><span class=\"token operator\">:</span> <span class=\"token builtin\">number</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>root <span class=\"token operator\">==</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">return</span> <span class=\"token number\">0</span>\n\n    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token operator\">!</span>isBalanced<span class=\"token punctuation\">)</span> <span class=\"token keyword\">return</span>\n\n    <span class=\"token keyword\">const</span> left <span class=\"token operator\">=</span> <span class=\"token function\">getDepth</span><span class=\"token punctuation\">(</span>root<span class=\"token punctuation\">.</span>left<span class=\"token punctuation\">)</span>\n    <span class=\"token keyword\">const</span> right <span class=\"token operator\">=</span> <span class=\"token function\">getDepth</span><span class=\"token punctuation\">(</span>root<span class=\"token punctuation\">.</span>right<span class=\"token punctuation\">)</span>\n\n    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>Math<span class=\"token punctuation\">.</span><span class=\"token function\">abs</span><span class=\"token punctuation\">(</span>left <span class=\"token operator\">-</span> right<span class=\"token punctuation\">)</span> <span class=\"token operator\">&gt;</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n      isBalanced <span class=\"token operator\">=</span> <span class=\"token boolean\">false</span>\n    <span class=\"token punctuation\">}</span>\n\n    <span class=\"token keyword\">return</span> <span class=\"token number\">1</span> <span class=\"token operator\">+</span> Math<span class=\"token punctuation\">.</span><span class=\"token function\">max</span><span class=\"token punctuation\">(</span>left<span class=\"token punctuation\">,</span> right<span class=\"token punctuation\">)</span>\n  <span class=\"token punctuation\">}</span>\n\n  <span class=\"token function\">getDepth</span><span class=\"token punctuation\">(</span>root<span class=\"token punctuation\">)</span>\n\n  <span class=\"token keyword\">return</span> isBalanced\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n</code></pre></div><h3><a class=\"header-anchor\" href=\"#相同的树\"><span></span></a><a href=\"https://leetcode.cn/problems/same-tree/\" target=\"_blank\" rel=\"noopener noreferrer\">相同的树</a></h3>\n<p>将问题分解为左右子树是否相同。</p>\n<div class=\"language-typescript\" data-ext=\"ts\" data-title=\"ts\"><pre class=\"language-typescript\"><code><span class=\"token keyword\">function</span> <span class=\"token function\">isSameTree</span><span class=\"token punctuation\">(</span>p<span class=\"token operator\">:</span> TreeNode <span class=\"token operator\">|</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">,</span> q<span class=\"token operator\">:</span> TreeNode <span class=\"token operator\">|</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">)</span><span class=\"token operator\">:</span> <span class=\"token builtin\">boolean</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>p <span class=\"token operator\">==</span> <span class=\"token keyword\">null</span> <span class=\"token operator\">&amp;&amp;</span> q <span class=\"token operator\">==</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">return</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">;</span>\n  <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>p <span class=\"token operator\">==</span> <span class=\"token keyword\">null</span> <span class=\"token operator\">&amp;&amp;</span> q <span class=\"token operator\">!=</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">return</span> <span class=\"token boolean\">false</span><span class=\"token punctuation\">;</span>\n  <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>p <span class=\"token operator\">!=</span> <span class=\"token keyword\">null</span> <span class=\"token operator\">&amp;&amp;</span> q <span class=\"token operator\">==</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">return</span> <span class=\"token boolean\">false</span><span class=\"token punctuation\">;</span>\n  <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>p<span class=\"token punctuation\">.</span>val <span class=\"token operator\">!=</span> q<span class=\"token punctuation\">.</span>val<span class=\"token punctuation\">)</span> <span class=\"token keyword\">return</span> <span class=\"token boolean\">false</span><span class=\"token punctuation\">;</span>\n\n  <span class=\"token keyword\">const</span> left <span class=\"token operator\">=</span> <span class=\"token function\">isSameTree</span><span class=\"token punctuation\">(</span>p<span class=\"token punctuation\">.</span>left<span class=\"token punctuation\">,</span> q<span class=\"token punctuation\">.</span>left<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token keyword\">const</span> right <span class=\"token operator\">=</span> <span class=\"token function\">isSameTree</span><span class=\"token punctuation\">(</span>p<span class=\"token punctuation\">.</span>right<span class=\"token punctuation\">,</span> q<span class=\"token punctuation\">.</span>right<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n  <span class=\"token keyword\">return</span> left <span class=\"token operator\">&amp;&amp;</span> right<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n</code></pre></div><h3><a class=\"header-anchor\" href=\"#对称二叉树\"><span></span></a><a href=\"https://leetcode.cn/problems/symmetric-tree/\" target=\"_blank\" rel=\"noopener noreferrer\">对称二叉树</a></h3>\n<p>判断左右子树是否对称即可。</p>\n<div class=\"language-typescript\" data-ext=\"ts\" data-title=\"ts\"><pre class=\"language-typescript\"><code><span class=\"token keyword\">function</span> <span class=\"token function\">isSymmetric</span><span class=\"token punctuation\">(</span>root<span class=\"token operator\">:</span> TreeNode <span class=\"token operator\">|</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">)</span><span class=\"token operator\">:</span> <span class=\"token builtin\">boolean</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>root <span class=\"token operator\">===</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">return</span> <span class=\"token boolean\">true</span>\n\n  <span class=\"token keyword\">const</span> traverse <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span>n1<span class=\"token operator\">:</span> TreeNode<span class=\"token punctuation\">,</span> n2<span class=\"token operator\">:</span> TreeNode<span class=\"token punctuation\">)</span><span class=\"token operator\">:</span> <span class=\"token builtin\">boolean</span> <span class=\"token operator\">=&gt;</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>n1 <span class=\"token operator\">==</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">return</span> n2 <span class=\"token operator\">==</span> <span class=\"token keyword\">null</span>\n    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>n2 <span class=\"token operator\">==</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">return</span> <span class=\"token boolean\">false</span>\n    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>n1<span class=\"token punctuation\">.</span>val <span class=\"token operator\">!=</span> n2<span class=\"token punctuation\">.</span>val<span class=\"token punctuation\">)</span> <span class=\"token keyword\">return</span> <span class=\"token boolean\">false</span>\n\n    <span class=\"token keyword\">const</span> left <span class=\"token operator\">=</span> <span class=\"token function\">traverse</span><span class=\"token punctuation\">(</span>n1<span class=\"token punctuation\">.</span>left<span class=\"token punctuation\">,</span> n2<span class=\"token punctuation\">.</span>right<span class=\"token punctuation\">)</span>\n    <span class=\"token keyword\">const</span> right <span class=\"token operator\">=</span> <span class=\"token function\">traverse</span><span class=\"token punctuation\">(</span>n1<span class=\"token punctuation\">.</span>right<span class=\"token punctuation\">,</span> n2<span class=\"token punctuation\">.</span>left<span class=\"token punctuation\">)</span>\n    <span class=\"token keyword\">return</span> left <span class=\"token operator\">&amp;&amp;</span> right\n  <span class=\"token punctuation\">}</span>\n\n  <span class=\"token keyword\">return</span> <span class=\"token function\">traverse</span><span class=\"token punctuation\">(</span>root<span class=\"token punctuation\">.</span>left<span class=\"token punctuation\">,</span> root<span class=\"token punctuation\">.</span>right<span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n</code></pre></div><h3><a class=\"header-anchor\" href=\"#二叉树展开为链表\"><span></span></a><a href=\"https://leetcode.cn/problems/flatten-binary-tree-to-linked-list/\" target=\"_blank\" rel=\"noopener noreferrer\">二叉树展开为链表</a></h3>\n<p>分解为左右子树问题即可。</p>\n<div class=\"language-typescript\" data-ext=\"ts\" data-title=\"ts\"><pre class=\"language-typescript\"><code><span class=\"token keyword\">function</span> <span class=\"token function\">flatten</span><span class=\"token punctuation\">(</span>root<span class=\"token operator\">:</span> TreeNode <span class=\"token operator\">|</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">)</span><span class=\"token operator\">:</span> <span class=\"token keyword\">void</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>root <span class=\"token operator\">==</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">return</span>\n\n  <span class=\"token keyword\">const</span> <span class=\"token function-variable function\">traverse</span> <span class=\"token operator\">=</span> <span class=\"token keyword\">function</span><span class=\"token punctuation\">(</span>root<span class=\"token operator\">:</span> TreeNode<span class=\"token punctuation\">)</span><span class=\"token operator\">:</span> TreeNode <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>root <span class=\"token operator\">==</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">return</span> <span class=\"token keyword\">null</span>\n\n    <span class=\"token keyword\">const</span> left <span class=\"token operator\">=</span> <span class=\"token function\">traverse</span><span class=\"token punctuation\">(</span>root<span class=\"token punctuation\">.</span>left<span class=\"token punctuation\">)</span>\n    <span class=\"token keyword\">const</span> right <span class=\"token operator\">=</span> <span class=\"token function\">traverse</span><span class=\"token punctuation\">(</span>root<span class=\"token punctuation\">.</span>right<span class=\"token punctuation\">)</span>\n  \n    <span class=\"token comment\">// 把左子树连接到右子树</span>\n    root<span class=\"token punctuation\">.</span>left <span class=\"token operator\">=</span> <span class=\"token keyword\">null</span>\n    root<span class=\"token punctuation\">.</span>right <span class=\"token operator\">=</span> left\n\n    <span class=\"token comment\">// 把右子树连到最末端</span>\n    <span class=\"token keyword\">let</span> p<span class=\"token operator\">:</span> TreeNode <span class=\"token operator\">=</span> root\n    <span class=\"token keyword\">while</span><span class=\"token punctuation\">(</span>p<span class=\"token punctuation\">.</span>right <span class=\"token operator\">!=</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n      p <span class=\"token operator\">=</span> p<span class=\"token punctuation\">.</span>right\n    <span class=\"token punctuation\">}</span>\n\n    p<span class=\"token punctuation\">.</span>right <span class=\"token operator\">=</span> right\n    \n    <span class=\"token keyword\">return</span> root\n  <span class=\"token punctuation\">}</span>\n\n  <span class=\"token function\">traverse</span><span class=\"token punctuation\">(</span>root<span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n</code></pre></div><h3><a class=\"header-anchor\" href=\"#翻转二叉树\"><span></span></a><a href=\"https://leetcode.cn/problems/invert-binary-tree/\" target=\"_blank\" rel=\"noopener noreferrer\">翻转二叉树</a></h3>\n<p>明确函数定义，左右子树反转即可。</p>\n<div class=\"language-typescript\" data-ext=\"ts\" data-title=\"ts\"><pre class=\"language-typescript\"><code><span class=\"token keyword\">function</span> <span class=\"token function\">invertTree</span><span class=\"token punctuation\">(</span>root<span class=\"token operator\">:</span> TreeNode <span class=\"token operator\">|</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">)</span><span class=\"token operator\">:</span> TreeNode <span class=\"token operator\">|</span> <span class=\"token keyword\">null</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>root <span class=\"token operator\">==</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">return</span> <span class=\"token keyword\">null</span>\n\n  <span class=\"token keyword\">const</span> left <span class=\"token operator\">=</span> <span class=\"token function\">invertTree</span><span class=\"token punctuation\">(</span>root<span class=\"token punctuation\">.</span>left<span class=\"token punctuation\">)</span>\n  <span class=\"token keyword\">const</span> right <span class=\"token operator\">=</span> <span class=\"token function\">invertTree</span><span class=\"token punctuation\">(</span>root<span class=\"token punctuation\">.</span>right<span class=\"token punctuation\">)</span>\n\n  <span class=\"token keyword\">return</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">TreeNode</span><span class=\"token punctuation\">(</span>root<span class=\"token punctuation\">.</span>val<span class=\"token punctuation\">,</span> right<span class=\"token punctuation\">,</span> left<span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n</code></pre></div><h3><a class=\"header-anchor\" href=\"#二叉树的最近公共祖先\"><span></span></a><a href=\"https://leetcode.cn/problems/lowest-common-ancestor-of-a-binary-tree/submissions/\" target=\"_blank\" rel=\"noopener noreferrer\">二叉树的最近公共祖先</a></h3>\n<div class=\"language-typescript\" data-ext=\"ts\" data-title=\"ts\"><pre class=\"language-typescript\"><code><span class=\"token keyword\">function</span> <span class=\"token function\">lowestCommonAncestor</span><span class=\"token punctuation\">(</span>root<span class=\"token operator\">:</span> TreeNode <span class=\"token operator\">|</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">,</span> p<span class=\"token operator\">:</span> TreeNode <span class=\"token operator\">|</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">,</span> q<span class=\"token operator\">:</span> TreeNode <span class=\"token operator\">|</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">)</span><span class=\"token operator\">:</span> TreeNode <span class=\"token operator\">|</span> <span class=\"token keyword\">null</span> <span class=\"token punctuation\">{</span>\n\t<span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>root <span class=\"token operator\">==</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">return</span> <span class=\"token keyword\">null</span>\n  <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>root <span class=\"token operator\">==</span> p <span class=\"token operator\">||</span> root <span class=\"token operator\">==</span> q<span class=\"token punctuation\">)</span> <span class=\"token keyword\">return</span> root\n\n  <span class=\"token keyword\">const</span> left <span class=\"token operator\">=</span> <span class=\"token function\">lowestCommonAncestor</span><span class=\"token punctuation\">(</span>root<span class=\"token punctuation\">.</span>left<span class=\"token punctuation\">,</span> p<span class=\"token punctuation\">,</span> q<span class=\"token punctuation\">)</span>\n  <span class=\"token keyword\">const</span> right <span class=\"token operator\">=</span> <span class=\"token function\">lowestCommonAncestor</span><span class=\"token punctuation\">(</span>root<span class=\"token punctuation\">.</span>right<span class=\"token punctuation\">,</span> p<span class=\"token punctuation\">,</span> q<span class=\"token punctuation\">)</span>\n  \n  <span class=\"token comment\">// 左右都不为 null</span>\n  <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>left <span class=\"token operator\">!=</span> <span class=\"token keyword\">null</span> <span class=\"token operator\">&amp;&amp;</span> right <span class=\"token operator\">!=</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">return</span> root\n  <span class=\"token punctuation\">}</span>\n  <span class=\"token comment\">// 左右都为 null</span>\n  <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>left <span class=\"token operator\">==</span> <span class=\"token keyword\">null</span> <span class=\"token operator\">&amp;&amp;</span> right <span class=\"token operator\">==</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">return</span> <span class=\"token keyword\">null</span>\n  <span class=\"token punctuation\">}</span>\n  <span class=\"token comment\">// 有一个不为 null</span>\n  <span class=\"token keyword\">return</span> left <span class=\"token operator\">==</span> <span class=\"token keyword\">null</span> <span class=\"token operator\">?</span> right <span class=\"token operator\">:</span> left\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n</code></pre></div><h3><a class=\"header-anchor\" href=\"#出现次数最多的子树元素和\"><span></span></a><a href=\"https://leetcode.cn/problems/most-frequent-subtree-sum/\" target=\"_blank\" rel=\"noopener noreferrer\">出现次数最多的子树元素和</a></h3>\n<p>通过后序遍历记录子树和出现的次数，再计算最多次数即可。</p>\n<div class=\"language-typescript\" data-ext=\"ts\" data-title=\"ts\"><pre class=\"language-typescript\"><code><span class=\"token keyword\">function</span> <span class=\"token function\">findFrequentTreeSum</span><span class=\"token punctuation\">(</span>root<span class=\"token operator\">:</span> TreeNode <span class=\"token operator\">|</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">)</span><span class=\"token operator\">:</span> <span class=\"token builtin\">number</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">const</span> map <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Map</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n\n  <span class=\"token keyword\">function</span> <span class=\"token function\">sum</span><span class=\"token punctuation\">(</span>root<span class=\"token operator\">:</span> TreeNode <span class=\"token operator\">|</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>root <span class=\"token operator\">==</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">return</span> <span class=\"token number\">0</span>\n\n    <span class=\"token keyword\">const</span> left <span class=\"token operator\">=</span> <span class=\"token function\">sum</span><span class=\"token punctuation\">(</span>root<span class=\"token punctuation\">.</span>left<span class=\"token punctuation\">)</span>\n    <span class=\"token keyword\">const</span> right <span class=\"token operator\">=</span> <span class=\"token function\">sum</span><span class=\"token punctuation\">(</span>root<span class=\"token punctuation\">.</span>right<span class=\"token punctuation\">)</span>\n    <span class=\"token keyword\">const</span> res <span class=\"token operator\">=</span> root<span class=\"token punctuation\">.</span>val <span class=\"token operator\">+</span> left <span class=\"token operator\">+</span> right\n\n    <span class=\"token keyword\">const</span> count <span class=\"token operator\">=</span> map<span class=\"token punctuation\">.</span><span class=\"token function\">get</span><span class=\"token punctuation\">(</span>res<span class=\"token punctuation\">)</span> <span class=\"token operator\">??</span> <span class=\"token number\">0</span>\n    map<span class=\"token punctuation\">.</span><span class=\"token function\">set</span><span class=\"token punctuation\">(</span>res<span class=\"token punctuation\">,</span> count <span class=\"token operator\">+</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span>\n\n    <span class=\"token keyword\">return</span> res\n  <span class=\"token punctuation\">}</span>\n\n  <span class=\"token function\">sum</span><span class=\"token punctuation\">(</span>root<span class=\"token punctuation\">)</span>\n\n  <span class=\"token keyword\">let</span> maxCount <span class=\"token operator\">=</span> <span class=\"token number\">0</span>\n  <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">const</span> val <span class=\"token keyword\">of</span> map<span class=\"token punctuation\">.</span><span class=\"token function\">values</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    maxCount <span class=\"token operator\">=</span> Math<span class=\"token punctuation\">.</span><span class=\"token function\">max</span><span class=\"token punctuation\">(</span>maxCount<span class=\"token punctuation\">,</span> val<span class=\"token punctuation\">)</span>\n  <span class=\"token punctuation\">}</span>\n\n  <span class=\"token keyword\">let</span> res<span class=\"token operator\">:</span> <span class=\"token builtin\">number</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span>\n  <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">const</span> key <span class=\"token keyword\">of</span> map<span class=\"token punctuation\">.</span><span class=\"token function\">keys</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>map<span class=\"token punctuation\">.</span><span class=\"token function\">get</span><span class=\"token punctuation\">(</span>key<span class=\"token punctuation\">)</span> <span class=\"token operator\">==</span> maxCount<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n      res<span class=\"token punctuation\">.</span><span class=\"token function\">push</span><span class=\"token punctuation\">(</span>key<span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">}</span>\n  <span class=\"token punctuation\">}</span>\n\n  <span class=\"token keyword\">return</span> res\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n</code></pre></div><h2>层序遍历</h2>\n<h3><a class=\"header-anchor\" href=\"#二叉树的层序遍历\"><span></span></a><a href=\"https://leetcode.cn/problems/binary-tree-level-order-traversal/\" target=\"_blank\" rel=\"noopener noreferrer\">二叉树的层序遍历</a></h3>\n<p>队列是核心数据结构。</p>\n<div class=\"language-typescript\" data-ext=\"ts\" data-title=\"ts\"><pre class=\"language-typescript\"><code><span class=\"token keyword\">function</span> <span class=\"token function\">levelOrder</span><span class=\"token punctuation\">(</span>root<span class=\"token operator\">:</span> TreeNode <span class=\"token operator\">|</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">)</span><span class=\"token operator\">:</span> <span class=\"token builtin\">number</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>root <span class=\"token operator\">==</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">return</span> <span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span>\n\n  <span class=\"token keyword\">const</span> queue<span class=\"token operator\">:</span> <span class=\"token punctuation\">(</span>TreeNode <span class=\"token operator\">|</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span>\n  queue<span class=\"token punctuation\">.</span><span class=\"token function\">push</span><span class=\"token punctuation\">(</span>root<span class=\"token punctuation\">)</span>\n  <span class=\"token keyword\">const</span> res<span class=\"token operator\">:</span> <span class=\"token builtin\">number</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span>\n\n  <span class=\"token keyword\">while</span><span class=\"token punctuation\">(</span>queue<span class=\"token punctuation\">.</span>length<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">const</span> len <span class=\"token operator\">=</span> queue<span class=\"token punctuation\">.</span>length\n    <span class=\"token keyword\">const</span> temp<span class=\"token operator\">:</span> <span class=\"token builtin\">number</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span>\n\n    <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">let</span> i <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> i <span class=\"token operator\">&lt;</span> len<span class=\"token punctuation\">;</span> i<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n      <span class=\"token keyword\">const</span> node <span class=\"token operator\">=</span> queue<span class=\"token punctuation\">.</span><span class=\"token function\">shift</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n      temp<span class=\"token punctuation\">.</span><span class=\"token function\">push</span><span class=\"token punctuation\">(</span>node<span class=\"token punctuation\">.</span>val<span class=\"token punctuation\">)</span>\n      <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>node<span class=\"token punctuation\">.</span>left<span class=\"token punctuation\">)</span> queue<span class=\"token punctuation\">.</span><span class=\"token function\">push</span><span class=\"token punctuation\">(</span>node<span class=\"token punctuation\">.</span>left<span class=\"token punctuation\">)</span>\n      <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>node<span class=\"token punctuation\">.</span>right<span class=\"token punctuation\">)</span> queue<span class=\"token punctuation\">.</span><span class=\"token function\">push</span><span class=\"token punctuation\">(</span>node<span class=\"token punctuation\">.</span>right<span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">}</span>\n\n    res<span class=\"token punctuation\">.</span><span class=\"token function\">push</span><span class=\"token punctuation\">(</span>temp<span class=\"token punctuation\">)</span>\n  <span class=\"token punctuation\">}</span>\n\n  <span class=\"token keyword\">return</span> res\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n</code></pre></div><h3><a class=\"header-anchor\" href=\"#二叉树的锯齿层序遍历\"><span></span></a><a href=\"https://leetcode.cn/problems/binary-tree-zigzag-level-order-traversal/\" target=\"_blank\" rel=\"noopener noreferrer\">二叉树的锯齿层序遍历</a></h3>\n<p>用一个遍历记录层级，奇数则用 <code>unshift</code>，偶数则 <code>push</code>。</p>\n<div class=\"language-typescript\" data-ext=\"ts\" data-title=\"ts\"><pre class=\"language-typescript\"><code><span class=\"token keyword\">function</span> <span class=\"token function\">zigzagLevelOrder</span><span class=\"token punctuation\">(</span>root<span class=\"token operator\">:</span> TreeNode <span class=\"token operator\">|</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">)</span><span class=\"token operator\">:</span> <span class=\"token builtin\">number</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>root <span class=\"token operator\">==</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">return</span> <span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span>\n\n  <span class=\"token keyword\">const</span> queue<span class=\"token operator\">:</span> TreeNode<span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span>\n  queue<span class=\"token punctuation\">.</span><span class=\"token function\">push</span><span class=\"token punctuation\">(</span>root<span class=\"token punctuation\">)</span>\n  <span class=\"token keyword\">let</span> level<span class=\"token operator\">:</span> <span class=\"token builtin\">number</span> <span class=\"token operator\">=</span> <span class=\"token number\">0</span>\n  <span class=\"token keyword\">const</span> res<span class=\"token operator\">:</span> <span class=\"token builtin\">number</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span>\n\n  <span class=\"token keyword\">while</span> <span class=\"token punctuation\">(</span>queue<span class=\"token punctuation\">.</span>length<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">const</span> len <span class=\"token operator\">=</span> queue<span class=\"token punctuation\">.</span>length<span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">const</span> temp<span class=\"token operator\">:</span> <span class=\"token builtin\">number</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span>\n    \n    <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">let</span> i <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> i <span class=\"token operator\">&lt;</span> len<span class=\"token punctuation\">;</span> i<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n      <span class=\"token keyword\">const</span> node <span class=\"token operator\">=</span> queue<span class=\"token punctuation\">.</span><span class=\"token function\">shift</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n      <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>level <span class=\"token operator\">%</span> <span class=\"token number\">2</span> <span class=\"token operator\">==</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        temp<span class=\"token punctuation\">.</span><span class=\"token function\">push</span><span class=\"token punctuation\">(</span>node<span class=\"token punctuation\">.</span>val<span class=\"token punctuation\">)</span>\n      <span class=\"token punctuation\">}</span> <span class=\"token keyword\">else</span> <span class=\"token punctuation\">{</span>\n        temp<span class=\"token punctuation\">.</span><span class=\"token function\">unshift</span><span class=\"token punctuation\">(</span>node<span class=\"token punctuation\">.</span>val<span class=\"token punctuation\">)</span>\n      <span class=\"token punctuation\">}</span>\n\n      <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>node<span class=\"token punctuation\">.</span>left<span class=\"token punctuation\">)</span> queue<span class=\"token punctuation\">.</span><span class=\"token function\">push</span><span class=\"token punctuation\">(</span>node<span class=\"token punctuation\">.</span>left<span class=\"token punctuation\">)</span>\n      <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>node<span class=\"token punctuation\">.</span>right<span class=\"token punctuation\">)</span> queue<span class=\"token punctuation\">.</span><span class=\"token function\">push</span><span class=\"token punctuation\">(</span>node<span class=\"token punctuation\">.</span>right<span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">}</span>\n\n    level<span class=\"token operator\">++</span>\n    res<span class=\"token punctuation\">.</span><span class=\"token function\">push</span><span class=\"token punctuation\">(</span>temp<span class=\"token punctuation\">)</span>\n  <span class=\"token punctuation\">}</span>\n\n  <span class=\"token keyword\">return</span> res\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n</code></pre></div><h3><a class=\"header-anchor\" href=\"#填充每个节点的下一个右侧节点指针\"><span></span></a><a href=\"https://leetcode.cn/problems/populating-next-right-pointers-in-each-node/\" target=\"_blank\" rel=\"noopener noreferrer\">填充每个节点的下一个右侧节点指针</a></h3>\n<p>层序遍历，记录前一个节点即可。</p>\n<div class=\"language-typescript\" data-ext=\"ts\" data-title=\"ts\"><pre class=\"language-typescript\"><code><span class=\"token keyword\">function</span> <span class=\"token function\">connect</span><span class=\"token punctuation\">(</span>root<span class=\"token operator\">:</span> Node <span class=\"token operator\">|</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">)</span><span class=\"token operator\">:</span> Node <span class=\"token operator\">|</span> <span class=\"token keyword\">null</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>root <span class=\"token operator\">==</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">return</span> <span class=\"token keyword\">null</span>\n\n  <span class=\"token keyword\">const</span> queue <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span>\n  queue<span class=\"token punctuation\">.</span><span class=\"token function\">push</span><span class=\"token punctuation\">(</span>root<span class=\"token punctuation\">)</span>\n\n  <span class=\"token keyword\">while</span><span class=\"token punctuation\">(</span>queue<span class=\"token punctuation\">.</span>length<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">const</span> len <span class=\"token operator\">=</span> queue<span class=\"token punctuation\">.</span>length\n    \n    <span class=\"token keyword\">let</span> pre <span class=\"token operator\">=</span> <span class=\"token keyword\">null</span>\n    <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">let</span> i <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> i <span class=\"token operator\">&lt;</span> len<span class=\"token punctuation\">;</span> i<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n      <span class=\"token comment\">// 记录第一个节点</span>\n      <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>i <span class=\"token operator\">==</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        pre <span class=\"token operator\">=</span> queue<span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span>\n      <span class=\"token punctuation\">}</span>\n\n      <span class=\"token keyword\">const</span> node <span class=\"token operator\">=</span> queue<span class=\"token punctuation\">.</span><span class=\"token function\">shift</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n      \n      <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>node<span class=\"token punctuation\">.</span>left<span class=\"token punctuation\">)</span> queue<span class=\"token punctuation\">.</span><span class=\"token function\">push</span><span class=\"token punctuation\">(</span>node<span class=\"token punctuation\">.</span>left<span class=\"token punctuation\">)</span>\n      <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>node<span class=\"token punctuation\">.</span>right<span class=\"token punctuation\">)</span> queue<span class=\"token punctuation\">.</span><span class=\"token function\">push</span><span class=\"token punctuation\">(</span>node<span class=\"token punctuation\">.</span>right<span class=\"token punctuation\">)</span>\n\n      <span class=\"token comment\">// 将前一节点的 next 设为当前节点</span>\n      <span class=\"token comment\">// 更新前一节点为当前节点</span>\n      <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>i <span class=\"token operator\">!=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        pre<span class=\"token punctuation\">.</span>next <span class=\"token operator\">=</span> node\n        pre <span class=\"token operator\">=</span> node\n      <span class=\"token punctuation\">}</span>\n    <span class=\"token punctuation\">}</span>\n  <span class=\"token punctuation\">}</span>\n\n  <span class=\"token keyword\">return</span> root\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n</code></pre></div><h3><a class=\"header-anchor\" href=\"#二叉树的右视图\"><span></span></a><a href=\"https://leetcode.cn/problems/binary-tree-right-side-view/\" target=\"_blank\" rel=\"noopener noreferrer\">二叉树的右视图</a></h3>\n<p>层序遍历，当 <code>i</code> 为最后一个则将值加入 <code>res</code>。</p>\n<div class=\"language-typescript\" data-ext=\"ts\" data-title=\"ts\"><pre class=\"language-typescript\"><code><span class=\"token keyword\">function</span> <span class=\"token function\">rightSideView</span><span class=\"token punctuation\">(</span>root<span class=\"token operator\">:</span> TreeNode <span class=\"token operator\">|</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">)</span><span class=\"token operator\">:</span> <span class=\"token builtin\">number</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>root <span class=\"token operator\">==</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">return</span> <span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span>\n  <span class=\"token keyword\">const</span> queue<span class=\"token operator\">:</span> TreeNode<span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span> res<span class=\"token operator\">:</span> <span class=\"token builtin\">number</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span>\n  queue<span class=\"token punctuation\">.</span><span class=\"token function\">push</span><span class=\"token punctuation\">(</span>root<span class=\"token punctuation\">)</span>\n\n  <span class=\"token keyword\">while</span> <span class=\"token punctuation\">(</span>queue<span class=\"token punctuation\">.</span>length<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">const</span> len <span class=\"token operator\">=</span> queue<span class=\"token punctuation\">.</span>length\n\n    <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">let</span> i <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> i <span class=\"token operator\">&lt;</span> len<span class=\"token punctuation\">;</span> i<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n      <span class=\"token keyword\">const</span> node <span class=\"token operator\">=</span> queue<span class=\"token punctuation\">.</span><span class=\"token function\">shift</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n      <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>i <span class=\"token operator\">==</span> len <span class=\"token operator\">-</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span> res<span class=\"token punctuation\">.</span><span class=\"token function\">push</span><span class=\"token punctuation\">(</span>node<span class=\"token punctuation\">.</span>val<span class=\"token punctuation\">)</span>\n      <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>node<span class=\"token punctuation\">.</span>left<span class=\"token punctuation\">)</span> queue<span class=\"token punctuation\">.</span><span class=\"token function\">push</span><span class=\"token punctuation\">(</span>node<span class=\"token punctuation\">.</span>left<span class=\"token punctuation\">)</span>\n      <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>node<span class=\"token punctuation\">.</span>right<span class=\"token punctuation\">)</span> queue<span class=\"token punctuation\">.</span><span class=\"token function\">push</span><span class=\"token punctuation\">(</span>node<span class=\"token punctuation\">.</span>right<span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">}</span>\n  <span class=\"token punctuation\">}</span>\n  \n  <span class=\"token keyword\">return</span> res\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n</code></pre></div><h3><a class=\"header-anchor\" href=\"#完全二叉树的节点个数\"><span></span></a><a href=\"https://leetcode.cn/problems/count-complete-tree-nodes/\" target=\"_blank\" rel=\"noopener noreferrer\">完全二叉树的节点个数</a></h3>\n<p>层序遍历中记录节点个数。</p>\n<div class=\"language-typescript\" data-ext=\"ts\" data-title=\"ts\"><pre class=\"language-typescript\"><code><span class=\"token keyword\">function</span> <span class=\"token function\">countNodes</span><span class=\"token punctuation\">(</span>root<span class=\"token operator\">:</span> TreeNode <span class=\"token operator\">|</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">)</span><span class=\"token operator\">:</span> <span class=\"token builtin\">number</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>root <span class=\"token operator\">==</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">return</span> <span class=\"token number\">0</span>\n  <span class=\"token keyword\">const</span> queue<span class=\"token operator\">:</span> TreeNode<span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span>\n  <span class=\"token keyword\">let</span> res <span class=\"token operator\">=</span> <span class=\"token number\">0</span>\n  queue<span class=\"token punctuation\">.</span><span class=\"token function\">push</span><span class=\"token punctuation\">(</span>root<span class=\"token punctuation\">)</span>\n\n  <span class=\"token keyword\">while</span> <span class=\"token punctuation\">(</span>queue<span class=\"token punctuation\">.</span>length<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">const</span> len <span class=\"token operator\">=</span> queue<span class=\"token punctuation\">.</span>length\n\n    <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">let</span> i <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> i <span class=\"token operator\">&lt;</span> len<span class=\"token punctuation\">;</span> i<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n      <span class=\"token keyword\">const</span> node <span class=\"token operator\">=</span> queue<span class=\"token punctuation\">.</span><span class=\"token function\">shift</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n      res<span class=\"token operator\">++</span>\n      <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>node<span class=\"token punctuation\">.</span>left<span class=\"token punctuation\">)</span> queue<span class=\"token punctuation\">.</span><span class=\"token function\">push</span><span class=\"token punctuation\">(</span>node<span class=\"token punctuation\">.</span>left<span class=\"token punctuation\">)</span>\n      <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>node<span class=\"token punctuation\">.</span>right<span class=\"token punctuation\">)</span> queue<span class=\"token punctuation\">.</span><span class=\"token function\">push</span><span class=\"token punctuation\">(</span>node<span class=\"token punctuation\">.</span>right<span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">}</span>\n  <span class=\"token punctuation\">}</span>\n  \n  <span class=\"token keyword\">return</span> res\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n</code></pre></div><h3><a class=\"header-anchor\" href=\"#找树左下角的值\"><span></span></a><a href=\"https://leetcode.cn/problems/find-bottom-left-tree-value/\" target=\"_blank\" rel=\"noopener noreferrer\">找树左下角的值</a></h3>\n<p>层序遍历记录第一个节点即可。</p>\n<div class=\"language-typescript\" data-ext=\"ts\" data-title=\"ts\"><pre class=\"language-typescript\"><code><span class=\"token keyword\">function</span> <span class=\"token function\">findBottomLeftValue</span><span class=\"token punctuation\">(</span>root<span class=\"token operator\">:</span> TreeNode <span class=\"token operator\">|</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">)</span><span class=\"token operator\">:</span> <span class=\"token builtin\">number</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">const</span> queue<span class=\"token operator\">:</span> TreeNode<span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span>\n  queue<span class=\"token punctuation\">.</span><span class=\"token function\">push</span><span class=\"token punctuation\">(</span>root<span class=\"token punctuation\">)</span>\n  <span class=\"token keyword\">let</span> res <span class=\"token operator\">=</span> <span class=\"token number\">0</span>\n\n  <span class=\"token keyword\">while</span><span class=\"token punctuation\">(</span>queue<span class=\"token punctuation\">.</span>length<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">const</span> len <span class=\"token operator\">=</span> queue<span class=\"token punctuation\">.</span>length\n\n    <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">let</span> i <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> i <span class=\"token operator\">&lt;</span> len<span class=\"token punctuation\">;</span> i<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n      <span class=\"token keyword\">const</span> node <span class=\"token operator\">=</span> queue<span class=\"token punctuation\">.</span><span class=\"token function\">shift</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n      <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>i <span class=\"token operator\">==</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span> res <span class=\"token operator\">=</span> node<span class=\"token punctuation\">.</span>val\n\n      <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>node<span class=\"token punctuation\">.</span>left<span class=\"token punctuation\">)</span> queue<span class=\"token punctuation\">.</span><span class=\"token function\">push</span><span class=\"token punctuation\">(</span>node<span class=\"token punctuation\">.</span>left<span class=\"token punctuation\">)</span>\n      <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>node<span class=\"token punctuation\">.</span>right<span class=\"token punctuation\">)</span> queue<span class=\"token punctuation\">.</span><span class=\"token function\">push</span><span class=\"token punctuation\">(</span>node<span class=\"token punctuation\">.</span>right<span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">}</span>\n  <span class=\"token punctuation\">}</span>\n\n  <span class=\"token keyword\">return</span> res\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n</code></pre></div><h2>构造</h2>\n<p>构造二叉树基本步骤：</p>\n<ol>\n<li>找到根节点</li>\n<li>递归遍历所有左右子树</li>\n<li>返回根节点</li>\n</ol>\n<h3><a class=\"header-anchor\" href=\"#从前序与中序遍历构造二叉树\"><span></span></a><a href=\"https://leetcode.cn/problems/construct-binary-tree-from-preorder-and-inorder-traversal/\" target=\"_blank\" rel=\"noopener noreferrer\">从前序与中序遍历构造二叉树</a></h3>\n<div class=\"language-typescript\" data-ext=\"ts\" data-title=\"ts\"><pre class=\"language-typescript\"><code><span class=\"token keyword\">function</span> <span class=\"token function\">buildTree</span><span class=\"token punctuation\">(</span>preorder<span class=\"token operator\">:</span> <span class=\"token builtin\">number</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span> inorder<span class=\"token operator\">:</span> <span class=\"token builtin\">number</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token operator\">:</span> TreeNode <span class=\"token operator\">|</span> <span class=\"token keyword\">null</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">const</span> <span class=\"token function-variable function\">build</span> <span class=\"token operator\">=</span> <span class=\"token keyword\">function</span><span class=\"token punctuation\">(</span>preorder<span class=\"token operator\">:</span> <span class=\"token builtin\">number</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span> preStart<span class=\"token operator\">:</span> <span class=\"token builtin\">number</span><span class=\"token punctuation\">,</span> preEnd<span class=\"token operator\">:</span> <span class=\"token builtin\">number</span><span class=\"token punctuation\">,</span>\n                         inorder<span class=\"token operator\">:</span> <span class=\"token builtin\">number</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span> inStart<span class=\"token operator\">:</span> <span class=\"token builtin\">number</span><span class=\"token punctuation\">,</span> inEnd<span class=\"token operator\">:</span> <span class=\"token builtin\">number</span><span class=\"token punctuation\">)</span><span class=\"token operator\">:</span> TreeNode <span class=\"token operator\">|</span> <span class=\"token keyword\">null</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>preStart <span class=\"token operator\">&gt;</span> preEnd<span class=\"token punctuation\">)</span> <span class=\"token keyword\">return</span> <span class=\"token keyword\">null</span>\n    \n    <span class=\"token comment\">// 根节点的 val</span>\n    <span class=\"token keyword\">const</span> val <span class=\"token operator\">=</span> preorder<span class=\"token punctuation\">[</span>preStart<span class=\"token punctuation\">]</span>\n    <span class=\"token comment\">// 根据中序遍历找到左右子树边界</span>\n    <span class=\"token keyword\">let</span> index<span class=\"token operator\">:</span> <span class=\"token builtin\">number</span>\n    <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">let</span> i <span class=\"token operator\">=</span> inStart<span class=\"token punctuation\">;</span> i <span class=\"token operator\">&lt;=</span> inEnd<span class=\"token punctuation\">;</span> i<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n      <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>inorder<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span> <span class=\"token operator\">==</span> val<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        index <span class=\"token operator\">=</span> i\n        <span class=\"token keyword\">break</span>\n      <span class=\"token punctuation\">}</span>\n    <span class=\"token punctuation\">}</span>\n    <span class=\"token comment\">// 左子树长度</span>\n    <span class=\"token keyword\">let</span> leftSize <span class=\"token operator\">=</span> index <span class=\"token operator\">-</span> inStart\n\n    <span class=\"token comment\">// 构造左右子树，注意起始下标</span>\n    <span class=\"token keyword\">const</span> left <span class=\"token operator\">=</span> <span class=\"token function\">build</span><span class=\"token punctuation\">(</span>preorder<span class=\"token punctuation\">,</span> preStart <span class=\"token operator\">+</span> <span class=\"token number\">1</span><span class=\"token punctuation\">,</span> preStart <span class=\"token operator\">+</span> leftSize<span class=\"token punctuation\">,</span> inorder<span class=\"token punctuation\">,</span> inStart<span class=\"token punctuation\">,</span> index <span class=\"token operator\">-</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span>\n    <span class=\"token keyword\">const</span> right <span class=\"token operator\">=</span> <span class=\"token function\">build</span><span class=\"token punctuation\">(</span>preorder<span class=\"token punctuation\">,</span> preStart <span class=\"token operator\">+</span> leftSize <span class=\"token operator\">+</span> <span class=\"token number\">1</span><span class=\"token punctuation\">,</span> preEnd<span class=\"token punctuation\">,</span> inorder<span class=\"token punctuation\">,</span> index <span class=\"token operator\">+</span> <span class=\"token number\">1</span><span class=\"token punctuation\">,</span> inEnd<span class=\"token punctuation\">)</span>\n\n    <span class=\"token keyword\">return</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">TreeNode</span><span class=\"token punctuation\">(</span>val<span class=\"token punctuation\">,</span> left<span class=\"token punctuation\">,</span> right<span class=\"token punctuation\">)</span>\n  <span class=\"token punctuation\">}</span>\n\n  <span class=\"token keyword\">return</span> <span class=\"token function\">build</span><span class=\"token punctuation\">(</span>preorder<span class=\"token punctuation\">,</span> <span class=\"token number\">0</span><span class=\"token punctuation\">,</span> preorder<span class=\"token punctuation\">.</span>length <span class=\"token operator\">-</span> <span class=\"token number\">1</span><span class=\"token punctuation\">,</span> inorder<span class=\"token punctuation\">,</span> <span class=\"token number\">0</span><span class=\"token punctuation\">,</span> inorder<span class=\"token punctuation\">.</span>length <span class=\"token operator\">-</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n</code></pre></div><h3><a class=\"header-anchor\" href=\"#从中序和后序遍历构造二叉树\"><span></span></a><a href=\"https://leetcode.cn/problems/construct-binary-tree-from-inorder-and-postorder-traversal/\" target=\"_blank\" rel=\"noopener noreferrer\">从中序和后序遍历构造二叉树</a></h3>\n<div class=\"language-typescript\" data-ext=\"ts\" data-title=\"ts\"><pre class=\"language-typescript\"><code><span class=\"token keyword\">function</span> <span class=\"token function\">buildTree</span><span class=\"token punctuation\">(</span>inorder<span class=\"token operator\">:</span> <span class=\"token builtin\">number</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span> postorder<span class=\"token operator\">:</span> <span class=\"token builtin\">number</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token operator\">:</span> TreeNode <span class=\"token operator\">|</span> <span class=\"token keyword\">null</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">const</span> <span class=\"token function-variable function\">build</span> <span class=\"token operator\">=</span> <span class=\"token keyword\">function</span> <span class=\"token punctuation\">(</span>inorder<span class=\"token operator\">:</span> <span class=\"token builtin\">number</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span> inStart<span class=\"token operator\">:</span> <span class=\"token builtin\">number</span><span class=\"token punctuation\">,</span> inEnd<span class=\"token operator\">:</span> <span class=\"token builtin\">number</span><span class=\"token punctuation\">,</span>\n    postorder<span class=\"token operator\">:</span> <span class=\"token builtin\">number</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span> postStart<span class=\"token operator\">:</span> <span class=\"token builtin\">number</span><span class=\"token punctuation\">,</span> postEnd<span class=\"token operator\">:</span> <span class=\"token builtin\">number</span><span class=\"token punctuation\">)</span><span class=\"token operator\">:</span> TreeNode <span class=\"token operator\">|</span> <span class=\"token keyword\">null</span> <span class=\"token punctuation\">{</span>\n      <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>inStart <span class=\"token operator\">&gt;</span> inEnd<span class=\"token punctuation\">)</span> <span class=\"token keyword\">return</span> <span class=\"token keyword\">null</span>\n\n      <span class=\"token comment\">// 根节点的 val</span>\n      <span class=\"token keyword\">const</span> val <span class=\"token operator\">=</span> postorder<span class=\"token punctuation\">[</span>postEnd<span class=\"token punctuation\">]</span>\n      <span class=\"token comment\">// 利用中序遍历找到左右子树边界</span>\n      <span class=\"token keyword\">let</span> index<span class=\"token operator\">:</span> <span class=\"token builtin\">number</span>\n      <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">let</span> i <span class=\"token operator\">=</span> inStart<span class=\"token punctuation\">;</span> i <span class=\"token operator\">&lt;=</span> inEnd<span class=\"token punctuation\">;</span> i<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>inorder<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span> <span class=\"token operator\">==</span> val<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n          index <span class=\"token operator\">=</span> i\n          <span class=\"token keyword\">break</span>\n        <span class=\"token punctuation\">}</span>\n      <span class=\"token punctuation\">}</span>\n      <span class=\"token comment\">// 左子树长度</span>\n      <span class=\"token keyword\">let</span> leftSize <span class=\"token operator\">=</span> index <span class=\"token operator\">-</span> inStart\n\n      <span class=\"token comment\">// 构造左右子树</span>\n      <span class=\"token keyword\">const</span> left <span class=\"token operator\">=</span> <span class=\"token function\">build</span><span class=\"token punctuation\">(</span>inorder<span class=\"token punctuation\">,</span> inStart<span class=\"token punctuation\">,</span> index <span class=\"token operator\">-</span> <span class=\"token number\">1</span><span class=\"token punctuation\">,</span> \n                         postorder<span class=\"token punctuation\">,</span> postStart<span class=\"token punctuation\">,</span> postStart <span class=\"token operator\">+</span> leftSize <span class=\"token operator\">-</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span>\n      <span class=\"token keyword\">const</span> right <span class=\"token operator\">=</span> <span class=\"token function\">build</span><span class=\"token punctuation\">(</span>inorder<span class=\"token punctuation\">,</span> index <span class=\"token operator\">+</span> <span class=\"token number\">1</span><span class=\"token punctuation\">,</span> inEnd<span class=\"token punctuation\">,</span>\n                          postorder<span class=\"token punctuation\">,</span> postStart <span class=\"token operator\">+</span> leftSize<span class=\"token punctuation\">,</span> postEnd <span class=\"token operator\">-</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span>\n\n      <span class=\"token keyword\">return</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">TreeNode</span><span class=\"token punctuation\">(</span>val<span class=\"token punctuation\">,</span> left<span class=\"token punctuation\">,</span> right<span class=\"token punctuation\">)</span>\n  <span class=\"token punctuation\">}</span>\n\n  <span class=\"token keyword\">return</span> <span class=\"token function\">build</span><span class=\"token punctuation\">(</span>inorder<span class=\"token punctuation\">,</span> <span class=\"token number\">0</span><span class=\"token punctuation\">,</span> inorder<span class=\"token punctuation\">.</span>length <span class=\"token operator\">-</span> <span class=\"token number\">1</span><span class=\"token punctuation\">,</span> postorder<span class=\"token punctuation\">,</span> <span class=\"token number\">0</span><span class=\"token punctuation\">,</span> postorder<span class=\"token punctuation\">.</span>length <span class=\"token operator\">-</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n</code></pre></div><h3><a class=\"header-anchor\" href=\"#二叉树的序列化与反序列化\"><span></span></a><a href=\"https://leetcode.cn/problems/serialize-and-deserialize-binary-tree/\" target=\"_blank\" rel=\"noopener noreferrer\">二叉树的序列化与反序列化</a></h3>\n<p>通常构造二叉树需要两个遍历结果，但是这里按照前序遍历序列化后，再按前序遍历反序列化也能构造出二叉树。在序列化时可以选择使用<strong>一次遍历</strong>，也可以使用<strong>分解问题</strong>。</p>\n<div class=\"language-typescript\" data-ext=\"ts\" data-title=\"ts\"><pre class=\"language-typescript\"><code><span class=\"token keyword\">function</span> <span class=\"token function\">serialize</span><span class=\"token punctuation\">(</span>root<span class=\"token operator\">:</span> TreeNode <span class=\"token operator\">|</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">)</span><span class=\"token operator\">:</span> <span class=\"token builtin\">string</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">const</span> res<span class=\"token operator\">:</span> <span class=\"token builtin\">string</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span>\n  \n  <span class=\"token keyword\">const</span> <span class=\"token function-variable function\">traverse</span> <span class=\"token operator\">=</span> <span class=\"token keyword\">function</span><span class=\"token punctuation\">(</span>root<span class=\"token operator\">:</span> TreeNode<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>root <span class=\"token operator\">==</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n      res<span class=\"token punctuation\">.</span><span class=\"token function\">push</span><span class=\"token punctuation\">(</span><span class=\"token string\">'#'</span><span class=\"token punctuation\">)</span>\n      <span class=\"token keyword\">return</span>\n    <span class=\"token punctuation\">}</span>\n\n    res<span class=\"token punctuation\">.</span><span class=\"token function\">push</span><span class=\"token punctuation\">(</span>root<span class=\"token punctuation\">.</span>val <span class=\"token operator\">+</span> <span class=\"token string\">''</span><span class=\"token punctuation\">)</span>\n    <span class=\"token function\">traverse</span><span class=\"token punctuation\">(</span>root<span class=\"token punctuation\">.</span>left<span class=\"token punctuation\">)</span>\n    <span class=\"token function\">traverse</span><span class=\"token punctuation\">(</span>root<span class=\"token punctuation\">.</span>right<span class=\"token punctuation\">)</span>\n  <span class=\"token punctuation\">}</span>\n\n  <span class=\"token function\">traverse</span><span class=\"token punctuation\">(</span>root<span class=\"token punctuation\">)</span> \n  <span class=\"token keyword\">return</span> res<span class=\"token punctuation\">.</span><span class=\"token function\">join</span><span class=\"token punctuation\">(</span><span class=\"token string\">','</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">function</span> <span class=\"token function\">deserialize</span><span class=\"token punctuation\">(</span>data<span class=\"token operator\">:</span> <span class=\"token builtin\">string</span><span class=\"token punctuation\">)</span><span class=\"token operator\">:</span> TreeNode <span class=\"token operator\">|</span> <span class=\"token keyword\">null</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token comment\">// 反转之后可以使用 pop，减少复杂度</span>\n  <span class=\"token keyword\">const</span> nodes <span class=\"token operator\">=</span> data<span class=\"token punctuation\">.</span><span class=\"token function\">split</span><span class=\"token punctuation\">(</span><span class=\"token string\">','</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">reverse</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n  \n  <span class=\"token keyword\">const</span> <span class=\"token function-variable function\">build</span> <span class=\"token operator\">=</span> <span class=\"token keyword\">function</span><span class=\"token punctuation\">(</span>nodes<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token operator\">!</span>nodes<span class=\"token punctuation\">.</span>length<span class=\"token punctuation\">)</span> <span class=\"token keyword\">return</span> <span class=\"token keyword\">null</span>\n\n    <span class=\"token keyword\">const</span> val <span class=\"token operator\">=</span> nodes<span class=\"token punctuation\">.</span><span class=\"token function\">pop</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>val <span class=\"token operator\">==</span> <span class=\"token string\">'#'</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">return</span> <span class=\"token keyword\">null</span>\n    <span class=\"token keyword\">const</span> left <span class=\"token operator\">=</span> <span class=\"token function\">build</span><span class=\"token punctuation\">(</span>nodes<span class=\"token punctuation\">)</span>\n    <span class=\"token keyword\">const</span> right <span class=\"token operator\">=</span> <span class=\"token function\">build</span><span class=\"token punctuation\">(</span>nodes<span class=\"token punctuation\">)</span>\n\n    <span class=\"token keyword\">return</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">TreeNode</span><span class=\"token punctuation\">(</span>val<span class=\"token punctuation\">,</span> left<span class=\"token punctuation\">,</span> right<span class=\"token punctuation\">)</span>\n  <span class=\"token punctuation\">}</span>\n\n  <span class=\"token keyword\">return</span> <span class=\"token function\">build</span><span class=\"token punctuation\">(</span>nodes<span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n</code></pre></div>",
      "date_published": "2022-06-23T00:00:00.000Z",
      "date_modified": "2023-03-25T10:47:40.000Z",
      "authors": [],
      "tags": [
        "LeetCode"
      ]
    }
  ]
}