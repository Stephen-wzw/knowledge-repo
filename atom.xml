<?xml version="1.0" encoding="utf-8"?><?xml-stylesheet type="text/xsl" href="https://dribble-njr.github.io/blog/blog/atom.xsl"?>
<feed xmlns="http://www.w3.org/2005/Atom" xml:lang="zh-CN">
  <id>https://dribble-njr.github.io/blog/blog/</id>
  <title/>
  <subtitle>Personal frontend knowledge base</subtitle>
  <icon>https://dribble-njr.github.io/blog/blog/favicon.ico</icon>
  <updated>2024-08-21T06:18:05.976Z</updated>
  <generator>@vuepress/plugin-feed</generator>
  <link rel="self" href="https://dribble-njr.github.io/blog/blog/atom.xml"/>
  <link rel="alternate" href="https://dribble-njr.github.io/blog/blog/"/>
  <category term="practice"/>
  <category term="Pixi"/>
  <category term="READING"/>
  <category term="JavaScript"/>
  <category term="Project"/>
  <category term="database"/>
  <category term="计算机网络"/>
  <category term="browser"/>
  <category term="HTML"/>
  <category term="chakra"/>
  <category term="next"/>
  <category term="CSS"/>
  <category term="react"/>
  <category term="algorithm"/>
  <category term="reading"/>
  <category term="linux"/>
  <category term="工程化"/>
  <contributor>
    <name>patterns</name>
  </contributor>
  <entry>
    <title type="text">monaco-editor/react</title>
    <id>https://dribble-njr.github.io/blog/blog/frontend/practice/018-monaco-editor-react.html</id>
    <link href="https://dribble-njr.github.io/blog/blog/frontend/practice/018-monaco-editor-react.html"/>
    <updated>2024-08-14T03:05:10.000Z</updated>
    <summary type="html"><![CDATA[<p><a href="https://github.com/microsoft/monaco-editor" target="_blank" rel="noopener noreferrer">Monaco Editor</a> 是由微软开发的开源代码编辑器，使用于 VS Code。然而他本身是用 JavaScript/TypeScript 编写的一个独立库，提供了丰富的 API 来实现代码编辑器的功能。因此无法直接在 React 中使用。</p>
<p><a href="https://github.com/suren-atoyan/monaco-react" target="_blank" rel="noopener noreferrer">@monaco-editor/react</a> 这个库是对 monaco-editor 的 React 封装，使得你在 React 项目中更方便地使用 Monaco Editor。</p>]]></summary>
    <content type="html"><![CDATA[<p><a href="https://github.com/microsoft/monaco-editor" target="_blank" rel="noopener noreferrer">Monaco Editor</a> 是由微软开发的开源代码编辑器，使用于 VS Code。然而他本身是用 JavaScript/TypeScript 编写的一个独立库，提供了丰富的 API 来实现代码编辑器的功能。因此无法直接在 React 中使用。</p>
<p><a href="https://github.com/suren-atoyan/monaco-react" target="_blank" rel="noopener noreferrer">@monaco-editor/react</a> 这个库是对 monaco-editor 的 React 封装，使得你在 React 项目中更方便地使用 Monaco Editor。</p>
<h2>工作原理</h2>
<p>Monaco Editor (<code>monaco-editor</code>)：提供了编辑器的核心功能，包括代码高亮、自动补全、语法检查等。它是独立于框架的，可以在任何 JavaScript 环境中使用。它提供了一个全局的 monaco 对象，通过这个对象，你可以调用各种 API 来配置和操作编辑器。</p>
<p>React 封装 (<code>@monaco-editor/react</code>)： 为了更好地在 React 环境中使用 Monaco Editor，<code>@monaco-editor/react</code> 通过封装组件的方式，将 <code>monaco-editor</code> 的 API 暴露给 React 用户。这个库管理了编辑器的生命周期和状态，使得 Monaco Editor 能够很好地与 React 的组件生命周期和状态管理系统配合使用。</p>
<p>具体来说，<code>@monaco-editor/react</code> 主要做了以下几件事情：</p>
<ul>
<li>组件化封装：提供了一个 <code>Editor</code> 组件，供 React 开发者使用。你可以通过 JSX 的方式直接在 React 组件中嵌入 Monaco Editor。</li>
<li>API 接口简化：提供了一些简单的 props 来配置编辑器，而不需要直接调用 <code>monaco</code> 对象。</li>
<li>生命周期管理：处理了编辑器的创建、更新和销毁，使得它与 React 的生命周期方法（如 <code>componentDidMount</code>、<code>componentWillUnmount</code>）配合良好。</li>
</ul>
<h2>示例</h2>
<p>在 React 中使用 <code>@monaco-editor/react</code> 时，你不需要手动管理 monaco 对象的创建和销毁，只需要通过 <code>Editor</code> 组件来设置语言、主题、默认代码等配置项。比如：</p>
<div class="language-tsx" data-ext="tsx" data-title="tsx"><pre class="language-tsx"><code><span class="token keyword">import</span> React <span class="token keyword">from</span> <span class="token string">'react'</span>
<span class="token keyword">import</span> Editor <span class="token keyword">from</span> <span class="token string">'@monaco-editor/react'</span>

<span class="token keyword">function</span> <span class="token function">MyEditor</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token keyword">return</span> <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span><span class="token class-name">Editor</span></span> <span class="token attr-name">height</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>90vh<span class="token punctuation">"</span></span> <span class="token attr-name">language</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>javascript<span class="token punctuation">"</span></span> <span class="token attr-name">theme</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>vs-dark<span class="token punctuation">"</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>// Start coding here<span class="token punctuation">"</span></span> <span class="token punctuation">/&gt;</span></span>
<span class="token punctuation">}</span>

<span class="token keyword">export</span> <span class="token keyword">default</span> MyEditor
</code></pre></div><p>如果你需要进行更复杂的定制化操作，比如加载自定义语言或主题，<code>@monaco-editor/react</code> 也提供了 <code>beforeMount</code> 和 <code>onMount</code> 回调函数，让你可以直接访问 <code>monaco</code> 对象来进行高级配置：</p>
<div class="language-tsx" data-ext="tsx" data-title="tsx"><pre class="language-tsx"><code><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span><span class="token class-name">Editor</span></span>
  <span class="token attr-name">height</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>90vh<span class="token punctuation">"</span></span>
  <span class="token attr-name">language</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>javascript<span class="token punctuation">"</span></span>
  <span class="token attr-name">theme</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>vs-dark<span class="token punctuation">"</span></span>
  <span class="token attr-name">beforeMount</span><span class="token script language-javascript"><span class="token script-punctuation punctuation">=</span><span class="token punctuation">{</span><span class="token punctuation">(</span>monaco<span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
    <span class="token comment">// 这里可以对 monaco 进行配置，例如定义自定义的语言或主题</span>
  <span class="token punctuation">}</span><span class="token punctuation">}</span></span>
  <span class="token attr-name">onMount</span><span class="token script language-javascript"><span class="token script-punctuation punctuation">=</span><span class="token punctuation">{</span><span class="token punctuation">(</span>editor<span class="token punctuation">,</span> monaco<span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
    <span class="token comment">// 这里可以操作 editor 和 monaco 对象，例如注册快捷键等</span>
  <span class="token punctuation">}</span><span class="token punctuation">}</span></span>
<span class="token punctuation">/&gt;</span></span>
</code></pre></div><h2>loader-config</h2>
<p><code>@monaco-editor/react</code> 的 loader 会默认从 cdn 中加载，这会影响中国用户的访问速度，因此需要修改 loader 的默认配置。</p>
<h3>使用 monaco-editor 包</h3>
<p>如果项目使用 <code>webpack</code> 进行打包，可以通过 <a href="https://www.npmjs.com/package/monaco-editor-webpack-plugin" target="_blank" rel="noopener noreferrer">monaco-editor-webpack-plugin</a> 来进行配置。该插件自动处理编辑器了相关的文件。</p>
<div class="language-javascript" data-ext="js" data-title="js"><pre class="language-javascript"><code><span class="token keyword">import</span> <span class="token operator">*</span> <span class="token keyword">as</span> monaco <span class="token keyword">from</span> <span class="token string">'monaco-editor'</span>
<span class="token keyword">import</span> <span class="token punctuation">{</span> loader <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">'@monaco-editor/react'</span>

loader<span class="token punctuation">.</span><span class="token function">config</span><span class="token punctuation">(</span><span class="token punctuation">{</span> monaco <span class="token punctuation">}</span><span class="token punctuation">)</span>
</code></pre></div><p>对于其他打包工具，官方提供了 Vite 示例：</p>
<div class="language-javascript" data-ext="js" data-title="js"><pre class="language-javascript"><code><span class="token keyword">import</span> <span class="token punctuation">{</span> loader <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">'@monaco-editor/react'</span>

<span class="token keyword">import</span> <span class="token operator">*</span> <span class="token keyword">as</span> monaco <span class="token keyword">from</span> <span class="token string">'monaco-editor'</span>
<span class="token keyword">import</span> editorWorker <span class="token keyword">from</span> <span class="token string">'monaco-editor/esm/vs/editor/editor.worker?worker'</span>
<span class="token keyword">import</span> jsonWorker <span class="token keyword">from</span> <span class="token string">'monaco-editor/esm/vs/language/json/json.worker?worker'</span>
<span class="token keyword">import</span> cssWorker <span class="token keyword">from</span> <span class="token string">'monaco-editor/esm/vs/language/css/css.worker?worker'</span>
<span class="token keyword">import</span> htmlWorker <span class="token keyword">from</span> <span class="token string">'monaco-editor/esm/vs/language/html/html.worker?worker'</span>
<span class="token keyword">import</span> tsWorker <span class="token keyword">from</span> <span class="token string">'monaco-editor/esm/vs/language/typescript/ts.worker?worker'</span>

self<span class="token punctuation">.</span>MonacoEnvironment <span class="token operator">=</span> <span class="token punctuation">{</span>
  <span class="token function">getWorker</span><span class="token punctuation">(</span><span class="token parameter">_<span class="token punctuation">,</span> label</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span>label <span class="token operator">===</span> <span class="token string">'json'</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
      <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">jsonWorker</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
    <span class="token punctuation">}</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span>label <span class="token operator">===</span> <span class="token string">'css'</span> <span class="token operator">||</span> label <span class="token operator">===</span> <span class="token string">'scss'</span> <span class="token operator">||</span> label <span class="token operator">===</span> <span class="token string">'less'</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
      <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">cssWorker</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
    <span class="token punctuation">}</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span>label <span class="token operator">===</span> <span class="token string">'html'</span> <span class="token operator">||</span> label <span class="token operator">===</span> <span class="token string">'handlebars'</span> <span class="token operator">||</span> label <span class="token operator">===</span> <span class="token string">'razor'</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
      <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">htmlWorker</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
    <span class="token punctuation">}</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span>label <span class="token operator">===</span> <span class="token string">'typescript'</span> <span class="token operator">||</span> label <span class="token operator">===</span> <span class="token string">'javascript'</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
      <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">tsWorker</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
    <span class="token punctuation">}</span>
    <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">editorWorker</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
  <span class="token punctuation">}</span>
<span class="token punctuation">}</span>

loader<span class="token punctuation">.</span><span class="token function">config</span><span class="token punctuation">(</span><span class="token punctuation">{</span> monaco <span class="token punctuation">}</span><span class="token punctuation">)</span>

loader<span class="token punctuation">.</span><span class="token function">init</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">then</span><span class="token punctuation">(</span><span class="token comment">/* ... */</span><span class="token punctuation">)</span>
</code></pre></div><p>我使用了 Rspack 来打包，官方说明对 <code>monaco-editor-webpack-plugin</code> 插件进行了兼容，但是不知道是由于我 Rspack 版本问题，导致报错，因此实验了一种更加稳定的方式如下。</p>
<p>Rspack 配置与 Vite 一致，详细见 <a href="https://github.com/rspack-contrib/rspack-examples/blob/main/rspack/monaco-editor-ts-react/src/components/Editor.tsx" target="_blank" rel="noopener noreferrer">Rspack demo monaco-editor-react</a>。</p>
<div class="hint-container warning">
<p class="hint-container-title">注意</p>
<p>需要注意的是 <code>publicPath</code> 需要设置为 <code>'auto'</code>，否则 web worker 内引用的文件会添加重复路径。</p>
</div>
<h3><s>本地路径</s></h3>
<div class="hint-container tip">
<p class="hint-container-title">提示</p>
<p>该方式会在 public 中引入大量文件，不太优雅。</p>
</div>
<p><code>monaco-editor</code> 中提供了一些打包后的文件，路径是 <code>monaco-editor/min/vs</code>，因此可以通过下载 npm 包并将文件移动至 <code>public</code> 文件夹，并自定义路径。</p>
<div class="language-bash" data-ext="sh" data-title="sh"><pre class="language-bash"><code><span class="token function">mv</span> node_modules/monaco-editor/min/vs public
</code></pre></div><div class="language-javascript" data-ext="js" data-title="js"><pre class="language-javascript"><code><span class="token keyword">import</span> <span class="token punctuation">{</span> loader <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">'@monaco-editor/react'</span>

<span class="token comment">// you can change the source of the monaco files</span>
loader<span class="token punctuation">.</span><span class="token function">config</span><span class="token punctuation">(</span><span class="token punctuation">{</span> <span class="token literal-property property">paths</span><span class="token operator">:</span> <span class="token punctuation">{</span> <span class="token literal-property property">vs</span><span class="token operator">:</span> <span class="token string">'./vs'</span> <span class="token punctuation">}</span> <span class="token punctuation">}</span><span class="token punctuation">)</span>

<span class="token comment">// you can configure the locales</span>
loader<span class="token punctuation">.</span><span class="token function">config</span><span class="token punctuation">(</span><span class="token punctuation">{</span> <span class="token string-property property">'vs/nls'</span><span class="token operator">:</span> <span class="token punctuation">{</span> <span class="token literal-property property">availableLanguages</span><span class="token operator">:</span> <span class="token punctuation">{</span> <span class="token string-property property">'*'</span><span class="token operator">:</span> <span class="token string">'de'</span> <span class="token punctuation">}</span> <span class="token punctuation">}</span> <span class="token punctuation">}</span><span class="token punctuation">)</span>

<span class="token comment">// or</span>
loader<span class="token punctuation">.</span><span class="token function">config</span><span class="token punctuation">(</span><span class="token punctuation">{</span>
  <span class="token literal-property property">paths</span><span class="token operator">:</span> <span class="token punctuation">{</span>
    <span class="token literal-property property">vs</span><span class="token operator">:</span> <span class="token string">'./vs'</span>
  <span class="token punctuation">}</span><span class="token punctuation">,</span>
  <span class="token string-property property">'vs/nls'</span><span class="token operator">:</span> <span class="token punctuation">{</span>
    <span class="token literal-property property">availableLanguages</span><span class="token operator">:</span> <span class="token punctuation">{</span>
      <span class="token string-property property">'*'</span><span class="token operator">:</span> <span class="token string">'de'</span>
    <span class="token punctuation">}</span>
  <span class="token punctuation">}</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span>
</code></pre></div>]]></content>
    <category term="practice"/>
    <published>2024-08-09T00:00:00.000Z</published>
  </entry>
  <entry>
    <title type="text">场景图像</title>
    <id>https://dribble-njr.github.io/blog/blog/frontend/framework/pixi/04-scene-graph.html</id>
    <link href="https://dribble-njr.github.io/blog/blog/frontend/framework/pixi/04-scene-graph.html"/>
    <updated>2024-08-08T08:34:48.000Z</updated>
    <summary type="html"><![CDATA[<p>每一帧，PixiJS 都会更新并渲染场景图。让我们来谈谈场景图中有哪些内容，以及它如何影响项目开发。</p>
<h2>场景图是一棵树</h2>
<p>场景图的根节点是由应用程序维护的容器，用 <code>app.stage</code> 引用。将 sprite 或其他可渲染对象作为子对象添加到 stage 时，它就会被添加到场景图中，并进行渲染和交互。</p>
<p>PixiJS 容器也可以有子对象，因此当你构建更复杂的场景时，最终会形成一棵父子关系树，stage 是整个场景树的根节点。Chrome 浏览器的 <a href="https://chromewebstore.google.com/detail/pixijs-devtools/aamddddknhcagpehecnhphigffljadon" target="_blank" rel="noopener noreferrer">Pixi.js devtools</a> 插件是一个探索项目的有用工具，它允许你在项目运行时实时查看和操作场景图！）。</p>]]></summary>
    <content type="html"><![CDATA[<p>每一帧，PixiJS 都会更新并渲染场景图。让我们来谈谈场景图中有哪些内容，以及它如何影响项目开发。</p>
<h2>场景图是一棵树</h2>
<p>场景图的根节点是由应用程序维护的容器，用 <code>app.stage</code> 引用。将 sprite 或其他可渲染对象作为子对象添加到 stage 时，它就会被添加到场景图中，并进行渲染和交互。</p>
<p>PixiJS 容器也可以有子对象，因此当你构建更复杂的场景时，最终会形成一棵父子关系树，stage 是整个场景树的根节点。Chrome 浏览器的 <a href="https://chromewebstore.google.com/detail/pixijs-devtools/aamddddknhcagpehecnhphigffljadon" target="_blank" rel="noopener noreferrer">Pixi.js devtools</a> 插件是一个探索项目的有用工具，它允许你在项目运行时实时查看和操作场景图！）。</p>
<h2>Parents and Children</h2>
<p>父节点移动时，其子节点也会移动。旋转父节点时，其子节点也会旋转。隐藏父对象，子对象也会被隐藏。如果一个游戏对象由多个精灵组成，可以将它们收集到一个容器中，将它们视为世界中的一个对象，作为一个整体移动和旋转。</p>
<p>在每一帧中，PixiJS 都会运行场景图，从根开始向下穿过所有子对象，直到叶子，以计算每个对象的最终位置、旋转、可见性、透明度等。</p>
<p>如果父对象的 alpha 设置为 0.5（使其透明 50% ），那么它的所有子对象也将从 50% 开始透明。如果将一个子对象的 alpha 设置为 0.5，它就不会是 50% 透明，而是 0.5 x 0.5 = 0.25 alpha，即 75% 透明。同样，对象的位置是相对于父对象而言的，因此如果父对象的 x 位置设置为 50 像素，而子对象的 x 位置设置为 100 像素，那么它将在屏幕偏移 150 像素处绘制，即 50 + 100。</p>
<p>下面是一个示例。我们将创建三个精灵，每个都是上一个精灵的子精灵，并对它们的位置、旋转、缩放和 alpha 进行动画处理。尽管每个精灵的属性都设置为相同的值，但父子链会放大每个变化：</p>
<div class="language-javascript" data-ext="js" data-title="js"><pre class="language-javascript"><code><span class="token comment">// Create the application helper and add its render target to the page</span>
<span class="token keyword">const</span> app <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Application</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token keyword">await</span> app<span class="token punctuation">.</span><span class="token function">init</span><span class="token punctuation">(</span><span class="token punctuation">{</span> <span class="token literal-property property">width</span><span class="token operator">:</span> <span class="token number">640</span><span class="token punctuation">,</span> <span class="token literal-property property">height</span><span class="token operator">:</span> <span class="token number">360</span> <span class="token punctuation">}</span><span class="token punctuation">)</span>
document<span class="token punctuation">.</span>body<span class="token punctuation">.</span><span class="token function">appendChild</span><span class="token punctuation">(</span>app<span class="token punctuation">.</span>canvas<span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token comment">// Add a container to center our sprite stack on the page</span>
<span class="token keyword">const</span> container <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Container</span><span class="token punctuation">(</span><span class="token punctuation">{</span>
  <span class="token literal-property property">x</span><span class="token operator">:</span>app<span class="token punctuation">.</span>screen<span class="token punctuation">.</span>width <span class="token operator">/</span> <span class="token number">2</span><span class="token punctuation">,</span>
  <span class="token literal-property property">y</span><span class="token operator">:</span>app<span class="token punctuation">.</span>screen<span class="token punctuation">.</span>height <span class="token operator">/</span> <span class="token number">2</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

app<span class="token punctuation">.</span>stage<span class="token punctuation">.</span><span class="token function">addChild</span><span class="token punctuation">(</span>container<span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token comment">// load the texture</span>
<span class="token keyword">await</span> Assets<span class="token punctuation">.</span><span class="token function">load</span><span class="token punctuation">(</span><span class="token string">'assets/images/sample.png'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token comment">// Create the 3 sprites, each a child of the last</span>
<span class="token keyword">const</span> sprites <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
<span class="token keyword">let</span> parent <span class="token operator">=</span> container<span class="token punctuation">;</span>
<span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">let</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> <span class="token number">3</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token keyword">let</span> wrapper <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Container</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token keyword">let</span> sprite <span class="token operator">=</span> Sprite<span class="token punctuation">.</span><span class="token function">from</span><span class="token punctuation">(</span><span class="token string">'assets/images/sample.png'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  sprite<span class="token punctuation">.</span>anchor<span class="token punctuation">.</span><span class="token function">set</span><span class="token punctuation">(</span><span class="token number">0.5</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  wrapper<span class="token punctuation">.</span><span class="token function">addChild</span><span class="token punctuation">(</span>sprite<span class="token punctuation">)</span><span class="token punctuation">;</span>
  parent<span class="token punctuation">.</span><span class="token function">addChild</span><span class="token punctuation">(</span>wrapper<span class="token punctuation">)</span><span class="token punctuation">;</span>
  sprites<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span>wrapper<span class="token punctuation">)</span><span class="token punctuation">;</span>
  parent <span class="token operator">=</span> wrapper<span class="token punctuation">;</span>
<span class="token punctuation">}</span>

<span class="token comment">// Set all sprite's properties to the same value, animated over time</span>
<span class="token keyword">let</span> elapsed <span class="token operator">=</span> <span class="token number">0.0</span><span class="token punctuation">;</span>
app<span class="token punctuation">.</span>ticker<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token parameter">delta</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
  elapsed <span class="token operator">+=</span> delta<span class="token punctuation">.</span>deltaTime <span class="token operator">/</span> <span class="token number">60</span><span class="token punctuation">;</span>
  <span class="token keyword">const</span> amount <span class="token operator">=</span> Math<span class="token punctuation">.</span><span class="token function">sin</span><span class="token punctuation">(</span>elapsed<span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token keyword">const</span> scale <span class="token operator">=</span> <span class="token number">1.0</span> <span class="token operator">+</span> <span class="token number">0.25</span> <span class="token operator">*</span> amount<span class="token punctuation">;</span>
  <span class="token keyword">const</span> alpha <span class="token operator">=</span> <span class="token number">0.75</span> <span class="token operator">+</span> <span class="token number">0.25</span> <span class="token operator">*</span> amount<span class="token punctuation">;</span>
  <span class="token keyword">const</span> angle <span class="token operator">=</span> <span class="token number">40</span> <span class="token operator">*</span> amount<span class="token punctuation">;</span>
  <span class="token keyword">const</span> x <span class="token operator">=</span> <span class="token number">75</span> <span class="token operator">*</span> amount<span class="token punctuation">;</span>
  <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">let</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> sprites<span class="token punctuation">.</span>length<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">const</span> sprite <span class="token operator">=</span> sprites<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">;</span>
    sprite<span class="token punctuation">.</span>scale<span class="token punctuation">.</span><span class="token function">set</span><span class="token punctuation">(</span>scale<span class="token punctuation">)</span><span class="token punctuation">;</span>
    sprite<span class="token punctuation">.</span>alpha <span class="token operator">=</span> alpha<span class="token punctuation">;</span>
    sprite<span class="token punctuation">.</span>angle <span class="token operator">=</span> angle<span class="token punctuation">;</span>
    sprite<span class="token punctuation">.</span>x <span class="token operator">=</span> x<span class="token punctuation">;</span>
  <span class="token punctuation">}</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre></div><p>场景图中任何给定节点的累计平移、旋转、缩放和倾斜值都存储在对象的 <code>worldTransform</code> 属性中。 同样，累积的 alpha 值也存储在 <code>worldAlpha</code> 属性中。</p>
<figure><img src="https://raw.githubusercontent.com/dribble-njr/typora-njr/master/img/Aug-08-2024 11-58-35.gif" alt="sample" tabindex="0" loading="lazy"><figcaption>sample</figcaption></figure>
<h2>渲染顺序</h2>
<p>因此，我们有一个树需要渲染，那么渲染顺序是什么？</p>
<p>PixiJS 会从树根开始向下渲染。在每一级，先渲染当前对象，然后按插入顺序渲染每个子对象。请看下面的示例：两个父对象 A 和 D，以及 A 下的两个子对象 B 和 C：</p>
<div class="language-javascript" data-ext="js" data-title="js"><pre class="language-javascript"><code><span class="token comment">// Create the application helper and add its render target to the page</span>
<span class="token keyword">const</span> app <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Application</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
<span class="token keyword">await</span> app<span class="token punctuation">.</span><span class="token function">init</span><span class="token punctuation">(</span><span class="token punctuation">{</span> <span class="token literal-property property">width</span><span class="token operator">:</span> <span class="token number">640</span><span class="token punctuation">,</span> <span class="token literal-property property">height</span><span class="token operator">:</span> <span class="token number">360</span> <span class="token punctuation">}</span><span class="token punctuation">)</span>
document<span class="token punctuation">.</span>body<span class="token punctuation">.</span><span class="token function">appendChild</span><span class="token punctuation">(</span>app<span class="token punctuation">.</span>canvas<span class="token punctuation">)</span>

<span class="token comment">// Label showing scene graph hierarchy</span>
<span class="token keyword">const</span> label <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Text</span><span class="token punctuation">(</span><span class="token punctuation">{</span>
  <span class="token literal-property property">text</span><span class="token operator">:</span> <span class="token string">'Scene Graph:\n\napp.stage\n  ┗ A\n     ┗ B\n     ┗ C\n  ┗ D'</span><span class="token punctuation">,</span>
  <span class="token literal-property property">style</span><span class="token operator">:</span> <span class="token punctuation">{</span> <span class="token literal-property property">fill</span><span class="token operator">:</span> <span class="token string">'#ffffff'</span> <span class="token punctuation">}</span><span class="token punctuation">,</span>
  <span class="token literal-property property">position</span><span class="token operator">:</span> <span class="token punctuation">{</span> <span class="token literal-property property">x</span><span class="token operator">:</span> <span class="token number">300</span><span class="token punctuation">,</span> <span class="token literal-property property">y</span><span class="token operator">:</span> <span class="token number">100</span> <span class="token punctuation">}</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span>

app<span class="token punctuation">.</span>stage<span class="token punctuation">.</span><span class="token function">addChild</span><span class="token punctuation">(</span>label<span class="token punctuation">)</span>

<span class="token comment">// Helper function to create a block of color with a letter</span>
<span class="token keyword">const</span> letters <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span>
<span class="token keyword">function</span> <span class="token function">addLetter</span><span class="token punctuation">(</span><span class="token parameter">letter<span class="token punctuation">,</span> parent<span class="token punctuation">,</span> color<span class="token punctuation">,</span> pos</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token keyword">const</span> bg <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Sprite</span><span class="token punctuation">(</span>Texture<span class="token punctuation">.</span><span class="token constant">WHITE</span><span class="token punctuation">)</span>
  bg<span class="token punctuation">.</span>width <span class="token operator">=</span> <span class="token number">100</span>
  bg<span class="token punctuation">.</span>height <span class="token operator">=</span> <span class="token number">100</span>
  bg<span class="token punctuation">.</span>tint <span class="token operator">=</span> color

  <span class="token keyword">const</span> text <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Text</span><span class="token punctuation">(</span><span class="token punctuation">{</span>
    <span class="token literal-property property">text</span><span class="token operator">:</span> letter<span class="token punctuation">,</span>
    <span class="token literal-property property">style</span><span class="token operator">:</span> <span class="token punctuation">{</span> <span class="token literal-property property">fill</span><span class="token operator">:</span> <span class="token string">'#ffffff'</span> <span class="token punctuation">}</span>
  <span class="token punctuation">}</span><span class="token punctuation">)</span>

  text<span class="token punctuation">.</span>anchor<span class="token punctuation">.</span><span class="token function">set</span><span class="token punctuation">(</span><span class="token number">0.5</span><span class="token punctuation">)</span>
  text<span class="token punctuation">.</span>position <span class="token operator">=</span> <span class="token punctuation">{</span> <span class="token literal-property property">x</span><span class="token operator">:</span> <span class="token number">50</span><span class="token punctuation">,</span> <span class="token literal-property property">y</span><span class="token operator">:</span> <span class="token number">50</span> <span class="token punctuation">}</span>

  <span class="token keyword">const</span> container <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Container</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
  container<span class="token punctuation">.</span>position <span class="token operator">=</span> pos
  container<span class="token punctuation">.</span>visible <span class="token operator">=</span> <span class="token boolean">false</span>
  container<span class="token punctuation">.</span><span class="token function">addChild</span><span class="token punctuation">(</span>bg<span class="token punctuation">,</span> text<span class="token punctuation">)</span>
  parent<span class="token punctuation">.</span><span class="token function">addChild</span><span class="token punctuation">(</span>container<span class="token punctuation">)</span>

  letters<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span>container<span class="token punctuation">)</span>
  <span class="token keyword">return</span> container
<span class="token punctuation">}</span>

<span class="token comment">// Define 4 letters</span>
<span class="token keyword">let</span> a <span class="token operator">=</span> <span class="token function">addLetter</span><span class="token punctuation">(</span><span class="token string">'A'</span><span class="token punctuation">,</span> app<span class="token punctuation">.</span>stage<span class="token punctuation">,</span> <span class="token number">0xff0000</span><span class="token punctuation">,</span> <span class="token punctuation">{</span> <span class="token literal-property property">x</span><span class="token operator">:</span> <span class="token number">100</span><span class="token punctuation">,</span> <span class="token literal-property property">y</span><span class="token operator">:</span> <span class="token number">100</span> <span class="token punctuation">}</span><span class="token punctuation">)</span>
<span class="token keyword">let</span> b <span class="token operator">=</span> <span class="token function">addLetter</span><span class="token punctuation">(</span><span class="token string">'B'</span><span class="token punctuation">,</span> a<span class="token punctuation">,</span> <span class="token number">0x00ff00</span><span class="token punctuation">,</span> <span class="token punctuation">{</span> <span class="token literal-property property">x</span><span class="token operator">:</span> <span class="token number">20</span><span class="token punctuation">,</span> <span class="token literal-property property">y</span><span class="token operator">:</span> <span class="token number">20</span> <span class="token punctuation">}</span><span class="token punctuation">)</span>
<span class="token keyword">let</span> c <span class="token operator">=</span> <span class="token function">addLetter</span><span class="token punctuation">(</span><span class="token string">'C'</span><span class="token punctuation">,</span> a<span class="token punctuation">,</span> <span class="token number">0x0000ff</span><span class="token punctuation">,</span> <span class="token punctuation">{</span> <span class="token literal-property property">x</span><span class="token operator">:</span> <span class="token number">20</span><span class="token punctuation">,</span> <span class="token literal-property property">y</span><span class="token operator">:</span> <span class="token number">40</span> <span class="token punctuation">}</span><span class="token punctuation">)</span>
<span class="token keyword">let</span> d <span class="token operator">=</span> <span class="token function">addLetter</span><span class="token punctuation">(</span><span class="token string">'D'</span><span class="token punctuation">,</span> app<span class="token punctuation">.</span>stage<span class="token punctuation">,</span> <span class="token number">0xff8800</span><span class="token punctuation">,</span> <span class="token punctuation">{</span> <span class="token literal-property property">x</span><span class="token operator">:</span> <span class="token number">140</span><span class="token punctuation">,</span> <span class="token literal-property property">y</span><span class="token operator">:</span> <span class="token number">100</span> <span class="token punctuation">}</span><span class="token punctuation">)</span>

<span class="token comment">// Display them over time, in order</span>
<span class="token keyword">let</span> elapsed <span class="token operator">=</span> <span class="token number">0.0</span>
app<span class="token punctuation">.</span>ticker<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token parameter">ticker</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
  elapsed <span class="token operator">+=</span> ticker<span class="token punctuation">.</span>deltaTime <span class="token operator">/</span> <span class="token number">60.0</span>
  <span class="token keyword">if</span> <span class="token punctuation">(</span>elapsed <span class="token operator">&gt;=</span> letters<span class="token punctuation">.</span>length<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    elapsed <span class="token operator">=</span> <span class="token number">0.0</span>
  <span class="token punctuation">}</span>
  <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">let</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> letters<span class="token punctuation">.</span>length<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    letters<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span>visible <span class="token operator">=</span> elapsed <span class="token operator">&gt;=</span> i
  <span class="token punctuation">}</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span>
</code></pre></div><figure><img src="https://raw.githubusercontent.com/dribble-njr/typora-njr/master/img/Aug-08-2024 16-23-14.gif" alt="render order" tabindex="0" loading="lazy"><figcaption>render order</figcaption></figure>
<p>如果想对子对象重新排序，可以使用 <code>setChildIndex()</code>。 要在父对象列表的给定位置添加子对象，可以使用 <code>addChildAt()</code>。 最后，您可以使用 <code>sortableChildren</code> 选项，结合设置每个子对象的 <code>zIndex</code> 属性，对对象的子对象进行自动排序。</p>
<h2>渲染组</h2>
<p>当你深入研究 PixiJS 时，你会遇到一个强大的功能，即渲染组。 将渲染组视为场景图中的专门容器，其本身就像迷你场景图。 以下是在项目中有效使用渲染组的必要知识。 更多信息，请查看 <a href="https://pixijs.com/8.x/guides/advanced/render-groups" target="_blank" rel="noopener noreferrer">渲染组概述</a>。</p>
<h2>剔除</h2>
<p>如果您正在构建的项目中，大部分场景对象都不在屏幕上（例如，一个横版游戏），那么您就需要对这些对象进行剔除。</p>
<p>剔除是一个评估对象（或其子代！）是否在屏幕上的过程，如果不在屏幕上，则关闭对其的渲染。</p>
<p>如果不对屏幕外的对象进行剔除，即使它们的像素最终都不在屏幕上，渲染器仍会绘制它们。</p>
<p>PixiJS 并不提供视口剔除的内置支持，但你可以找到第三方插件来满足你的需求。另外，如果你想建立自己的剔除系统，只需在每个 tick 期间运行对象，并将任何不需要绘制的对象的 <code>renderable</code> 设置为 false 即可。</p>
<h2>局部坐标 vs 全局坐标</h2>
<p>如果在舞台上添加一个精灵，默认情况下它会显示在屏幕的左上角。这是 PixiJS 使用的全局坐标空间的原点。</p>
<p>如果你的所有对象都是舞台的子对象，那么你只需要担心这个坐标。但是一旦引入容器和子对象，事情就变得复杂了。</p>
<p>位于 [50, 100] 处的子对象距离父对象向右 50 像素，向下 100 像素。我们称这两个坐标系为「全局坐标」和「局部坐标」。当你在一个对象上使用 <code>position.set(x, y)</code> 时，你总是在局部坐标系下工作，相对于对象的父对象。</p>
<p>问题是，很多时候你都想知道某个对象的全局位置。例如，如果您想剔除屏幕外的对象以节省渲染时间，您需要知道给定的子对象是否在视图矩形之外。</p>
<p>要将本地坐标转换为全局坐标，您需要使用 <code>toGlobal()</code> 函数。下面是一个使用示例：</p>
<div class="language-javascript" data-ext="js" data-title="js"><pre class="language-javascript"><code><span class="token comment">// Get the global position of an object, relative to the top-left of the screen</span>
<span class="token keyword">let</span> globalPos <span class="token operator">=</span> obj<span class="token punctuation">.</span><span class="token function">toGlobal</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">Point</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
</code></pre></div><p>这段代码会将 <code>globalPos</code> 设置为子对象的全局坐标，相对于全局坐标系中的 [0, 0]。</p>
<h2>全局坐标 vs 屏幕坐标</h2>
<p>当您的项目与主机操作系统或浏览器协同工作时，还有第三个坐标系——「屏幕坐标」（又称「视口坐标」）会发挥作用。屏幕坐标表示相对于 PixiJS 正在呈现的画布元素左上角的位置。DOM 和本地鼠标点击事件等都在屏幕空间中工作。</p>
<p>现在，在很多情况下，屏幕空间等同于世界空间。如果画布的大小与创建应用程序时指定的呈现视图大小相同，就属于这种情况。 默认情况下就是这样——例如，您将创建一个 800x600 的应用程序窗口并将其添加到 HTML 页面，它就会保持这个大小。世界坐标中的 100 像素等于屏幕空间中的 100 像素。</p>
<p>但是！常见的情况是拉伸呈现视图，使其充满整个屏幕，或者以较低分辨率呈现，然后放大以提高速度。在这种情况下，画布元素的屏幕尺寸会发生变化（例如通过 CSS），但底层呈现视图不会，从而导致世界坐标和屏幕坐标不匹配。</p>
]]></content>
    <category term="Pixi"/>
    <published>2024-08-08T00:00:00.000Z</published>
  </entry>
  <entry>
    <title type="text">渲染循环</title>
    <id>https://dribble-njr.github.io/blog/blog/frontend/framework/pixi/03-render-loop.html</id>
    <link href="https://dribble-njr.github.io/blog/blog/frontend/framework/pixi/03-render-loop.html"/>
    <updated>2024-08-08T02:49:23.000Z</updated>
    <summary type="html"><![CDATA[<p>现在您已经了解了系统的主要部分，让我们来看看这些部分是如何协同工作，将您的项目呈现在屏幕上的。 与网页不同的是，PixiJS 会不断更新和重新绘制，一遍又一遍。 你更新对象，然后 PixiJS 将它们渲染到屏幕上，然后重复这个过程。 我们称这个循环为渲染循环。</p>
<p>任何 PixiJS 项目最主要的部分包含更新 + 渲染循环，编写更新，PixiJS 会处理整个渲染。</p>
<p>发生在渲染循环中的每一帧主要包含三个部分。</p>
<h2>运行 Ticker 回调</h2>
<p>第一步是计算从上一帧开始已经过去了多长时间，然后根据时间差调用应用程序对象的 ticker 回调。 这样，项目代码就可以制作动画并更新舞台上的精灵等，为渲染做好准备。</p>]]></summary>
    <content type="html"><![CDATA[<p>现在您已经了解了系统的主要部分，让我们来看看这些部分是如何协同工作，将您的项目呈现在屏幕上的。 与网页不同的是，PixiJS 会不断更新和重新绘制，一遍又一遍。 你更新对象，然后 PixiJS 将它们渲染到屏幕上，然后重复这个过程。 我们称这个循环为渲染循环。</p>
<p>任何 PixiJS 项目最主要的部分包含更新 + 渲染循环，编写更新，PixiJS 会处理整个渲染。</p>
<p>发生在渲染循环中的每一帧主要包含三个部分。</p>
<h2>运行 Ticker 回调</h2>
<p>第一步是计算从上一帧开始已经过去了多长时间，然后根据时间差调用应用程序对象的 ticker 回调。 这样，项目代码就可以制作动画并更新舞台上的精灵等，为渲染做好准备。</p>
<h2>更新场景图像</h2>
<p>场景图包含您正在绘制的事物（精灵、文本等），并且这些对象处于树状层次结构中。这些对象处于树状层次结构中。 通过移动、旋转等方式更新游戏对象后，PixiJS 需要计算场景中每个对象的新位置和状态，然后才能开始绘制。</p>
<h2>渲染场景图像</h2>
<p>现在我们的游戏状态已经更新，是时候将其绘制到屏幕上了。渲染系统会从场景图的根节点（app.stage）开始，渲染每个对象及其子节点，直到绘制完所有对象。 在此过程中不会进行剔除或其他巧妙的处理。如果在舞台的可见部分之外有大量对象，则需要将其禁用作为一种优化方法（视椎体剔除）。</p>
<h2>帧频</h2>
<p>渲染循环不可能无限快地运行--在屏幕上绘制图像需要时间。此外，每次屏幕更新（通常为 60fps，但较新的显示器可支持 144fps 或更高）时，帧的更新次数一般不会超过一次。最后，PixiJS 是在 Chrome 或 Firefox 等网络浏览器的环境中运行的。浏览器本身必须平衡各种内部操作的需要和为任何打开的标签页提供服务的需要。综上所述，确定何时绘制帧是一个复杂的问题。</p>
<p>如果您想调整该行为，可以在 Ticker 上设置 <code>minFPS</code> 和 <code>maxFPS</code> 属性。请注意，由于环境复杂，项目无法保证给定的 FPS。 在 ticker 回调中使用传递的 <code>ticker.deltaTime</code> 值来缩放任何动画，以确保流畅播放。</p>
<h2>自定义渲染循环</h2>
<p>以上介绍的是应用程序辅助类开箱即用的默认呈现循环。对于希望解决特定问题的高级用户来说，创建呈现循环还有许多其他方法。在制作原型和学习 PixiJS 的过程中，建议使用应用程序提供的系统。</p>
]]></content>
    <category term="Pixi"/>
    <published>2024-08-08T00:00:00.000Z</published>
  </entry>
  <entry>
    <title type="text">务实的项目</title>
    <id>https://dribble-njr.github.io/blog/blog/reading/pragmatic-programmer/09-pragmatic-project.html</id>
    <link href="https://dribble-njr.github.io/blog/blog/reading/pragmatic-programmer/09-pragmatic-project.html"/>
    <updated>2024-08-07T10:33:41.000Z</updated>
    <summary type="html"><![CDATA[<p>一旦项目不只你一个人，就需要建立一些基本规则，并依次将项目的各部分分配出去。</p>
<h2>务实的团队</h2>
<ul>
<li>维持小而稳定的团队</li>
<li>禁止破窗</li>
<li>团队的工作不应仅致力于开发新功能，还可能包括：
<ul>
<li>旧系统的维护</li>
<li>流程的反思与精炼</li>
<li>实验新技术</li>
<li>学习和提升技能</li>
</ul>
</li>
<li>做能起作用的事，别赶时髦</li>
</ul>
<h2>务实的入门套件</h2>
<ul>
<li>版本控制</li>
<li>回归测试</li>
<li>完全自动化</li>
</ul>]]></summary>
    <content type="html"><![CDATA[<p>一旦项目不只你一个人，就需要建立一些基本规则，并依次将项目的各部分分配出去。</p>
<h2>务实的团队</h2>
<ul>
<li>维持小而稳定的团队</li>
<li>禁止破窗</li>
<li>团队的工作不应仅致力于开发新功能，还可能包括：
<ul>
<li>旧系统的维护</li>
<li>流程的反思与精炼</li>
<li>实验新技术</li>
<li>学习和提升技能</li>
</ul>
</li>
<li>做能起作用的事，别赶时髦</li>
</ul>
<h2>务实的入门套件</h2>
<ul>
<li>版本控制</li>
<li>回归测试</li>
<li>完全自动化</li>
</ul>
<h2>傲慢与偏见</h2>
<p>在作品上签名。</p>
<p>保持匿名会滋生粗心、错误、懒惰和糟糕的代码，特别是在大型项目中——很容易把自己看成只是大齿轮上的一个小齿，在无休止的工作汇报中制造蹩脚的借口，而不是写出好的代码。</p>
]]></content>
    <category term="READING"/>
    <published>2024-08-07T00:00:00.000Z</published>
  </entry>
  <entry>
    <title type="text">项目启动前</title>
    <id>https://dribble-njr.github.io/blog/blog/reading/pragmatic-programmer/08-before-start-project.html</id>
    <link href="https://dribble-njr.github.io/blog/blog/reading/pragmatic-programmer/08-before-start-project.html"/>
    <updated>2024-08-07T10:23:44.000Z</updated>
    <summary type="html"><![CDATA[<p>在项目的最早期，你和团队需要了解需求。仅仅是被人告知要做什么或是倾听用户是不够的：读一下需求之坑，学习如何避免常见的陷阱。</p>
<h2>需求之坑</h2>
<p>需求很少停留在表面。通常情况下，它们被埋在层层的假设、误解和政治之下。更糟糕的是，需求通常根本不存在。</p>
<ul>
<li>无人确切知道自己想要什么</li>
<li>程序员帮助人们理解他们想要什么</li>
<li>需求是从反馈循环中学到的</li>
<li>和用户一起工作以便从用户角度思考</li>
<li>使用项目术语表</li>
</ul>
<h2>处理无法解决的难题</h2>
<p>偶尔也会出现一个真的非常困难的问题，你会发现自己顿时被卷入项目之中：一些工程问题你把握不了，或者某些代码比你想象的更难写，也许看起来根本做不到。但这些真的像看起来那么难吗？</p>]]></summary>
    <content type="html"><![CDATA[<p>在项目的最早期，你和团队需要了解需求。仅仅是被人告知要做什么或是倾听用户是不够的：读一下需求之坑，学习如何避免常见的陷阱。</p>
<h2>需求之坑</h2>
<p>需求很少停留在表面。通常情况下，它们被埋在层层的假设、误解和政治之下。更糟糕的是，需求通常根本不存在。</p>
<ul>
<li>无人确切知道自己想要什么</li>
<li>程序员帮助人们理解他们想要什么</li>
<li>需求是从反馈循环中学到的</li>
<li>和用户一起工作以便从用户角度思考</li>
<li>使用项目术语表</li>
</ul>
<h2>处理无法解决的难题</h2>
<p>偶尔也会出现一个真的非常困难的问题，你会发现自己顿时被卷入项目之中：一些工程问题你把握不了，或者某些代码比你想象的更难写，也许看起来根本做不到。但这些真的像看起来那么难吗？</p>
<p>解决谜题的关键是，认识到你所受到的约束和你所拥有的自由度，因为认识到这些就会找到答案。</p>
<ul>
<li>不要跳出框框思考——找到框框</li>
<li>跳出自身的局限</li>
<li>幸运眷顾有准备的人</li>
</ul>
<h2>携手共建</h2>
<p>「一起工作」的真正含义：不仅仅是提问、讨论、做笔记，还要在真正编码的同一时刻提问和讨论。</p>
<ul>
<li>结对编程</li>
<li>集体编程</li>
<li>不要一个人埋头钻进代码中</li>
</ul>
]]></content>
    <category term="READING"/>
    <published>2024-08-07T00:00:00.000Z</published>
  </entry>
  <entry>
    <title type="text">当你编码时</title>
    <id>https://dribble-njr.github.io/blog/blog/reading/pragmatic-programmer/07-when-coding.html</id>
    <link href="https://dribble-njr.github.io/blog/blog/reading/pragmatic-programmer/07-when-coding.html"/>
    <updated>2024-08-07T10:07:24.000Z</updated>
    <summary type="html"><![CDATA[<p>对所有代码进行批判性思考，包括自己的代码。不断看到程序和设计的改进空间。</p>
<h2>听从蜥蜴脑</h2>
<p>一种有效的脑力突破的方法：</p>
<ol>
<li>在便签上写下「我正在做 xx」，然后贴在屏幕的一侧。</li>
<li>提醒自己，「xx」注定要出问题。提醒自己，「xx」即使没有出问题也会被扔掉。这样做没有坏处。</li>
<li>在空编辑器窗口中，写一条注释，用一句话描述你想学点什么或做点什么。</li>
<li>开始编码。</li>
</ol>
<p>如果在实验结束后仍旧不舒服，那就重新从散步、谈话和休息开始。</p>
<p>阅读别人的代码。</p>
<h2>重构</h2>]]></summary>
    <content type="html"><![CDATA[<p>对所有代码进行批判性思考，包括自己的代码。不断看到程序和设计的改进空间。</p>
<h2>听从蜥蜴脑</h2>
<p>一种有效的脑力突破的方法：</p>
<ol>
<li>在便签上写下「我正在做 xx」，然后贴在屏幕的一侧。</li>
<li>提醒自己，「xx」注定要出问题。提醒自己，「xx」即使没有出问题也会被扔掉。这样做没有坏处。</li>
<li>在空编辑器窗口中，写一条注释，用一句话描述你想学点什么或做点什么。</li>
<li>开始编码。</li>
</ol>
<p>如果在实验结束后仍旧不舒服，那就重新从散步、谈话和休息开始。</p>
<p>阅读别人的代码。</p>
<h2>重构</h2>
<p>重组现有代码实体、改变其内部结构而不改变其外部行为的规范式技术。</p>
<p>重构是一项日复一日的工作，需要采取低风险的小步骤进行，它更像是耙松和除草这类活动。这是一种有针对性的、精确的方法，有助于保持代码易于更改，而不是对代码库进行自由的、大规模的重写。</p>
<p>为了保证外部行为没有改变，你需要良好的自动化单元测试来验证代码的行为。</p>
<ul>
<li>尽早重构，尽快重构</li>
</ul>
<h2>注意安全</h2>
<ul>
<li>保持代码简洁，让攻击面更小</li>
<li>尽早打上安全补丁</li>
</ul>
]]></content>
    <category term="READING"/>
    <published>2024-08-07T00:00:00.000Z</published>
  </entry>
  <entry>
    <title type="text">并发</title>
    <id>https://dribble-njr.github.io/blog/blog/reading/pragmatic-programmer/06-concurrent.html</id>
    <link href="https://dribble-njr.github.io/blog/blog/reading/pragmatic-programmer/06-concurrent.html"/>
    <updated>2024-08-07T09:50:07.000Z</updated>
    <summary type="html"><![CDATA[<h2>打破时域耦合</h2>
<p>时域耦合——在时间范畴上产生耦合：A 方法必须在 B 方法之前调用；一次只能运行一个报告；在按钮按下前必须等屏幕先重绘；“嘀嘀”一定在“嗒嗒”之前发生。</p>
<p>我们需要考虑并发性，并且考虑对时间依赖或顺序依赖解耦。</p>
<ul>
<li>通过分析工作流来提高并发性</li>
<li>做事也需要思考如何解耦</li>
</ul>
]]></summary>
    <content type="html"><![CDATA[<h2>打破时域耦合</h2>
<p>时域耦合——在时间范畴上产生耦合：A 方法必须在 B 方法之前调用；一次只能运行一个报告；在按钮按下前必须等屏幕先重绘；“嘀嘀”一定在“嗒嗒”之前发生。</p>
<p>我们需要考虑并发性，并且考虑对时间依赖或顺序依赖解耦。</p>
<ul>
<li>通过分析工作流来提高并发性</li>
<li>做事也需要思考如何解耦</li>
</ul>
]]></content>
    <category term="READING"/>
    <published>2024-08-07T00:00:00.000Z</published>
  </entry>
  <entry>
    <title type="text">手写 call、apply、bind</title>
    <id>https://dribble-njr.github.io/blog/blog/frontend/basic/javascript/017-implement-call-apply-bind.html</id>
    <link href="https://dribble-njr.github.io/blog/blog/frontend/basic/javascript/017-implement-call-apply-bind.html"/>
    <updated>2024-08-07T08:29:51.000Z</updated>
    <summary type="html"><![CDATA[<p><code>call()</code>、<code>apply()</code> 和 <code>bind()</code> 三者都可以改变 JavaScript 中的 this 指向，关于三者的区别在 中有详细记录。</p>
<p>这三个函数实际上是由 C++ 实现的，这里只考虑功能上的实现，不会考虑太多边界情况。</p>
<h2><code>call()</code></h2>
<p><code>call()</code> 接受一个 <code>this</code> 指向，其后跟参数列表。</p>
<div class="language-javascript" data-ext="js" data-title="js"><pre class="language-javascript"><code><span class="token class-name">Function</span><span class="token punctuation">.</span>prototype<span class="token punctuation">.</span><span class="token function-variable function">myCall</span> <span class="token operator">=</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token parameter">thisArg<span class="token punctuation">,</span> <span class="token operator">...</span>args</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token comment">// 将 thisArg 转成对象类型（防止传入非对象类型）</span>
  <span class="token comment">// 传入 null 或 undefined 则为全局对象</span>
  thisArg <span class="token operator">=</span> thisArg <span class="token operator">!==</span> <span class="token keyword">null</span> <span class="token operator">&amp;&amp;</span> thisArg <span class="token operator">!==</span> <span class="token keyword">undefined</span> <span class="token operator">?</span> <span class="token function">Object</span><span class="token punctuation">(</span>thisArg<span class="token punctuation">)</span> <span class="token operator">:</span> window

  <span class="token comment">// foo.myCall();</span>
  <span class="token comment">// foo 是函数，本质上也是一个对象，即隐式绑定：对象（foo）调用函数（myCall）</span>
  <span class="token comment">// 那么函数 myCall 中的 this 指向 foo 对象（函数）</span>
  <span class="token keyword">const</span> fn <span class="token operator">=</span> <span class="token keyword">this</span> <span class="token comment">// foo</span>

  <span class="token comment">// 需要将 fn 的指向改为 thisArg</span>
  <span class="token comment">// 那么可以继续利用 this 的隐式绑定规则</span>
  thisArg<span class="token punctuation">.</span>fn <span class="token operator">=</span> fn
  <span class="token keyword">const</span> res <span class="token operator">=</span> thisArg<span class="token punctuation">.</span><span class="token function">fn</span><span class="token punctuation">(</span><span class="token operator">...</span>args<span class="token punctuation">)</span>
  <span class="token keyword">delete</span> thisArg<span class="token punctuation">.</span>fn

  <span class="token keyword">return</span> res
<span class="token punctuation">}</span>
</code></pre></div>]]></summary>
    <content type="html"><![CDATA[<p><code>call()</code>、<code>apply()</code> 和 <code>bind()</code> 三者都可以改变 JavaScript 中的 this 指向，关于三者的区别在 中有详细记录。</p>
<p>这三个函数实际上是由 C++ 实现的，这里只考虑功能上的实现，不会考虑太多边界情况。</p>
<h2><code>call()</code></h2>
<p><code>call()</code> 接受一个 <code>this</code> 指向，其后跟参数列表。</p>
<div class="language-javascript" data-ext="js" data-title="js"><pre class="language-javascript"><code><span class="token class-name">Function</span><span class="token punctuation">.</span>prototype<span class="token punctuation">.</span><span class="token function-variable function">myCall</span> <span class="token operator">=</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token parameter">thisArg<span class="token punctuation">,</span> <span class="token operator">...</span>args</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token comment">// 将 thisArg 转成对象类型（防止传入非对象类型）</span>
  <span class="token comment">// 传入 null 或 undefined 则为全局对象</span>
  thisArg <span class="token operator">=</span> thisArg <span class="token operator">!==</span> <span class="token keyword">null</span> <span class="token operator">&amp;&amp;</span> thisArg <span class="token operator">!==</span> <span class="token keyword">undefined</span> <span class="token operator">?</span> <span class="token function">Object</span><span class="token punctuation">(</span>thisArg<span class="token punctuation">)</span> <span class="token operator">:</span> window

  <span class="token comment">// foo.myCall();</span>
  <span class="token comment">// foo 是函数，本质上也是一个对象，即隐式绑定：对象（foo）调用函数（myCall）</span>
  <span class="token comment">// 那么函数 myCall 中的 this 指向 foo 对象（函数）</span>
  <span class="token keyword">const</span> fn <span class="token operator">=</span> <span class="token keyword">this</span> <span class="token comment">// foo</span>

  <span class="token comment">// 需要将 fn 的指向改为 thisArg</span>
  <span class="token comment">// 那么可以继续利用 this 的隐式绑定规则</span>
  thisArg<span class="token punctuation">.</span>fn <span class="token operator">=</span> fn
  <span class="token keyword">const</span> res <span class="token operator">=</span> thisArg<span class="token punctuation">.</span><span class="token function">fn</span><span class="token punctuation">(</span><span class="token operator">...</span>args<span class="token punctuation">)</span>
  <span class="token keyword">delete</span> thisArg<span class="token punctuation">.</span>fn

  <span class="token keyword">return</span> res
<span class="token punctuation">}</span>
</code></pre></div><h2><code>apply()</code></h2>
<p><code>apply()</code> 与 <code>call()</code> 的区别在于传入的是参数数组，参照上面流程，可以很容易的写出：</p>
<div class="language-javascript" data-ext="js" data-title="js"><pre class="language-javascript"><code><span class="token class-name">Function</span><span class="token punctuation">.</span>prototype<span class="token punctuation">.</span><span class="token function-variable function">myApply</span> <span class="token operator">=</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token parameter">thisArg<span class="token punctuation">,</span> args</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token comment">// 处理 thisArg</span>
  thisArg <span class="token operator">=</span> thisArg <span class="token operator">!==</span> <span class="token keyword">null</span> <span class="token operator">&amp;&amp;</span> thisArg <span class="token operator">!==</span> <span class="token keyword">undefined</span> <span class="token operator">?</span> <span class="token function">Object</span><span class="token punctuation">(</span>thisArg<span class="token punctuation">)</span> <span class="token operator">:</span> window

  <span class="token comment">// 获取待执行函数</span>
  <span class="token keyword">const</span> fn <span class="token operator">=</span> <span class="token keyword">this</span>

  <span class="token comment">// 执行</span>
  thisArg<span class="token punctuation">.</span>fn <span class="token operator">=</span> fn
  <span class="token keyword">const</span> res <span class="token operator">=</span> thisArg<span class="token punctuation">.</span><span class="token function">fn</span><span class="token punctuation">(</span><span class="token operator">...</span>args<span class="token punctuation">)</span>
  <span class="token keyword">delete</span> thisArg<span class="token punctuation">.</span>fn

  <span class="token keyword">return</span> res
<span class="token punctuation">}</span>
</code></pre></div><h2><code>bind()</code></h2>
<p><code>bind()</code> 函数稍有不同，它返回一个改变了 <code>this</code> 的函数：</p>
<div class="language-javascript" data-ext="js" data-title="js"><pre class="language-javascript"><code><span class="token class-name">Function</span><span class="token punctuation">.</span>prototype<span class="token punctuation">.</span><span class="token function-variable function">myBind</span> <span class="token operator">=</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token parameter">thisArg<span class="token punctuation">,</span> <span class="token operator">...</span>args</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token comment">// 处理 thisArg</span>
  thisArg <span class="token operator">=</span> thisArg <span class="token operator">!==</span> <span class="token keyword">null</span> <span class="token operator">&amp;&amp;</span> thisArg <span class="token operator">!==</span> <span class="token keyword">undefined</span> <span class="token operator">?</span> <span class="token function">Object</span><span class="token punctuation">(</span>thisArg<span class="token punctuation">)</span> <span class="token operator">:</span> window

  <span class="token comment">// 获取待执行函数</span>
  <span class="token keyword">const</span> fn <span class="token operator">=</span> <span class="token keyword">this</span>

  <span class="token keyword">return</span> <span class="token keyword">function</span> <span class="token function">_bind</span><span class="token punctuation">(</span><span class="token parameter"><span class="token operator">...</span>newArgs</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token comment">// 收集参数</span>
    <span class="token keyword">const</span> finalArgs <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token operator">...</span>args<span class="token punctuation">,</span> <span class="token operator">...</span>newArgs<span class="token punctuation">]</span>

    <span class="token comment">// 执行</span>
    thisArg<span class="token punctuation">.</span>fn <span class="token operator">=</span> fn
    <span class="token keyword">const</span> res <span class="token operator">=</span> thisArg<span class="token punctuation">.</span><span class="token function">fn</span><span class="token punctuation">(</span><span class="token operator">...</span>finalArgs<span class="token punctuation">)</span>
    <span class="token keyword">delete</span> thisArg<span class="token punctuation">.</span>fn

    <span class="token keyword">return</span> res
  <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre></div><h2>总结</h2>
<p>手写 <code>call</code>、<code>apply</code>、<code>bind</code> 的步骤大致相同，只是 <code>bind</code> 多了一个收集参数的过程：</p>
<ol>
<li>处理 thisArg;</li>
<li>获取待执行函数；</li>
<li>执行函数（<code>bind()</code> 还有一个收集参数的过程）。</li>
</ol>
<p>无论是在获取函数还是执行函数（改变 <code>this</code>）的过程中，都是利用了隐式绑定改变 <code>this</code> 指向的规则。</p>
]]></content>
    <category term="JavaScript"/>
    <published>2022-04-27T00:00:00.000Z</published>
  </entry>
  <entry>
    <title type="text">函数</title>
    <id>https://dribble-njr.github.io/blog/blog/frontend/basic/javascript/015-function.html</id>
    <link href="https://dribble-njr.github.io/blog/blog/frontend/basic/javascript/015-function.html"/>
    <updated>2024-08-07T08:19:27.000Z</updated>
    <summary type="html"><![CDATA[<h2>箭头函数</h2>
<p>ES6 中新增了 <code>=&gt;</code>，它可以将函数定义成箭头函数。</p>
<div class="language-javascript" data-ext="js" data-title="js"><pre class="language-javascript"><code><span class="token keyword">const</span> <span class="token function-variable function">add</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token parameter">a<span class="token punctuation">,</span> b</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> a <span class="token operator">+</span> b
</code></pre></div>]]></summary>
    <content type="html"><![CDATA[<h2>箭头函数</h2>
<p>ES6 中新增了 <code>=&gt;</code>，它可以将函数定义成箭头函数。</p>
<div class="language-javascript" data-ext="js" data-title="js"><pre class="language-javascript"><code><span class="token keyword">const</span> <span class="token function-variable function">add</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token parameter">a<span class="token punctuation">,</span> b</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> a <span class="token operator">+</span> b
</code></pre></div><div class="hint-container warning">
<p class="hint-container-title">注意</p>
<p>箭头函数不能使用 <code>arguments</code>、<code>super</code> 和 <code>new.target</code>，也不能用作构造函数。此外，箭头函数也没有 <code>prototype</code> 属性。</p>
</div>
<h2>函数名</h2>
<p>在 JavaScript 中，函数名可以是任何标识符。</p>
<p>ECMAScript 6 的所有函数对象都会暴露一个只读的 <code>name</code> 属性，其中包含关于函数的信息。</p>
<p>多数情况下，这个属性中保存的就是一个函数标识符，或者说是一个字符串化的变量名。即使函数没有名称，也会如实显示成空字符串。如果它是使用 <code>Function</code> 构造函数创建的，则会标识成 <code>anonymous</code>：</p>
<div class="language-javascript" data-ext="js" data-title="js"><pre class="language-javascript"><code><span class="token keyword">function</span> <span class="token function">foo</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token punctuation">}</span>
<span class="token keyword">let</span> <span class="token function-variable function">bar</span> <span class="token operator">=</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token punctuation">}</span>
<span class="token keyword">let</span> <span class="token function-variable function">baz</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span><span class="token punctuation">}</span>

console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>foo<span class="token punctuation">.</span>name<span class="token punctuation">)</span> <span class="token comment">// foo</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>bar<span class="token punctuation">.</span>name<span class="token punctuation">)</span> <span class="token comment">// bar</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>baz<span class="token punctuation">.</span>name<span class="token punctuation">)</span> <span class="token comment">// baz</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">.</span>name<span class="token punctuation">)</span> <span class="token comment">//（空字符串）</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">Function</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span>name<span class="token punctuation">)</span> <span class="token comment">// anonymous</span>
</code></pre></div><p>如果函数是一个获取函数、设置函数，或者使用 <code>bind()</code> 实例化，那么标识符前面会加上一个前缀：</p>
<div class="language-javascript" data-ext="js" data-title="js"><pre class="language-javascript"><code><span class="token keyword">function</span> <span class="token function">foo</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token punctuation">}</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token function">foo</span><span class="token punctuation">.</span><span class="token function">bind</span><span class="token punctuation">(</span><span class="token keyword">null</span><span class="token punctuation">)</span><span class="token punctuation">.</span>name<span class="token punctuation">)</span> <span class="token comment">// bound foo</span>

<span class="token keyword">let</span> dog <span class="token operator">=</span> <span class="token punctuation">{</span>
  <span class="token literal-property property">years</span><span class="token operator">:</span> <span class="token number">1</span><span class="token punctuation">,</span>
  <span class="token keyword">get</span> <span class="token function">age</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">return</span> <span class="token keyword">this</span><span class="token punctuation">.</span>years
  <span class="token punctuation">}</span><span class="token punctuation">,</span>
  <span class="token keyword">set</span> <span class="token function">age</span><span class="token punctuation">(</span><span class="token parameter">newAge</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">this</span><span class="token punctuation">.</span>years <span class="token operator">=</span> newAge
  <span class="token punctuation">}</span>
<span class="token punctuation">}</span>

<span class="token keyword">let</span> propertyDescriptor <span class="token operator">=</span> Object<span class="token punctuation">.</span><span class="token function">getOwnPropertyDescriptor</span><span class="token punctuation">(</span>dog<span class="token punctuation">,</span> <span class="token string">'age'</span><span class="token punctuation">)</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>propertyDescriptor<span class="token punctuation">.</span>get<span class="token punctuation">.</span>name<span class="token punctuation">)</span> <span class="token comment">// get age</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>propertyDescriptor<span class="token punctuation">.</span>set<span class="token punctuation">.</span>name<span class="token punctuation">)</span> <span class="token comment">// set age</span>
</code></pre></div><h2>参数</h2>
<p>函数既不关心传入的参数个数，也不关心这些参数的数据类型。定义函数时要接收两个参数，并不意味着调用时就传两个参数。你可以传一个、三个，甚至一个也不传，解释器都不会报错。</p>
<div class="hint-container tip">
<p class="hint-container-title">提示</p>
<p>之所以会这样，主要是因为 ECMAScript 函数的参数在内部表现为一个数组。但函数并不关心这个数组中包含什么。如果数组中什么也没有，那没问题；如果数组的元素超出了要求，那也没问题。</p>
<p>事实上，在使用 <code>function</code> 关键字定义（非箭头）函数时，可以在函数内部访问 <code>arguments</code> 对象（参见 ），从中取得传进来的每个参数值。</p>
</div>
<div class="hint-container warning">
<p class="hint-container-title">注意</p>
<p>ECMAScript 中的所有参数都按值传递的。不可能按引用传递参数。如果把对象作为参数传递，那么传递的值就是这个对象的引用，详见 。</p>
</div>
<h2>无重载</h2>
<p>ECMAScript 中，函数的重载是不允许的，只能有一个函数签名。</p>
<p>而在 TypeScript 中，可以有函数重载。一个函数可以有多个不同的签名，但只有一个具体的实现。这种机制允许一个函数根据不同的参数类型或数量来执行不同的逻辑。</p>
<p>重载函数在定义时，先列出多个函数签名，然后提供一个具体的实现函数，该实现函数根据传入的参数执行相应的操作。</p>
<div class="language-typescript" data-ext="ts" data-title="ts"><pre class="language-typescript"><code><span class="token keyword">function</span> <span class="token function">getUserInfo</span><span class="token punctuation">(</span>value<span class="token operator">:</span> <span class="token builtin">number</span><span class="token punctuation">)</span><span class="token operator">:</span> User <span class="token operator">|</span> <span class="token keyword">undefined</span>
<span class="token keyword">function</span> <span class="token function">getUserInfo</span><span class="token punctuation">(</span>value<span class="token operator">:</span> <span class="token builtin">string</span><span class="token punctuation">)</span><span class="token operator">:</span> User<span class="token punctuation">[</span><span class="token punctuation">]</span>
<span class="token keyword">function</span> <span class="token function">getUserInfo</span><span class="token punctuation">(</span>value<span class="token operator">:</span> <span class="token builtin">number</span> <span class="token operator">|</span> <span class="token builtin">string</span><span class="token punctuation">)</span><span class="token operator">:</span> User <span class="token operator">|</span> User<span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token operator">|</span> <span class="token keyword">undefined</span> <span class="token punctuation">{</span>
  <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token keyword">typeof</span> value <span class="token operator">===</span> <span class="token string">'number'</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">return</span> userList<span class="token punctuation">.</span><span class="token function">find</span><span class="token punctuation">(</span><span class="token punctuation">(</span>item<span class="token punctuation">)</span> <span class="token operator">=&gt;</span> item<span class="token punctuation">.</span>id <span class="token operator">===</span> value<span class="token punctuation">)</span>
  <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>
    <span class="token keyword">return</span> userList<span class="token punctuation">.</span><span class="token function">filter</span><span class="token punctuation">(</span><span class="token punctuation">(</span>item<span class="token punctuation">)</span> <span class="token operator">=&gt;</span> item<span class="token punctuation">.</span>grades <span class="token operator">===</span> value<span class="token punctuation">)</span>
  <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre></div><h2>默认参数</h2>
<p>在函数定义中的参数后面用 <code>=</code> 就可以为参数赋一个默认值：</p>
<div class="language-javascript" data-ext="js" data-title="js"><pre class="language-javascript"><code><span class="token keyword">function</span> <span class="token function">makeKing</span><span class="token punctuation">(</span>name <span class="token operator">=</span> <span class="token string">'Henry'</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token keyword">return</span> <span class="token template-string"><span class="token template-punctuation string">`</span><span class="token string">King </span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">${</span>name<span class="token interpolation-punctuation punctuation">}</span></span><span class="token string"> VIII</span><span class="token template-punctuation string">`</span></span>
<span class="token punctuation">}</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token function">makeKing</span><span class="token punctuation">(</span><span class="token string">'Louis'</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token comment">// 'King Louis VIII'</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token function">makeKing</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token comment">// 'King Henry VIII'</span>
</code></pre></div><h2>参数扩展和收集</h2>
<h3>扩展参数</h3>
<p>对可迭代对象应用扩展操作符，并将其作为一个参数传入，可以将可迭代对象拆分，并将迭代返回的每个值单独传入。</p>
<div class="language-javascript" data-ext="js" data-title="js"><pre class="language-javascript"><code><span class="token keyword">let</span> values <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">]</span>

<span class="token keyword">function</span> <span class="token function">getSum</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token keyword">let</span> sum <span class="token operator">=</span> <span class="token number">0</span>
  <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">let</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> arguments<span class="token punctuation">.</span>length<span class="token punctuation">;</span> <span class="token operator">++</span>i<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    sum <span class="token operator">+=</span> arguments<span class="token punctuation">[</span>i<span class="token punctuation">]</span>
  <span class="token punctuation">}</span>
  <span class="token keyword">return</span> sum
<span class="token punctuation">}</span>

console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token function">getSum</span><span class="token punctuation">(</span><span class="token operator">...</span>values<span class="token punctuation">)</span><span class="token punctuation">)</span>
</code></pre></div><h3>收集参数</h3>
<p>在构思函数定义时，可以使用扩展操作符把不同长度的独立参数组合为一个数组。这有点类似 <code>arguments</code> 对象的构造机制，只不过收集参数的结果会得到一个 Array 实例。</p>
<p>且收集参数只能放在最后一个参数位置：</p>
<div class="language-javascript" data-ext="js" data-title="js"><pre class="language-javascript"><code><span class="token keyword">function</span> <span class="token function">ignoreFirst</span><span class="token punctuation">(</span><span class="token parameter">firstValue<span class="token punctuation">,</span> <span class="token operator">...</span>values</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>values<span class="token punctuation">)</span>
<span class="token punctuation">}</span>
<span class="token function">ignoreFirst</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token comment">// []</span>
<span class="token function">ignoreFirst</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span> <span class="token comment">// []</span>
<span class="token function">ignoreFirst</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">)</span> <span class="token comment">// [2]</span>
<span class="token function">ignoreFirst</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">)</span> <span class="token comment">// [2, 3]</span>
</code></pre></div><h2>函数声明和函数表达式</h2>
<p>函数声明会在任何代码执行之前先被读取并添加到执行上下文，函数表达式不会。</p>
<div class="language-javascript" data-ext="js" data-title="js"><pre class="language-javascript"><code>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token function">sum1</span><span class="token punctuation">(</span><span class="token number">10</span><span class="token punctuation">,</span> <span class="token number">10</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
<span class="token keyword">function</span> <span class="token function">sum1</span><span class="token punctuation">(</span><span class="token parameter">a<span class="token punctuation">,</span> b</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token keyword">return</span> a <span class="token operator">+</span> b
<span class="token punctuation">}</span>

console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token function">sum2</span><span class="token punctuation">(</span><span class="token number">10</span><span class="token punctuation">,</span> <span class="token number">10</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token comment">// 报错</span>
<span class="token keyword">let</span> <span class="token function-variable function">sum2</span> <span class="token operator">=</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token parameter">num1<span class="token punctuation">,</span> num2</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token keyword">return</span> num1 <span class="token operator">+</span> num2
<span class="token punctuation">}</span>
</code></pre></div><h2>函数作为值</h2>
<p>因为函数名在 ECMAScript 中就是变量，所以函数可以用在任何可以使用变量的地方。这意味着不仅可以把函数作为参数传给另一个函数，而且还可以在一个函数中返回另一个函数。</p>
<h2>函数内部</h2>
<p>在 ECMAScript 5 中，函数内部存在两个特殊的对象：<code>arguments</code> 和 <code>this</code>。ECMAScript 6 又新增了 <code>new.target</code> 属性。</p>
<h3>arguments</h3>
<p><code>arguments</code> 对象还有一个 <code>callee</code> 属性，是一个指向 <code>arguments</code> 对象所在函数的指针。</p>
<div class="language-javascript" data-ext="js" data-title="js"><pre class="language-javascript"><code><span class="token keyword">function</span> <span class="token function">factorial</span><span class="token punctuation">(</span><span class="token parameter">num</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token keyword">if</span> <span class="token punctuation">(</span>num <span class="token operator">&lt;=</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">return</span> <span class="token number">1</span>
  <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>
    <span class="token keyword">return</span> num <span class="token operator">*</span> <span class="token function">factorial</span><span class="token punctuation">(</span>num <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">)</span>
  <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre></div><p>这个函数要正确执行就必须保证函数名是 <code>factorial</code>，从而导致了紧密耦合。使用 <code>arguments.callee</code> 就可以让函数逻辑与函数名解耦：</p>
<div class="language-javascript" data-ext="js" data-title="js"><pre class="language-javascript"><code><span class="token keyword">function</span> <span class="token function">factorial</span><span class="token punctuation">(</span><span class="token parameter">num</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token keyword">if</span> <span class="token punctuation">(</span>num <span class="token operator">&lt;=</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">return</span> <span class="token number">1</span>
  <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>
    <span class="token keyword">return</span> num <span class="token operator">*</span> arguments<span class="token punctuation">.</span><span class="token function">callee</span><span class="token punctuation">(</span>num <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">)</span>
  <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre></div><h3>this</h3>
<p>详见 。</p>
<h3>new.target</h3>
<p>ECMAScript 中的函数始终可以作为构造函数实例化一个新对象，也可以作为普通函数被调用。ECMAScript 6 新增了检测函数是否使用 <code>new</code> 关键字调用的 <code>new.target</code> 属性。</p>
<p>如果函数是正常调用的，<code>new.target</code> 将返回 <code>undefined</code>，如果函数被 <code>new</code> 关键字调用，则 <code>new.target</code> 将返回这个函数。</p>
<div class="language-javascript" data-ext="js" data-title="js"><pre class="language-javascript"><code><span class="token keyword">function</span> <span class="token function">King</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span><span class="token keyword">new</span><span class="token punctuation">.</span>target<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">throw</span> <span class="token string">'King must be instantiated using "new"'</span>
  <span class="token punctuation">}</span>
  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'King instantiated using "new"'</span><span class="token punctuation">)</span>
<span class="token punctuation">}</span>
<span class="token keyword">new</span> <span class="token class-name">King</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token comment">// King instantiated using "new"</span>
<span class="token function">King</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token comment">// Error: King must be instantiated using "new"</span>
</code></pre></div><h2>函数属性和方法</h2>
<p>ECMAScript 中的函数是对象，因此有属性和方法。每个函数都有两个属性：<code>length</code> 和 <code>prototype</code>。其中，<code>length</code> 属性保存函数定义的命名参数的个数，<code>prototype</code> 属性保存函数的原型对象。</p>
<p>函数还有两个方法：<code>apply()</code> 和 <code>call()</code>。这两个方法都会以指定的 <code>this</code> 值来调用函数，即会设置调用函数时函数体内 <code>this</code> 对象的值。</p>
<h2>尾调用优化</h2>
<p>ECMAScript 6 规范新增了一项内存管理优化机制，让 JavaScript 引擎在满足条件时可以重用栈帧。</p>
<p>具体来说，这项优化非常适合「尾调用」，即外部函数的返回值是一个内部函数的返回值。比如：</p>
<div class="language-javascript" data-ext="js" data-title="js"><pre class="language-javascript"><code><span class="token keyword">function</span> <span class="token function">outerFunction</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token keyword">return</span> <span class="token function">innerFunction</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token comment">// 尾调用</span>
<span class="token punctuation">}</span>
</code></pre></div><p>在 ES6 优化之前，执行这个例子会在内存中发生如下操作。</p>
<ol>
<li>执行到 <code>outerFunction</code> 函数体，第一个栈帧被推到栈上。</li>
<li>执行 <code>outerFunction</code> 函数体，到 <code>return</code> 语句。计算返回值必须先计算 <code>innerFunction</code>。</li>
<li>执行到 <code>innerFunction</code> 函数体，第二个栈帧被推到栈上。</li>
<li>执行 <code>innerFunction</code> 函数体，计算其返回值。</li>
<li>将返回值传回 <code>outerFunction</code>，然后 <code>outerFunction</code> 再返回值。</li>
<li>将栈帧弹出栈外。</li>
</ol>
<p>在 ES6 优化之后，执行这个例子会在内存中发生如下操作。</p>
<ol>
<li>执行到 outerFunction 函数体，第一个栈帧被推到栈上。</li>
<li>执行 outerFunction 函数体，到达 return 语句。为求值返回语句，必须先求值 innerFunction。</li>
<li>引擎发现把第一个栈帧弹出栈外也没问题，因为 innerFunction 的返回值也是 outerFunction<br>
的返回值。</li>
<li>弹出 outerFunction 的栈帧。</li>
<li>执行到 innerFunction 函数体，栈帧被推到栈上。</li>
<li>执行 innerFunction 函数体，计算其返回值。</li>
<li>将 innerFunction 的栈帧弹出栈外。</li>
</ol>
<p>很明显，第一种情况下每多调用一次嵌套函数，就会多增加一个栈帧。而第二种情况下无论调用多少次嵌套函数，都只有一个栈帧。这就是 ES6 尾调用优化的关键：如果函数的逻辑允许基于尾调用将其<br>
销毁，则引擎就会那么做。</p>
<div class="hint-container tip">
<p class="hint-container-title">提示</p>
<p>现在还没有办法测试尾调用优化是否起作用。不过，因为这是 ES6 规范所规定的，兼容的浏览器实现都能保证在代码满足条件的情况下应用这个优化。</p>
</div>
<h3>条件</h3>
<p>尾调用优化的条件就是确定外部栈帧真的没有必要存在了。涉及的条件如下：</p>
<ul>
<li>严格模式；</li>
<li>外部函数的返回值是对尾调用函数的调用；</li>
<li>尾调用函数返回后不需要执行额外的逻辑；</li>
<li>尾调用函数不是引用外部函数作用域中自由变量的闭包。</li>
</ul>
<p>下面展示了几个违反上述条件的函数，因此都不符号尾调用优化的要求：</p>
<div class="language-javascript" data-ext="js" data-title="js"><pre class="language-javascript"><code><span class="token string">'use strict'</span>
<span class="token comment">// 无优化：尾调用没有返回</span>
<span class="token keyword">function</span> <span class="token function">outerFunction</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token function">innerFunction</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
<span class="token punctuation">}</span>
<span class="token comment">// 无优化：尾调用没有直接返回</span>
<span class="token keyword">function</span> <span class="token function">outerFunction</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token keyword">let</span> innerFunctionResult <span class="token operator">=</span> <span class="token function">innerFunction</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
  <span class="token keyword">return</span> innerFunctionResult
<span class="token punctuation">}</span>
<span class="token comment">// 无优化：尾调用返回后必须转型为字符串</span>
<span class="token keyword">function</span> <span class="token function">outerFunction</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token keyword">return</span> <span class="token function">innerFunction</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
<span class="token punctuation">}</span>
<span class="token comment">// 无优化：尾调用是一个闭包</span>
<span class="token keyword">function</span> <span class="token function">outerFunction</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token keyword">let</span> foo <span class="token operator">=</span> <span class="token string">'bar'</span>
  <span class="token keyword">function</span> <span class="token function">innerFunction</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">return</span> foo
  <span class="token punctuation">}</span>
  <span class="token keyword">return</span> <span class="token function">innerFunction</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
<span class="token punctuation">}</span>
</code></pre></div><p>下面是几个符合尾调用优化条件的例子：</p>
<div class="language-javascript" data-ext="js" data-title="js"><pre class="language-javascript"><code><span class="token string">'use strict'</span>
<span class="token comment">// 有优化：栈帧销毁前执行参数计算</span>
<span class="token keyword">function</span> <span class="token function">outerFunction</span><span class="token punctuation">(</span><span class="token parameter">a<span class="token punctuation">,</span> b</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token keyword">return</span> <span class="token function">innerFunction</span><span class="token punctuation">(</span>a <span class="token operator">+</span> b<span class="token punctuation">)</span>
<span class="token punctuation">}</span>
<span class="token comment">// 有优化：初始返回值不涉及栈帧</span>
<span class="token keyword">function</span> <span class="token function">outerFunction</span><span class="token punctuation">(</span><span class="token parameter">a<span class="token punctuation">,</span> b</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token keyword">if</span> <span class="token punctuation">(</span>a <span class="token operator">&lt;</span> b<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">return</span> a
  <span class="token punctuation">}</span>
  <span class="token keyword">return</span> <span class="token function">innerFunction</span><span class="token punctuation">(</span>a <span class="token operator">+</span> b<span class="token punctuation">)</span>
<span class="token punctuation">}</span>
<span class="token comment">// 有优化：两个内部函数都在尾部</span>
<span class="token keyword">function</span> <span class="token function">outerFunction</span><span class="token punctuation">(</span><span class="token parameter">condition</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token keyword">return</span> condition <span class="token operator">?</span> <span class="token function">innerFunctionA</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">:</span> <span class="token function">innerFunctionB</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
<span class="token punctuation">}</span>
</code></pre></div><h3>尾调用优化</h3>
<p>下面是一个通过递归计算斐波纳契数列的函数：</p>
<div class="language-javascript" data-ext="js" data-title="js"><pre class="language-javascript"><code><span class="token keyword">function</span> <span class="token function">fib</span><span class="token punctuation">(</span><span class="token parameter">n</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token keyword">if</span> <span class="token punctuation">(</span>n <span class="token operator">&lt;</span> <span class="token number">2</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">return</span> n
  <span class="token punctuation">}</span>
  <span class="token keyword">return</span> <span class="token function">fib</span><span class="token punctuation">(</span>n <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token function">fib</span><span class="token punctuation">(</span>n <span class="token operator">-</span> <span class="token number">2</span><span class="token punctuation">)</span>
<span class="token punctuation">}</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token function">fib</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token comment">// 0</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token function">fib</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token comment">// 1</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token function">fib</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token comment">// 1</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token function">fib</span><span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token comment">// 2</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token function">fib</span><span class="token punctuation">(</span><span class="token number">4</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token comment">// 3</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token function">fib</span><span class="token punctuation">(</span><span class="token number">5</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token comment">// 5</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token function">fib</span><span class="token punctuation">(</span><span class="token number">6</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token comment">// 8</span>
</code></pre></div><p>显然这个函数不符合尾调用优化的条件，因为返回语句中有一个相加的操作。结果，<code>fib(n)</code> 的栈帧数的内存复杂度是 <code>O(2n)</code>。</p>
<p>利用尾调用优化：</p>
<div class="language-javascript" data-ext="js" data-title="js"><pre class="language-javascript"><code><span class="token string">'use strict'</span>
<span class="token comment">// 基础框架</span>
<span class="token keyword">function</span> <span class="token function">fib</span><span class="token punctuation">(</span><span class="token parameter">n</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token keyword">return</span> <span class="token function">fibImpl</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> n<span class="token punctuation">)</span>
<span class="token punctuation">}</span>
<span class="token comment">// 执行递归</span>
<span class="token keyword">function</span> <span class="token function">fibImpl</span><span class="token punctuation">(</span><span class="token parameter">a<span class="token punctuation">,</span> b<span class="token punctuation">,</span> n</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token keyword">if</span> <span class="token punctuation">(</span>n <span class="token operator">===</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">return</span> a
  <span class="token punctuation">}</span>
  <span class="token keyword">return</span> <span class="token function">fibImpl</span><span class="token punctuation">(</span>b<span class="token punctuation">,</span> a <span class="token operator">+</span> b<span class="token punctuation">,</span> n <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">)</span>
<span class="token punctuation">}</span>
</code></pre></div><h2>闭包</h2>
<p>简而言之是指内部函数引用外部函数的变量，这个内部函数就是闭包。</p>
<p>虽然外部函数已经运行完毕，但由于闭包的存在，内部函数依然可以访问外部函数的变量，该变量不会被销毁。</p>
<div class="language-javascript" data-ext="js" data-title="js"><pre class="language-javascript"><code><span class="token keyword">function</span> <span class="token function">outerFunction</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token keyword">let</span> foo <span class="token operator">=</span> <span class="token string">'bar'</span>
  <span class="token keyword">return</span> <span class="token keyword">function</span> <span class="token function">innerFunction</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">return</span> foo
  <span class="token punctuation">}</span>
<span class="token punctuation">}</span>

<span class="token keyword">const</span> fn <span class="token operator">=</span> <span class="token function">outerFunction</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token function">fn</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token comment">// 'bar'</span>
</code></pre></div><div class="hint-container tip">
<p class="hint-container-title">提示</p>
<p>一些闭包场景：</p>
<ul>
<li>节流防抖</li>
<li>函数柯里化</li>
<li>链式调用</li>
<li>迭代器</li>
<li>发布订阅</li>
</ul>
<p>因为闭包会保留它们包含函数的作用域，所以比其他函数更占用内存。过度使用闭包可能导致内存过度占用，因此建议仅在十分必要时使用。</p>
</div>
<h2>立即执行函数（IIFE）</h2>
<p>立即调用的匿名函数又被称作立即调用的函数表达式（IIFE，Immediately Invoked Function Expression）。它类似于函数声明，但由于被包含在括号中，所以会被解释为函数表达式。紧跟在第一组括号后面的第二组括号会立即调用前面的函数表达式。</p>
<div class="language-javascript" data-ext="js" data-title="js"><pre class="language-javascript"><code><span class="token punctuation">;</span><span class="token punctuation">(</span><span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token comment">// 块级作用域</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
</code></pre></div><p>具体应用见 。</p>
<h2>私有变量</h2>
<p>严格来讲，JavaScript 没有私有成员的概念，所有对象属性都公有的。不过，倒是有「私有变量」的概念。任何定义在函数或块中的变量，都可以认为是私有的，因为在这个函数或块的外部无法访问其中的变量。私有变量包括函数参数、局部变量，以及函数内部定义的其他函数。</p>
<div class="language-javascript" data-ext="js" data-title="js"><pre class="language-javascript"><code><span class="token keyword">function</span> <span class="token function">add</span><span class="token punctuation">(</span><span class="token parameter">num1<span class="token punctuation">,</span> num2</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token keyword">let</span> sum <span class="token operator">=</span> num1 <span class="token operator">+</span> num2
  <span class="token keyword">return</span> sum
<span class="token punctuation">}</span>
</code></pre></div><p>在这个函数中，函数 <code>add()</code> 有 3 个私有变量：<code>num1</code>、<code>num2</code> 和 <code>sum</code>。这几个变量只能在函数内部使用，不能在函数外部访问。如果这个函数中创建了一个闭包，则这个闭包能通过其作用域链访问其外部的这 3 个变量。基于这一点，就可以创建出能够访问私有变量的公有方法。</p>
<p><strong>特权方法（privileged method）</strong> 是能够访问函数私有变量（及私有函数）的公有方法。在对象上有两种方式创建特权方法。第一种是在构造函数中实现，比如：</p>
<div class="language-javascript" data-ext="js" data-title="js"><pre class="language-javascript"><code><span class="token keyword">function</span> <span class="token function">MyObject</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token comment">// 私有变量和私有函数</span>
  <span class="token keyword">let</span> privateVariable <span class="token operator">=</span> <span class="token number">10</span>
  <span class="token keyword">function</span> <span class="token function">privateFunction</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">return</span> <span class="token boolean">false</span>
  <span class="token punctuation">}</span>
  <span class="token comment">// 特权方法</span>
  <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function-variable function">publicMethod</span> <span class="token operator">=</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    privateVariable<span class="token operator">++</span>
    <span class="token keyword">return</span> <span class="token function">privateFunction</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
  <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre></div><p>这里实际上创建了一个闭包，在创建实例后，只能通过 <code>MyObject.prototype.publicMethod()</code> 调用 <code>privateVariable</code> 和 <code>privateFunction</code>。</p>
<h3>静态私有变量</h3>
<p>该模式不常用，简单看看例子：</p>
<div class="language-javascript" data-ext="js" data-title="js"><pre class="language-javascript"><code><span class="token punctuation">;</span><span class="token punctuation">(</span><span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token comment">// 私有变量和私有函数</span>
  <span class="token keyword">let</span> privateVariable <span class="token operator">=</span> <span class="token number">10</span>
  <span class="token keyword">function</span> <span class="token function">privateFunction</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">return</span> <span class="token boolean">false</span>
  <span class="token punctuation">}</span>
  <span class="token comment">// 构造函数</span>
  <span class="token function-variable function">MyObject</span> <span class="token operator">=</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token punctuation">}</span>
  <span class="token comment">// 公有和特权方法</span>
  <span class="token class-name">MyObject</span><span class="token punctuation">.</span>prototype<span class="token punctuation">.</span><span class="token function-variable function">publicMethod</span> <span class="token operator">=</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    privateVariable<span class="token operator">++</span>
    <span class="token keyword">return</span> <span class="token function">privateFunction</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
  <span class="token punctuation">}</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
</code></pre></div><div class="hint-container warning">
<p class="hint-container-title">注意</p>
<p>使用闭包和私有变量会导致作用域链变长，作用域链越长，则查找变量所需的时间也越多。</p>
</div>
<h3>模块模式</h3>
<p>模块模式，则在一个单例对象上实现了相同的隔离和封装。单例对象（singleton）就是只有一个实例的对象。按照惯例，JavaScript 是通过对象字面量来创建单例对象的：</p>
<div class="language-javascript" data-ext="js" data-title="js"><pre class="language-javascript"><code><span class="token keyword">let</span> singleton <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token comment">// 私有变量和私有函数</span>
  <span class="token keyword">let</span> privateVariable <span class="token operator">=</span> <span class="token number">10</span>
  <span class="token keyword">function</span> <span class="token function">privateFunction</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">return</span> <span class="token boolean">false</span>
  <span class="token punctuation">}</span>
  <span class="token comment">// 特权/公有方法和属性</span>
  <span class="token keyword">return</span> <span class="token punctuation">{</span>
    <span class="token literal-property property">publicProperty</span><span class="token operator">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span>
    <span class="token function">publicMethod</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
      privateVariable<span class="token operator">++</span>
      <span class="token keyword">return</span> <span class="token function">privateFunction</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
    <span class="token punctuation">}</span>
  <span class="token punctuation">}</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
</code></pre></div><div class="hint-container tip">
<p class="hint-container-title">提示</p>
<p>类似一些 hooks 的封装。</p>
</div>
<h3>模块增强模式</h3>
<p>另一个利用模块模式的做法是在返回对象之前先对其进行增强。这适合单例对象需要是某个特定类型的实例，但又必须给它添加额外属性或方法的场景。</p>
<div class="language-javascript" data-ext="js" data-title="js"><pre class="language-javascript"><code><span class="token keyword">let</span> singleton <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token comment">// 私有变量和私有函数</span>
  <span class="token keyword">let</span> privateVariable <span class="token operator">=</span> <span class="token number">10</span>
  <span class="token keyword">function</span> <span class="token function">privateFunction</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">return</span> <span class="token boolean">false</span>
  <span class="token punctuation">}</span>
  <span class="token comment">// 创建对象</span>
  <span class="token keyword">let</span> object <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">CustomType</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
  <span class="token comment">// 添加特权/公有属性和方法</span>
  object<span class="token punctuation">.</span>publicProperty <span class="token operator">=</span> <span class="token boolean">true</span>
  object<span class="token punctuation">.</span><span class="token function-variable function">publicMethod</span> <span class="token operator">=</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    privateVariable<span class="token operator">++</span>
    <span class="token keyword">return</span> <span class="token function">privateFunction</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
  <span class="token punctuation">}</span>
  <span class="token comment">// 返回对象</span>
  <span class="token keyword">return</span> object
<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
</code></pre></div>]]></content>
    <category term="JavaScript"/>
    <published>2024-07-08T00:00:00.000Z</published>
  </entry>
  <entry>
    <title type="text">this 指向</title>
    <id>https://dribble-njr.github.io/blog/blog/frontend/basic/javascript/016-this.html</id>
    <link href="https://dribble-njr.github.io/blog/blog/frontend/basic/javascript/016-this.html"/>
    <updated>2024-08-07T08:19:27.000Z</updated>
    <summary type="html"><![CDATA[<p>在常见的编程语言中，几乎都有 <code>this</code> 关键字，但是 JavaScript 中的 <code>this</code> 和常见的面向对象语言中的 <code>this</code> 不太一样：</p>
<ul>
<li>常见的面向对象的编程语言中，如 Java、C++、Swift 等，<code>this</code> 通常只会出现在类的方法中，<code>this</code> 代表的是当前调用对象；</li>
<li>但是 JavaScript 中的 <code>this</code> 更加灵活，无论是它出现的位置还是代表的含义。</li>
</ul>
<p>在  中提到过：上下文中会包含 <code>this</code> 指向，那么不同的上下文的 <code>this</code> 指向肯定会不同。下面就来具体看看。</p>]]></summary>
    <content type="html"><![CDATA[<p>在常见的编程语言中，几乎都有 <code>this</code> 关键字，但是 JavaScript 中的 <code>this</code> 和常见的面向对象语言中的 <code>this</code> 不太一样：</p>
<ul>
<li>常见的面向对象的编程语言中，如 Java、C++、Swift 等，<code>this</code> 通常只会出现在类的方法中，<code>this</code> 代表的是当前调用对象；</li>
<li>但是 JavaScript 中的 <code>this</code> 更加灵活，无论是它出现的位置还是代表的含义。</li>
</ul>
<p>在  中提到过：上下文中会包含 <code>this</code> 指向，那么不同的上下文的 <code>this</code> 指向肯定会不同。下面就来具体看看。</p>
<h2>全局上下文</h2>
<p>无论是否处于严格模式，全局上下文中的 <code>this</code> 都指向全局对象。</p>
<div class="language-javascript" data-ext="js" data-title="js"><pre class="language-javascript"><code>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token keyword">this</span> <span class="token operator">===</span> window<span class="token punctuation">)</span> <span class="token comment">// true</span>
</code></pre></div><h2>函数上下文</h2>
<p>在函数上下文中，<code>this</code> 指向取决于函数的调用方式，一共分为四种。</p>
<ul>
<li>默认绑定</li>
<li>隐式绑定</li>
<li>显式绑定</li>
<li>new 绑定</li>
</ul>
<h3>默认绑定</h3>
<p>默认绑定即为独立函数调用，可以理解为没有绑定到某个对象上进行调用。</p>
<p>严格模式和非严格模式下 <code>this</code> 的指向会有所不同。</p>
<p>非严格模式下，独立调用函数的 <code>this</code> 指向为全局对象，在浏览器中为 <code>window</code>，node 中为 <code>global</code>。</p>
<div class="language-javascript" data-ext="js" data-title="js"><pre class="language-javascript"><code><span class="token keyword">function</span> <span class="token function">f1</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token keyword">return</span> <span class="token keyword">this</span>
<span class="token punctuation">}</span>

<span class="token function">f1</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">===</span> window <span class="token comment">// true</span>
</code></pre></div><p>而严格模式下，独立调用函数的 <code>this</code> 指向为 <code>undefined</code>。</p>
<div class="language-javascript" data-ext="js" data-title="js"><pre class="language-javascript"><code><span class="token keyword">function</span> <span class="token function">f2</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token string">'use strict'</span> <span class="token comment">// 这里是严格模式</span>
  <span class="token keyword">return</span> <span class="token keyword">this</span>
<span class="token punctuation">}</span>

<span class="token function">f2</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">===</span> <span class="token keyword">undefined</span> <span class="token comment">// true</span>
</code></pre></div><h3>隐式绑定（对象函数调用）</h3>
<p>通过对象发起的函数调用，<code>this</code> 会指向调用者本身。</p>
<div class="language-javascript" data-ext="js" data-title="js"><pre class="language-javascript"><code><span class="token keyword">function</span> <span class="token function">foo</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">)</span>
<span class="token punctuation">}</span>

<span class="token comment">// 案例一</span>
<span class="token keyword">var</span> obj <span class="token operator">=</span> <span class="token punctuation">{</span>
  <span class="token literal-property property">name</span><span class="token operator">:</span> <span class="token string">'why'</span><span class="token punctuation">,</span>
  <span class="token literal-property property">foo</span><span class="token operator">:</span> foo
<span class="token punctuation">}</span>

obj<span class="token punctuation">.</span><span class="token function">foo</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token comment">// obj 对象发起的函数调用，因此 this 指向 obj 对象</span>

<span class="token comment">// 案例二</span>
<span class="token keyword">var</span> obj <span class="token operator">=</span> <span class="token punctuation">{</span>
  <span class="token literal-property property">name</span><span class="token operator">:</span> <span class="token string">'wang'</span><span class="token punctuation">,</span>
  <span class="token function-variable function">eating</span><span class="token operator">:</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>name <span class="token operator">+</span> <span class="token string">'在吃东西'</span><span class="token punctuation">)</span>
  <span class="token punctuation">}</span>
<span class="token punctuation">}</span>

obj<span class="token punctuation">.</span><span class="token function">eating</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token comment">// wang在吃东西</span>

<span class="token keyword">var</span> fn <span class="token operator">=</span> obj<span class="token punctuation">.</span>eating
<span class="token function">fn</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token comment">// undefined在吃东西 -&gt; 没有对象调用，还是默认绑定</span>

<span class="token comment">// 案例三</span>
<span class="token keyword">var</span> obj1 <span class="token operator">=</span> <span class="token punctuation">{</span>
  <span class="token literal-property property">name</span><span class="token operator">:</span> <span class="token string">'obj1'</span><span class="token punctuation">,</span>
  <span class="token function-variable function">foo</span><span class="token operator">:</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">)</span>
  <span class="token punctuation">}</span>
<span class="token punctuation">}</span>

<span class="token keyword">var</span> obj2 <span class="token operator">=</span> <span class="token punctuation">{</span>
  <span class="token literal-property property">name</span><span class="token operator">:</span> <span class="token string">'obj2'</span><span class="token punctuation">,</span>
  <span class="token literal-property property">bar</span><span class="token operator">:</span> obj1<span class="token punctuation">.</span>foo
<span class="token punctuation">}</span>

obj2<span class="token punctuation">.</span><span class="token function">bar</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token comment">// obj2</span>
</code></pre></div><h3>显示绑定</h3>
<p>前面的隐式绑定存在一个缺点：对象内部必须有一个函数的引用，否则会报错。</p>
<p>如果我们不希望在 <strong>对象内部</strong> 包含这个函数的引用，同时又希望在这个对象上强制调用，那么应该怎么办？</p>
<p>JavaScript 提供了三个改变 this 指向的函数：<code>call()</code>、<code>apply()</code> 和 <code>bind()</code>。它们都能改变 this 指向，但是都有一些细微的区别。</p>
<h4><code>Function.prototype.call()</code></h4>
<p>语法：第一个参数为 this 值（可选，若省略或指定为 <code>null</code> 或 <code>undefined</code> 则为全局对象），后面为参数列表。<code>call()</code> 会立即调用该函数，因此返回值为该函数的返回值。</p>
<div class="language-javascript" data-ext="js" data-title="js"><pre class="language-javascript"><code><span class="token keyword">function</span><span class="token punctuation">.</span><span class="token function">call</span><span class="token punctuation">(</span>thisArg<span class="token punctuation">[</span><span class="token punctuation">,</span> arg1<span class="token punctuation">[</span><span class="token punctuation">,</span> arg2<span class="token punctuation">[</span><span class="token punctuation">,</span> <span class="token operator">...</span><span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">)</span>
</code></pre></div><p>例子：</p>
<div class="language-javascript" data-ext="js" data-title="js"><pre class="language-javascript"><code><span class="token keyword">function</span> <span class="token function">foo</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'函数被调用了'</span><span class="token punctuation">,</span> <span class="token keyword">this</span><span class="token punctuation">)</span>
<span class="token punctuation">}</span>

<span class="token keyword">var</span> obj <span class="token operator">=</span> <span class="token punctuation">{</span>
  <span class="token literal-property property">name</span><span class="token operator">:</span> <span class="token string">'obj'</span>
<span class="token punctuation">}</span>

<span class="token function">foo</span><span class="token punctuation">.</span><span class="token function">call</span><span class="token punctuation">(</span>obj<span class="token punctuation">)</span> <span class="token comment">// 函数被调用了 { name: 'obj' }</span>

<span class="token keyword">function</span> <span class="token function">sum</span><span class="token punctuation">(</span><span class="token parameter">num1<span class="token punctuation">,</span> num2<span class="token punctuation">,</span> num3</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>num1 <span class="token operator">+</span> num2 <span class="token operator">+</span> num3<span class="token punctuation">,</span> <span class="token keyword">this</span><span class="token punctuation">)</span>
<span class="token punctuation">}</span>

<span class="token function">sum</span><span class="token punctuation">.</span><span class="token function">call</span><span class="token punctuation">(</span><span class="token string">'call'</span><span class="token punctuation">,</span> <span class="token number">20</span><span class="token punctuation">,</span> <span class="token number">30</span><span class="token punctuation">,</span> <span class="token number">40</span><span class="token punctuation">)</span> <span class="token comment">// 90 [String: 'call']</span>
</code></pre></div><h4><code>Function.prototype.apply()</code></h4>
<p>语法：第一个参数为 this 值（可选，若省略或指定为 <code>null</code> 或 <code>undefined</code> 则为全局对象），后面为参数列表。和 <code>call()</code> 一样，<code>apply()</code>会立即调用该函数，因此返回值为该函数的返回值。</p>
<div class="language-javascript" data-ext="js" data-title="js"><pre class="language-javascript"><code><span class="token keyword">function</span><span class="token punctuation">.</span><span class="token function">aplly</span><span class="token punctuation">(</span>thisArg<span class="token punctuation">,</span> <span class="token punctuation">[</span>argsArray<span class="token punctuation">]</span><span class="token punctuation">)</span>
</code></pre></div><p>例子：</p>
<div class="language-javascript" data-ext="js" data-title="js"><pre class="language-javascript"><code><span class="token keyword">function</span> <span class="token function">foo</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'函数被调用了'</span><span class="token punctuation">,</span> <span class="token keyword">this</span><span class="token punctuation">)</span>
<span class="token punctuation">}</span>

<span class="token keyword">var</span> obj <span class="token operator">=</span> <span class="token punctuation">{</span>
  <span class="token literal-property property">name</span><span class="token operator">:</span> <span class="token string">'obj'</span>
<span class="token punctuation">}</span>

<span class="token function">foo</span><span class="token punctuation">.</span><span class="token function">apply</span><span class="token punctuation">(</span>obj<span class="token punctuation">)</span> <span class="token comment">// 函数被调用了 { name: 'obj' }</span>

<span class="token keyword">function</span> <span class="token function">sum</span><span class="token punctuation">(</span><span class="token parameter">num1<span class="token punctuation">,</span> num2<span class="token punctuation">,</span> num3</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>num1 <span class="token operator">+</span> num2 <span class="token operator">+</span> num3<span class="token punctuation">,</span> <span class="token keyword">this</span><span class="token punctuation">)</span>
<span class="token punctuation">}</span>

<span class="token function">sum</span><span class="token punctuation">.</span><span class="token function">apply</span><span class="token punctuation">(</span><span class="token string">'call'</span><span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token number">20</span><span class="token punctuation">,</span> <span class="token number">30</span><span class="token punctuation">,</span> <span class="token number">40</span><span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token comment">// 90 [String: 'call']</span>
</code></pre></div><h4><code>Function.prototype.bind()</code></h4>
<p>有时候我们不希望函数立即被执行，那么可以使用 <code>bind()</code>，它和 <code>call()</code>、<code>apply()</code> 不同，<code>bind()</code> <strong>不会</strong>立即调用该函数，返回值为改变 this 指向之后的函数。</p>
<p><code>bind()</code> 方法创建一个新的函数，在 <code>bind()</code> 被调用时，这个新函数的 this 被指定为 <code>bind()</code> 的第一个参数，而其余参数将作为新函数的参数，供调用时使用。</p>
<p>语法：第一个参数为 this 值（可选，若省略或指定为 <code>null</code> 或 <code>undefined</code> 则为全局对象），后面为参数列表。</p>
<div class="language-javascript" data-ext="js" data-title="js"><pre class="language-javascript"><code><span class="token keyword">function</span><span class="token punctuation">.</span><span class="token function">bind</span><span class="token punctuation">(</span>thisArg<span class="token punctuation">[</span><span class="token punctuation">,</span> arg1<span class="token punctuation">[</span><span class="token punctuation">,</span> arg2<span class="token punctuation">[</span><span class="token punctuation">,</span> <span class="token operator">...</span><span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">)</span>
</code></pre></div><p>例子：</p>
<div class="language-javascript" data-ext="js" data-title="js"><pre class="language-javascript"><code><span class="token keyword">function</span> <span class="token function">sum</span><span class="token punctuation">(</span><span class="token parameter">num1<span class="token punctuation">,</span> num2<span class="token punctuation">,</span> num3</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>num1 <span class="token operator">+</span> num2 <span class="token operator">+</span> num3<span class="token punctuation">,</span> <span class="token keyword">this</span><span class="token punctuation">)</span>
<span class="token punctuation">}</span>

<span class="token keyword">var</span> _bind <span class="token operator">=</span> <span class="token function">sum</span><span class="token punctuation">.</span><span class="token function">bind</span><span class="token punctuation">(</span><span class="token string">'bind'</span><span class="token punctuation">,</span> <span class="token number">20</span><span class="token punctuation">)</span>
<span class="token function">_bind</span><span class="token punctuation">(</span><span class="token number">30</span><span class="token punctuation">,</span> <span class="token number">40</span><span class="token punctuation">)</span> <span class="token comment">// 90 [String: 'bind']</span>
</code></pre></div><h3>new 绑定</h3>
<p>使用 new 操作符调用构造函数生成对象时，会自动执行以下操作：</p>
<ol>
<li>创建一个全新的对象；</li>
<li>这个对象的 <code>[[proto]]</code> 属性会被赋值为构造函数的 <code>prototype</code> 属性；</li>
<li>构造函数内部的 this 被赋值为这个对象（<strong>new 绑定</strong>）;</li>
<li>执行构造函数内部的代码；</li>
<li>如果构造函数返回非空对象，则返回该对象；否则返回刚才创建的新对象。</li>
</ol>
<p>在这个过程中就会执行 new 绑定。</p>
<div class="language-javascript" data-ext="js" data-title="js"><pre class="language-javascript"><code><span class="token keyword">function</span> <span class="token function">Person</span><span class="token punctuation">(</span><span class="token parameter">name</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token keyword">this</span><span class="token punctuation">.</span>name <span class="token operator">=</span> name

  <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function-variable function">sayName</span> <span class="token operator">=</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>name<span class="token punctuation">)</span>
  <span class="token punctuation">}</span>

  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">)</span> <span class="token comment">// Person { name: 'wang', sayName: [Function (anonymous)] }</span>
<span class="token punctuation">}</span>

<span class="token keyword">let</span> person <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Person</span><span class="token punctuation">(</span><span class="token string">'wang'</span><span class="token punctuation">)</span>
</code></pre></div><h2>优先级</h2>
<p>如果一个函数应用了多个规则，那么它们的优先级谁更高？</p>
<ol>
<li>
<p>默认绑定</p>
<p>毫无疑问，优先级最低</p>
</li>
<li>
<p>显式绑定高于隐式绑定</p>
<div class="language-javascript" data-ext="js" data-title="js"><pre class="language-javascript"><code><span class="token keyword">var</span> obj <span class="token operator">=</span> <span class="token punctuation">{</span>
  <span class="token literal-property property">name</span><span class="token operator">:</span> <span class="token string">'obj'</span><span class="token punctuation">,</span>
  <span class="token function-variable function">foo</span><span class="token operator">:</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">)</span>
  <span class="token punctuation">}</span>
<span class="token punctuation">}</span>

<span class="token comment">// 1.call/apply的显示绑定高于隐式绑定</span>
obj<span class="token punctuation">.</span><span class="token function">foo</span><span class="token punctuation">.</span><span class="token function">apply</span><span class="token punctuation">(</span><span class="token string">'abc'</span><span class="token punctuation">)</span> <span class="token comment">// [String: 'abc']</span>
obj<span class="token punctuation">.</span><span class="token function">foo</span><span class="token punctuation">.</span><span class="token function">call</span><span class="token punctuation">(</span><span class="token string">'abc'</span><span class="token punctuation">)</span> <span class="token comment">// [String: 'abc']</span>

<span class="token comment">// 2.bind的优先级高于隐式绑定</span>
<span class="token keyword">var</span> bar <span class="token operator">=</span> obj<span class="token punctuation">.</span><span class="token function">foo</span><span class="token punctuation">.</span><span class="token function">bind</span><span class="token punctuation">(</span><span class="token string">'abc'</span><span class="token punctuation">)</span>
<span class="token function">bar</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token comment">// [String: 'abc']</span>
</code></pre></div></li>
<li>
<p>new 绑定高于显示绑定</p>
<p>new 不能和 <code>call()</code>、<code>apply()</code> 一起使用。</p>
<div class="language-javascript" data-ext="js" data-title="js"><pre class="language-javascript"><code><span class="token keyword">function</span> <span class="token function">foo</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">)</span>
<span class="token punctuation">}</span>

<span class="token keyword">var</span> bar <span class="token operator">=</span> <span class="token function">foo</span><span class="token punctuation">.</span><span class="token function">bind</span><span class="token punctuation">(</span><span class="token string">'aaa'</span><span class="token punctuation">)</span>

<span class="token keyword">var</span> obj <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">bar</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token comment">// foo {}</span>
</code></pre></div></li>
</ol>
<p>因此优先级是 new 绑定 &gt; 显示绑定(apply/call/bind) &gt; 隐式绑定(obj.foo()) &gt; 默认绑定(独立函数调用)。</p>
<h2>箭头函数</h2>
<p>上面所说的是普通函数的 this 指向，而在箭头函数中，this 根据外层作用域来决定。</p>
<p>那么它有什么应用场景呢？来看一个模拟网络请求的例子：</p>
<div class="hint-container tip">
<p class="hint-container-title">提示</p>
<p><code>setTimeout()</code> 中的 this 关键字在非严格模式会指向 window (或全局)对象，严格模式下为 undefined。详见 <a href="https://developer.mozilla.org/zh-CN/docs/Web/API/setTimeout#%E5%85%B3%E4%BA%8Ethis%E7%9A%84%E9%97%AE%E9%A2%98" target="_blank" rel="noopener noreferrer">window.setTimeout - Web API 接口参考 | MDN (mozilla.org)</a></p>
</div>
<div class="language-javascript" data-ext="js" data-title="js"><pre class="language-javascript"><code><span class="token keyword">var</span> obj <span class="token operator">=</span> <span class="token punctuation">{</span>
  <span class="token literal-property property">data</span><span class="token operator">:</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">,</span>
  <span class="token function-variable function">getData</span><span class="token operator">:</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token comment">// 发送网络请求, 将结果放到上面 data 属性中</span>
    <span class="token comment">// 在箭头函数之前的解决方案</span>
    <span class="token keyword">var</span> _this <span class="token operator">=</span> <span class="token keyword">this</span>
    <span class="token function">setTimeout</span><span class="token punctuation">(</span><span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
      console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">)</span> <span class="token comment">// window</span>
      <span class="token keyword">var</span> result <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token string">'abc'</span><span class="token punctuation">,</span> <span class="token string">'cba'</span><span class="token punctuation">,</span> <span class="token string">'nba'</span><span class="token punctuation">]</span>
      _this<span class="token punctuation">.</span>data <span class="token operator">=</span> result
    <span class="token punctuation">}</span><span class="token punctuation">,</span> <span class="token number">2000</span><span class="token punctuation">)</span>
  <span class="token punctuation">}</span>
<span class="token punctuation">}</span>

obj<span class="token punctuation">.</span><span class="token function">getData</span><span class="token punctuation">(</span><span class="token punctuation">)</span>

<span class="token function">setTimeout</span><span class="token punctuation">(</span><span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>obj<span class="token punctuation">.</span>data<span class="token punctuation">)</span> <span class="token comment">// ["abc", "cba", "nba"]</span>
<span class="token punctuation">}</span><span class="token punctuation">,</span> <span class="token number">3000</span><span class="token punctuation">)</span>
</code></pre></div><p>有了箭头函数之后，就不必使用 <code>_this = this</code> 获取真正想要的 <code>this</code> 了：</p>
<div class="language-javascript" data-ext="js" data-title="js"><pre class="language-javascript"><code><span class="token function">setTimeout</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">)</span> <span class="token comment">// { data: [], getData: [Function: getData] }</span>
  <span class="token keyword">var</span> result <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token string">'abc'</span><span class="token punctuation">,</span> <span class="token string">'cba'</span><span class="token punctuation">,</span> <span class="token string">'nba'</span><span class="token punctuation">]</span>
  <span class="token keyword">this</span><span class="token punctuation">.</span>data <span class="token operator">=</span> result
<span class="token punctuation">}</span><span class="token punctuation">,</span> <span class="token number">2000</span><span class="token punctuation">)</span>
</code></pre></div><h2>参考链接</h2>
<ul>
<li><a href="https://developer.mozilla.org/" target="_blank" rel="noopener noreferrer">MDN (mozilla.org)</a></li>
<li><a href="https://juejin.cn/post/6844903746984476686" target="_blank" rel="noopener noreferrer">面试官问：JS 的 this 指向 - 掘金 (juejin.cn)</a></li>
</ul>
]]></content>
    <category term="JavaScript"/>
    <published>2022-04-22T00:00:00.000Z</published>
  </entry>
  <entry>
    <title type="text">架构概述</title>
    <id>https://dribble-njr.github.io/blog/blog/frontend/framework/pixi/02-architecture-overview.html</id>
    <link href="https://dribble-njr.github.io/blog/blog/frontend/framework/pixi/02-architecture-overview.html"/>
    <updated>2024-07-29T10:55:38.000Z</updated>
    <summary type="html"><![CDATA[<p><a href="https://github.com/pixijs/pixijs" target="_blank" rel="noopener noreferrer">PixiJS</a> 源代码中主要模块的关系如下：</p>
<table>
<thead>
<tr>
<th>模块</th>
<th>说明</th>
</tr>
</thead>
<tbody>
<tr>
<td>Renderer</td>
<td>渲染器，PixiJS 系统核心，用于显示场景树，并将其绘制到屏幕上。</td>
</tr>
<tr>
<td>Container</td>
<td>容器，主要场景对象，用于创建场景树，如精灵、图形和文本。</td>
</tr>
<tr>
<td>Assets</td>
<td>为异步加载资源提供工具。</td>
</tr>
<tr>
<td>Ticker</td>
<td>基于时钟的周期性回调。游戏更新逻辑将通常在每帧的响应中运行。</td>
</tr>
<tr>
<td>Application</td>
<td>一个简单的帮助对象，包装了一个加载器，一个时钟和一个渲染器。</td>
</tr>
<tr>
<td>Events</td>
<td>PixiJS 支持基于指针的交互，使对象可以被点击，触发悬停事件等。</td>
</tr>
<tr>
<td>Accessibility</td>
<td>通过我们的显示系统我们拥有了一个丰富的键盘和屏幕阅读器的工具。</td>
</tr>
</tbody>
</table>]]></summary>
    <content type="html"><![CDATA[<p><a href="https://github.com/pixijs/pixijs" target="_blank" rel="noopener noreferrer">PixiJS</a> 源代码中主要模块的关系如下：</p>
<p>| 模块          | 说明                                                           |<br>
|</p>
]]></content>
    <category term="Pixi"/>
    <published>2024-07-29T00:00:00.000Z</published>
  </entry>
  <entry>
    <title type="text">whistle 调试真机</title>
    <id>https://dribble-njr.github.io/blog/blog/frontend/practice/017-whistle-debug-real-phone.html</id>
    <link href="https://dribble-njr.github.io/blog/blog/frontend/practice/017-whistle-debug-real-phone.html"/>
    <updated>2024-08-21T06:16:31.000Z</updated>
    <summary type="html"><![CDATA[<p>在前端开发中移动端开发技能必不可少。当我们遇到类似于这样的问题：</p>
<ul>
<li>移动端 <code>Canvas</code> 渲染失败</li>
<li>微信获取 <code>openId</code> 回调页不匹配</li>
<li>微信浏览器文件上传失败</li>
<li>支付宝，微信 <code>H5</code> 支付域名校验不匹配</li>
<li>生产环境 BUG，测试环境无法复现</li>
<li>当后端接口启用 <code>cors</code> 跨域时，本地环境无法访问</li>
</ul>
<p><code>Chrome</code> 模拟器和微信开发者工具等都无法完美复现我们遇到的问题，这时候我们需要用到 <code>whistle</code> 来实现真机调试</p>]]></summary>
    <content type="html"><![CDATA[<p>在前端开发中移动端开发技能必不可少。当我们遇到类似于这样的问题：</p>
<ul>
<li>移动端 <code>Canvas</code> 渲染失败</li>
<li>微信获取 <code>openId</code> 回调页不匹配</li>
<li>微信浏览器文件上传失败</li>
<li>支付宝，微信 <code>H5</code> 支付域名校验不匹配</li>
<li>生产环境 BUG，测试环境无法复现</li>
<li>当后端接口启用 <code>cors</code> 跨域时，本地环境无法访问</li>
</ul>
<p><code>Chrome</code> 模拟器和微信开发者工具等都无法完美复现我们遇到的问题，这时候我们需要用到 <code>whistle</code> 来实现真机调试</p>
<h2>Whistle</h2>
<p><a href="https://wproxy.org/whistle/" target="_blank" rel="noopener noreferrer">whistle</a>（读音[ˈwɪsəl]，拼音[wēisǒu]）基于 Node 实现的跨平台 web 调试代理工具。</p>
<p>它的作用可以理解为用 Node 开一个代理服务器，将我们需要调试的设备代理到 <code>whistle</code> 后，由 <code>whistle</code> 进行代理请求。同时 <code>whistle</code> 支持类似于 hosts 的转发规则，我们可以通过正则或者内置的一些指令对我们需要进行代理的域名进行转发，添加插件等。</p>
<h3>安装启动</h3>
<p>安装 <code>whistle</code>：</p>
<div class="language-bash" data-ext="sh" data-title="sh"><pre class="language-bash"><code><span class="token function">npm</span> <span class="token function">install</span> whistle <span class="token parameter variable">-g</span>
</code></pre></div><p>启动 <code>whistle</code>：</p>
<div class="language-bash" data-ext="sh" data-title="sh"><pre class="language-bash"><code>w2 start
</code></pre></div><p>启动完成后，默认会在 <code>localhost:8899</code> 端口监听。</p>
<h3>设置代理</h3>
<h4>移动端</h4>
<p>电脑与手机连接同一 wifi，在手机端 wifi 中设置代理为手动，输入代理 ip（启动 <code>whistle</code> 后在控制台中打印的局域网 ip），端口号为 <code>8899</code>。</p>
<p>保存后移动端则已经设置好代理，在手机浏览器中访问互联网，即可以在 <code>whistle</code> 控制台中抓取到相应的网络请求。</p>
<h4>PC 端</h4>
<p>PC 端有时也需要通过 <code>whistle</code> 控制台设置代理修改请求信息或者配置 <code>source map</code> 文件，下面介绍如何使用 <code>Proxy switchyOmega</code> 插件设置代理。</p>
<p>在扩展商店中搜索安装 <code>Proxy switchyOmega</code> 插件，下载完成后，默认会有一个 <code>proxy</code> 的情景模式，设置代理服务器为 <code>127.0.0.1</code>，端口号为 <code>8899</code> 保存并应用选项。</p>
<figure><img src="https://raw.githubusercontent.com/dribble-njr/typora-njr/master/img/20240729163103.png" alt="设置情景模式" tabindex="0" loading="lazy"><figcaption>设置情景模式</figcaption></figure>
<p>这里还推荐修改一个配置，将默认配置改为系统代理，避免日常使用时被代理到 <code>whistle</code>，无法科学上网。</p>
<figure><img src="https://raw.githubusercontent.com/dribble-njr/typora-njr/master/img/20240729163028.png" alt="修改默认配置" tabindex="0" loading="lazy"><figcaption>修改默认配置</figcaption></figure>
<h3>安装证书</h3>
<p>参考 <a href="https://wproxy.org/whistle/webui/https.html" target="_blank" rel="noopener noreferrer">官方文档</a> 即可。</p>
<h2>真机调试</h2>
<p>打开 <code>whistle</code> 控制台，左侧有个 <code>Rules</code>，在这里面可以进行一些跳转规则的分组，配置。</p>
<h3>resMerge</h3>
<p>由于大部分 webapp 是嵌入到 webview 中，因此需要更改响应结果中的 <code>webAppUrl</code> 路径。</p>
<div class="language-text" data-ext="text" data-title="text"><pre class="language-text"><code>https://xxxx resMerge://(webAppUrl=https://localhost:3000/index.html?isWebApp=true)
</code></pre></div><h3>tpl</h3>
<p>tpl 基本功能跟 file 一样可以做本地替换，但 tpl 内置了一个简单的模板引擎，可以把文件内容里面 <code>{name}</code> 替换请求参数对应的字段(如果不存在对应的自动则不会进行替换)，一般可用于 mock jsonp 的请求。</p>
<p>在 <code>values</code> 面板中创建一个文件，名字为 <code>mockConfig.json</code>，内容如下：</p>
<p>可以直接修改返回结果：</p>
<div class="language-text" data-ext="text" data-title="text"><pre class="language-text"><code>https://xxxx tpl://{mockConfig.json}
</code></pre></div><h3>注入 eruda</h3>
<p>安装 <code>whistle.inspect</code> 插件，该插件即成了 <a href="https://github.com/liriliri/eruda" target="_blank" rel="noopener noreferrer">eruda</a> 等调试工具，用来在移动端页面上模拟 Chrome 开发者工具功能的模块。</p>
<div class="language-bash" data-ext="sh" data-title="sh"><pre class="language-bash"><code>w2 i whistle.inspect
</code></pre></div><p>配置如下：</p>
<div class="language-text" data-ext="text" data-title="text"><pre class="language-text"><code>https://localhost:3000/index.html whistle.inspect://eruda disable://cache
</code></pre></div><p>这个配置的作用是当访问到 <code>localhost:3000</code> 时，页面会自动注入 <code>eruda</code> 调试工具。</p>
<h2>Chrome inspect</h2>
<p>有些时候，使用 <code>whistle</code> 注入调试工具的效果并不是很好，因此我们可以使用 Chrome inspect 来替代。</p>
<h3>准备工作</h3>
<p>需要的工具：</p>
<ul>
<li>PC 安装 Chrome 浏览器</li>
<li>安卓手机</li>
<li>数据线</li>
</ul>
<h3>操作步骤</h3>
<p>打开手机开发者选项，允许 USB 调试。</p>
<div class="hint-container tip">
<p class="hint-container-title">提示</p>
<p>不同安卓设备打开方式不同，根据品牌谷歌搜索打开方式。</p>
</div>
<p>谷歌浏览器输入 <code>chrome://inspect/</code> 打开调试工具，点击 <code>inspect</code> 按钮即可调试网页。</p>
<figure><img src="https://raw.githubusercontent.com/dribble-njr/typora-njr/master/img/20240821141307.png" alt="inspect" tabindex="0" loading="lazy"><figcaption>inspect</figcaption></figure>
<div class="hint-container warning">
<p class="hint-container-title">注意</p>
<p>应该只能调试 chrome 内核的浏览器。</p>
</div>
]]></content>
    <category term="practice"/>
    <published>2024-07-29T00:00:00.000Z</published>
  </entry>
  <entry>
    <title type="text">快速开始</title>
    <id>https://dribble-njr.github.io/blog/blog/frontend/framework/pixi/01-quick-start.html</id>
    <link href="https://dribble-njr.github.io/blog/blog/frontend/framework/pixi/01-quick-start.html"/>
    <updated>2024-07-23T11:09:05.000Z</updated>
    <summary type="html"><![CDATA[<p><a href="https://pixijs.com/" target="_blank" rel="noopener noreferrer">PixiJS</a> 的核心是一个使用 WebGL（或 Canvas）显示图像或其他 <strong>2D</strong> 可视化内容的呈现系统。</p>
<p>它提供了一个完整的场景图（要呈现的对象的层次结构），并提供交互支持以处理点击和触摸事件。</p>
<p>在现代 HTML5 世界中，它是 Flash 的天然替代品，但却能提供更好的性能和像素级的效果，超越了 Flash 所能达到的水平。</p>
<p>它非常适合网络游戏、教育内容、交互式广告、数据可视化......任何基于网络的、需要复杂图形的应用程序。</p>]]></summary>
    <content type="html"><![CDATA[<p><a href="https://pixijs.com/" target="_blank" rel="noopener noreferrer">PixiJS</a> 的核心是一个使用 WebGL（或 Canvas）显示图像或其他 <strong>2D</strong> 可视化内容的呈现系统。</p>
<p>它提供了一个完整的场景图（要呈现的对象的层次结构），并提供交互支持以处理点击和触摸事件。</p>
<p>在现代 HTML5 世界中，它是 Flash 的天然替代品，但却能提供更好的性能和像素级的效果，超越了 Flash 所能达到的水平。</p>
<p>它非常适合网络游戏、教育内容、交互式广告、数据可视化......任何基于网络的、需要复杂图形的应用程序。</p>
<p>与 Cordova 和 Electron 等技术相结合，PixiJS 应用程序可以作为移动和桌面应用程序在浏览器之外发布。</p>
<h2>创建 pixi 应用</h2>
<p><code>Application</code> 是一个简化 PixiJS 工作的辅助类。 它能创建呈现器、创建舞台并启动一个用于更新的 ticker。</p>
<p><code>Application</code> 类还有一个 <code>init</code> 方法，它将使用给定的选项初始化应用程序。因为 PixiJS 使用了 WebGPU，因此该方法是异步的。</p>
<div class="language-html" data-ext="html" data-title="html"><pre class="language-html"><code><span class="token doctype"><span class="token punctuation">&lt;!</span><span class="token doctype-tag">DOCTYPE</span> <span class="token name">html</span><span class="token punctuation">&gt;</span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>html</span> <span class="token attr-name">lang</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>en<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span>
  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>head</span><span class="token punctuation">&gt;</span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>meta</span> <span class="token attr-name">charset</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>UTF-8<span class="token punctuation">"</span></span> <span class="token punctuation">/&gt;</span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>meta</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>viewport<span class="token punctuation">"</span></span> <span class="token attr-name">content</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>width=device-width, initial-scale=1.0<span class="token punctuation">"</span></span> <span class="token punctuation">/&gt;</span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>title</span><span class="token punctuation">&gt;</span></span>Document<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>title</span><span class="token punctuation">&gt;</span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span> <span class="token attr-name">src</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>https://pixijs.download/release/pixi.js<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span><span class="token script"></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">&gt;</span></span>
  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>head</span><span class="token punctuation">&gt;</span></span>
  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>body</span><span class="token punctuation">&gt;</span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>h1</span><span class="token punctuation">&gt;</span></span>Hello PixiJS<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>h1</span><span class="token punctuation">&gt;</span></span>

    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>module<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span><span class="token script"><span class="token language-javascript">
      <span class="token keyword">const</span> app <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">PIXI<span class="token punctuation">.</span>Application</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
      <span class="token keyword">await</span> app<span class="token punctuation">.</span><span class="token function">init</span><span class="token punctuation">(</span><span class="token punctuation">{</span> <span class="token literal-property property">width</span><span class="token operator">:</span> <span class="token number">640</span><span class="token punctuation">,</span> <span class="token literal-property property">height</span><span class="token operator">:</span> <span class="token number">360</span> <span class="token punctuation">}</span><span class="token punctuation">)</span>
      document<span class="token punctuation">.</span>body<span class="token punctuation">.</span><span class="token function">appendChild</span><span class="token punctuation">(</span>app<span class="token punctuation">.</span>canvas<span class="token punctuation">)</span>
    </span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">&gt;</span></span>
  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>body</span><span class="token punctuation">&gt;</span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>html</span><span class="token punctuation">&gt;</span></span>
</code></pre></div><figure><img src="https://raw.githubusercontent.com/dribble-njr/typora-njr/master/img/20240719160224.png" alt="create pixi app" tabindex="0" loading="lazy"><figcaption>create pixi app</figcaption></figure>
<h2>创建 Sprite</h2>
<p>到目前为止，我们所做的只是准备工作。 我们还没有告诉 PixiJS 绘制任何东西。 让我们添加一张要显示的图片来解决这个问题。</p>
<p>在 PixiJS 中绘制图像有多种方法，但最简单的方法是使用 <a href="https://pixijs.download/release/docs/scene.Sprite.html" target="_blank" rel="noopener noreferrer">Sprite</a>。 Sprite 是一种容器类型，它封装了加载的图像资源，允许对其进行绘制、缩放、旋转等操作。</p>
<div class="language-javascript" data-ext="js" data-title="js"><pre class="language-javascript"><code><span class="token comment">// load the PNG asynchronously</span>
<span class="token keyword">await</span> <span class="token constant">PIXI</span><span class="token punctuation">.</span>Assets<span class="token punctuation">.</span><span class="token function">load</span><span class="token punctuation">(</span><span class="token string">'sample.png'</span><span class="token punctuation">)</span>
<span class="token keyword">let</span> sprite <span class="token operator">=</span> <span class="token constant">PIXI</span><span class="token punctuation">.</span>Sprite<span class="token punctuation">.</span><span class="token function">from</span><span class="token punctuation">(</span><span class="token string">'sample.png'</span><span class="token punctuation">)</span>
</code></pre></div><figure><img src="https://raw.githubusercontent.com/dribble-njr/typora-njr/master/img/sample.png" alt="sample" tabindex="0" loading="lazy"><figcaption>sample</figcaption></figure>
<h2>将 Sprite 添加至 Stage</h2>
<p>最后，我们需要将 Sprite 添加到 Stage 上。Stage 只是一个容器，是场景图的根。Stage 容器的每个子容器都将在每一帧中进行渲染。将 Sprite 添加到 Stage 后，我们就告诉了 PixiJS 的渲染器我们要绘制它。</p>
<div class="language-javascript" data-ext="js" data-title="js"><pre class="language-javascript"><code>app<span class="token punctuation">.</span>stage<span class="token punctuation">.</span><span class="token function">addChild</span><span class="token punctuation">(</span>sprite<span class="token punctuation">)</span>
</code></pre></div><h2>更新 loop</h2>
<p>虽然可以将 PixiJS 用于静态内容，但对于大多数项目而言，都希望添加动画。</p>
<p>示例应用程序希望每秒在同一位置多次渲染同一个 Sprite。</p>
<p>要使图像移动，我们只需每帧更新一次属性即可。为此，我们要挂钩应用程序的 <code>ticker</code>。<code>ticker</code> 是一个 PixiJS 对象，每帧运行一个或多个回调。</p>
<p>只需调用 <code>app.ticker.add(...)</code>，给它传递一个回调函数，然后在该函数中更新场景。它将在每一帧中被调用，你可以移动、旋转等任何你想要的方式来驱动项目的动画。</p>
<div class="language-javascript" data-ext="js" data-title="js"><pre class="language-javascript"><code><span class="token comment">// Add a variable to count up the seconds our demo has been running</span>
<span class="token keyword">let</span> elapsed <span class="token operator">=</span> <span class="token number">0.0</span>
<span class="token comment">// Tell our application's ticker to run a new callback every frame, passing</span>
<span class="token comment">// in the amount of time that has passed since the last tick</span>
app<span class="token punctuation">.</span>ticker<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token parameter">ticker</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
  <span class="token comment">// Add the time to our total elapsed time</span>
  elapsed <span class="token operator">+=</span> ticker<span class="token punctuation">.</span>deltaTime
  <span class="token comment">// Update the sprite's X position based on the cosine of our elapsed time.  We divide</span>
  <span class="token comment">// by 50 to slow the animation down a bit...</span>
  sprite<span class="token punctuation">.</span>x <span class="token operator">=</span> <span class="token number">100.0</span> <span class="token operator">+</span> Math<span class="token punctuation">.</span><span class="token function">cos</span><span class="token punctuation">(</span>elapsed <span class="token operator">/</span> <span class="token number">50.0</span><span class="token punctuation">)</span> <span class="token operator">*</span> <span class="token number">100.0</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span>
</code></pre></div><h2>all done</h2>
<p>现在，我们已经创建了一个简单的应用程序，可以在浏览器中运行。</p>
<div class="language-html" data-ext="html" data-title="html"><pre class="language-html"><code><span class="token doctype"><span class="token punctuation">&lt;!</span><span class="token doctype-tag">DOCTYPE</span> <span class="token name">html</span><span class="token punctuation">&gt;</span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>html</span><span class="token punctuation">&gt;</span></span>
  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>head</span><span class="token punctuation">&gt;</span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span> <span class="token attr-name">src</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>https://pixijs.download/release/pixi.min.js<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span><span class="token script"></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">&gt;</span></span>
  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>head</span><span class="token punctuation">&gt;</span></span>
  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>body</span><span class="token punctuation">&gt;</span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>module<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span><span class="token script"><span class="token language-javascript">
      <span class="token comment">// Create the application helper and add its render target to the page</span>
      <span class="token keyword">const</span> app <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">PIXI<span class="token punctuation">.</span>Application</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
      <span class="token keyword">await</span> app<span class="token punctuation">.</span><span class="token function">init</span><span class="token punctuation">(</span><span class="token punctuation">{</span> <span class="token literal-property property">width</span><span class="token operator">:</span> <span class="token number">640</span><span class="token punctuation">,</span> <span class="token literal-property property">height</span><span class="token operator">:</span> <span class="token number">360</span> <span class="token punctuation">}</span><span class="token punctuation">)</span>
      document<span class="token punctuation">.</span>body<span class="token punctuation">.</span><span class="token function">appendChild</span><span class="token punctuation">(</span>app<span class="token punctuation">.</span>canvas<span class="token punctuation">)</span>

      <span class="token comment">// Create the sprite and add it to the stage</span>
      <span class="token keyword">await</span> <span class="token constant">PIXI</span><span class="token punctuation">.</span>Assets<span class="token punctuation">.</span><span class="token function">load</span><span class="token punctuation">(</span><span class="token string">'sample.png'</span><span class="token punctuation">)</span>
      <span class="token keyword">let</span> sprite <span class="token operator">=</span> <span class="token constant">PIXI</span><span class="token punctuation">.</span>Sprite<span class="token punctuation">.</span><span class="token function">from</span><span class="token punctuation">(</span><span class="token string">'sample.png'</span><span class="token punctuation">)</span>
      app<span class="token punctuation">.</span>stage<span class="token punctuation">.</span><span class="token function">addChild</span><span class="token punctuation">(</span>sprite<span class="token punctuation">)</span>

      <span class="token comment">// Add a ticker callback to move the sprite back and forth</span>
      <span class="token keyword">let</span> elapsed <span class="token operator">=</span> <span class="token number">0.0</span>
      app<span class="token punctuation">.</span>ticker<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token parameter">ticker</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
        elapsed <span class="token operator">+=</span> ticker<span class="token punctuation">.</span>deltaTime
        sprite<span class="token punctuation">.</span>x <span class="token operator">=</span> <span class="token number">100.0</span> <span class="token operator">+</span> Math<span class="token punctuation">.</span><span class="token function">cos</span><span class="token punctuation">(</span>elapsed <span class="token operator">/</span> <span class="token number">50.0</span><span class="token punctuation">)</span> <span class="token operator">*</span> <span class="token number">100.0</span>
      <span class="token punctuation">}</span><span class="token punctuation">)</span>
    </span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">&gt;</span></span>
  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>body</span><span class="token punctuation">&gt;</span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>html</span><span class="token punctuation">&gt;</span></span>
</code></pre></div>]]></content>
    <category term="Pixi"/>
    <published>2024-07-19T00:00:00.000Z</published>
  </entry>
  <entry>
    <title type="text">数据库结构设计</title>
    <id>https://dribble-njr.github.io/blog/blog/project/imperial-kitchen/03-database.html</id>
    <link href="https://dribble-njr.github.io/blog/blog/project/imperial-kitchen/03-database.html"/>
    <updated>2024-07-23T10:53:00.000Z</updated>
    <summary type="html"><![CDATA[<h2>数据库选择</h2>
<p>选择使用云数据库 <a href="https://docs.turso.tech/introduction" target="_blank" rel="noopener noreferrer">turso</a>。</p>
<p>Turso 是一个兼容 SQLite 的数据库，基于 libSQL（SQLite 的开放贡献分叉）构建。 它可以将每个组织的数据库扩展到数十万个，并支持复制到任何位置，包括您自己的服务器，以实现微秒级延迟访问。</p>
<div class="language-typescript" data-ext="ts" data-title="ts"><pre class="language-typescript"><code><span class="token keyword">import</span> <span class="token punctuation">{</span> InStatement<span class="token punctuation">,</span> LibsqlError<span class="token punctuation">,</span> createClient <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">'@libsql/client'</span>

<span class="token keyword">const</span> client <span class="token operator">=</span> <span class="token function">createClient</span><span class="token punctuation">(</span><span class="token punctuation">{</span>
  url<span class="token operator">:</span> process<span class="token punctuation">.</span>env<span class="token punctuation">.</span><span class="token constant">TURSO_URL</span> <span class="token operator">||</span> <span class="token string">''</span><span class="token punctuation">,</span>
  authToken<span class="token operator">:</span> process<span class="token punctuation">.</span>env<span class="token punctuation">.</span><span class="token constant">TURSO_AUTH_TOKEN</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span>
</code></pre></div>]]></summary>
    <content type="html"><![CDATA[<h2>数据库选择</h2>
<p>选择使用云数据库 <a href="https://docs.turso.tech/introduction" target="_blank" rel="noopener noreferrer">turso</a>。</p>
<p>Turso 是一个兼容 SQLite 的数据库，基于 libSQL（SQLite 的开放贡献分叉）构建。 它可以将每个组织的数据库扩展到数十万个，并支持复制到任何位置，包括您自己的服务器，以实现微秒级延迟访问。</p>
<div class="language-typescript" data-ext="ts" data-title="ts"><pre class="language-typescript"><code><span class="token keyword">import</span> <span class="token punctuation">{</span> InStatement<span class="token punctuation">,</span> LibsqlError<span class="token punctuation">,</span> createClient <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">'@libsql/client'</span>

<span class="token keyword">const</span> client <span class="token operator">=</span> <span class="token function">createClient</span><span class="token punctuation">(</span><span class="token punctuation">{</span>
  url<span class="token operator">:</span> process<span class="token punctuation">.</span>env<span class="token punctuation">.</span><span class="token constant">TURSO_URL</span> <span class="token operator">||</span> <span class="token string">''</span><span class="token punctuation">,</span>
  authToken<span class="token operator">:</span> process<span class="token punctuation">.</span>env<span class="token punctuation">.</span><span class="token constant">TURSO_AUTH_TOKEN</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span>
</code></pre></div><h2>user</h2>
<div class="language-sql" data-ext="sql" data-title="sql"><pre class="language-sql"><code><span class="token keyword">CREATE</span> <span class="token keyword">TABLE</span> <span class="token string">"user"</span> <span class="token punctuation">(</span>
  ID <span class="token keyword">INTEGER</span> <span class="token keyword">PRIMARY</span> <span class="token keyword">KEY</span> AUTOINCREMENT<span class="token punctuation">,</span>
  name <span class="token keyword">TEXT</span>
<span class="token punctuation">,</span> password <span class="token keyword">TEXT</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre></div><h2>category</h2>
<div class="language-sql" data-ext="sql" data-title="sql"><pre class="language-sql"><code><span class="token keyword">CREATE</span> <span class="token keyword">TABLE</span> category <span class="token punctuation">(</span>
id <span class="token keyword">INTEGER</span> <span class="token keyword">PRIMARY</span> <span class="token keyword">KEY</span><span class="token punctuation">,</span>
name <span class="token keyword">TEXT</span><span class="token punctuation">,</span>
description <span class="token keyword">TEXT</span>
<span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre></div><h2>commodity</h2>
<div class="language-sql" data-ext="sql" data-title="sql"><pre class="language-sql"><code><span class="token keyword">CREATE</span> <span class="token keyword">TABLE</span> commodity <span class="token punctuation">(</span>
id <span class="token keyword">INTEGER</span> <span class="token keyword">PRIMARY</span> <span class="token keyword">KEY</span><span class="token punctuation">,</span>
name <span class="token keyword">TEXT</span><span class="token punctuation">,</span>
price <span class="token keyword">REAL</span><span class="token punctuation">,</span>
description <span class="token keyword">TEXT</span><span class="token punctuation">,</span>
category_id <span class="token keyword">INTEGER</span><span class="token punctuation">,</span>
<span class="token keyword">FOREIGN</span> <span class="token keyword">KEY</span> <span class="token punctuation">(</span>category_id<span class="token punctuation">)</span> <span class="token keyword">REFERENCES</span> category<span class="token punctuation">(</span>id<span class="token punctuation">)</span>
<span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre></div>]]></content>
    <category term="Project"/>
    <published>2024-07-11T00:00:00.000Z</published>
  </entry>
  <entry>
    <title type="text">接口设计</title>
    <id>https://dribble-njr.github.io/blog/blog/project/imperial-kitchen/04-api.html</id>
    <link href="https://dribble-njr.github.io/blog/blog/project/imperial-kitchen/04-api.html"/>
    <updated>2024-07-23T10:53:00.000Z</updated>
    <summary type="html"><![CDATA[<h2><code>category</code></h2>
<p>接口路径：<code>/category</code>。</p>
<h3><code>list</code></h3>
<p>请求方法：<code>GET</code>。</p>
<p>描述：获取所有分类的列表。</p>
<p>请求参数：无。</p>
<p>响应数据：<code>Category[]</code>。</p>
<div class="language-javascript" data-ext="js" data-title="js"><pre class="language-javascript"><code><span class="token keyword">export</span> <span class="token keyword">interface</span> <span class="token class-name">Category</span> <span class="token punctuation">{</span>
  <span class="token literal-property property">id</span><span class="token operator">:</span> number<span class="token punctuation">;</span>
  <span class="token literal-property property">name</span><span class="token operator">:</span> string<span class="token punctuation">;</span>
  description<span class="token operator">?</span><span class="token operator">:</span> string<span class="token punctuation">;</span>
  <span class="token literal-property property">goods</span><span class="token operator">:</span> Commodity<span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>

<span class="token keyword">export</span> <span class="token keyword">interface</span> <span class="token class-name">Commodity</span> <span class="token punctuation">{</span>
  <span class="token literal-property property">id</span><span class="token operator">:</span> number<span class="token punctuation">;</span>
  <span class="token literal-property property">name</span><span class="token operator">:</span> string<span class="token punctuation">;</span>
  <span class="token literal-property property">price</span><span class="token operator">:</span> number<span class="token punctuation">;</span>
  description<span class="token operator">?</span><span class="token operator">:</span> string<span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre></div>]]></summary>
    <content type="html"><![CDATA[<h2><code>category</code></h2>
<p>接口路径：<code>/category</code>。</p>
<h3><code>list</code></h3>
<p>请求方法：<code>GET</code>。</p>
<p>描述：获取所有分类的列表。</p>
<p>请求参数：无。</p>
<p>响应数据：<code>Category[]</code>。</p>
<div class="language-javascript" data-ext="js" data-title="js"><pre class="language-javascript"><code><span class="token keyword">export</span> <span class="token keyword">interface</span> <span class="token class-name">Category</span> <span class="token punctuation">{</span>
  <span class="token literal-property property">id</span><span class="token operator">:</span> number<span class="token punctuation">;</span>
  <span class="token literal-property property">name</span><span class="token operator">:</span> string<span class="token punctuation">;</span>
  description<span class="token operator">?</span><span class="token operator">:</span> string<span class="token punctuation">;</span>
  <span class="token literal-property property">goods</span><span class="token operator">:</span> Commodity<span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>

<span class="token keyword">export</span> <span class="token keyword">interface</span> <span class="token class-name">Commodity</span> <span class="token punctuation">{</span>
  <span class="token literal-property property">id</span><span class="token operator">:</span> number<span class="token punctuation">;</span>
  <span class="token literal-property property">name</span><span class="token operator">:</span> string<span class="token punctuation">;</span>
  <span class="token literal-property property">price</span><span class="token operator">:</span> number<span class="token punctuation">;</span>
  description<span class="token operator">?</span><span class="token operator">:</span> string<span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre></div><h3><code>create</code></h3>
<p>请求方法：<code>POST</code>。</p>
<p>描述：创建分类。</p>
<p>请求参数：<code>Category</code>。</p>
<p>响应数据：<code>category_id: number</code>。</p>
]]></content>
    <category term="Project"/>
    <published>2024-07-11T00:00:00.000Z</published>
  </entry>
  <entry>
    <title type="text">服务器架构设计</title>
    <id>https://dribble-njr.github.io/blog/blog/project/imperial-kitchen/02-server.html</id>
    <link href="https://dribble-njr.github.io/blog/blog/project/imperial-kitchen/02-server.html"/>
    <updated>2024-07-23T09:41:43.000Z</updated>
    <summary type="html"><![CDATA[<h2>分层架构</h2>
<h3>route</h3>
<p>分发路由，如：<code>/category</code>。匹配后的路由包含 <code>controller</code> 和 路由特定的 <code>middleware</code>。</p>
<div class="language-typescript" data-ext="ts" data-title="ts"><pre class="language-typescript"><code><span class="token keyword">interface</span> <span class="token class-name">Router</span><span class="token operator">:</span> <span class="token punctuation">{</span> <span class="token punctuation">[</span>key<span class="token operator">:</span> <span class="token builtin">string</span><span class="token punctuation">]</span><span class="token operator">:</span> Route <span class="token punctuation">}</span>

<span class="token keyword">export</span> <span class="token keyword">interface</span> <span class="token class-name">Route</span> <span class="token punctuation">{</span>
  controller<span class="token operator">:</span> Controller<span class="token punctuation">;</span>
  middlewares<span class="token operator">?</span><span class="token operator">:</span> Middleware<span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">;</span> <span class="token comment">// route-specific middleware</span>
<span class="token punctuation">}</span>
</code></pre></div>]]></summary>
    <content type="html"><![CDATA[<h2>分层架构</h2>
<h3>route</h3>
<p>分发路由，如：<code>/category</code>。匹配后的路由包含 <code>controller</code> 和 路由特定的 <code>middleware</code>。</p>
<div class="language-typescript" data-ext="ts" data-title="ts"><pre class="language-typescript"><code><span class="token keyword">interface</span> <span class="token class-name">Router</span><span class="token operator">:</span> <span class="token punctuation">{</span> <span class="token punctuation">[</span>key<span class="token operator">:</span> <span class="token builtin">string</span><span class="token punctuation">]</span><span class="token operator">:</span> Route <span class="token punctuation">}</span>

<span class="token keyword">export</span> <span class="token keyword">interface</span> <span class="token class-name">Route</span> <span class="token punctuation">{</span>
  controller<span class="token operator">:</span> Controller<span class="token punctuation">;</span>
  middlewares<span class="token operator">?</span><span class="token operator">:</span> Middleware<span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">;</span> <span class="token comment">// route-specific middleware</span>
<span class="token punctuation">}</span>
</code></pre></div><h3>middleware</h3>
<p>中间件，处理请求中间逻辑，比如：<code>cors</code>、<code>auth</code> 等。</p>
<div class="language-typescript" data-ext="ts" data-title="ts"><pre class="language-typescript"><code><span class="token keyword">export</span> <span class="token keyword">type</span> <span class="token class-name">Middleware</span> <span class="token operator">=</span> <span class="token punctuation">(</span>req<span class="token operator">:</span> CustomIncomingMessage<span class="token punctuation">,</span> res<span class="token operator">:</span> ServerResponse<span class="token punctuation">,</span> <span class="token function-variable function">next</span><span class="token operator">:</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token keyword">void</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token keyword">void</span>

<span class="token doc-comment comment">/**
 * Manage the execution order of middleware functions.
 * It allows you to add multiple middleware functions to a queue
 * and execute them sequentially during a request.
 *
 * <span class="token keyword">@export</span>
 * <span class="token keyword">@class</span> MiddlewareManager
 */</span>
<span class="token keyword">export</span> <span class="token keyword">default</span> <span class="token keyword">class</span> <span class="token class-name">MiddlewareManager</span> <span class="token punctuation">{</span>
  <span class="token keyword">private</span> <span class="token keyword">readonly</span> middlewares<span class="token operator">:</span> Middleware<span class="token punctuation">[</span><span class="token punctuation">]</span>

  <span class="token function">constructor</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">this</span><span class="token punctuation">.</span>middlewares <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span>
  <span class="token punctuation">}</span>

  <span class="token function">use</span><span class="token punctuation">(</span>func<span class="token operator">:</span> Middleware<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">this</span><span class="token punctuation">.</span>middlewares<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span>func<span class="token punctuation">)</span>
  <span class="token punctuation">}</span>

  <span class="token function">run</span><span class="token punctuation">(</span>req<span class="token operator">:</span> CustomIncomingMessage<span class="token punctuation">,</span> res<span class="token operator">:</span> ServerResponse<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">const</span> <span class="token function-variable function">runner</span> <span class="token operator">=</span> <span class="token keyword">async</span> <span class="token punctuation">(</span>index<span class="token operator">:</span> <span class="token builtin">number</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
      <span class="token keyword">const</span> middleware <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span>middlewares<span class="token punctuation">[</span>index<span class="token punctuation">]</span>
      <span class="token keyword">if</span> <span class="token punctuation">(</span>middleware<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">await</span> <span class="token function">middleware</span><span class="token punctuation">(</span>req<span class="token punctuation">,</span> res<span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
          <span class="token keyword">return</span> <span class="token function">runner</span><span class="token punctuation">(</span>index <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">)</span>
        <span class="token punctuation">}</span><span class="token punctuation">)</span>
      <span class="token punctuation">}</span>
    <span class="token punctuation">}</span>

    <span class="token function">runner</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span>
  <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre></div><p>以 <code>corsMiddleware</code> 为例：</p>
<div class="language-typescript" data-ext="ts" data-title="ts"><pre class="language-typescript"><code><span class="token keyword">const</span> corsMiddleware <span class="token operator">=</span> <span class="token punctuation">(</span>options<span class="token operator">:</span> <span class="token punctuation">{</span> origin<span class="token operator">:</span> <span class="token builtin">string</span><span class="token punctuation">;</span> methods<span class="token operator">:</span> <span class="token builtin">string</span><span class="token punctuation">;</span> credentials<span class="token operator">?</span><span class="token operator">:</span> <span class="token builtin">boolean</span> <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token operator">:</span> Middleware <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
  <span class="token keyword">return</span> <span class="token punctuation">(</span>req<span class="token punctuation">,</span> res<span class="token punctuation">,</span> next<span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
    res<span class="token punctuation">.</span><span class="token function">setHeader</span><span class="token punctuation">(</span><span class="token string">'Access-Control-Allow-Origin'</span><span class="token punctuation">,</span> options<span class="token punctuation">.</span>origin<span class="token punctuation">)</span>
    res<span class="token punctuation">.</span><span class="token function">setHeader</span><span class="token punctuation">(</span><span class="token string">'Access-Control-Allow-Methods'</span><span class="token punctuation">,</span> options<span class="token punctuation">.</span>methods<span class="token punctuation">)</span>
    res<span class="token punctuation">.</span><span class="token function">setHeader</span><span class="token punctuation">(</span><span class="token string">'Access-Control-Allow-Headers'</span><span class="token punctuation">,</span> <span class="token string">'Content-Type, Authorization'</span><span class="token punctuation">)</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span>options<span class="token punctuation">.</span>credentials<span class="token punctuation">)</span> <span class="token punctuation">{</span>
      res<span class="token punctuation">.</span><span class="token function">setHeader</span><span class="token punctuation">(</span><span class="token string">'Access-Control-Allow-Credentials'</span><span class="token punctuation">,</span> <span class="token string">'true'</span><span class="token punctuation">)</span>
    <span class="token punctuation">}</span>
    <span class="token comment">// Handle preflight requests</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span>req<span class="token punctuation">.</span>method <span class="token operator">===</span> <span class="token string">'OPTIONS'</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
      res<span class="token punctuation">.</span>statusCode <span class="token operator">=</span> <span class="token number">204</span>
      res<span class="token punctuation">.</span><span class="token function">end</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
    <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>
      <span class="token function">next</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
    <span class="token punctuation">}</span>
  <span class="token punctuation">}</span>
<span class="token punctuation">}</span>

<span class="token keyword">export</span> <span class="token keyword">default</span> corsMiddleware
</code></pre></div><h3>controller</h3>
<p>控制层，处理请求参数和请求体数据，分发业务逻辑。一个抽象基类，提供 <code>sendResponse</code> 和 <code>sendError</code> 方法。</p>
<div class="language-typescript" data-ext="ts" data-title="ts"><pre class="language-typescript"><code><span class="token keyword">export</span> <span class="token keyword">type</span> <span class="token class-name">Controller</span> <span class="token operator">=</span> <span class="token punctuation">(</span>req<span class="token operator">:</span> CustomIncomingMessage<span class="token punctuation">,</span> res<span class="token operator">:</span> ServerResponse<span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token keyword">void</span>

<span class="token keyword">export</span> <span class="token keyword">abstract</span> <span class="token keyword">class</span> <span class="token class-name">BaseController</span> <span class="token punctuation">{</span>
  <span class="token keyword">protected</span> <span class="token keyword">static</span> <span class="token function">sendResponse</span><span class="token punctuation">(</span>statusCode<span class="token operator">:</span> <span class="token builtin">number</span><span class="token punctuation">,</span> data<span class="token operator">:</span> <span class="token builtin">unknown</span><span class="token punctuation">,</span> res<span class="token operator">:</span> ServerResponse<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    res<span class="token punctuation">.</span><span class="token function">setHeader</span><span class="token punctuation">(</span><span class="token string">'content-type'</span><span class="token punctuation">,</span> <span class="token string">'application/json'</span><span class="token punctuation">)</span>
    res<span class="token punctuation">.</span><span class="token function">writeHead</span><span class="token punctuation">(</span>statusCode<span class="token punctuation">)</span>

    <span class="token comment">// handle bigint</span>
    <span class="token keyword">let</span> responseData<span class="token operator">:</span> <span class="token builtin">unknown</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token keyword">typeof</span> data <span class="token operator">===</span> <span class="token string">'bigint'</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
      <span class="token keyword">if</span> <span class="token punctuation">(</span>data <span class="token operator">&lt;=</span> Number<span class="token punctuation">.</span><span class="token constant">MAX_SAFE_INTEGER</span> <span class="token operator">&amp;&amp;</span> data <span class="token operator">&gt;=</span> Number<span class="token punctuation">.</span><span class="token constant">MIN_SAFE_INTEGER</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        responseData <span class="token operator">=</span> <span class="token function">Number</span><span class="token punctuation">(</span>data<span class="token punctuation">)</span>
      <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>
        responseData <span class="token operator">=</span> data<span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
      <span class="token punctuation">}</span>
    <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>
      responseData <span class="token operator">=</span> data
    <span class="token punctuation">}</span>

    <span class="token keyword">const</span> response<span class="token operator">:</span> Response <span class="token operator">=</span> <span class="token punctuation">{</span>
      code<span class="token operator">:</span> statusCode<span class="token punctuation">,</span>
      message<span class="token operator">:</span> <span class="token string">'OK'</span><span class="token punctuation">,</span>
      data<span class="token operator">:</span> responseData
    <span class="token punctuation">}</span>

    res<span class="token punctuation">.</span><span class="token function">write</span><span class="token punctuation">(</span><span class="token constant">JSON</span><span class="token punctuation">.</span><span class="token function">stringify</span><span class="token punctuation">(</span>response<span class="token punctuation">)</span><span class="token punctuation">)</span>
    res<span class="token punctuation">.</span><span class="token function">end</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
  <span class="token punctuation">}</span>

  <span class="token keyword">protected</span> <span class="token function">sendError</span><span class="token punctuation">(</span>statusCode<span class="token operator">:</span> <span class="token builtin">number</span><span class="token punctuation">,</span> message<span class="token operator">:</span> <span class="token builtin">string</span><span class="token punctuation">,</span> res<span class="token operator">:</span> ServerResponse<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    res<span class="token punctuation">.</span><span class="token function">setHeader</span><span class="token punctuation">(</span><span class="token string">'content-type'</span><span class="token punctuation">,</span> <span class="token string">'application/json'</span><span class="token punctuation">)</span>
    res<span class="token punctuation">.</span><span class="token function">writeHead</span><span class="token punctuation">(</span>statusCode<span class="token punctuation">)</span>
    <span class="token keyword">const</span> response<span class="token operator">:</span> Response <span class="token operator">=</span> <span class="token punctuation">{</span>
      code<span class="token operator">:</span> statusCode<span class="token punctuation">,</span>
      message<span class="token operator">:</span> <span class="token constant">JSON</span><span class="token punctuation">.</span><span class="token function">stringify</span><span class="token punctuation">(</span><span class="token punctuation">{</span> error<span class="token operator">:</span> message <span class="token punctuation">}</span><span class="token punctuation">)</span>
    <span class="token punctuation">}</span>
    res<span class="token punctuation">.</span><span class="token function">write</span><span class="token punctuation">(</span>response<span class="token punctuation">)</span>
    res<span class="token punctuation">.</span><span class="token function">end</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
  <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre></div><p>以 <code>UserController</code> 为例：</p>
<div class="language-typescript" data-ext="ts" data-title="ts"><pre class="language-typescript"><code><span class="token keyword">export</span> <span class="token keyword">default</span> <span class="token keyword">class</span> <span class="token class-name">UserController</span> <span class="token keyword">extends</span> <span class="token class-name">BaseController</span> <span class="token punctuation">{</span>
  <span class="token keyword">private</span> userService<span class="token operator">:</span> UserService

  <span class="token function">constructor</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">super</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
    <span class="token keyword">this</span><span class="token punctuation">.</span>userService <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">UserService</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
  <span class="token punctuation">}</span>

  <span class="token keyword">async</span> <span class="token function">signIn</span><span class="token punctuation">(</span>req<span class="token operator">:</span> CustomIncomingMessage<span class="token punctuation">,</span> res<span class="token operator">:</span> ServerResponse<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">try</span> <span class="token punctuation">{</span>
      <span class="token keyword">const</span> start <span class="token operator">=</span> Date<span class="token punctuation">.</span><span class="token function">now</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
      <span class="token keyword">const</span> data <span class="token operator">=</span> <span class="token keyword">await</span> <span class="token generic-function"><span class="token function">getRequestBody</span><span class="token generic class-name"><span class="token operator">&lt;</span>SignInParams<span class="token operator">&gt;</span></span></span><span class="token punctuation">(</span>req<span class="token punctuation">)</span>

      <span class="token comment">// TODO: verify parameters.</span>

      <span class="token keyword">const</span> response <span class="token operator">=</span> <span class="token keyword">await</span> <span class="token keyword">this</span><span class="token punctuation">.</span>userService<span class="token punctuation">.</span><span class="token function">signIn</span><span class="token punctuation">(</span>data<span class="token punctuation">)</span>

      <span class="token builtin">console</span><span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'All time: '</span><span class="token punctuation">,</span> Date<span class="token punctuation">.</span><span class="token function">now</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">-</span> start<span class="token punctuation">)</span>
      UserController<span class="token punctuation">.</span><span class="token function">sendResponse</span><span class="token punctuation">(</span>response<span class="token punctuation">.</span>code<span class="token punctuation">,</span> <span class="token punctuation">{</span> message<span class="token operator">:</span> response<span class="token punctuation">.</span>message <span class="token punctuation">}</span><span class="token punctuation">,</span> res<span class="token punctuation">)</span>
    <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span>error<span class="token punctuation">)</span> <span class="token punctuation">{</span>
      UserController<span class="token punctuation">.</span><span class="token function">sendResponse</span><span class="token punctuation">(</span><span class="token number">500</span><span class="token punctuation">,</span> <span class="token punctuation">{</span> message<span class="token operator">:</span> <span class="token string">'Internal Server Error'</span> <span class="token punctuation">}</span><span class="token punctuation">,</span> res<span class="token punctuation">)</span>
      <span class="token keyword">throw</span> error
    <span class="token punctuation">}</span>
  <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre></div><h3>service</h3>
<p>服务层，处理业务逻辑。<code>BaseService</code> 为抽象基类，提供 <code>db</code> 属性。</p>
<div class="language-typescript" data-ext="ts" data-title="ts"><pre class="language-typescript"><code><span class="token keyword">export</span> <span class="token keyword">abstract</span> <span class="token keyword">class</span> <span class="token class-name">BaseService</span> <span class="token punctuation">{</span>
  <span class="token keyword">protected</span> db<span class="token operator">:</span> <span class="token constant">DB</span>

  <span class="token function">constructor</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">this</span><span class="token punctuation">.</span>db <span class="token operator">=</span> <span class="token constant">DB</span><span class="token punctuation">.</span><span class="token function">createInstance</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
  <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre></div><p>以 <code>UserService</code> 为例：</p>
<div class="language-typescript" data-ext="ts" data-title="ts"><pre class="language-typescript"><code><span class="token keyword">export</span> <span class="token keyword">default</span> <span class="token keyword">class</span> <span class="token class-name">UserService</span> <span class="token keyword">extends</span> <span class="token class-name">BaseService</span> <span class="token punctuation">{</span>
  <span class="token function">constructor</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">super</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
  <span class="token punctuation">}</span>

  <span class="token comment">// sign-in</span>
  <span class="token keyword">async</span> <span class="token function">signIn</span><span class="token punctuation">(</span>data<span class="token operator">:</span> SignInParams<span class="token punctuation">)</span><span class="token operator">:</span> <span class="token builtin">Promise</span><span class="token operator">&lt;</span>Response<span class="token operator">&lt;</span><span class="token builtin">boolean</span> <span class="token operator">|</span> <span class="token keyword">null</span><span class="token operator">&gt;&gt;</span> <span class="token punctuation">{</span>
    <span class="token keyword">const</span> sql <span class="token operator">=</span> <span class="token string">'SELECT * FROM users WHERE name = ?'</span>
    <span class="token keyword">const</span> res <span class="token operator">=</span> <span class="token keyword">await</span> <span class="token keyword">this</span><span class="token punctuation">.</span>db<span class="token punctuation">.</span><span class="token function">execute</span><span class="token punctuation">(</span><span class="token punctuation">{</span> sql<span class="token punctuation">,</span> args<span class="token operator">:</span> <span class="token punctuation">[</span>data<span class="token punctuation">.</span>name<span class="token punctuation">]</span> <span class="token punctuation">}</span><span class="token punctuation">)</span>
    <span class="token keyword">const</span> usersInfo<span class="token operator">:</span> User<span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token operator">=</span> res<span class="token punctuation">.</span>rows<span class="token punctuation">.</span><span class="token function">map</span><span class="token punctuation">(</span><span class="token punctuation">(</span>row<span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">(</span><span class="token punctuation">{</span>
      id<span class="token operator">:</span> <span class="token function">Number</span><span class="token punctuation">(</span>row<span class="token punctuation">.</span><span class="token constant">ID</span><span class="token punctuation">)</span><span class="token punctuation">,</span>
      name<span class="token operator">:</span> <span class="token function">String</span><span class="token punctuation">(</span>row<span class="token punctuation">.</span>name<span class="token punctuation">)</span><span class="token punctuation">,</span>
      password<span class="token operator">:</span> <span class="token function">String</span><span class="token punctuation">(</span>row<span class="token punctuation">.</span>password<span class="token punctuation">)</span>
    <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">)</span>

    <span class="token comment">// Check if the user exists.</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span>usersInfo<span class="token punctuation">.</span>length <span class="token operator">===</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
      <span class="token keyword">return</span> <span class="token punctuation">{</span>
        code<span class="token operator">:</span> <span class="token number">401</span><span class="token punctuation">,</span>
        message<span class="token operator">:</span> <span class="token string">'Access to the requested resource is unauthorized. Please authenticate.'</span><span class="token punctuation">,</span>
        data<span class="token operator">:</span> <span class="token keyword">null</span>
      <span class="token punctuation">}</span>
    <span class="token punctuation">}</span>
    <span class="token comment">// Check if the password matches.</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span>usersInfo<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">.</span>password <span class="token operator">!==</span> data<span class="token punctuation">.</span>password<span class="token punctuation">)</span> <span class="token punctuation">{</span>
      <span class="token keyword">return</span> <span class="token punctuation">{</span>
        code<span class="token operator">:</span> <span class="token number">401</span><span class="token punctuation">,</span>
        message<span class="token operator">:</span> <span class="token string">'Access to the requested resource is unauthorized. Please authenticate.'</span><span class="token punctuation">,</span>
        data<span class="token operator">:</span> <span class="token keyword">null</span>
      <span class="token punctuation">}</span>
    <span class="token punctuation">}</span>

    <span class="token comment">// All checks passed, return success message or token</span>
    <span class="token comment">// TODO: generate token.</span>
    <span class="token keyword">return</span> <span class="token punctuation">{</span> code<span class="token operator">:</span> <span class="token number">200</span><span class="token punctuation">,</span> message<span class="token operator">:</span> <span class="token string">'Login successful'</span><span class="token punctuation">,</span> data<span class="token operator">:</span> <span class="token boolean">true</span> <span class="token punctuation">}</span>
  <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre></div><h3>dao</h3>
<p>数据访问层，处理数据查询。提供 <code>execute</code> 方法执行 <code>sql</code>。</p>
<div class="language-typescript" data-ext="ts" data-title="ts"><pre class="language-typescript"><code><span class="token keyword">export</span> <span class="token keyword">class</span> <span class="token class-name"><span class="token constant">DB</span></span> <span class="token punctuation">{</span>
  <span class="token keyword">private</span> <span class="token keyword">static</span> instance<span class="token operator">:</span> <span class="token constant">DB</span>

  <span class="token keyword">private</span> <span class="token function">constructor</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token punctuation">}</span>

  <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token function">createInstance</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span><span class="token constant">DB</span><span class="token punctuation">.</span>instance<span class="token punctuation">)</span> <span class="token punctuation">{</span>
      <span class="token constant">DB</span><span class="token punctuation">.</span>instance <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name"><span class="token constant">DB</span></span><span class="token punctuation">(</span><span class="token punctuation">)</span>
    <span class="token punctuation">}</span>
    <span class="token keyword">return</span> <span class="token constant">DB</span><span class="token punctuation">.</span>instance
  <span class="token punctuation">}</span>

  <span class="token keyword">public</span> <span class="token keyword">async</span> <span class="token function">execute</span><span class="token punctuation">(</span>stmt<span class="token operator">:</span> InStatement<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">try</span> <span class="token punctuation">{</span>
      <span class="token keyword">const</span> start <span class="token operator">=</span> Date<span class="token punctuation">.</span><span class="token function">now</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
      <span class="token keyword">const</span> res <span class="token operator">=</span> <span class="token keyword">await</span> client<span class="token punctuation">.</span><span class="token function">execute</span><span class="token punctuation">(</span>stmt<span class="token punctuation">)</span>
      <span class="token builtin">console</span><span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'Query time: '</span><span class="token punctuation">,</span> Date<span class="token punctuation">.</span><span class="token function">now</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">-</span> start<span class="token punctuation">)</span>
      <span class="token keyword">return</span> res
    <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span>error<span class="token punctuation">)</span> <span class="token punctuation">{</span>
      <span class="token keyword">if</span> <span class="token punctuation">(</span>error <span class="token keyword">instanceof</span> <span class="token class-name">LibsqlError</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">Error</span><span class="token punctuation">(</span><span class="token template-string"><span class="token template-punctuation string">`</span><span class="token string">Execution failed: </span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">${</span>error<span class="token punctuation">.</span>message<span class="token interpolation-punctuation punctuation">}</span></span><span class="token template-punctuation string">`</span></span><span class="token punctuation">)</span>
      <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>
        <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">Error</span><span class="token punctuation">(</span><span class="token template-string"><span class="token template-punctuation string">`</span><span class="token string">An error occurred: </span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">${</span>error<span class="token interpolation-punctuation punctuation">}</span></span><span class="token template-punctuation string">`</span></span><span class="token punctuation">)</span>
      <span class="token punctuation">}</span>
    <span class="token punctuation">}</span>
  <span class="token punctuation">}</span>
<span class="token punctuation">}</span>

<span class="token keyword">export</span> <span class="token keyword">default</span> <span class="token constant">DB</span>
</code></pre></div><h2>其他细节</h2>
<h3>请求体处理</h3>
<p>目前允许 <code>POST</code> 和 <code>PUT</code> 请求携带请求体。</p>
<div class="language-typescript" data-ext="ts" data-title="ts"><pre class="language-typescript"><code><span class="token keyword">export</span> <span class="token keyword">const</span> getRequestBody <span class="token operator">=</span> <span class="token operator">&lt;</span><span class="token constant">T</span><span class="token operator">&gt;</span><span class="token punctuation">(</span>req<span class="token operator">:</span> CustomIncomingMessage<span class="token punctuation">)</span><span class="token operator">:</span> <span class="token builtin">Promise</span><span class="token operator">&lt;</span><span class="token constant">T</span><span class="token operator">&gt;</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
  <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name"><span class="token builtin">Promise</span></span><span class="token punctuation">(</span><span class="token punctuation">(</span>resolve<span class="token punctuation">,</span> reject<span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
    <span class="token keyword">try</span> <span class="token punctuation">{</span>
      <span class="token keyword">if</span> <span class="token punctuation">(</span>req<span class="token punctuation">.</span>method <span class="token operator">!==</span> <span class="token string">'POST'</span> <span class="token operator">&amp;&amp;</span> req<span class="token punctuation">.</span>method <span class="token operator">!==</span> <span class="token string">'PUT'</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token function">resolve</span><span class="token punctuation">(</span><span class="token punctuation">{</span><span class="token punctuation">}</span> <span class="token keyword">as</span> <span class="token constant">T</span><span class="token punctuation">)</span>
        <span class="token keyword">return</span>
      <span class="token punctuation">}</span>
      <span class="token keyword">if</span> <span class="token punctuation">(</span>req<span class="token punctuation">.</span>headers<span class="token punctuation">[</span><span class="token string">'content-type'</span><span class="token punctuation">]</span> <span class="token operator">!==</span> <span class="token string">'application/json'</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token function">resolve</span><span class="token punctuation">(</span><span class="token punctuation">{</span><span class="token punctuation">}</span> <span class="token keyword">as</span> <span class="token constant">T</span><span class="token punctuation">)</span>
        <span class="token keyword">return</span>
      <span class="token punctuation">}</span>
      <span class="token keyword">let</span> postData <span class="token operator">=</span> <span class="token string">''</span>
      req<span class="token punctuation">.</span><span class="token function">on</span><span class="token punctuation">(</span><span class="token string">'data'</span><span class="token punctuation">,</span> <span class="token punctuation">(</span>chunk<span class="token operator">:</span> Buffer<span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
        postData <span class="token operator">+=</span> chunk<span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
      <span class="token punctuation">}</span><span class="token punctuation">)</span>
      req<span class="token punctuation">.</span><span class="token function">on</span><span class="token punctuation">(</span><span class="token string">'end'</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>postData<span class="token punctuation">)</span> <span class="token punctuation">{</span>
          <span class="token function">resolve</span><span class="token punctuation">(</span><span class="token punctuation">{</span><span class="token punctuation">}</span> <span class="token keyword">as</span> <span class="token constant">T</span><span class="token punctuation">)</span>
          <span class="token keyword">return</span>
        <span class="token punctuation">}</span>
        <span class="token function">resolve</span><span class="token punctuation">(</span><span class="token constant">JSON</span><span class="token punctuation">.</span><span class="token function">parse</span><span class="token punctuation">(</span>postData<span class="token punctuation">)</span> <span class="token keyword">as</span> <span class="token constant">T</span><span class="token punctuation">)</span>
      <span class="token punctuation">}</span><span class="token punctuation">)</span>
    <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span>error<span class="token punctuation">)</span> <span class="token punctuation">{</span>
      <span class="token function">reject</span><span class="token punctuation">(</span>error<span class="token punctuation">)</span>
    <span class="token punctuation">}</span>
  <span class="token punctuation">}</span><span class="token punctuation">)</span>
<span class="token punctuation">}</span>
</code></pre></div><h3>路径参数处理</h3>
<p>路由规则：<code>method</code> + <code>path</code> + <code>query</code>，如 <code>GET/category/:id</code>。</p>
<p>其中 <code>path</code> 需要进行参数处理，如：<code>/category/:id</code>。处理完后参数类型应为 <code>params: Record&lt;string, string&gt;</code>，因为可能存在多个参数。</p>
<p>解析完成后，<code>controller</code> 中需要接收 <code>params</code>，需要将 <code>params</code> 转换为 <code>request.params</code>。</p>
<p>具体逻辑如下：</p>
<div class="language-typescript" data-ext="ts" data-title="ts"><pre class="language-typescript"><code><span class="token doc-comment comment">/**
 * Execute route's middleware and controller.
 *
 * <span class="token keyword">@param</span> <span class="token punctuation">{</span>CustomIncomingMessage<span class="token punctuation">}</span> req
 * <span class="token keyword">@param</span> <span class="token punctuation">{</span>ServerResponse<span class="token punctuation">}</span> res
 * <span class="token keyword">@param</span> <span class="token punctuation">{</span>Route<span class="token punctuation">}</span> route
 */</span>
<span class="token keyword">async</span> <span class="token keyword">function</span> <span class="token function">execute</span><span class="token punctuation">(</span>
  req<span class="token operator">:</span> CustomIncomingMessage<span class="token punctuation">,</span>
  res<span class="token operator">:</span> ServerResponse<span class="token punctuation">,</span>
  route<span class="token operator">:</span> Route<span class="token punctuation">,</span>
  params<span class="token operator">:</span> Record<span class="token operator">&lt;</span><span class="token builtin">string</span><span class="token punctuation">,</span> <span class="token builtin">string</span><span class="token operator">&gt;</span>
<span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token keyword">const</span> mwManager <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">MiddlewareManager</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
  req<span class="token punctuation">.</span>params <span class="token operator">=</span> params

  <span class="token keyword">const</span> cors <span class="token operator">=</span> <span class="token function">corsMiddleware</span><span class="token punctuation">(</span><span class="token punctuation">{</span>
    origin<span class="token operator">:</span> <span class="token string">'*'</span><span class="token punctuation">,</span>
    methods<span class="token operator">:</span> <span class="token string">'GET,HEAD,PUT,PATCH,POST,DELETE'</span><span class="token punctuation">,</span>
    credentials<span class="token operator">:</span> <span class="token boolean">false</span>
  <span class="token punctuation">}</span><span class="token punctuation">)</span>
  mwManager<span class="token punctuation">.</span><span class="token function">use</span><span class="token punctuation">(</span>cors<span class="token punctuation">)</span>

  route<span class="token punctuation">.</span>middlewares<span class="token operator">?.</span><span class="token function">forEach</span><span class="token punctuation">(</span><span class="token punctuation">(</span>func<span class="token punctuation">)</span> <span class="token operator">=&gt;</span> mwManager<span class="token punctuation">.</span><span class="token function">use</span><span class="token punctuation">(</span>func<span class="token punctuation">)</span><span class="token punctuation">)</span>
  mwManager<span class="token punctuation">.</span><span class="token function">use</span><span class="token punctuation">(</span>route<span class="token punctuation">.</span>controller<span class="token punctuation">)</span>
  <span class="token keyword">await</span> mwManager<span class="token punctuation">.</span><span class="token function">run</span><span class="token punctuation">(</span>req<span class="token punctuation">,</span> res<span class="token punctuation">)</span>
<span class="token punctuation">}</span>

<span class="token doc-comment comment">/**
 * Matches the provided method and pathname to a route in the Router.
 *
 * <span class="token keyword">@param</span> <span class="token punctuation">{</span>string<span class="token punctuation">}</span> method - The HTTP method to match.
 * <span class="token keyword">@param</span> <span class="token punctuation">{</span>string<span class="token punctuation">}</span> pathname - The URL pathname to match.
 * <span class="token keyword">@return</span> <span class="token punctuation">{</span>Object<span class="token punctuation">}</span> An object containing the matched route and parameters.
 */</span>
<span class="token keyword">const</span> <span class="token function-variable function">matchRoute</span> <span class="token operator">=</span> <span class="token punctuation">(</span>method<span class="token operator">:</span> <span class="token builtin">string</span><span class="token punctuation">,</span> pathname<span class="token operator">:</span> <span class="token builtin">string</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
  <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">const</span> router <span class="token keyword">in</span> Router<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">const</span> <span class="token punctuation">[</span>routeMethod<span class="token punctuation">,</span> <span class="token operator">...</span>routeParts<span class="token punctuation">]</span> <span class="token operator">=</span> router<span class="token punctuation">.</span><span class="token function">split</span><span class="token punctuation">(</span><span class="token string">'/'</span><span class="token punctuation">)</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span>method <span class="token operator">===</span> routeMethod<span class="token punctuation">)</span> <span class="token punctuation">{</span>
      <span class="token keyword">const</span> pathParts <span class="token operator">=</span> pathname<span class="token punctuation">.</span><span class="token function">slice</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">split</span><span class="token punctuation">(</span><span class="token string">'/'</span><span class="token punctuation">)</span>
      <span class="token builtin">console</span><span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>routeMethod<span class="token punctuation">,</span> routeParts<span class="token punctuation">,</span> pathParts<span class="token punctuation">,</span> pathname<span class="token punctuation">)</span>

      <span class="token keyword">if</span> <span class="token punctuation">(</span>routeParts<span class="token punctuation">.</span>length <span class="token operator">===</span> pathParts<span class="token punctuation">.</span>length<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">const</span> params<span class="token operator">:</span> Record<span class="token operator">&lt;</span><span class="token builtin">string</span><span class="token punctuation">,</span> <span class="token builtin">string</span><span class="token operator">&gt;</span> <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token punctuation">}</span>
        <span class="token keyword">let</span> match <span class="token operator">=</span> <span class="token boolean">true</span>

        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">let</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> routeParts<span class="token punctuation">.</span>length<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
          <span class="token keyword">if</span> <span class="token punctuation">(</span>routeParts<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token function">startsWith</span><span class="token punctuation">(</span><span class="token string">':'</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
            params<span class="token punctuation">[</span>routeParts<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token function">slice</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">]</span> <span class="token operator">=</span> pathParts<span class="token punctuation">[</span>i<span class="token punctuation">]</span>
          <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>routeParts<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">!==</span> pathParts<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
            match <span class="token operator">=</span> <span class="token boolean">false</span>
            <span class="token keyword">break</span>
          <span class="token punctuation">}</span>
        <span class="token punctuation">}</span>

        <span class="token keyword">if</span> <span class="token punctuation">(</span>match<span class="token punctuation">)</span> <span class="token punctuation">{</span>
          <span class="token keyword">return</span> <span class="token punctuation">{</span> route<span class="token operator">:</span> Router<span class="token punctuation">[</span>router<span class="token punctuation">]</span><span class="token punctuation">,</span> params <span class="token punctuation">}</span>
        <span class="token punctuation">}</span>
      <span class="token punctuation">}</span>
    <span class="token punctuation">}</span>
  <span class="token punctuation">}</span>

  <span class="token keyword">return</span> <span class="token punctuation">{</span> route<span class="token operator">:</span> notFound<span class="token punctuation">,</span> params<span class="token operator">:</span> <span class="token punctuation">{</span><span class="token punctuation">}</span> <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre></div>]]></content>
    <category term="Project"/>
    <published>2024-07-11T00:00:00.000Z</published>
  </entry>
  <entry>
    <title type="text">rest client 无法调试 localhost</title>
    <id>https://dribble-njr.github.io/blog/blog/frontend/practice/016-rest-client-error.html</id>
    <link href="https://dribble-njr.github.io/blog/blog/frontend/practice/016-rest-client-error.html"/>
    <updated>2024-07-19T06:38:02.000Z</updated>
    <summary type="html"><![CDATA[<h2>故障描述</h2>
<p>REST Client 插件无法调试 localhost。</p>
<ul>
<li>REST Client: v0.25.1</li>
<li>VS code: 1.91.1</li>
</ul>
<p>本地启动 node 服务，使用 REST Client 发送请求：</p>
<div class="language-http" data-ext="http" data-title="http"><pre class="language-http"><code><span class="token request-line"><span class="token method property">GET</span> <span class="token request-target url">http://127.0.0.1:8000/</span> <span class="token http-version property">HTTP/1.1</span></span>
</code></pre></div>]]></summary>
    <content type="html"><![CDATA[<h2>故障描述</h2>
<p>REST Client 插件无法调试 localhost。</p>
<ul>
<li>REST Client: v0.25.1</li>
<li>VS code: 1.91.1</li>
</ul>
<p>本地启动 node 服务，使用 REST Client 发送请求：</p>
<div class="language-http" data-ext="http" data-title="http"><pre class="language-http"><code><span class="token request-line"><span class="token method property">GET</span> <span class="token request-target url">http://127.0.0.1:8000/</span> <span class="token http-version property">HTTP/1.1</span></span>
</code></pre></div><figure><img src="https://raw.githubusercontent.com/dribble-njr/typora-njr/master/img/20240719143258.png" alt="报错" tabindex="0" loading="lazy"><figcaption>报错</figcaption></figure>
<h2>排查</h2>
<p>初步怀疑是走了代理，但是查看代理软件日志，发现并没有可疑请求走了国外代理。</p>
<p>最终在 github 中找到了一个 issue: <a href="https://github.com/Huachao/vscode-restclient/issues/1163" target="_blank" rel="noopener noreferrer">Rest client ceased to work</a>。</p>
<p>并在下方回答中找到：<a href="https://github.com/Huachao/vscode-restclient/issues/1145" target="_blank" rel="noopener noreferrer">ECONNREFUSED - Connection was Rejected</a>。</p>
<p>将代码改为以下即可成功：</p>
<div class="language-http" data-ext="http" data-title="http"><pre class="language-http"><code><span class="token request-line"><span class="token method property">GET</span> <span class="token request-target url">http://[::1]:8000/</span> <span class="token http-version property">HTTP/1.1</span></span>
</code></pre></div>]]></content>
    <category term="practice"/>
    <published>2024-07-19T00:00:00.000Z</published>
  </entry>
  <entry>
    <title type="text">dnd-kit 踩坑</title>
    <id>https://dribble-njr.github.io/blog/blog/frontend/practice/001-dnd-kit.html</id>
    <link href="https://dribble-njr.github.io/blog/blog/frontend/practice/001-dnd-kit.html"/>
    <updated>2024-07-18T09:07:14.000Z</updated>
    <summary type="html"><![CDATA[<p>@dnd-kit - 用于 React 的轻量级、模块化、高性能、可访问和可扩展的拖放工具包。</p>
<h2>Context Provider</h2>
<div class="language-tsx" data-ext="tsx" data-title="tsx"><pre class="language-tsx"><code><span class="token keyword">const</span> <span class="token function-variable function">SortableItem</span> <span class="token operator">=</span> <span class="token punctuation">(</span>props<span class="token operator">:</span> <span class="token punctuation">{</span>
  id<span class="token operator">:</span> <span class="token builtin">string</span>
  <span class="token function-variable function">itemRender</span><span class="token operator">:</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> ReactElement
<span class="token punctuation">}</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
  <span class="token keyword">const</span> <span class="token punctuation">{</span> attributes<span class="token punctuation">,</span> listeners<span class="token punctuation">,</span> setNodeRef<span class="token punctuation">,</span> transform<span class="token punctuation">,</span> transition <span class="token punctuation">}</span> <span class="token operator">=</span>
    <span class="token function">useSortable</span><span class="token punctuation">(</span><span class="token punctuation">{</span> id<span class="token operator">:</span> props<span class="token punctuation">.</span>id <span class="token punctuation">}</span><span class="token punctuation">)</span>
  <span class="token keyword">const</span> style <span class="token operator">=</span> <span class="token punctuation">{</span>
    transform<span class="token operator">:</span> <span class="token constant">CSS</span><span class="token punctuation">.</span>Transform<span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span>transform<span class="token punctuation">)</span><span class="token punctuation">,</span>
    transition<span class="token operator">:</span> transition<span class="token operator">!</span><span class="token punctuation">,</span>
    cursor<span class="token operator">:</span> <span class="token string">'move'</span>
  <span class="token punctuation">}</span>
  <span class="token keyword">return</span> <span class="token punctuation">(</span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span>
      <span class="token attr-name">className</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>mr-2<span class="token punctuation">"</span></span>
      <span class="token attr-name">ref</span><span class="token script language-javascript"><span class="token script-punctuation punctuation">=</span><span class="token punctuation">{</span>setNodeRef<span class="token punctuation">}</span></span>
      <span class="token attr-name">style</span><span class="token script language-javascript"><span class="token script-punctuation punctuation">=</span><span class="token punctuation">{</span><span class="token punctuation">{</span> <span class="token operator">...</span>style <span class="token punctuation">}</span><span class="token punctuation">}</span></span>
      <span class="token spread"><span class="token punctuation">{</span><span class="token operator">...</span>attributes<span class="token punctuation">}</span></span>
      <span class="token spread"><span class="token punctuation">{</span><span class="token operator">...</span>listeners<span class="token punctuation">}</span></span>
    <span class="token punctuation">&gt;</span></span><span class="token plain-text">
      </span><span class="token punctuation">{</span>props<span class="token punctuation">.</span><span class="token function">itemRender</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">}</span><span class="token plain-text">
    </span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">&gt;</span></span>
  <span class="token punctuation">)</span>
<span class="token punctuation">}</span>
</code></pre></div>]]></summary>
    <content type="html"><![CDATA[<p>@dnd-kit - 用于 React 的轻量级、模块化、高性能、可访问和可扩展的拖放工具包。</p>
<h2>Context Provider</h2>
<div class="language-tsx" data-ext="tsx" data-title="tsx"><pre class="language-tsx"><code><span class="token keyword">const</span> <span class="token function-variable function">SortableItem</span> <span class="token operator">=</span> <span class="token punctuation">(</span>props<span class="token operator">:</span> <span class="token punctuation">{</span>
  id<span class="token operator">:</span> <span class="token builtin">string</span>
  <span class="token function-variable function">itemRender</span><span class="token operator">:</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> ReactElement
<span class="token punctuation">}</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
  <span class="token keyword">const</span> <span class="token punctuation">{</span> attributes<span class="token punctuation">,</span> listeners<span class="token punctuation">,</span> setNodeRef<span class="token punctuation">,</span> transform<span class="token punctuation">,</span> transition <span class="token punctuation">}</span> <span class="token operator">=</span>
    <span class="token function">useSortable</span><span class="token punctuation">(</span><span class="token punctuation">{</span> id<span class="token operator">:</span> props<span class="token punctuation">.</span>id <span class="token punctuation">}</span><span class="token punctuation">)</span>
  <span class="token keyword">const</span> style <span class="token operator">=</span> <span class="token punctuation">{</span>
    transform<span class="token operator">:</span> <span class="token constant">CSS</span><span class="token punctuation">.</span>Transform<span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span>transform<span class="token punctuation">)</span><span class="token punctuation">,</span>
    transition<span class="token operator">:</span> transition<span class="token operator">!</span><span class="token punctuation">,</span>
    cursor<span class="token operator">:</span> <span class="token string">'move'</span>
  <span class="token punctuation">}</span>
  <span class="token keyword">return</span> <span class="token punctuation">(</span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span>
      <span class="token attr-name">className</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>mr-2<span class="token punctuation">"</span></span>
      <span class="token attr-name">ref</span><span class="token script language-javascript"><span class="token script-punctuation punctuation">=</span><span class="token punctuation">{</span>setNodeRef<span class="token punctuation">}</span></span>
      <span class="token attr-name">style</span><span class="token script language-javascript"><span class="token script-punctuation punctuation">=</span><span class="token punctuation">{</span><span class="token punctuation">{</span> <span class="token operator">...</span>style <span class="token punctuation">}</span><span class="token punctuation">}</span></span>
      <span class="token spread"><span class="token punctuation">{</span><span class="token operator">...</span>attributes<span class="token punctuation">}</span></span>
      <span class="token spread"><span class="token punctuation">{</span><span class="token operator">...</span>listeners<span class="token punctuation">}</span></span>
    <span class="token punctuation">&gt;</span></span><span class="token plain-text">
      </span><span class="token punctuation">{</span>props<span class="token punctuation">.</span><span class="token function">itemRender</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">}</span><span class="token plain-text">
    </span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">&gt;</span></span>
  <span class="token punctuation">)</span>
<span class="token punctuation">}</span>
</code></pre></div><h2>踩坑</h2>
<h3>dnd kit 会将鼠标点击事件识别为拖拽事件</h3>
<p><a href="https://github.com/clauderic/dnd-kit/issues/1204" target="_blank" rel="noopener noreferrer">https://github.com/clauderic/dnd-kit/issues/1204</a></p>
<p><a href="https://github.com/clauderic/dnd-kit/issues/893" target="_blank" rel="noopener noreferrer">https://github.com/clauderic/dnd-kit/issues/893</a></p>
<p>需要注册一些传感器：</p>
<div class="language-javascript" data-ext="js" data-title="js"><pre class="language-javascript"><code><span class="token keyword">const</span> sensor <span class="token operator">=</span> <span class="token function">useSensor</span><span class="token punctuation">(</span>PointerSensor<span class="token punctuation">,</span> <span class="token punctuation">{</span>
  <span class="token literal-property property">activationConstraint</span><span class="token operator">:</span> <span class="token punctuation">{</span> <span class="token literal-property property">distance</span><span class="token operator">:</span> <span class="token number">10</span> <span class="token punctuation">}</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span>
</code></pre></div><h3>条件拖拽</h3>
<p>让元素在某些条件下允许排序：</p>
<div class="language-javascript" data-ext="js" data-title="js"><pre class="language-javascript"><code><span class="token keyword">const</span> <span class="token punctuation">{</span> attributes<span class="token punctuation">,</span> listeners<span class="token punctuation">,</span> setNodeRef<span class="token punctuation">,</span> transform<span class="token punctuation">,</span> transition <span class="token punctuation">}</span> <span class="token operator">=</span>
  <span class="token function">useSortable</span><span class="token punctuation">(</span><span class="token punctuation">{</span> <span class="token literal-property property">id</span><span class="token operator">:</span> props<span class="token punctuation">.</span>id<span class="token punctuation">,</span> <span class="token literal-property property">disabled</span><span class="token operator">:</span> props<span class="token punctuation">.</span>disabled <span class="token punctuation">}</span><span class="token punctuation">)</span>
</code></pre></div><h3>video 元素无法被拖拽</h3>
<p>外层包裹一个 <code>div</code>。</p>
<div class="language-tsx" data-ext="tsx" data-title="tsx"><pre class="language-tsx"><code><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span>
  <span class="token attr-name">className</span><span class="token script language-javascript"><span class="token script-punctuation punctuation">=</span><span class="token punctuation">{</span>style<span class="token punctuation">.</span>videoItem<span class="token punctuation">}</span></span>
  <span class="token attr-name">onMouseEnter</span><span class="token script language-javascript"><span class="token script-punctuation punctuation">=</span><span class="token punctuation">{</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
    videoRef<span class="token punctuation">.</span>current<span class="token operator">?.</span><span class="token function">play</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
  <span class="token punctuation">}</span><span class="token punctuation">}</span></span>
  <span class="token attr-name">onMouseLeave</span><span class="token script language-javascript"><span class="token script-punctuation punctuation">=</span><span class="token punctuation">{</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
    videoRef<span class="token punctuation">.</span>current<span class="token operator">?.</span><span class="token function">pause</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
  <span class="token punctuation">}</span><span class="token punctuation">}</span></span>
<span class="token punctuation">&gt;</span></span><span class="token plain-text">
  </span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>video</span>
    <span class="token attr-name">ref</span><span class="token script language-javascript"><span class="token script-punctuation punctuation">=</span><span class="token punctuation">{</span>videoRef<span class="token punctuation">}</span></span>
    <span class="token attr-name">src</span><span class="token script language-javascript"><span class="token script-punctuation punctuation">=</span><span class="token punctuation">{</span>props<span class="token punctuation">.</span>resource<span class="token punctuation">.</span>resourceUrl<span class="token punctuation">}</span></span>
    <span class="token attr-name">controls</span>
    <span class="token attr-name">className</span><span class="token script language-javascript"><span class="token script-punctuation punctuation">=</span><span class="token punctuation">{</span>style<span class="token punctuation">.</span>video<span class="token punctuation">}</span></span>
    <span class="token attr-name">muted</span>
    <span class="token attr-name">loop</span>
  <span class="token punctuation">&gt;</span></span><span class="token plain-text">
    </span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>track</span> <span class="token attr-name">kind</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>captions<span class="token punctuation">"</span></span> <span class="token spread"><span class="token punctuation">{</span><span class="token operator">...</span>props<span class="token punctuation">}</span></span> <span class="token punctuation">/&gt;</span></span><span class="token plain-text">
  </span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>video</span><span class="token punctuation">&gt;</span></span><span class="token plain-text">
</span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">&gt;</span></span>
</code></pre></div><h3>拖拽动画异常</h3>
<p>排序策略</p>
<p>需要选择默认</p>
<h3>无限拖拽出现滚动条</h3>
<div class="language-javascript" data-ext="js" data-title="js"><pre class="language-javascript"><code>modifiers<span class="token operator">=</span><span class="token punctuation">{</span><span class="token punctuation">[</span>restrictToFirstScrollableAncestor<span class="token punctuation">]</span><span class="token punctuation">}</span>
</code></pre></div><h3>鼠标跟手</h3>
<p><a href="https://github.com/clauderic/dnd-kit/issues/122" target="_blank" rel="noopener noreferrer">https://github.com/clauderic/dnd-kit/issues/122</a><br>
<a href="https://github.com/clauderic/dnd-kit/pull/334" target="_blank" rel="noopener noreferrer">https://github.com/clauderic/dnd-kit/pull/334</a></p>
<p><a href="https://github.com/clauderic/dnd-kit/blob/master/stories/components/Draggable/DraggableOverlay.tsx" target="_blank" rel="noopener noreferrer">https://github.com/clauderic/dnd-kit/blob/master/stories/components/Draggable/DraggableOverlay.tsx</a></p>
]]></content>
    <category term="practice"/>
    <published>2023-11-23T00:00:00.000Z</published>
  </entry>
  <entry>
    <title type="text">自动切换 node 版本</title>
    <id>https://dribble-njr.github.io/blog/blog/frontend/practice/015-auto-change-node.html</id>
    <link href="https://dribble-njr.github.io/blog/blog/frontend/practice/015-auto-change-node.html"/>
    <updated>2024-07-18T07:25:19.000Z</updated>
    <summary type="html"><![CDATA[<h2>环境准备</h2>
<ol>
<li>安装 <code>nvm</code><div class="language-bash" data-ext="sh" data-title="sh"><pre class="language-bash"><code><span class="token function">curl</span> -o- https://raw.githubusercontent.com/nvm-sh/nvm/v0.39.2/install.sh <span class="token operator">|</span> <span class="token function">bash</span>
</code></pre></div></li>
<li>安装 <code>oh-my-zsh</code>：<div class="language-bash" data-ext="sh" data-title="sh"><pre class="language-bash"><code><span class="token function">sh</span> <span class="token parameter variable">-c</span> <span class="token string">"<span class="token variable"><span class="token variable">$(</span><span class="token function">curl</span> <span class="token parameter variable">-fsSL</span> https://raw.githubusercontent.com/ohmyzsh/ohmyzsh/master/tools/install.sh<span class="token variable">)</span></span>"</span>
</code></pre></div></li>
</ol>]]></summary>
    <content type="html"><![CDATA[<h2>环境准备</h2>
<ol>
<li>安装 <code>nvm</code><div class="language-bash" data-ext="sh" data-title="sh"><pre class="language-bash"><code><span class="token function">curl</span> -o- https://raw.githubusercontent.com/nvm-sh/nvm/v0.39.2/install.sh <span class="token operator">|</span> <span class="token function">bash</span>
</code></pre></div></li>
<li>安装 <code>oh-my-zsh</code>：<div class="language-bash" data-ext="sh" data-title="sh"><pre class="language-bash"><code><span class="token function">sh</span> <span class="token parameter variable">-c</span> <span class="token string">"<span class="token variable"><span class="token variable">$(</span><span class="token function">curl</span> <span class="token parameter variable">-fsSL</span> https://raw.githubusercontent.com/ohmyzsh/ohmyzsh/master/tools/install.sh<span class="token variable">)</span></span>"</span>
</code></pre></div></li>
</ol>
<h2>配置 <code>.zshrc</code></h2>
<p>在 <code>.zshrc</code> 下新增以下内容：<code>vi ~/.zshrc</code></p>
<div class="language-bash" data-ext="sh" data-title="sh"><pre class="language-bash"><code><span class="token comment"># Load nvm and set up automatic version switching</span>
<span class="token builtin class-name">export</span> <span class="token assign-left variable">NVM_DIR</span><span class="token operator">=</span><span class="token string">"<span class="token variable"><span class="token variable">$(</span><span class="token punctuation">[</span> <span class="token parameter variable">-z</span> <span class="token string">"<span class="token variable">${XDG_CONFIG_HOME-}</span>"</span> <span class="token punctuation">]</span> <span class="token operator">&amp;&amp;</span> <span class="token builtin class-name">printf</span> %s <span class="token string">"<span class="token variable">${<span class="token environment constant">HOME</span>}</span>/.nvm"</span> <span class="token operator">||</span> <span class="token builtin class-name">printf</span> %s <span class="token string">"<span class="token variable">${XDG_CONFIG_HOME}</span>/nvm"</span><span class="token variable">)</span></span>"</span>
<span class="token punctuation">[</span> <span class="token parameter variable">-s</span> <span class="token string">"<span class="token variable">$NVM_DIR</span>/nvm.sh"</span> <span class="token punctuation">]</span> <span class="token operator">&amp;&amp;</span> <span class="token punctuation">\</span>. <span class="token string">"<span class="token variable">$NVM_DIR</span>/nvm.sh"</span> <span class="token comment"># This loads nvm</span>

<span class="token comment"># Enable oh-my-zsh plugins</span>
<span class="token assign-left variable">plugins</span><span class="token operator">=</span><span class="token punctuation">(</span>git z nvm zsh-syntax-highlighting zsh-autosuggestions<span class="token punctuation">)</span>

<span class="token comment"># Load oh-my-zsh</span>
<span class="token builtin class-name">source</span> <span class="token variable">$ZSH</span>/oh-my-zsh.sh

<span class="token comment"># oh-my-zsh nvm plugin settings</span>
zstyle <span class="token string">':omz:plugins:nvm'</span> lazy <span class="token function">yes</span>
zstyle <span class="token string">':omz:plugins:nvm'</span> autoload <span class="token function">yes</span>
zstyle <span class="token string">':omz:plugins:nvm'</span> silent-autoload <span class="token function">yes</span>

<span class="token comment"># Load nvm automatically when changing directories</span>
autoload <span class="token parameter variable">-U</span> add-zsh-hook
<span class="token function-name function">load-nvmrc</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token keyword">if</span> <span class="token punctuation">[</span><span class="token punctuation">[</span> <span class="token parameter variable">-f</span> .nvmrc <span class="token operator">&amp;&amp;</span> <span class="token parameter variable">-r</span> .nvmrc <span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">;</span> <span class="token keyword">then</span>
    nvm use
  <span class="token keyword">elif</span> <span class="token punctuation">[</span><span class="token punctuation">[</span> <span class="token variable"><span class="token variable">$(</span>nvm version<span class="token variable">)</span></span> <span class="token operator">!=</span> <span class="token variable"><span class="token variable">$(</span>nvm version default<span class="token variable">)</span></span> <span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">;</span> <span class="token keyword">then</span>
    nvm use default
  <span class="token keyword">fi</span>
<span class="token punctuation">}</span>
add-zsh-hook chpwd load-nvmrc
load-nvmrc
</code></pre></div><p>保存 <code>.zshrc</code> 文件后，重启终端或重新加载配置：<code>source ~/.zshrc</code>。</p>
<div class="hint-container tip">
<p class="hint-container-title">提示</p>
<p><code>oh-my-zsh</code> 中的 <code>nvm</code> 提供了一些快捷命令和自动补全功能，使得使用 nvm (Node Version Manager) 更加便捷。</p>
</div>
<h2>添加 <code>.nvmrc</code></h2>
<p>项目根目录下创建 <code>.nvmrc</code> 文件，内容为 <code>v20.10.0</code>。</p>
<figure><img src="https://raw.githubusercontent.com/dribble-njr/typora-njr/master/img/20240718145716.png" alt="auto-change-node" tabindex="0" loading="lazy"><figcaption>auto-change-node</figcaption></figure>
]]></content>
    <category term="practice"/>
    <published>2024-07-18T00:00:00.000Z</published>
  </entry>
  <entry>
    <title type="text">快速开始</title>
    <id>https://dribble-njr.github.io/blog/blog/backend/database/sql/01-quick-start.html</id>
    <link href="https://dribble-njr.github.io/blog/blog/backend/database/sql/01-quick-start.html"/>
    <updated>2024-07-18T03:15:15.000Z</updated>
    <summary type="html"><![CDATA[<p>SQL (Structured Query Language:结构化查询语言) 是用于管理关系数据库管理系统。</p>
<p>SQL 通过一系列的语句和命令来执行数据定义、数据查询、数据操作和数据控制等功能,包括数据插入、查询、更新和删除，数据库模式创建和修改，以及数据访问控制。</p>
<h2>SQL 是什么？</h2>
<ul>
<li>SQL 指结构化查询语言，全称是 Structured Query Language。</li>
<li>SQL 让您可以访问和处理数据库，包括数据插入、查询、更新和删除。</li>
<li>SQL 语言采用英语关键词，使其易读易写。</li>
<li>SQL 由国际标准化组织（ISO）和美国国家标准协会（ANSI）标准化。</li>
<li>SQL 提供了丰富的操作数据的功能，从简单的查询到复杂的数据库管理操作。</li>
</ul>]]></summary>
    <content type="html"><![CDATA[<p>SQL (Structured Query Language:结构化查询语言) 是用于管理关系数据库管理系统。</p>
<p>SQL 通过一系列的语句和命令来执行数据定义、数据查询、数据操作和数据控制等功能,包括数据插入、查询、更新和删除，数据库模式创建和修改，以及数据访问控制。</p>
<h2>SQL 是什么？</h2>
<ul>
<li>SQL 指结构化查询语言，全称是 Structured Query Language。</li>
<li>SQL 让您可以访问和处理数据库，包括数据插入、查询、更新和删除。</li>
<li>SQL 语言采用英语关键词，使其易读易写。</li>
<li>SQL 由国际标准化组织（ISO）和美国国家标准协会（ANSI）标准化。</li>
<li>SQL 提供了丰富的操作数据的功能，从简单的查询到复杂的数据库管理操作。</li>
</ul>
<h2>SQL 能做什么？</h2>
<ul>
<li>SQL 面向数据库执行查询</li>
<li>SQL 可从数据库取回数据</li>
<li>SQL 可在数据库中插入新的记录</li>
<li>SQL 可更新数据库中的数据</li>
<li>SQL 可从数据库删除记录</li>
<li>SQL 可创建新数据库</li>
<li>SQL 可在数据库中创建新表</li>
<li>SQL 可在数据库中创建存储过程</li>
<li>SQL 可在数据库中创建视图</li>
<li>SQL 可以设置表、存储过程和视图的权限</li>
</ul>
<div class="hint-container warning">
<p class="hint-container-title">注意</p>
<p>虽然 SQL 是一门 ANSI（American National Standards Institute 美国国家标准化组织）标准的计算机语言，但是仍然存在着多种不同版本的 SQL 语言。</p>
<p>然而，为了与 ANSI 标准相兼容，它们必须以相似的方式共同地来支持一些主要的命令（比如 SELECT、UPDATE、DELETE、INSERT、WHERE 等等）。</p>
</div>
<h2>SQL 发展历史</h2>
<p>以下是 SQL 发展历史的关键节点：</p>
<h3>1970s: 起源与早期发展</h3>
<ol>
<li>1970 年：埃德加·科德（Edgar F. Codd）发表了《A Relational Model of Data for Large Shared Data Banks》论文，提出了关系数据库的概念，为 SQL 的发展奠定了理论基础。</li>
<li>1973 年-1974 年：IBM 的研究人员 Donald D. Chamberlin 和 Raymond F. Boyce 在科德的理论基础上开发了一种名为 SEQUEL（Structured English Query Language）的语言，用于操作和管理 IBM 的 System R 关系数据库。</li>
<li>1976 年：SEQUEL 更名为 SQL（Structured Query Language）。</li>
</ol>
<h3>1980s: 标准化与商业化</h3>
<ol start="4">
<li>1981 年：IBM 推出了商用关系数据库系统 SQL/DS（Database System）和 DB2（Database 2）。</li>
<li>1986 年：美国国家标准协会（ANSI）发布了第一个 SQL 标准 ANSI SQL-86（SQL-87）。</li>
<li>1987 年：国际标准化组织（ISO）也采纳了 ANSI SQL-86 作为国际标准。</li>
</ol>
<h3>1990s: 扩展与改进</h3>
<ol start="7">
<li>1992 年：发布了 SQL-92（SQL2）标准，显著扩展了 SQL 语言的功能，包括对新数据类型、嵌套查询和连接的支持。</li>
<li>1999 年：发布了 SQL:1999（SQL3）标准，引入了对象关系数据库（ORDBMS）特性、递归查询、触发器和用户定义函数。</li>
</ol>
<h3>2000s: 持续演进与新特性</h3>
<ol start="9">
<li>2003 年：发布了 SQL:2003 标准，引入了 XML 相关特性和窗口函数。</li>
<li>2006 年：发布了 SQL:2006 标准，主要增强了对 XML 的支持。</li>
<li>2008 年：发布了 SQL:2008 标准，进一步改进了语法和性能优化。</li>
</ol>
<h3>2010s: 新功能与大数据支持</h3>
<ol start="12">
<li>2011 年：发布了 SQL:2011 标准，增加了对时间数据类型和时间旅行（temporal data）的支持。</li>
<li>2016 年：发布了 SQL:2016 标准，引入了 JSON 数据类型和相关操作函数，适应了 NoSQL 数据库和大数据处理需求。</li>
</ol>
<h3>2020s: 现代化与标准更新</h3>
<ol start="14">
<li>2023 年：最新的 SQL 标准持续改进，增加了对更现代化的数据库需求和特性的支持。</li>
</ol>
<h2>总结</h2>
<p>SQL 从一种基于关系模型的查询语言发展成为现代数据库管理的核心语言，其标准在不断演进和扩展。</p>
<p>各大数据库管理系统（如 MySQL、PostgreSQL、SQLite、SQL Server、Oracle 等）在遵循 SQL 标准的基础上，加入了自身的扩展和优化，使 SQL 成为数据操作和管理的强大工具。</p>
<p>SQL 的发展不仅体现了技术的进步，也反映了数据管理需求的变化和增长。</p>
]]></content>
    <category term="database"/>
    <published>2024-07-17T00:00:00.000Z</published>
  </entry>
  <entry>
    <title type="text">登陆失败 HTTP 状态码</title>
    <id>https://dribble-njr.github.io/blog/blog/computer-science/networking/009-http-code-when-authorized-refused.html</id>
    <link href="https://dribble-njr.github.io/blog/blog/computer-science/networking/009-http-code-when-authorized-refused.html"/>
    <updated>2024-07-10T09:58:28.000Z</updated>
    <summary type="html"><![CDATA[<p>如果用户尝试登陆，但用户名或密码不正确，应该返回什么状态码？</p>
<p>这个问题在社区中有一定争议，有些人认为应该返回 <code>403 Forbidden</code>，有些人认为应该返回 <code>404 Not Found</code>，有些人认为应该返回 <code>400 Bad Request</code>，有些人认为应该返回 <code>401 Unauthorized</code>。</p>
<p><code>403 Forbidden</code> 表示拒绝访问，但是请求接口是可以访问的，因此该状态码肯定不正确。</p>
<p><code>404 Not Found</code> 表示请求的资源不存在，但是请求接口是存在的，因此该状态码也不正确。</p>]]></summary>
    <content type="html"><![CDATA[<p>如果用户尝试登陆，但用户名或密码不正确，应该返回什么状态码？</p>
<p>这个问题在社区中有一定争议，有些人认为应该返回 <code>403 Forbidden</code>，有些人认为应该返回 <code>404 Not Found</code>，有些人认为应该返回 <code>400 Bad Request</code>，有些人认为应该返回 <code>401 Unauthorized</code>。</p>
<p><code>403 Forbidden</code> 表示拒绝访问，但是请求接口是可以访问的，因此该状态码肯定不正确。</p>
<p><code>404 Not Found</code> 表示请求的资源不存在，但是请求接口是存在的，因此该状态码也不正确。</p>
<p><code>400 Bad Request</code> 表示请求参数错误，但是用户输入的数据格式也是完全正确的，因此也不应该用该状态码。</p>
<p>而根据 <a href="https://stackoverflow.com/questions/32752578/whats-the-appropriate-http-status-code-to-return-if-a-user-tries-logging-in-wit" target="_blank" rel="noopener noreferrer">What's the appropriate HTTP status code to return if a user tries logging in with an incorrect username / password, but correct format?</a> 讨论，应该返回 <code>401 Unauthorized</code>。</p>
<p>根据 <a href="https://www.rfc-editor.org/rfc/rfc7235#section-3.1" target="_blank" rel="noopener noreferrer">RFC7235</a>：如果请求中包含身份验证凭据，则 <code>401</code> 响应表示拒绝对这些凭据进行授权。</p>
]]></content>
    <category term="计算机网络"/>
    <published>2024-07-10T00:00:00.000Z</published>
  </entry>
  <entry>
    <title type="text">修改提交</title>
    <id>https://dribble-njr.github.io/blog/blog/reading/pro-git/06-change-commit.html</id>
    <link href="https://dribble-njr.github.io/blog/blog/reading/pro-git/06-change-commit.html"/>
    <updated>2024-07-10T03:00:38.000Z</updated>
    <summary type="html"><![CDATA[<h2>修改提交信息</h2>
<p>在 Git 中，修改提交是通过 <code>git commit --amend</code> 命令来完成的。</p>
<div class="language-bash" data-ext="sh" data-title="sh"><pre class="language-bash"><code><span class="token function">git</span> commit <span class="token parameter variable">--amend</span>
</code></pre></div><p>此时就能出现一个交互式的修改提交窗口，可以修改提交信息，添加文件，或者删除文件。</p>]]></summary>
    <content type="html"><![CDATA[<h2>修改提交信息</h2>
<p>在 Git 中，修改提交是通过 <code>git commit --amend</code> 命令来完成的。</p>
<div class="language-bash" data-ext="sh" data-title="sh"><pre class="language-bash"><code><span class="token function">git</span> commit <span class="token parameter variable">--amend</span>
</code></pre></div><p>此时就能出现一个交互式的修改提交窗口，可以修改提交信息，添加文件，或者删除文件。</p>
<h2>修改作者信息</h2>
<p>由于某次提交时不小心将 <code>git user</code> 改成了其他账户，在后续 <code>commit</code> 时提交了错误的用户信息，需要手动修改：<code>git rebase -i &lt;commit-hash&gt;</code>。</p>
<p>意为从当前 <code>commit</code> 后的所有提交。将 <code>pick</code> 改为 <code>edit</code>，并使用 <code>git commit --amend --author="Author Name &lt;email&gt;"</code> 修改用户。</p>
<p>满意后使用 <code>git rebase --continue</code> 关闭本次修改。</p>
]]></content>
    <category term="READING"/>
    <published>2024-07-10T00:00:00.000Z</published>
  </entry>
  <entry>
    <title type="text">手写 new 操作符</title>
    <id>https://dribble-njr.github.io/blog/blog/frontend/basic/javascript/014-implement-new.html</id>
    <link href="https://dribble-njr.github.io/blog/blog/frontend/basic/javascript/014-implement-new.html"/>
    <updated>2024-06-27T07:26:14.000Z</updated>
    <summary type="html"><![CDATA[<p><code>new</code> 操作符的实现过程：</p>
<ol>
<li>首先创建一个空对象；</li>
<li>将空对象的隐式原型 <code>[[prototype]]</code> 赋值为构造函数的 <code>prototype</code> 对象；</li>
<li>让构造函数的 <code>this</code> 指向这个空对象，执行构造函数的代码；</li>
<li>判断构造函数返回值的类型，如果是基本类型，则返回创建的对象，如果是引用类型，则返回这个引用类型。</li>
</ol>
<p>那么具体实现可以这么做：</p>
<div class="language-javascript" data-ext="js" data-title="js"><pre class="language-javascript"><code><span class="token keyword">function</span> <span class="token function">newOperator</span><span class="token punctuation">(</span><span class="token parameter">constructor<span class="token punctuation">,</span> <span class="token operator">...</span>args</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token keyword">typeof</span> constructor <span class="token operator">!==</span> <span class="token string">'function'</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    console<span class="token punctuation">.</span><span class="token function">error</span><span class="token punctuation">(</span><span class="token string">'type error'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span>

  <span class="token comment">// 创建一个新对象，并将构造函数的 prototype 对象作为它的原型</span>
  <span class="token keyword">const</span> instance <span class="token operator">=</span> Object<span class="token punctuation">.</span><span class="token function">create</span><span class="token punctuation">(</span>constructor<span class="token punctuation">.</span>prototype<span class="token punctuation">)</span>
  <span class="token comment">// 执行构造函数的代码</span>
  <span class="token keyword">const</span> res <span class="token operator">=</span> <span class="token function">constructor</span><span class="token punctuation">.</span><span class="token function">apply</span><span class="token punctuation">(</span>instance<span class="token punctuation">,</span> args<span class="token punctuation">)</span>
  <span class="token comment">// 判断返回值的类型</span>
  <span class="token keyword">let</span> flag <span class="token operator">=</span> res <span class="token operator">&amp;&amp;</span> <span class="token punctuation">(</span><span class="token keyword">typeof</span> res <span class="token operator">===</span> <span class="token string">'object'</span> <span class="token operator">||</span> <span class="token keyword">typeof</span> res <span class="token operator">===</span> <span class="token string">'function'</span><span class="token punctuation">)</span>

  <span class="token keyword">return</span> flag <span class="token operator">?</span> res <span class="token operator">:</span> instance
<span class="token punctuation">}</span>

<span class="token keyword">function</span> <span class="token function">Person</span><span class="token punctuation">(</span><span class="token parameter">name<span class="token punctuation">,</span> age</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token keyword">this</span><span class="token punctuation">.</span>name <span class="token operator">=</span> name
  <span class="token keyword">this</span><span class="token punctuation">.</span>age <span class="token operator">=</span> age
<span class="token punctuation">}</span>

<span class="token keyword">const</span> person <span class="token operator">=</span> <span class="token function">newOperator</span><span class="token punctuation">(</span>Person<span class="token punctuation">,</span> <span class="token string">'wang'</span><span class="token punctuation">,</span> <span class="token number">18</span><span class="token punctuation">)</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>person<span class="token punctuation">)</span> <span class="token comment">// Person { name: 'wang', age: 18 }</span>
</code></pre></div>]]></summary>
    <content type="html"><![CDATA[<p><code>new</code> 操作符的实现过程：</p>
<ol>
<li>首先创建一个空对象；</li>
<li>将空对象的隐式原型 <code>[[prototype]]</code> 赋值为构造函数的 <code>prototype</code> 对象；</li>
<li>让构造函数的 <code>this</code> 指向这个空对象，执行构造函数的代码；</li>
<li>判断构造函数返回值的类型，如果是基本类型，则返回创建的对象，如果是引用类型，则返回这个引用类型。</li>
</ol>
<p>那么具体实现可以这么做：</p>
<div class="language-javascript" data-ext="js" data-title="js"><pre class="language-javascript"><code><span class="token keyword">function</span> <span class="token function">newOperator</span><span class="token punctuation">(</span><span class="token parameter">constructor<span class="token punctuation">,</span> <span class="token operator">...</span>args</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token keyword">typeof</span> constructor <span class="token operator">!==</span> <span class="token string">'function'</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    console<span class="token punctuation">.</span><span class="token function">error</span><span class="token punctuation">(</span><span class="token string">'type error'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span>

  <span class="token comment">// 创建一个新对象，并将构造函数的 prototype 对象作为它的原型</span>
  <span class="token keyword">const</span> instance <span class="token operator">=</span> Object<span class="token punctuation">.</span><span class="token function">create</span><span class="token punctuation">(</span>constructor<span class="token punctuation">.</span>prototype<span class="token punctuation">)</span>
  <span class="token comment">// 执行构造函数的代码</span>
  <span class="token keyword">const</span> res <span class="token operator">=</span> <span class="token function">constructor</span><span class="token punctuation">.</span><span class="token function">apply</span><span class="token punctuation">(</span>instance<span class="token punctuation">,</span> args<span class="token punctuation">)</span>
  <span class="token comment">// 判断返回值的类型</span>
  <span class="token keyword">let</span> flag <span class="token operator">=</span> res <span class="token operator">&amp;&amp;</span> <span class="token punctuation">(</span><span class="token keyword">typeof</span> res <span class="token operator">===</span> <span class="token string">'object'</span> <span class="token operator">||</span> <span class="token keyword">typeof</span> res <span class="token operator">===</span> <span class="token string">'function'</span><span class="token punctuation">)</span>

  <span class="token keyword">return</span> flag <span class="token operator">?</span> res <span class="token operator">:</span> instance
<span class="token punctuation">}</span>

<span class="token keyword">function</span> <span class="token function">Person</span><span class="token punctuation">(</span><span class="token parameter">name<span class="token punctuation">,</span> age</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token keyword">this</span><span class="token punctuation">.</span>name <span class="token operator">=</span> name
  <span class="token keyword">this</span><span class="token punctuation">.</span>age <span class="token operator">=</span> age
<span class="token punctuation">}</span>

<span class="token keyword">const</span> person <span class="token operator">=</span> <span class="token function">newOperator</span><span class="token punctuation">(</span>Person<span class="token punctuation">,</span> <span class="token string">'wang'</span><span class="token punctuation">,</span> <span class="token number">18</span><span class="token punctuation">)</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>person<span class="token punctuation">)</span> <span class="token comment">// Person { name: 'wang', age: 18 }</span>
</code></pre></div>]]></content>
    <category term="JavaScript"/>
    <published>2022-08-23T00:00:00.000Z</published>
  </entry>
  <entry>
    <title type="text">类</title>
    <id>https://dribble-njr.github.io/blog/blog/frontend/basic/javascript/013-class.html</id>
    <link href="https://dribble-njr.github.io/blog/blog/frontend/basic/javascript/013-class.html"/>
    <updated>2024-06-26T11:03:01.000Z</updated>
    <summary type="html"><![CDATA[<h2>声明</h2>
<p>与函数类型相似，定义类也有两种主要方式：类声明和类表达式。这两种方式都使用 <code>class</code> 关键字加大括号：</p>
<div class="language-javascript" data-ext="js" data-title="js"><pre class="language-javascript"><code><span class="token comment">// 类声明</span>
<span class="token keyword">class</span> <span class="token class-name">Person</span> <span class="token punctuation">{</span><span class="token punctuation">}</span>

<span class="token comment">// 类表达式</span>
<span class="token keyword">const</span> Person <span class="token operator">=</span> <span class="token keyword">class</span> <span class="token punctuation">{</span><span class="token punctuation">}</span>
</code></pre></div>]]></summary>
    <content type="html"><![CDATA[<h2>声明</h2>
<p>与函数类型相似，定义类也有两种主要方式：类声明和类表达式。这两种方式都使用 <code>class</code> 关键字加大括号：</p>
<div class="language-javascript" data-ext="js" data-title="js"><pre class="language-javascript"><code><span class="token comment">// 类声明</span>
<span class="token keyword">class</span> <span class="token class-name">Person</span> <span class="token punctuation">{</span><span class="token punctuation">}</span>

<span class="token comment">// 类表达式</span>
<span class="token keyword">const</span> Person <span class="token operator">=</span> <span class="token keyword">class</span> <span class="token punctuation">{</span><span class="token punctuation">}</span>
</code></pre></div><div class="hint-container info">
<p class="hint-container-title">相关信息</p>
<p>与函数声明不同：</p>
<ol>
<li>类声明不会被提升。</li>
<li>函数受函数作用域限制，而类受块作用域限制。</li>
</ol>
<div class="language-javascript" data-ext="js" data-title="js"><pre class="language-javascript"><code><span class="token punctuation">{</span>
  <span class="token keyword">function</span> <span class="token function">FunctionDeclaration</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token punctuation">}</span>
  <span class="token keyword">class</span> <span class="token class-name">ClassDeclaration</span> <span class="token punctuation">{</span><span class="token punctuation">}</span>
<span class="token punctuation">}</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>FunctionDeclaration<span class="token punctuation">)</span> <span class="token comment">// FunctionDeclaration() {}</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>ClassDeclaration<span class="token punctuation">)</span> <span class="token comment">// ReferenceError: ClassDeclaration is not defined</span>
</code></pre></div></div>
<h2>类构造函数</h2>
<p>类构造函数是类的一个特殊方法，通过 <code>new</code> 关键字创建类的实例时，会自动调用构造函数。构造函数的名称必须是 <code>constructor</code>，如果没有定义构造函数，会默认添加一个空的构造函数。</p>
<div class="language-javascript" data-ext="js" data-title="js"><pre class="language-javascript"><code><span class="token keyword">class</span> <span class="token class-name">Person</span> <span class="token punctuation">{</span>
  <span class="token function">constructor</span><span class="token punctuation">(</span><span class="token parameter">name</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">this</span><span class="token punctuation">.</span>name <span class="token operator">=</span> name
  <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre></div><p>使用 <code>new</code> 调用类的构造函数会执行如下操作。</p>
<ol>
<li>在内存中创建一个新对象。</li>
<li>这个新对象内部的 <code>[[Prototype]]</code> 指针被赋值为构造函数的 <code>prototype</code> 属性。</li>
<li>构造函数内部的 <code>this</code> 被赋值为这个新对象（即 <code>this</code> 指向新对象）。</li>
<li>执行构造函数内部的代码（给新对象添加属性）。</li>
<li>如果构造函数返回非空对象，则返回该对象；否则，返回刚创建的新对象。</li>
</ol>
<h2>实例、原型和类成员</h2>
<h3>实例成员</h3>
<p>每次通过 <code>new</code> 调用类标识符时，都会执行类构造函数。在这个函数内部，可以为新创建的实例（this）添加「自有」属性。</p>
<h3>原型方法与访问器</h3>
<p>为了在实例间共享方法，类定义语法把在类块中定义的方法作为原型方法。</p>
<div class="language-javascript" data-ext="js" data-title="js"><pre class="language-javascript"><code><span class="token keyword">class</span> <span class="token class-name">Person</span> <span class="token punctuation">{</span>
  <span class="token function">constructor</span><span class="token punctuation">(</span><span class="token parameter">name</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">this</span><span class="token punctuation">.</span>name <span class="token operator">=</span> name
  <span class="token punctuation">}</span>

  <span class="token function">sayName</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>name<span class="token punctuation">)</span>
  <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre></div><p>可以把方法定义在类构造函数中或者类块中，但不能在类块中给原型添加原始值或对象作为成员数据：</p>
<div class="language-javascript" data-ext="js" data-title="js"><pre class="language-javascript"><code><span class="token keyword">class</span> <span class="token class-name">Person</span> <span class="token punctuation">{</span>
  <span class="token literal-property property">name</span><span class="token operator">:</span> <span class="token string">'Jake'</span>
<span class="token punctuation">}</span>
<span class="token comment">// Uncaught SyntaxError: Unexpected token</span>
</code></pre></div><p>类方法等同于对象属性，因此可以使用字符串、符号或计算的值作为键：</p>
<div class="language-javascript" data-ext="js" data-title="js"><pre class="language-javascript"><code><span class="token keyword">const</span> symbolKey <span class="token operator">=</span> <span class="token function">Symbol</span><span class="token punctuation">(</span><span class="token string">'symbolKey'</span><span class="token punctuation">)</span>

<span class="token keyword">class</span> <span class="token class-name">Person</span> <span class="token punctuation">{</span>
  <span class="token function">stringKey</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'invoked stringKey'</span><span class="token punctuation">)</span>
  <span class="token punctuation">}</span>
  <span class="token punctuation">[</span>symbolKey<span class="token punctuation">]</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'invoked symbolKey'</span><span class="token punctuation">)</span>
  <span class="token punctuation">}</span>
  <span class="token punctuation">[</span><span class="token string">'computed'</span> <span class="token operator">+</span> <span class="token string">'Key'</span><span class="token punctuation">]</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'invoked computedKey'</span><span class="token punctuation">)</span>
  <span class="token punctuation">}</span>
<span class="token punctuation">}</span>

<span class="token keyword">let</span> p <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Person</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
p<span class="token punctuation">.</span><span class="token function">stringKey</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token comment">// invoked stringKey</span>
p<span class="token punctuation">[</span>symbolKey<span class="token punctuation">]</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token comment">// invoked symbolKey</span>
p<span class="token punctuation">.</span><span class="token function">computedKey</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token comment">// invoked computedKey</span>
</code></pre></div><p>类定义也支持获取和设置访问器。语法与行为跟普通对象一样：</p>
<div class="language-javascript" data-ext="js" data-title="js"><pre class="language-javascript"><code><span class="token keyword">class</span> <span class="token class-name">Person</span> <span class="token punctuation">{</span>
  <span class="token keyword">set</span> <span class="token function">name</span><span class="token punctuation">(</span><span class="token parameter">newName</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">this</span><span class="token punctuation">.</span>name_ <span class="token operator">=</span> newName
  <span class="token punctuation">}</span>
  <span class="token keyword">get</span> <span class="token function">name</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">return</span> <span class="token keyword">this</span><span class="token punctuation">.</span>name_
  <span class="token punctuation">}</span>
<span class="token punctuation">}</span>

<span class="token keyword">let</span> p <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Person</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
p<span class="token punctuation">.</span>name <span class="token operator">=</span> <span class="token string">'Jake'</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>p<span class="token punctuation">.</span>name<span class="token punctuation">)</span> <span class="token comment">// Jake</span>
</code></pre></div><h3>静态成员</h3>
<p>类定义支持静态成员，这些成员是类本身的属性，而不是实例的属性。</p>
<p>静态成员非常适合作为工具函数或者工厂函数。静态成员可以通过类名直接访问，而不需要实例化类。</p>
<div class="language-javascript" data-ext="js" data-title="js"><pre class="language-javascript"><code><span class="token keyword">class</span> <span class="token class-name">Person</span> <span class="token punctuation">{</span>
  <span class="token keyword">static</span> <span class="token function">create</span><span class="token punctuation">(</span><span class="token parameter">name</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">Person</span><span class="token punctuation">(</span>name<span class="token punctuation">)</span>
  <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre></div><div class="hint-container tip">
<p class="hint-container-title">提示</p>
<p>单例模式就使用了静态成员。</p>
</div>
<h2>继承</h2>
<h3>基础</h3>
<p>类继承是通过 <code>extends</code> 关键字实现的。子类可以继承父类的所有实例成员、原型方法和静态成员。不仅可以继承一个类，也可以继承普通的构造函数（保持向后兼容）：</p>
<div class="language-javascript" data-ext="js" data-title="js"><pre class="language-javascript"><code><span class="token keyword">class</span> <span class="token class-name">Vehicle</span> <span class="token punctuation">{</span><span class="token punctuation">}</span>

<span class="token comment">// 继承类</span>
<span class="token keyword">class</span> <span class="token class-name">Bus</span> <span class="token keyword">extends</span> <span class="token class-name">Vehicle</span> <span class="token punctuation">{</span><span class="token punctuation">}</span>

<span class="token keyword">let</span> b <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Bus</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>b <span class="token keyword">instanceof</span> <span class="token class-name">Bus</span><span class="token punctuation">)</span> <span class="token comment">// true</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>b <span class="token keyword">instanceof</span> <span class="token class-name">Vehicle</span><span class="token punctuation">)</span> <span class="token comment">// true</span>

<span class="token keyword">function</span> <span class="token function">Person</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token punctuation">}</span>

<span class="token comment">// 继承普通构造函数</span>
<span class="token keyword">class</span> <span class="token class-name">Engineer</span> <span class="token keyword">extends</span> <span class="token class-name">Person</span> <span class="token punctuation">{</span><span class="token punctuation">}</span>

<span class="token keyword">let</span> e <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Engineer</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>e <span class="token keyword">instanceof</span> <span class="token class-name">Engineer</span><span class="token punctuation">)</span> <span class="token comment">// true</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>e <span class="token keyword">instanceof</span> <span class="token class-name">Person</span><span class="token punctuation">)</span> <span class="token comment">// true</span>
</code></pre></div><h3>构造函数、<code>HomeObject</code> 和 <code>super()</code></h3>
<p>子类构造函数必须调用 <code>super()</code>，这个函数会调用父类构造函数。<code>super()</code> 必须在使用 <code>this</code> 之前调用。</p>
<div class="language-javascript" data-ext="js" data-title="js"><pre class="language-javascript"><code><span class="token keyword">class</span> <span class="token class-name">Vehicle</span> <span class="token punctuation">{</span>
  <span class="token function">constructor</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">this</span><span class="token punctuation">.</span>hasEngine <span class="token operator">=</span> <span class="token boolean">true</span>
  <span class="token punctuation">}</span>
<span class="token punctuation">}</span>

<span class="token keyword">class</span> <span class="token class-name">Bus</span> <span class="token keyword">extends</span> <span class="token class-name">Vehicle</span> <span class="token punctuation">{</span>
  <span class="token function">constructor</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token comment">// 不要在调用 super() 之前引用 this，否则会抛出 ReferenceError</span>
    <span class="token keyword">super</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token comment">// 相当于 super.constructor()</span>
    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token keyword">this</span> <span class="token keyword">instanceof</span> <span class="token class-name">Vehicle</span><span class="token punctuation">)</span> <span class="token comment">// true</span>
    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">)</span> <span class="token comment">// Bus { hasEngine: true }</span>
  <span class="token punctuation">}</span>
<span class="token punctuation">}</span>

<span class="token keyword">new</span> <span class="token class-name">Bus</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
</code></pre></div><p>在静态方法中可以通过 <code>super</code> 调用继承的类上定义的静态方法：</p>
<div class="language-javascript" data-ext="js" data-title="js"><pre class="language-javascript"><code><span class="token keyword">class</span> <span class="token class-name">Vehicle</span> <span class="token punctuation">{</span>
  <span class="token keyword">static</span> <span class="token function">identify</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'vehicle'</span><span class="token punctuation">)</span>
  <span class="token punctuation">}</span>
<span class="token punctuation">}</span>

<span class="token keyword">class</span> <span class="token class-name">Bus</span> <span class="token keyword">extends</span> <span class="token class-name">Vehicle</span> <span class="token punctuation">{</span>
  <span class="token keyword">static</span> <span class="token function">identify</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">super</span><span class="token punctuation">.</span><span class="token function">identify</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
  <span class="token punctuation">}</span>
<span class="token punctuation">}</span>

Bus<span class="token punctuation">.</span><span class="token function">identify</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token comment">// vehicle</span>
</code></pre></div><h3>抽象基类</h3>
<p>有时候可能需要定义这样一个类，它可供其他类继承，但本身不会被实例化。虽然 ECMAScript 没有专门支持这种类的语法 ，但通过 <code>new.target</code> 也很容易实现。</p>
<div class="hint-container tip">
<p class="hint-container-title">提示</p>
<p>TypeScript 可以使用 <code>abstract</code> 关键字来定义抽象基类。</p>
</div>
<p><code>new.target</code> 保存通过 <code>new</code> 关键字调用的类或函数。通过在实例化时检测 <code>new.target</code> 是不是抽象基类，可以阻止对抽象基类的实例化：</p>
<div class="language-javascript" data-ext="js" data-title="js"><pre class="language-javascript"><code><span class="token keyword">class</span> <span class="token class-name">Vehicle</span> <span class="token punctuation">{</span>
  <span class="token function">constructor</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token keyword">new</span><span class="token punctuation">.</span>target <span class="token operator">===</span> Vehicle<span class="token punctuation">)</span> <span class="token punctuation">{</span>
      <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">Error</span><span class="token punctuation">(</span><span class="token string">'Vehicle cannot be directly instantiated'</span><span class="token punctuation">)</span>
    <span class="token punctuation">}</span>
  <span class="token punctuation">}</span>
<span class="token punctuation">}</span>

<span class="token comment">// 派生类</span>
<span class="token keyword">class</span> <span class="token class-name">Bus</span> <span class="token keyword">extends</span> <span class="token class-name">Vehicle</span> <span class="token punctuation">{</span><span class="token punctuation">}</span>
<span class="token keyword">new</span> <span class="token class-name">Bus</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token comment">// class Bus {}</span>
<span class="token keyword">new</span> <span class="token class-name">Vehicle</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token comment">// class Vehicle {}</span>
<span class="token comment">// Error: Vehicle cannot be directly instantiated</span>
</code></pre></div><p>另外，通过在抽象基类构造函数中进行检查，可以要求派生类必须定义某个方法。因为原型方法在调用类构造函数之前就已经存在了，所以可以通过 <code>this</code> 关键字来检查相应的方法：</p>
<div class="language-javascript" data-ext="js" data-title="js"><pre class="language-javascript"><code><span class="token keyword">class</span> <span class="token class-name">Vehicle</span> <span class="token punctuation">{</span>
  <span class="token function">constructor</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>drive <span class="token operator">===</span> <span class="token keyword">undefined</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
      <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">Error</span><span class="token punctuation">(</span><span class="token string">'drive method must be implemented'</span><span class="token punctuation">)</span>
    <span class="token punctuation">}</span>
  <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre></div><h3>类混入</h3>
<p>类混入是一种将多个类的功能组合到一个类中的技术。通过将多个类的原型方法复制到一个类中，可以实现类似多重继承的效果。</p>
<p>混入模式可以通过在一个表达式中连缀多个混入元素来实现，这个表达式最终会解析为一个可以被继承的类。如果 Person 类需要组合 A、B、C，则需要某种机制实现 B 继承 A，C 继承 B，而 Person 再继承 C，从而把 A、B、C 组合到这个超类中。实现这种模式有不同的策略。</p>
<p>一个策略是定义一组「可嵌套」的函数，每个函数分别接收一个超类作为参数，而将混入类定义为这个参数的子类，并返回这个类。这些组合函数可以连缀调用，最终组合成超类表达式：</p>
<div class="language-javascript" data-ext="js" data-title="js"><pre class="language-javascript"><code><span class="token keyword">class</span> <span class="token class-name">Vehicle</span> <span class="token punctuation">{</span><span class="token punctuation">}</span>

<span class="token keyword">let</span> <span class="token function-variable function">FooMixin</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token parameter">Superclass</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span>
  <span class="token keyword">class</span> <span class="token class-name">extends</span> Superclass <span class="token punctuation">{</span>
    <span class="token function">foo</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
      console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'foo'</span><span class="token punctuation">)</span>
    <span class="token punctuation">}</span>
  <span class="token punctuation">}</span>

<span class="token keyword">let</span> <span class="token function-variable function">BarMixin</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token parameter">Superclass</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span>
  <span class="token keyword">class</span> <span class="token class-name">extends</span> Superclass <span class="token punctuation">{</span>
    <span class="token function">bar</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
      console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'bar'</span><span class="token punctuation">)</span>
    <span class="token punctuation">}</span>
  <span class="token punctuation">}</span>

<span class="token keyword">let</span> <span class="token function-variable function">BazMixin</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token parameter">Superclass</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span>
  <span class="token keyword">class</span> <span class="token class-name">extends</span> Superclass <span class="token punctuation">{</span>
    <span class="token function">baz</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
      console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'baz'</span><span class="token punctuation">)</span>
    <span class="token punctuation">}</span>
  <span class="token punctuation">}</span>

<span class="token keyword">class</span> <span class="token class-name">Bus</span> <span class="token keyword">extends</span> <span class="token class-name">FooMixin</span><span class="token punctuation">(</span><span class="token function">BarMixin</span><span class="token punctuation">(</span><span class="token function">BazMixin</span><span class="token punctuation">(</span>Vehicle<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token punctuation">}</span>

<span class="token keyword">let</span> b <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Bus</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
b<span class="token punctuation">.</span><span class="token function">foo</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token comment">// foo</span>
b<span class="token punctuation">.</span><span class="token function">bar</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token comment">// bar</span>
b<span class="token punctuation">.</span><span class="token function">baz</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token comment">// baz</span>
</code></pre></div><p>通过写一个辅助函数，可以把嵌套调用展开：</p>
<div class="language-javascript" data-ext="js" data-title="js"><pre class="language-javascript"><code><span class="token keyword">class</span> <span class="token class-name">Vehicle</span> <span class="token punctuation">{</span><span class="token punctuation">}</span>
<span class="token keyword">let</span> <span class="token function-variable function">FooMixin</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token parameter">Superclass</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span>
  <span class="token keyword">class</span> <span class="token class-name">extends</span> Superclass <span class="token punctuation">{</span>
    <span class="token function">foo</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
      console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'foo'</span><span class="token punctuation">)</span>
    <span class="token punctuation">}</span>
  <span class="token punctuation">}</span>

<span class="token keyword">let</span> <span class="token function-variable function">BarMixin</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token parameter">Superclass</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span>
  <span class="token keyword">class</span> <span class="token class-name">extends</span> Superclass <span class="token punctuation">{</span>
    <span class="token function">bar</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
      console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'bar'</span><span class="token punctuation">)</span>
    <span class="token punctuation">}</span>
  <span class="token punctuation">}</span>

<span class="token keyword">let</span> <span class="token function-variable function">BazMixin</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token parameter">Superclass</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span>
  <span class="token keyword">class</span> <span class="token class-name">extends</span> Superclass <span class="token punctuation">{</span>
    <span class="token function">baz</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
      console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'baz'</span><span class="token punctuation">)</span>
    <span class="token punctuation">}</span>
  <span class="token punctuation">}</span>

<span class="token keyword">function</span> <span class="token function">mix</span><span class="token punctuation">(</span><span class="token parameter">BaseClass<span class="token punctuation">,</span> <span class="token operator">...</span>Mixins</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token keyword">return</span> Mixins<span class="token punctuation">.</span><span class="token function">reduce</span><span class="token punctuation">(</span>
    <span class="token punctuation">(</span><span class="token parameter">accumulator<span class="token punctuation">,</span> current</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token function">current</span><span class="token punctuation">(</span>accumulator<span class="token punctuation">)</span><span class="token punctuation">,</span>
    BaseClass
  <span class="token punctuation">)</span>
<span class="token punctuation">}</span>

<span class="token keyword">class</span> <span class="token class-name">Bus</span> <span class="token keyword">extends</span> <span class="token class-name">mix</span><span class="token punctuation">(</span>Vehicle<span class="token punctuation">,</span> FooMixin<span class="token punctuation">,</span> BarMixin<span class="token punctuation">,</span> BazMixin<span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token punctuation">}</span>
<span class="token keyword">let</span> b <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Bus</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
b<span class="token punctuation">.</span><span class="token function">foo</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token comment">// foo</span>
b<span class="token punctuation">.</span><span class="token function">bar</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token comment">// bar</span>
b<span class="token punctuation">.</span><span class="token function">baz</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token comment">// baz</span>
</code></pre></div><div class="hint-container warning">
<p class="hint-container-title">注意</p>
<p>很多 JavaScript 框架（特别是 React）已经抛弃混入模式，转向了组合模式（把方法提取到独立的类和辅助对象中，然后把它们组合起来，但不使用继承）。</p>
<p>这反映了那个众所周知的软件设计原则：「组合胜过继承（composition over inheritance）。」这个设计原则被很多人遵循，在代码设计中能提供极大的灵活性。</p>
</div>
]]></content>
    <category term="JavaScript"/>
    <published>2024-06-26T00:00:00.000Z</published>
  </entry>
  <entry>
    <title type="text">宁弯不折</title>
    <id>https://dribble-njr.github.io/blog/blog/reading/pragmatic-programmer/05-work-around.html</id>
    <link href="https://dribble-njr.github.io/blog/blog/reading/pragmatic-programmer/05-work-around.html"/>
    <updated>2024-05-29T14:30:37.000Z</updated>
    <summary type="html"><![CDATA[<p>尽量编写宽松灵活的代码，增强代码的健壮性。</p>
<p>有一个保持灵活性的好方法，那就是编写更少的代码。修改代码可能会引入新的 Bug</p>
<h2>解耦</h2>
<p>代码耦合会导致「一改都改」。</p>
<ul>
<li>解耦让改变代码更容易；</li>
<li>避免全局数据。</li>
</ul>
<h2>在现实世界抛球杂耍</h2>
<p>利用下面四种策略编写更好的程序：</p>
<ol>
<li>有限状态机</li>
<li>观察者模式</li>
<li>发布/订阅</li>
<li>响应式编程与流</li>
</ol>
<div class="hint-container tip">
<p class="hint-container-title">提示</p>
<p>响应式编程相关学习资料：</p>
<ul>
<li><a href="https://gist.github.com/staltz/868e7e9bc2a7b8c1f754" target="_blank" rel="noopener noreferrer">The introduction to Reactive Programming you've been missing</a></li>
<li><a href="https://rxjs.dev/" target="_blank" rel="noopener noreferrer">Rxjs</a></li>
<li><a href="https://rxjs-cn.github.io/learn-rxjs-operators/" target="_blank" rel="noopener noreferrer">学习 rxjs 操作符</a></li>
<li><a href="https://www.learnrxjs.io/" target="_blank" rel="noopener noreferrer">learn rxjs</a></li>
<li><a href="https://rxmarbles.com/" target="_blank" rel="noopener noreferrer">rxmarbles</a></li>
<li><a href="https://rxjs.dev/operator-decision-tree" target="_blank" rel="noopener noreferrer">rxjs 操作决定树</a></li>
</ul>
</div>]]></summary>
    <content type="html"><![CDATA[<p>尽量编写宽松灵活的代码，增强代码的健壮性。</p>
<p>有一个保持灵活性的好方法，那就是编写更少的代码。修改代码可能会引入新的 Bug</p>
<h2>解耦</h2>
<p>代码耦合会导致「一改都改」。</p>
<ul>
<li>解耦让改变代码更容易；</li>
<li>避免全局数据。</li>
</ul>
<h2>在现实世界抛球杂耍</h2>
<p>利用下面四种策略编写更好的程序：</p>
<ol>
<li>有限状态机</li>
<li>观察者模式</li>
<li>发布/订阅</li>
<li>响应式编程与流</li>
</ol>
<div class="hint-container tip">
<p class="hint-container-title">提示</p>
<p>响应式编程相关学习资料：</p>
<ul>
<li><a href="https://gist.github.com/staltz/868e7e9bc2a7b8c1f754" target="_blank" rel="noopener noreferrer">The introduction to Reactive Programming you've been missing</a></li>
<li><a href="https://rxjs.dev/" target="_blank" rel="noopener noreferrer">Rxjs</a></li>
<li><a href="https://rxjs-cn.github.io/learn-rxjs-operators/" target="_blank" rel="noopener noreferrer">学习 rxjs 操作符</a></li>
<li><a href="https://www.learnrxjs.io/" target="_blank" rel="noopener noreferrer">learn rxjs</a></li>
<li><a href="https://rxmarbles.com/" target="_blank" rel="noopener noreferrer">rxmarbles</a></li>
<li><a href="https://rxjs.dev/operator-decision-tree" target="_blank" rel="noopener noreferrer">rxjs 操作决定树</a></li>
</ul>
</div>
<h2>变换式编程</h2>
<p>把程序视为从输入到输出的一个变换。</p>
<ul>
<li>编程谈的是代码，但程序谈的是数据；</li>
<li>将代码看作是一系列的变换。</li>
</ul>
<h2>继承税</h2>
<p>继承就是耦合。</p>
<p>更好的替代方案：</p>
<ul>
<li>接口：尽量使用接口来表达多态</li>
<li>委托</li>
<li><code>mixin</code> 与特征</li>
</ul>
<div class="hint-container tip">
<p class="hint-container-title">提示</p>
<p>所以 React、Vue 都走向了函数式编程？</p>
</div>
<h2>配置</h2>
<p>使用外部配置参数化应用程序，使用 <code>json</code>, <code>yml</code> 等。</p>
]]></content>
    <category term="READING"/>
    <published>2024-04-09T00:00:00.000Z</published>
  </entry>
  <entry>
    <title type="text">继承</title>
    <id>https://dribble-njr.github.io/blog/blog/frontend/basic/javascript/012-extends.html</id>
    <link href="https://dribble-njr.github.io/blog/blog/frontend/basic/javascript/012-extends.html"/>
    <updated>2024-05-29T14:23:59.000Z</updated>
    <summary type="html"><![CDATA[<p>继承是面向对象编程中讨论最多的话题。很多面向对象语言都支持两种继承：接口继承和实现继承。</p>
<p>前者只继承方法签名，后者继承实际的方法。接口继承在 ECMAScript 中是不可能的，因为函数没有签名。实现继承是 ECMAScript 唯一支持的继承方式，而这主要是通过原型链实现的。</p>
<h2>原型链</h2>
<p>原型链是 ECMAScript 中的主要继承方式，当原型是另一个对象的实例时，那么这个原型的实例就指向了另一个原型，这样实例和原型就组成了一条原型链。</p>
<div class="language-javascript" data-ext="js" data-title="js"><pre class="language-javascript"><code><span class="token comment">// 父类: 公共属性和方法</span>
<span class="token keyword">function</span> <span class="token function">Person</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token keyword">this</span><span class="token punctuation">.</span>name <span class="token operator">=</span> <span class="token string">'wang'</span>
  <span class="token keyword">this</span><span class="token punctuation">.</span>friends <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span>
<span class="token punctuation">}</span>

<span class="token class-name">Person</span><span class="token punctuation">.</span>prototype<span class="token punctuation">.</span><span class="token function-variable function">eating</span> <span class="token operator">=</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>name <span class="token operator">+</span> <span class="token string">' eating~'</span><span class="token punctuation">)</span>
<span class="token punctuation">}</span>

<span class="token comment">// 子类: 特有属性和方法</span>
<span class="token keyword">function</span> <span class="token function">Student</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token keyword">this</span><span class="token punctuation">.</span>sno <span class="token operator">=</span> <span class="token number">111</span>
<span class="token punctuation">}</span>

<span class="token class-name">Student</span><span class="token punctuation">.</span>prototype <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Person</span><span class="token punctuation">(</span><span class="token punctuation">)</span>

<span class="token class-name">Student</span><span class="token punctuation">.</span>prototype<span class="token punctuation">.</span><span class="token function-variable function">studying</span> <span class="token operator">=</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>name <span class="token operator">+</span> <span class="token string">' studying~'</span><span class="token punctuation">)</span>
<span class="token punctuation">}</span>

<span class="token keyword">const</span> stu <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Student</span><span class="token punctuation">(</span><span class="token punctuation">)</span>

console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>stu<span class="token punctuation">.</span>name<span class="token punctuation">)</span> <span class="token comment">// 'wang'</span>
stu<span class="token punctuation">.</span><span class="token function">eating</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token comment">// wang eating~</span>
stu<span class="token punctuation">.</span><span class="token function">studying</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token comment">// wang studying~</span>
</code></pre></div>]]></summary>
    <content type="html"><![CDATA[<p>继承是面向对象编程中讨论最多的话题。很多面向对象语言都支持两种继承：接口继承和实现继承。</p>
<p>前者只继承方法签名，后者继承实际的方法。接口继承在 ECMAScript 中是不可能的，因为函数没有签名。实现继承是 ECMAScript 唯一支持的继承方式，而这主要是通过原型链实现的。</p>
<h2>原型链</h2>
<p>原型链是 ECMAScript 中的主要继承方式，当原型是另一个对象的实例时，那么这个原型的实例就指向了另一个原型，这样实例和原型就组成了一条原型链。</p>
<div class="language-javascript" data-ext="js" data-title="js"><pre class="language-javascript"><code><span class="token comment">// 父类: 公共属性和方法</span>
<span class="token keyword">function</span> <span class="token function">Person</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token keyword">this</span><span class="token punctuation">.</span>name <span class="token operator">=</span> <span class="token string">'wang'</span>
  <span class="token keyword">this</span><span class="token punctuation">.</span>friends <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span>
<span class="token punctuation">}</span>

<span class="token class-name">Person</span><span class="token punctuation">.</span>prototype<span class="token punctuation">.</span><span class="token function-variable function">eating</span> <span class="token operator">=</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>name <span class="token operator">+</span> <span class="token string">' eating~'</span><span class="token punctuation">)</span>
<span class="token punctuation">}</span>

<span class="token comment">// 子类: 特有属性和方法</span>
<span class="token keyword">function</span> <span class="token function">Student</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token keyword">this</span><span class="token punctuation">.</span>sno <span class="token operator">=</span> <span class="token number">111</span>
<span class="token punctuation">}</span>

<span class="token class-name">Student</span><span class="token punctuation">.</span>prototype <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Person</span><span class="token punctuation">(</span><span class="token punctuation">)</span>

<span class="token class-name">Student</span><span class="token punctuation">.</span>prototype<span class="token punctuation">.</span><span class="token function-variable function">studying</span> <span class="token operator">=</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>name <span class="token operator">+</span> <span class="token string">' studying~'</span><span class="token punctuation">)</span>
<span class="token punctuation">}</span>

<span class="token keyword">const</span> stu <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Student</span><span class="token punctuation">(</span><span class="token punctuation">)</span>

console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>stu<span class="token punctuation">.</span>name<span class="token punctuation">)</span> <span class="token comment">// 'wang'</span>
stu<span class="token punctuation">.</span><span class="token function">eating</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token comment">// wang eating~</span>
stu<span class="token punctuation">.</span><span class="token function">studying</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token comment">// wang studying~</span>
</code></pre></div><p>使用原型链实现继承可以继承父类的属性和方法，然而它还有自己的弊端。</p>
<div class="language-javascript" data-ext="js" data-title="js"><pre class="language-javascript"><code><span class="token comment">// 原型链实现继承的弊端:</span>
<span class="token comment">// 1.第一个弊端: 打印 stu 对象, 继承的属性是看不到的，并且对象标识也有问题</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>stu<span class="token punctuation">)</span> <span class="token comment">// Person { sno: 111 }</span>

<span class="token comment">// 2.第二个弊端: 修改引用值时会互相影响</span>
<span class="token keyword">const</span> stu1 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Student</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
<span class="token keyword">const</span> stu2 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Student</span><span class="token punctuation">(</span><span class="token punctuation">)</span>

stu1<span class="token punctuation">.</span>friends<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span><span class="token string">'kobe'</span><span class="token punctuation">)</span>

console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>stu1<span class="token punctuation">.</span>friends<span class="token punctuation">)</span> <span class="token comment">// ['kobe']</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>stu2<span class="token punctuation">.</span>friends<span class="token punctuation">)</span> <span class="token comment">// ['kobe']</span>

<span class="token comment">// 3.第三个弊端: 在前面实现类的过程中都没有传递参数</span>
<span class="token keyword">const</span> stu3 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Student</span><span class="token punctuation">(</span><span class="token string">'lilei'</span><span class="token punctuation">,</span> <span class="token number">112</span><span class="token punctuation">)</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>stu3<span class="token punctuation">)</span> <span class="token comment">// Person { sno: 111 }</span>
</code></pre></div><div class="hint-container note">
<p class="hint-container-title">注</p>
<p>默认情况下，所有引用类型都继承自 <code>Object</code>，任何函数的默认原型都是一个 <code>Object</code> 的实例。</p>
</div>
<h2>盗用构造函数</h2>
<p>为了解决原型链继承问题，可以使用「盗用构造函数」。基本思路很简单：在子类构造函数中调用父类构造函数。可以使用 <code>apply()</code> 和 <code>call()</code> 方法以新创建的对象为上下文执行构造函数。</p>
<div class="language-javascript" data-ext="js" data-title="js"><pre class="language-javascript"><code><span class="token comment">// 父类: 公共属性和方法</span>
<span class="token keyword">function</span> <span class="token function">Person</span><span class="token punctuation">(</span><span class="token parameter">name<span class="token punctuation">,</span> age<span class="token punctuation">,</span> friends</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token keyword">this</span><span class="token punctuation">.</span>name <span class="token operator">=</span> name
  <span class="token keyword">this</span><span class="token punctuation">.</span>age <span class="token operator">=</span> age
  <span class="token keyword">this</span><span class="token punctuation">.</span>friends <span class="token operator">=</span> friends
<span class="token punctuation">}</span>

<span class="token comment">// 子类: 特有属性和方法</span>
<span class="token keyword">function</span> <span class="token function">Student</span><span class="token punctuation">(</span><span class="token parameter">name<span class="token punctuation">,</span> age<span class="token punctuation">,</span> friends<span class="token punctuation">,</span> sno</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token comment">// 继承属性</span>
  <span class="token function">Person</span><span class="token punctuation">.</span><span class="token function">call</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">,</span> name<span class="token punctuation">,</span> age<span class="token punctuation">,</span> friends<span class="token punctuation">)</span>
  <span class="token keyword">this</span><span class="token punctuation">.</span>sno <span class="token operator">=</span> <span class="token number">111</span>
<span class="token punctuation">}</span>

<span class="token keyword">const</span> stu <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Student</span><span class="token punctuation">(</span><span class="token string">'wang'</span><span class="token punctuation">,</span> <span class="token number">18</span><span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token string">'kobe'</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token number">111</span><span class="token punctuation">)</span>

<span class="token comment">// 解决原型链实现继承的弊端</span>
<span class="token comment">// 1. 第一个弊端: 打印stu对象, 继承的属性是看不到的，并且对象标识也有问题</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>stu<span class="token punctuation">)</span> <span class="token comment">// Student { name: 'wang', age: 18, friends: [ 'kobe' ], sno: 111 }</span>

<span class="token comment">// 2.第二个弊端: 修改引用值时会互相影响</span>
<span class="token keyword">const</span> stu1 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Student</span><span class="token punctuation">(</span><span class="token string">'wang'</span><span class="token punctuation">,</span> <span class="token number">18</span><span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token string">'li lei'</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token number">111</span><span class="token punctuation">)</span>
<span class="token keyword">const</span> stu2 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Student</span><span class="token punctuation">(</span><span class="token string">'kobe'</span><span class="token punctuation">,</span> <span class="token number">30</span><span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token string">'james'</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token number">112</span><span class="token punctuation">)</span>

stu1<span class="token punctuation">.</span>friends<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span><span class="token string">'lucy'</span><span class="token punctuation">)</span>

console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>stu1<span class="token punctuation">.</span>friends<span class="token punctuation">)</span> <span class="token comment">// ['li lei', 'lucy']</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>stu2<span class="token punctuation">.</span>friends<span class="token punctuation">)</span> <span class="token comment">// ['james']</span>

<span class="token comment">// // 3.第三个弊端: 在前面实现类的过程中都没有传递参数</span>
<span class="token keyword">const</span> stu3 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Student</span><span class="token punctuation">(</span><span class="token string">'li lei'</span><span class="token punctuation">,</span> <span class="token number">22</span><span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token number">113</span><span class="token punctuation">)</span>
</code></pre></div><p>然而，借用构造函数也是有弊端：</p>
<ul>
<li>必须在构造函数中定义方法，函数不能重用；</li>
<li>而且，子类也不能访问父类原型上的方法，因为他没有像原型链继承一样建立了实例与父类原型对象的连接，因此所有类型都只能使用构造函数模式。</li>
</ul>
<h2>组合继承</h2>
<p>既然原型链继承可以实现继承方法，而盗用构造函数可以解决引用值、对象标识和传递参数的问题，因此可以组合原型链继承和盗用构造函数继承。基本的思路是使用原型链继承父类原型上的属性和方法，而通过盗用构造函数继承实例属性。</p>
<div class="language-javascript" data-ext="js" data-title="js"><pre class="language-javascript"><code><span class="token comment">// 父类: 公共属性和方法</span>
<span class="token keyword">function</span> <span class="token function">Person</span><span class="token punctuation">(</span><span class="token parameter">name<span class="token punctuation">,</span> age<span class="token punctuation">,</span> friends</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token keyword">this</span><span class="token punctuation">.</span>name <span class="token operator">=</span> name
  <span class="token keyword">this</span><span class="token punctuation">.</span>age <span class="token operator">=</span> age
  <span class="token keyword">this</span><span class="token punctuation">.</span>friends <span class="token operator">=</span> friends
<span class="token punctuation">}</span>

<span class="token class-name">Person</span><span class="token punctuation">.</span>prototype<span class="token punctuation">.</span><span class="token function-variable function">eating</span> <span class="token operator">=</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>name <span class="token operator">+</span> <span class="token string">' eating~'</span><span class="token punctuation">)</span>
<span class="token punctuation">}</span>

<span class="token comment">// 子类: 特有属性和方法</span>
<span class="token keyword">function</span> <span class="token function">Student</span><span class="token punctuation">(</span><span class="token parameter">name<span class="token punctuation">,</span> age<span class="token punctuation">,</span> friends<span class="token punctuation">,</span> sno</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token comment">// 盗用构造函数继承属性</span>
  <span class="token function">Person</span><span class="token punctuation">.</span><span class="token function">call</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">,</span> name<span class="token punctuation">,</span> age<span class="token punctuation">,</span> friends<span class="token punctuation">)</span>
  <span class="token keyword">this</span><span class="token punctuation">.</span>sno <span class="token operator">=</span> <span class="token number">111</span>
<span class="token punctuation">}</span>

<span class="token comment">// 原型链继承方法</span>
<span class="token class-name">Student</span><span class="token punctuation">.</span>prototype <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Person</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
</code></pre></div><p>组合继承弥补了原型链和盗用构造函数的不足，是 JavaScript 中使用最多的继承模式。而且组合继承也保留了 <code>instanceof</code> 操作符和 <code>isPrototypeOf()</code> 方法识别合成对象的能力。</p>
<h2>寄生式组合继承</h2>
<p>组合继承弥补了原型链和盗用构造函数的不足，它使用盗用构造函数继承属性，使用原型链继承方法。但是它存在效率问题，即父类构造函数会调用两次：一次是在创建子类原型时调用，一次是在子类构造函数中调用。</p>
<div class="language-javascript" data-ext="js" data-title="js"><pre class="language-javascript"><code><span class="token comment">// 父类: 公共属性和方法</span>
<span class="token keyword">function</span> <span class="token function">Person</span><span class="token punctuation">(</span><span class="token parameter">name<span class="token punctuation">,</span> age<span class="token punctuation">,</span> friends</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token keyword">this</span><span class="token punctuation">.</span>name <span class="token operator">=</span> name
  <span class="token keyword">this</span><span class="token punctuation">.</span>age <span class="token operator">=</span> age
  <span class="token keyword">this</span><span class="token punctuation">.</span>friends <span class="token operator">=</span> friends
<span class="token punctuation">}</span>

<span class="token class-name">Person</span><span class="token punctuation">.</span>prototype<span class="token punctuation">.</span><span class="token function-variable function">eating</span> <span class="token operator">=</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>name <span class="token operator">+</span> <span class="token string">' eating~'</span><span class="token punctuation">)</span>
<span class="token punctuation">}</span>

<span class="token comment">// 子类: 特有属性和方法</span>
<span class="token keyword">function</span> <span class="token function">Student</span><span class="token punctuation">(</span><span class="token parameter">name<span class="token punctuation">,</span> age<span class="token punctuation">,</span> friends<span class="token punctuation">,</span> sno</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token comment">// 盗用构造函数继承属性</span>
  <span class="token function">Person</span><span class="token punctuation">.</span><span class="token function">call</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">,</span> name<span class="token punctuation">,</span> age<span class="token punctuation">,</span> friends<span class="token punctuation">)</span> <span class="token comment">// 第二次调用 Person()</span>
  <span class="token keyword">this</span><span class="token punctuation">.</span>sno <span class="token operator">=</span> <span class="token number">111</span>
<span class="token punctuation">}</span>

<span class="token comment">// 原型链继承方法</span>
<span class="token class-name">Student</span><span class="token punctuation">.</span>prototype <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Person</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token comment">// 第一次调用 Person()</span>
<span class="token class-name">Student</span><span class="token punctuation">.</span>prototype<span class="token punctuation">.</span>constructor <span class="token operator">=</span> Student
</code></pre></div><p>在第一次调用 Person() 后，Student.prototype 上会有 <code>name</code>, <code>age</code>, <code>friends</code> 这三个属性，它们本来是 Person 父类的实例属性，然而现在却挂载到了 Student 子类的原型属性。</p>
<div class="language-javascript" data-ext="js" data-title="js"><pre class="language-javascript"><code>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token class-name">Student</span><span class="token punctuation">.</span>prototype<span class="token punctuation">)</span>
<span class="token comment">// Person {</span>
<span class="token comment">//   name: undefined,</span>
<span class="token comment">//   age: undefined,</span>
<span class="token comment">//   friends: undefined,</span>
<span class="token comment">//   constructor: [Function: Student]</span>
<span class="token comment">// }</span>
</code></pre></div><p>而如果创建一个实例，此时会调用第二次 Person()，这一次会在对象上创建实例属性 <code>name</code>, <code>age</code>, <code>friends</code>, <code>sno</code>，前面三个属性会遮蔽原型上的同名属性。</p>
<div class="language-javascript" data-ext="js" data-title="js"><pre class="language-javascript"><code><span class="token keyword">const</span> stu <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Student</span><span class="token punctuation">(</span><span class="token string">'wang'</span><span class="token punctuation">,</span> <span class="token number">18</span><span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token comment">// Student { name: 'wang', age: 18, friends: [], sno: 111 }</span>
</code></pre></div><p>也就是说，现在有两组 <code>name</code>, <code>age</code>, <code>friends</code> 属性，一组在实例上，而另一组在 <code>Student</code> 的原型上。</p>
<p>这个问题出在调用了父类构造函数给子类原型赋值，那么有没有一种方法可以不直接调用父类构造函数呢？</p>
<p>有的，那就是原型式继承和寄生式继承。</p>
<h3>原型式继承</h3>
<p>2006 年，Douglas Crockford 写了一篇文章：《JavaScript 中的原型式继承》（“Prototypal Inheritance in JavaScript”）。这篇文章介绍了一种不涉及严格意义上构造函数的继承方法。他的出发点是即使不自定义类型也可以通过原型实现对象之间的信息共享。文章最终给出了一个函数：</p>
<div class="language-javascript" data-ext="js" data-title="js"><pre class="language-javascript"><code><span class="token keyword">function</span> <span class="token function">object</span><span class="token punctuation">(</span><span class="token parameter">o</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token keyword">function</span> <span class="token constant">F</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token punctuation">}</span>
  <span class="token class-name">F</span><span class="token punctuation">.</span>prototype <span class="token operator">=</span> o
  <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">F</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
<span class="token punctuation">}</span>
</code></pre></div><p>这个 <code>object()</code> 函数会创建一个临时构造函数，将传入的对象赋值给这个构造函数的原型，然后返回这个临时类型的一个实例，ES5 增加 <code>Object.create()</code> 方法，接收两个参数：作为新对象原型的对象，以及给新对象定义额外属性的对象（第二个可选）。以这种方式添加的属性会遮蔽原型对象上的同名属性。</p>
<div class="language-javascript" data-ext="js" data-title="js"><pre class="language-javascript"><code><span class="token keyword">let</span> person <span class="token operator">=</span> <span class="token punctuation">{</span>
  <span class="token literal-property property">name</span><span class="token operator">:</span> <span class="token string">'Nicholas'</span><span class="token punctuation">,</span>
  <span class="token literal-property property">friends</span><span class="token operator">:</span> <span class="token punctuation">[</span><span class="token string">'Shelby'</span><span class="token punctuation">,</span> <span class="token string">'Court'</span><span class="token punctuation">,</span> <span class="token string">'Van'</span><span class="token punctuation">]</span>
<span class="token punctuation">}</span>
<span class="token keyword">let</span> anotherPerson <span class="token operator">=</span> Object<span class="token punctuation">.</span><span class="token function">create</span><span class="token punctuation">(</span>person<span class="token punctuation">,</span> <span class="token punctuation">{</span>
  <span class="token literal-property property">name</span><span class="token operator">:</span> <span class="token punctuation">{</span>
    <span class="token literal-property property">value</span><span class="token operator">:</span> <span class="token string">'Greg'</span>
  <span class="token punctuation">}</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span>

console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>anotherPerson<span class="token punctuation">.</span>name<span class="token punctuation">)</span> <span class="token comment">// "Greg"</span>
</code></pre></div><p>属性中包含的引用值始终会在相关对象中共享。</p>
<div class="language-javascript" data-ext="js" data-title="js"><pre class="language-javascript"><code><span class="token keyword">let</span> person <span class="token operator">=</span> <span class="token punctuation">{</span>
  <span class="token literal-property property">name</span><span class="token operator">:</span> <span class="token string">'Nicholas'</span><span class="token punctuation">,</span>
  <span class="token literal-property property">friends</span><span class="token operator">:</span> <span class="token punctuation">[</span><span class="token string">'Shelby'</span><span class="token punctuation">,</span> <span class="token string">'Court'</span><span class="token punctuation">,</span> <span class="token string">'Van'</span><span class="token punctuation">]</span>
<span class="token punctuation">}</span>
<span class="token keyword">let</span> anotherPerson <span class="token operator">=</span> Object<span class="token punctuation">.</span><span class="token function">create</span><span class="token punctuation">(</span>person<span class="token punctuation">,</span> <span class="token punctuation">{</span>
  <span class="token literal-property property">name</span><span class="token operator">:</span> <span class="token punctuation">{</span>
    <span class="token literal-property property">value</span><span class="token operator">:</span> <span class="token string">'Greg'</span>
  <span class="token punctuation">}</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span>
anotherPerson<span class="token punctuation">.</span>friends<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span><span class="token string">'kobe'</span><span class="token punctuation">)</span>

<span class="token keyword">let</span> yetAnotherPerson <span class="token operator">=</span> Object<span class="token punctuation">.</span><span class="token function">create</span><span class="token punctuation">(</span>person<span class="token punctuation">,</span> <span class="token punctuation">{</span>
  <span class="token literal-property property">name</span><span class="token operator">:</span> <span class="token punctuation">{</span>
    <span class="token literal-property property">value</span><span class="token operator">:</span> <span class="token string">'wang'</span>
  <span class="token punctuation">}</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span>

console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>yetAnotherPerson<span class="token punctuation">.</span>friends<span class="token punctuation">)</span> <span class="token comment">// ["Shelby", "Court", "Van", "kobe"]</span>
</code></pre></div><h3>寄生式继承</h3>
<p>与原型式继承比较接近的一种继承方式是寄生式继承，也是 Crockford 首倡的一种模式。寄生式继承背后的思路类似于寄生构造函数和工厂模式：创建一个实现继承的函数，以某种方式增强对象，然后返回这个对象。</p>
<div class="language-javascript" data-ext="js" data-title="js"><pre class="language-javascript"><code><span class="token keyword">function</span> <span class="token function">createAnother</span><span class="token punctuation">(</span><span class="token parameter">original</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token keyword">let</span> clone <span class="token operator">=</span> Object<span class="token punctuation">.</span><span class="token function">create</span><span class="token punctuation">(</span>original<span class="token punctuation">)</span> <span class="token comment">// 创建一个新对象，他的原型为 original</span>
  clone<span class="token punctuation">.</span><span class="token function-variable function">sayHi</span> <span class="token operator">=</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token comment">// 以某种方式增强对象</span>
    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'hi'</span><span class="token punctuation">)</span>
  <span class="token punctuation">}</span>
  <span class="token keyword">return</span> clone <span class="token comment">// 返回这个对象</span>
<span class="token punctuation">}</span>
</code></pre></div><p>寄生式继承同样适合主要关注对象，不在乎类型和构造函数的场景。然而和构造函数创建对象模式一样，它会导致函数难以重用。</p>
<h3>寄生式组合继承</h3>
<p>前面已经提到，组合继承的缺陷在于调用了两次父类构造函数，会导致子类实例和子类原型上存在两组同名属性。</p>
<p>那么可以通过寄生式继承来继承父类原型，然后讲返回的新对象赋值给子类原型，基本模式如下：</p>
<div class="language-javascript" data-ext="js" data-title="js"><pre class="language-javascript"><code><span class="token keyword">function</span> <span class="token function">inheritPrototype</span><span class="token punctuation">(</span><span class="token parameter">subType<span class="token punctuation">,</span> superType</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token keyword">let</span> prototype <span class="token operator">=</span> Object<span class="token punctuation">.</span><span class="token function">create</span><span class="token punctuation">(</span>superType<span class="token punctuation">.</span>prototype<span class="token punctuation">)</span> <span class="token comment">// 创建对象</span>
  prototype<span class="token punctuation">.</span>constructor <span class="token operator">=</span> subType <span class="token comment">// 增强对象</span>
  subType<span class="token punctuation">.</span>prototype <span class="token operator">=</span> prototype <span class="token comment">// 赋值对象</span>
<span class="token punctuation">}</span>
</code></pre></div><p>在这个函数内部，第一步是创建一个继承父类原型的对象。然后，给返回的 <code>prototype</code> 对象设置 <code>constructor</code> 属性，解决由于重写原型导致默认 <code>constructor</code> 丢失的问题。最后将新创建的对象赋值给子类型的原型。</p>
<p>接下来调用这个核心继承函数，即可解决组合继承的问题。</p>
<div class="language-javascript" data-ext="js" data-title="js"><pre class="language-javascript"><code><span class="token comment">// 父类</span>
<span class="token keyword">function</span> <span class="token function">Person</span><span class="token punctuation">(</span><span class="token parameter">name<span class="token punctuation">,</span> age<span class="token punctuation">,</span> friends</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token keyword">this</span><span class="token punctuation">.</span>name <span class="token operator">=</span> name
  <span class="token keyword">this</span><span class="token punctuation">.</span>age <span class="token operator">=</span> age
  <span class="token keyword">this</span><span class="token punctuation">.</span>friends <span class="token operator">=</span> friends
<span class="token punctuation">}</span>

<span class="token class-name">Person</span><span class="token punctuation">.</span>prototype<span class="token punctuation">.</span><span class="token function-variable function">eating</span> <span class="token operator">=</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>name <span class="token operator">+</span> <span class="token string">' eating~'</span><span class="token punctuation">)</span>
<span class="token punctuation">}</span>

<span class="token comment">// 子类</span>
<span class="token keyword">function</span> <span class="token function">Student</span><span class="token punctuation">(</span><span class="token parameter">name<span class="token punctuation">,</span> age<span class="token punctuation">,</span> friends<span class="token punctuation">,</span> sno</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token comment">// 盗用构造函数</span>
  <span class="token function">Person</span><span class="token punctuation">.</span><span class="token function">call</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">,</span> name<span class="token punctuation">,</span> age<span class="token punctuation">,</span> friends<span class="token punctuation">)</span>
  <span class="token keyword">this</span><span class="token punctuation">.</span>sno <span class="token operator">=</span> <span class="token number">111</span>
<span class="token punctuation">}</span>

<span class="token comment">// 寄生式继承</span>
<span class="token function">inheritPrototype</span><span class="token punctuation">(</span>Student<span class="token punctuation">,</span> Person<span class="token punctuation">)</span>

<span class="token class-name">Student</span><span class="token punctuation">.</span>prototype<span class="token punctuation">.</span><span class="token function-variable function">studying</span> <span class="token operator">=</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>name<span class="token punctuation">,</span> <span class="token string">' studying~'</span><span class="token punctuation">)</span>
<span class="token punctuation">}</span>
</code></pre></div><p>寄生式组合继承即使用盗用构造函数继承属性，使用寄生式继承避免调用父类构造函数，效率更高。</p>
]]></content>
    <category term="JavaScript"/>
    <published>2022-08-25T00:00:00.000Z</published>
  </entry>
  <entry>
    <title type="text">创建对象</title>
    <id>https://dribble-njr.github.io/blog/blog/frontend/basic/javascript/011-create-object.html</id>
    <link href="https://dribble-njr.github.io/blog/blog/frontend/basic/javascript/011-create-object.html"/>
    <updated>2024-05-29T13:16:51.000Z</updated>
    <summary type="html"><![CDATA[<p>在 JavaScript 中使用 <code>class</code> 时，可以很方便地创建类和继承，然而在 ES6 之前的规范中，是使用构造函数和基于原型的继承模式，而 <code>class</code> 仅仅是它们的语法糖。因此在了解 ES6 <code>class</code> 之前，有必要了解以前模拟类和继承的方法。</p>
<p>首先来看看在 JavaScript 中是如何创建一个对象的。</p>
<h2>工厂模式</h2>
<p>工厂模式是一种常见的设计模式，通过工厂方法返回想要的对象。</p>
<div class="language-javascript" data-ext="js" data-title="js"><pre class="language-javascript"><code><span class="token keyword">function</span> <span class="token function">createPerson</span><span class="token punctuation">(</span><span class="token parameter">name<span class="token punctuation">,</span> age</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token keyword">let</span> o <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Object</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
  o<span class="token punctuation">.</span>name <span class="token operator">=</span> name
  o<span class="token punctuation">.</span>age <span class="token operator">=</span> age
  o<span class="token punctuation">.</span><span class="token function-variable function">sayName</span> <span class="token operator">=</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>name<span class="token punctuation">)</span>
  <span class="token punctuation">}</span>

  <span class="token keyword">return</span> o
<span class="token punctuation">}</span>

<span class="token keyword">let</span> person <span class="token operator">=</span> <span class="token function">createPerson</span><span class="token punctuation">(</span><span class="token string">'wang'</span><span class="token punctuation">,</span> <span class="token number">18</span><span class="token punctuation">)</span>

console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>person<span class="token punctuation">)</span> <span class="token comment">// { name: 'wang', age: 18, sayName: [Function (anonymous)] }</span>
</code></pre></div>]]></summary>
    <content type="html"><![CDATA[<p>在 JavaScript 中使用 <code>class</code> 时，可以很方便地创建类和继承，然而在 ES6 之前的规范中，是使用构造函数和基于原型的继承模式，而 <code>class</code> 仅仅是它们的语法糖。因此在了解 ES6 <code>class</code> 之前，有必要了解以前模拟类和继承的方法。</p>
<p>首先来看看在 JavaScript 中是如何创建一个对象的。</p>
<h2>工厂模式</h2>
<p>工厂模式是一种常见的设计模式，通过工厂方法返回想要的对象。</p>
<div class="language-javascript" data-ext="js" data-title="js"><pre class="language-javascript"><code><span class="token keyword">function</span> <span class="token function">createPerson</span><span class="token punctuation">(</span><span class="token parameter">name<span class="token punctuation">,</span> age</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token keyword">let</span> o <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Object</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
  o<span class="token punctuation">.</span>name <span class="token operator">=</span> name
  o<span class="token punctuation">.</span>age <span class="token operator">=</span> age
  o<span class="token punctuation">.</span><span class="token function-variable function">sayName</span> <span class="token operator">=</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>name<span class="token punctuation">)</span>
  <span class="token punctuation">}</span>

  <span class="token keyword">return</span> o
<span class="token punctuation">}</span>

<span class="token keyword">let</span> person <span class="token operator">=</span> <span class="token function">createPerson</span><span class="token punctuation">(</span><span class="token string">'wang'</span><span class="token punctuation">,</span> <span class="token number">18</span><span class="token punctuation">)</span>

console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>person<span class="token punctuation">)</span> <span class="token comment">// { name: 'wang', age: 18, sayName: [Function (anonymous)] }</span>
</code></pre></div><p>工厂模式虽然可以解决创建多个类似对象的问题，但是它创建的对象没有标识。</p>
<h2>构造函数模式</h2>
<p>在 JavaScript 中，任何函数只要使用 <code>new</code> 操作符调用就是构造函数，而不使用 <code>new</code> 操作符调用的函数就是普通函数。</p>
<p>构造函数也称构造器（<code>constructor</code>），是创建对象时会调用的函数。</p>
<div class="hint-container warning">
<p class="hint-container-title">注意</p>
<p>箭头函数不能使用 <code>new</code> 调用。</p>
</div>
<div class="language-javascript" data-ext="js" data-title="js"><pre class="language-javascript"><code><span class="token keyword">function</span> <span class="token function">Person</span><span class="token punctuation">(</span><span class="token parameter">name<span class="token punctuation">,</span> age</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token keyword">this</span><span class="token punctuation">.</span>name <span class="token operator">=</span> name
  <span class="token keyword">this</span><span class="token punctuation">.</span>age <span class="token operator">=</span> age
  <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function-variable function">sayName</span> <span class="token operator">=</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>name<span class="token punctuation">)</span>
  <span class="token punctuation">}</span>
<span class="token punctuation">}</span>

<span class="token keyword">let</span> person1 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Person</span><span class="token punctuation">(</span><span class="token string">'wang'</span><span class="token punctuation">,</span> <span class="token number">18</span><span class="token punctuation">)</span>
<span class="token keyword">let</span> person2 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Person</span><span class="token punctuation">(</span><span class="token string">'hou'</span><span class="token punctuation">,</span> <span class="token number">18</span><span class="token punctuation">)</span>

console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>person1<span class="token punctuation">)</span> <span class="token comment">// Person { name: 'wang', age: 18, sayName: [Function (anonymous)] }</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>person2<span class="token punctuation">)</span> <span class="token comment">// Person { name: 'hou', age: 18, sayName: [Function (anonymous)] }</span>
</code></pre></div><p>使用构造函数创建对象时，它 <strong>打印出了对象标识</strong>，也就是说它解决了工厂模式没有对象标识的问题。</p>
<p><strong>构造函数存在的问题：</strong></p>
<p>首先让我们来看看 <code>new</code> 操作的过程：</p>
<ol>
<li>首先创建一个空对象；</li>
<li>将空对象的原型（<code>[[prototype]]</code> 属性）赋值为构造函数的 <code>prototype</code> 对象；</li>
<li>让构造函数的 <code>this</code> 指向这个空对象，执行构造函数的代码；</li>
<li>判断构造函数返回值的类型，如果是基本类型，则返回创建的对象，如果是引用类型，则返回这个引用类型。</li>
</ol>
<p>注意到第三步，构造函数的问题在于定义的方法会在每个实例上都创建一次。</p>
<p>要解决这个问题，可以把函数定义转移到构造函数外部：</p>
<div class="language-javascript" data-ext="js" data-title="js"><pre class="language-javascript"><code><span class="token keyword">function</span> <span class="token function">Person</span><span class="token punctuation">(</span><span class="token parameter">name<span class="token punctuation">,</span> age</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token keyword">this</span><span class="token punctuation">.</span>name <span class="token operator">=</span> name
  <span class="token keyword">this</span><span class="token punctuation">.</span>age <span class="token operator">=</span> age
  <span class="token keyword">this</span><span class="token punctuation">.</span>sayName <span class="token operator">=</span> sayName
<span class="token punctuation">}</span>

<span class="token keyword">function</span> <span class="token function">sayName</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>name<span class="token punctuation">)</span>
<span class="token punctuation">}</span>

<span class="token keyword">let</span> person1 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Person</span><span class="token punctuation">(</span><span class="token string">'wang'</span><span class="token punctuation">,</span> <span class="token number">18</span><span class="token punctuation">)</span>
<span class="token keyword">let</span> person2 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Person</span><span class="token punctuation">(</span><span class="token string">'hou'</span><span class="token punctuation">,</span> <span class="token number">18</span><span class="token punctuation">)</span>
</code></pre></div><p>但是如果这个对象需要多个方法，就要在全局作用域上定义多个函数，这会污染全局作用域。这个问题可以通过原型模型来解决。</p>
<h2>原型模式</h2>
<p>在了解原型模式的具体过程前，先来看看隐式原型和显示原型的概念。</p>
<h3>隐式原型和显示原型</h3>
<h4>隐式原型（Implicit Prototype）</h4>
<p>每个 JavaScript 「对象」都有一个指向其原型对象的内部链接，这个链接就是 <strong>隐式原型</strong>。</p>
<p>当访问对象的属性时，如果该对象本身没有这个属性，JavaScript 引擎就会沿着 <strong>隐式原型链</strong> 继续查找，直到找到对应的属性或者到达原型链的顶端（即 <code>Object.prototype</code>）。</p>
<p>每个 <strong>对象</strong> 都有一个特殊的内置属性 <code>[[prototype]]</code>，这个特殊的对象指向另外一个对象。早期的 ECMA 没有规范如何去查看 <code>[[prototype]]</code>，因此浏览器给对象提供一个 <code>__proto__</code> 属性来查看这个属性。</p>
<div class="language-javascript" data-ext="js" data-title="js"><pre class="language-javascript"><code><span class="token keyword">function</span> <span class="token function">Person</span><span class="token punctuation">(</span><span class="token parameter">name<span class="token punctuation">,</span> age</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token keyword">this</span><span class="token punctuation">.</span>name <span class="token operator">=</span> name
  <span class="token keyword">this</span><span class="token punctuation">.</span>age <span class="token operator">=</span> age
  <span class="token keyword">this</span><span class="token punctuation">.</span>sayName <span class="token operator">=</span> sayName
<span class="token punctuation">}</span>

<span class="token keyword">function</span> <span class="token function">sayName</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>name<span class="token punctuation">)</span>
<span class="token punctuation">}</span>

<span class="token keyword">let</span> person1 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Person</span><span class="token punctuation">(</span><span class="token string">'wang'</span><span class="token punctuation">,</span> <span class="token number">18</span><span class="token punctuation">)</span>
<span class="token comment">// 查看对象隐式原型</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>person1<span class="token punctuation">.</span>__proto__<span class="token punctuation">)</span> <span class="token comment">// {}</span>
</code></pre></div><p>ES5 之后提供了 <code>Object.getPrototypeOf()</code> 查看：</p>
<div class="language-javascript" data-ext="js" data-title="js"><pre class="language-javascript"><code><span class="token comment">// 查看对象隐式原型</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>Object<span class="token punctuation">.</span><span class="token function">getPrototypeOf</span><span class="token punctuation">(</span>person1<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token comment">// {}</span>
</code></pre></div><h4>显式原型</h4>
<p>函数作为对象，也拥有隐式原型 <code>[[prototype]]</code> 属性。</p>
<div class="language-javascript" data-ext="js" data-title="js"><pre class="language-javascript"><code><span class="token keyword">function</span> <span class="token function">Foo</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token punctuation">}</span>

console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>Foo<span class="token punctuation">.</span>__proto__<span class="token punctuation">)</span> <span class="token comment">// 输出 "function () {...}"</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>Foo<span class="token punctuation">.</span>__proto__ <span class="token operator">===</span> <span class="token class-name">Function</span><span class="token punctuation">.</span>prototype<span class="token punctuation">)</span> <span class="token comment">// true</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>Foo<span class="token punctuation">.</span>__proto__ <span class="token operator">===</span> Object<span class="token punctuation">.</span><span class="token function">getPrototypeOf</span><span class="token punctuation">(</span>Foo<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token comment">// true</span>
</code></pre></div><p>此外，每个函数都会创建一个 <code>prototype</code> 属性，称为函数的 <strong>显式原型</strong>。这个属性指向原型对象，包含应该由特定引用类型的实例共享的属性和方法。所有原型对象自动获得一个名为 <code>constructor</code> 的属性，指回与之关联的构造函数。</p>
<div class="language-javascript" data-ext="js" data-title="js"><pre class="language-javascript"><code><span class="token keyword">function</span> <span class="token function">foo</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token punctuation">}</span>

console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>Object<span class="token punctuation">.</span><span class="token function">getOwnPropertyDescriptors</span><span class="token punctuation">(</span>foo<span class="token punctuation">.</span>prototype<span class="token punctuation">)</span><span class="token punctuation">)</span>
<span class="token comment">// {</span>
<span class="token comment">//   constructor: {</span>
<span class="token comment">//     value: [Function: foo], // 原型对象的构造函数指回与之关联的构造函数</span>
<span class="token comment">//     writable: true,</span>
<span class="token comment">//     enumerable: false,</span>
<span class="token comment">//     configurable: true</span>
<span class="token comment">//   }</span>
<span class="token comment">// }</span>
</code></pre></div><h3>原型模式具体实现过程</h3>
<p>了解了隐式原型和显式原型后，我们就可以来看看原型模式具体是如何实现的了。</p>
<p>JavaScript 每个函数都有一个 <strong>显式原型</strong> <code>prototype</code> 属性（这个属性是一个对象，包含应该由特定引用类型的实例共享的属性和方法），将需要共享的函数或属性放在这个原型对象上，而新创建的实例对象，就会通过它的 <strong>隐式原型 <code>__proto__</code></strong> 顺着原型链往上找，就可以很好的解决构造函数模式污染全局作用域的问题。</p>
<p>让我们回忆一下前面 <code>new</code> 关键字的步骤时：</p>
<ol>
<li>首先创建一个空对象；</li>
<li>将空对象的原型（<code>[[prototype]]</code> 属性）赋值为构造函数的 <code>prototype</code> 对象；</li>
<li>让构造函数的 <code>this</code> 指向这个空对象，执行构造函数的代码；</li>
<li>判断构造函数返回值的类型，如果是基本类型，则返回创建的对象，如果是引用类型，则返回这个引用类型。</li>
</ol>
<p>其中第 2 步就是：<strong>构造函数的显示原型会被赋值给新对象的隐式原型</strong>。</p>
<div class="language-javascript" data-ext="js" data-title="js"><pre class="language-javascript"><code><span class="token keyword">function</span> <span class="token function">Person</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token punctuation">}</span>

<span class="token class-name">Person</span><span class="token punctuation">.</span>prototype<span class="token punctuation">.</span>name <span class="token operator">=</span> <span class="token string">'wang'</span>
<span class="token class-name">Person</span><span class="token punctuation">.</span>prototype<span class="token punctuation">.</span>age <span class="token operator">=</span> <span class="token number">18</span>
<span class="token class-name">Person</span><span class="token punctuation">.</span>prototype<span class="token punctuation">.</span><span class="token function-variable function">sayName</span> <span class="token operator">=</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>name<span class="token punctuation">)</span>
<span class="token punctuation">}</span>

<span class="token keyword">let</span> person1 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Person</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
person1<span class="token punctuation">.</span><span class="token function">sayName</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token comment">// wang</span>
</code></pre></div><p>上面定义原型时语法有点冗余，因此常用对象字面量直接重写函数原型。</p>
<div class="language-javascript" data-ext="js" data-title="js"><pre class="language-javascript"><code><span class="token keyword">function</span> <span class="token function">Person</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token punctuation">}</span>

<span class="token class-name">Person</span><span class="token punctuation">.</span>prototype <span class="token operator">=</span> <span class="token punctuation">{</span>
  <span class="token literal-property property">name</span><span class="token operator">:</span> <span class="token string">'wang'</span><span class="token punctuation">,</span>
  <span class="token literal-property property">age</span><span class="token operator">:</span> <span class="token number">18</span><span class="token punctuation">,</span>
  <span class="token function">sayName</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>name<span class="token punctuation">)</span>
  <span class="token punctuation">}</span>
<span class="token punctuation">}</span>

<span class="token comment">// 使 constructor 属性不可枚举</span>
Object<span class="token punctuation">.</span><span class="token function">defineProperty</span><span class="token punctuation">(</span><span class="token class-name">Person</span><span class="token punctuation">.</span>prototype<span class="token punctuation">,</span> <span class="token string">'constructor'</span><span class="token punctuation">,</span> <span class="token punctuation">{</span>
  <span class="token literal-property property">enumerable</span><span class="token operator">:</span> <span class="token boolean">false</span><span class="token punctuation">,</span>
  <span class="token literal-property property">value</span><span class="token operator">:</span> Person
<span class="token punctuation">}</span><span class="token punctuation">)</span>
</code></pre></div><h3>原型模式存在的问题</h3>
<p>原型模式是实现所有原生引用类型的模式，所有原生引用类型的构造函数（包括 <code>Object</code>、<code>Array</code>、<code>String</code> 等）都在原型上定义了实例方法，因此我们才能调用那些方法。</p>
<p>但原型模式也有它的问题：</p>
<ul>
<li>弱化了向构造函数传递初始化参数的能力，会导致所有实例默认都取得相同的属性值；</li>
<li>原型上的引用属性是在实例间共享的，因此修改一个会影响其他实例。</li>
</ul>
<p>来看一个例子：</p>
<div class="language-javascript" data-ext="js" data-title="js"><pre class="language-javascript"><code><span class="token keyword">function</span> <span class="token function">Person</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token punctuation">}</span>

<span class="token class-name">Person</span><span class="token punctuation">.</span>prototype <span class="token operator">=</span> <span class="token punctuation">{</span>
  <span class="token literal-property property">constructor</span><span class="token operator">:</span> Person<span class="token punctuation">,</span>
  <span class="token literal-property property">name</span><span class="token operator">:</span> <span class="token string">'wang'</span><span class="token punctuation">,</span>
  <span class="token literal-property property">age</span><span class="token operator">:</span> <span class="token number">18</span><span class="token punctuation">,</span>
  <span class="token literal-property property">friends</span><span class="token operator">:</span> <span class="token punctuation">[</span><span class="token string">'neymar'</span><span class="token punctuation">]</span><span class="token punctuation">,</span>
  <span class="token function">sayName</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>name<span class="token punctuation">)</span>
  <span class="token punctuation">}</span>
<span class="token punctuation">}</span>

<span class="token comment">// 使 constructor 属性不可枚举</span>
Object<span class="token punctuation">.</span><span class="token function">defineProperty</span><span class="token punctuation">(</span><span class="token class-name">Person</span><span class="token punctuation">.</span>prototype<span class="token punctuation">,</span> <span class="token string">'constructor'</span><span class="token punctuation">,</span> <span class="token punctuation">{</span>
  <span class="token literal-property property">enumerable</span><span class="token operator">:</span> <span class="token boolean">false</span><span class="token punctuation">,</span>
  <span class="token literal-property property">value</span><span class="token operator">:</span> Person
<span class="token punctuation">}</span><span class="token punctuation">)</span>

<span class="token comment">// 1. 无法向构造函数传参</span>
<span class="token keyword">let</span> person1 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Person</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
<span class="token keyword">let</span> person2 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Person</span><span class="token punctuation">(</span><span class="token punctuation">)</span>

person1<span class="token punctuation">.</span>friends<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span><span class="token string">'messi'</span><span class="token punctuation">)</span>

<span class="token comment">// 2. 原型上的引用属性在实例间共享</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>person1<span class="token punctuation">.</span>friends<span class="token punctuation">)</span> <span class="token comment">// [ 'neymar', 'messi' ]</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>person2<span class="token punctuation">.</span>friends<span class="token punctuation">)</span> <span class="token comment">// [ 'neymar', 'messi' ]</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>person1<span class="token punctuation">.</span>friends <span class="token operator">===</span> person2<span class="token punctuation">.</span>friends<span class="token punctuation">)</span> <span class="token comment">// true</span>
</code></pre></div><p>此时在 1 处无法向构造函数传参，而且在 2 处修改 <code>person1.friends</code> 也会影响到 <code>person2</code> 实例，因为他们指向的原型中的同一个地址。</p>
<p>为了解决这个问题，可以 <strong>组合使用构造函数和原型模式</strong>。</p>
<h2>组合使用构造函数和原型模式</h2>
<p>首先来回忆一下构造函数和原型模式各自的问题：</p>
<ul>
<li>构造函数模式：如果这个对象需要多个方法，就要在全局作用域上定义多个函数，会污染全局作用域；</li>
<li>原型模式：弱化了向构造函数传递初始化参数的能力，引用属性会存在共享问题。</li>
</ul>
<p>既然他们分开使用都会存在一些问题，因此可以组合使用这两种模式：<strong>通过构造函数初始化对象的属性，通过原型对象实现方法的复用</strong>。</p>
<div class="language-javascript" data-ext="js" data-title="js"><pre class="language-javascript"><code><span class="token keyword">function</span> <span class="token function">Person</span><span class="token punctuation">(</span><span class="token parameter">name<span class="token punctuation">,</span> age<span class="token punctuation">,</span> friends</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token keyword">this</span><span class="token punctuation">.</span>name <span class="token operator">=</span> name
  <span class="token keyword">this</span><span class="token punctuation">.</span>age <span class="token operator">=</span> age
  <span class="token keyword">this</span><span class="token punctuation">.</span>friends <span class="token operator">=</span> friends
<span class="token punctuation">}</span>

<span class="token class-name">Person</span><span class="token punctuation">.</span>prototype <span class="token operator">=</span> <span class="token punctuation">{</span>
  <span class="token literal-property property">constructor</span><span class="token operator">:</span> Person<span class="token punctuation">,</span>
  <span class="token function">sayName</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>name<span class="token punctuation">)</span>
  <span class="token punctuation">}</span>
<span class="token punctuation">}</span>

<span class="token comment">// 使 constructor 属性不可枚举</span>
Object<span class="token punctuation">.</span><span class="token function">defineProperty</span><span class="token punctuation">(</span><span class="token class-name">Person</span><span class="token punctuation">.</span>prototype<span class="token punctuation">,</span> <span class="token string">'constructor'</span><span class="token punctuation">,</span> <span class="token punctuation">{</span>
  <span class="token literal-property property">enumerable</span><span class="token operator">:</span> <span class="token boolean">false</span><span class="token punctuation">,</span>
  <span class="token literal-property property">value</span><span class="token operator">:</span> Person
<span class="token punctuation">}</span><span class="token punctuation">)</span>

<span class="token keyword">let</span> person1 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Person</span><span class="token punctuation">(</span><span class="token string">'wang'</span><span class="token punctuation">,</span> <span class="token number">18</span><span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token string">'neymar'</span><span class="token punctuation">]</span><span class="token punctuation">)</span>
<span class="token keyword">let</span> person2 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Person</span><span class="token punctuation">(</span><span class="token string">'hou'</span><span class="token punctuation">,</span> <span class="token number">18</span><span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token string">'messi'</span><span class="token punctuation">]</span><span class="token punctuation">)</span>

person1<span class="token punctuation">.</span>friends<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span><span class="token string">'hou'</span><span class="token punctuation">)</span>
person2<span class="token punctuation">.</span>friends<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span><span class="token string">'wang'</span><span class="token punctuation">)</span>

console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>person1<span class="token punctuation">.</span>friends<span class="token punctuation">)</span> <span class="token comment">// [ 'neymar', 'hou' ]</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>person2<span class="token punctuation">.</span>friends<span class="token punctuation">)</span> <span class="token comment">// [ 'messi', 'wang' ]</span>
</code></pre></div><p>此时不仅可以传递初始化参数，而且修改各自的 <code>friends</code> 属性都互不影响。</p>
<h2>总结</h2>
<p>以上就是 JavaScript 中创建对象的四种主要方式，包括工厂模式、构造函数模式、原型模式及组合使用构造函数和原型模式。让我们来回忆一下前面三种各自的缺点：</p>
<ul>
<li>工厂模式：无法解决对象标识问题；</li>
<li>构造函数模式：对象需要多个方法，就要在全局作用域上定义多个函数，这会污染全局作用域；</li>
<li>原型模式：弱化了向构造函数传递初始化参数的能力，引用属性会存在共享问题。</li>
</ul>
]]></content>
    <category term="JavaScript"/>
    <published>2022-08-25T00:00:00.000Z</published>
  </entry>
  <entry>
    <title type="text">初始化项目</title>
    <id>https://dribble-njr.github.io/blog/blog/project/imperial-kitchen/01-init.html</id>
    <link href="https://dribble-njr.github.io/blog/blog/project/imperial-kitchen/01-init.html"/>
    <updated>2024-05-15T15:05:48.000Z</updated>
    <summary type="html"><![CDATA[<h2>技术方案选型</h2>
<h3>Flutter vs React Native</h3>
<p>目前，<a href="https://flutter.dev/" target="_blank" rel="noopener noreferrer">Flutter</a> 和 <a href="https://reactnative.dev/" target="_blank" rel="noopener noreferrer">React Native</a> 是最流行的跨端解决方案。</p>
<p>考虑到 Flutter 使用 <code>dart</code> 语言，而 React Native 使用 <code>js</code>，学习成本相对而言较少，因此决定使用 React Native。</p>]]></summary>
    <content type="html"><![CDATA[<h2>技术方案选型</h2>
<h3>Flutter vs React Native</h3>
<p>目前，<a href="https://flutter.dev/" target="_blank" rel="noopener noreferrer">Flutter</a> 和 <a href="https://reactnative.dev/" target="_blank" rel="noopener noreferrer">React Native</a> 是最流行的跨端解决方案。</p>
<p>考虑到 Flutter 使用 <code>dart</code> 语言，而 React Native 使用 <code>js</code>，学习成本相对而言较少，因此决定使用 React Native。</p>
<ul>
<li><a href="https://www.thedroidsonroids.com/blog/flutter-vs-react-native-comparison" target="_blank" rel="noopener noreferrer">Flutter vs. React Native – Which is Better for Your Project in 2024?</a></li>
<li><a href="https://www.thedroidsonroids.com/blog/top-cross-platform-app-development-frameworks" target="_blank" rel="noopener noreferrer">4 Most Popular Cross-Platform App Development Frameworks for 2024</a></li>
</ul>
<h3>Expo Go vs React Native CLI</h3>
<p>如果您是移动开发的新手，最简单的入门方法就是使用 Expo Go。Expo 是一套围绕 React Native 构建的工具和服务，虽然它有很多功能，但目前与我们最相关的功能是它能让你在几分钟内编写出一个 React Native 应用程序。您只需要一个最新版本的 Node.js 和一部手机或模拟器。</p>
<p>如果你已经熟悉移动开发，你可能想使用 React Native CLI。它需要 Xcode 或 Android Studio 才能开始使用。如果你已经安装了这些工具之一，应该可以在几分钟内开始运行。如果没有安装这些工具，则需要花费大约一个小时进行安装和配置。</p>
<p>考虑到快速实现一个 MVP，最终选择了 Expo。</p>
<h3>Next or Node</h3>
<p>最初，考虑使用 Expo 与 Next.js 结合的方案来实现前后端不分离的全栈项目。然而，<a href="https://docs.expo.dev/guides/using-nextjs/" target="_blank" rel="noopener noreferrer">Expo 官方</a> 提到 Next.js 只能用于 Expo for Web，无法实现跨端需求。</p>
<p>因此确定使用 Expo + Node.js + Monorepo 的方案，这样可以使得项目结构更加清晰，便于管理和维护。</p>
<h2>Monorepo 搭建</h2>
<p>最初使用 <code>pnpm</code> workspaces 搭建 Monorepo 项目，然而安装依赖后启动报错：</p>
<ul>
<li><a href="https://github.com/expo/expo/issues/22413" target="_blank" rel="noopener noreferrer">Pnpm not working with Expo</a></li>
<li><a href="https://github.com/pnpm/pnpm/issues/4286" target="_blank" rel="noopener noreferrer">[bug] - Pnpm not working with expo</a></li>
</ul>
<p>查询到上述两个 issue 后，在目录中添加 <code>.npmrc</code> 文件后重新安装依赖项目启动成功。</p>
<div class="language-text" data-ext="text" data-title="text"><pre class="language-text"><code>node-linker=hoisted
</code></pre></div><p>考虑到可能还会遇到其他兼容问题，最终选择官方推荐的 <code>yarn 1.x</code> workspaces。</p>
<p>目录结构设计如下：</p>
<div class="language-bash" data-ext="sh" data-title="sh"><pre class="language-bash"><code>- apps
  - mobile
  - server
- packages
  - types
- package.json
</code></pre></div><h3>init mobile</h3>
<p>以下按照 <a href="https://docs.expo.dev/guides/monorepos/" target="_blank" rel="noopener noreferrer">Work with monorepos</a> 搭建项目。</p>
<p>在 imperial-kitchen 文件夹中 使用以下命令初始化 <code>expo</code> 项目</p>
<div class="language-bash" data-ext="sh" data-title="sh"><pre class="language-bash"><code>npx create-expo-app apps/mobile
</code></pre></div><div class="hint-container warning">
<p class="hint-container-title">注意</p>
<p>使用 expo router，必须添加环境变量：<code>EXPO_USE_METRO_WORKSPACE_ROOT=1</code></p>
</div>
<h3>init server</h3>
<p>后端服务选择使用原生 <code>node</code> 开发，详见 。</p>
<h3>配置 lint</h3>
<p>配置 <code>eslint</code>、<code>prettier</code>、<code>commitlint</code> 和 <code>husky</code>。</p>
]]></content>
    <category term="Project"/>
    <published>2024-05-09T00:00:00.000Z</published>
  </entry>
  <entry>
    <title type="text">Imperial Kitchen 御膳房</title>
    <id>https://dribble-njr.github.io/blog/blog/project/imperial-kitchen/</id>
    <link href="https://dribble-njr.github.io/blog/blog/project/imperial-kitchen/"/>
    <updated>2024-05-12T06:37:11.000Z</updated>
    <summary type="html"><![CDATA[<p>欢迎来到 Imperial Kitchen 御膳房项目！项目地址：<a href="https://github.com/dribble-njr/imperial-kitchen.git%E3%80%82" target="_blank" rel="noopener noreferrer">https://github.com/dribble-njr/imperial-kitchen.git。</a></p>
<h2>项目简介</h2>
<p>Imperial Kitchen 御膳房是一个家庭厨房的点菜应用，旨在帮助方便快捷地选择菜品并下单。</p>
<h2>功能特性</h2>
<ul>
<li>浏览菜单：查看各种菜品的详细信息，包括图片、描述和价格。</li>
<li>点菜下单：选择喜欢的菜品加入购物车，并下单购买。</li>
<li>查看订单：查看已下单的菜品订单状态和历史订单。</li>
<li>个人中心：管理个人信息，查看收货地址等。</li>
</ul>]]></summary>
    <content type="html"><![CDATA[<p>欢迎来到 Imperial Kitchen 御膳房项目！项目地址：<a href="https://github.com/dribble-njr/imperial-kitchen.git%E3%80%82" target="_blank" rel="noopener noreferrer">https://github.com/dribble-njr/imperial-kitchen.git。</a></p>
<h2>项目简介</h2>
<p>Imperial Kitchen 御膳房是一个家庭厨房的点菜应用，旨在帮助方便快捷地选择菜品并下单。</p>
<h2>功能特性</h2>
<ul>
<li>浏览菜单：查看各种菜品的详细信息，包括图片、描述和价格。</li>
<li>点菜下单：选择喜欢的菜品加入购物车，并下单购买。</li>
<li>查看订单：查看已下单的菜品订单状态和历史订单。</li>
<li>个人中心：管理个人信息，查看收货地址等。</li>
</ul>
<h2>技术栈</h2>
<ul>
<li>前端：使用 <code>Expo</code> 和 <code>React Native</code> 开发移动端应用。</li>
<li>后端：使用 <code>Node.js</code> 和 <code>Express</code> 开发服务器端接口。</li>
<li>数据库：使用 <code>MongoDB</code> 存储菜品和订单信息。</li>
<li>其他工具：使用 <code>TypeScript</code> 编写代码，使用 <code>yarn workspace</code> 管理多包项目。</li>
</ul>
<h2>使用说明</h2>
<ol>
<li>克隆项目到本地：</li>
</ol>
<div class="language-bash" data-ext="sh" data-title="sh"><pre class="language-bash"><code><span class="token function">git</span> clone https://github.com/your-username/imperial-kitchen.git
</code></pre></div><ol start="2">
<li>安装依赖：</li>
</ol>
<div class="language-bash" data-ext="sh" data-title="sh"><pre class="language-bash"><code><span class="token builtin class-name">cd</span> imperial-kitchen
<span class="token function">yarn</span> <span class="token function">install</span>
</code></pre></div><ol start="3">
<li>启动前端应用：</li>
</ol>
<div class="language-bash" data-ext="sh" data-title="sh"><pre class="language-bash"><code><span class="token function">yarn</span> workspace mobile start
</code></pre></div><ol start="4">
<li>启动后端服务器：</li>
</ol>
<div class="language-bash" data-ext="sh" data-title="sh"><pre class="language-bash"><code><span class="token function">yarn</span> workspace server start
</code></pre></div><h2>贡献</h2>
<p>欢迎贡献代码！如果您有任何建议或发现了问题，请在 GitHub 上提出问题或提交拉取请求。</p>
]]></content>
    <category term="Project"/>
    <published>2024-05-09T00:00:00.000Z</published>
  </entry>
  <entry>
    <title type="text">对象属性</title>
    <id>https://dribble-njr.github.io/blog/blog/frontend/basic/javascript/010-object-property.html</id>
    <link href="https://dribble-njr.github.io/blog/blog/frontend/basic/javascript/010-object-property.html"/>
    <updated>2024-04-30T08:41:59.000Z</updated>
    <summary type="html"><![CDATA[<p>在 JavaScript 中，对象是一组属性的「无序集合」，由键值对组成。创建对象共有两种方式：字面量和 <code>new</code>。一般开发中为了方便通常使用字面量来创建对象。</p>
<p>对象中的属性有一些内部特性，这些内部特性的名称会用两个中括号括起来，如 <code>[[Enumerable]]</code>，根据内部特性的不同，可以将属性分为 <strong>数据属性</strong> 和 <strong>访问器属性</strong>。</p>
<h2>数据属性</h2>
<p>数据属性，顾名思义，它是包含一个值的属性，数据属性一共以下四个特性：</p>
<ul>
<li><code>[[Configurable]]</code>：属性是否可配置：是否可以 <code>delete</code> 删除，是否可以修改特性，以及是否可以改成访问器属性。默认为 <code>true</code>。</li>
<li><code>[[Enumerable]]</code>：属性是否可以枚举（使用 <code>for-in</code>）。默认为 <code>true</code>。</li>
<li><code>[[Writable]]</code>：属性的值是否可以被修改。默认为 <code>true</code>。</li>
<li><code>[[Value]]</code>：属性的值。默认为 <code>undefined</code>。</li>
</ul>]]></summary>
    <content type="html"><![CDATA[<p>在 JavaScript 中，对象是一组属性的「无序集合」，由键值对组成。创建对象共有两种方式：字面量和 <code>new</code>。一般开发中为了方便通常使用字面量来创建对象。</p>
<p>对象中的属性有一些内部特性，这些内部特性的名称会用两个中括号括起来，如 <code>[[Enumerable]]</code>，根据内部特性的不同，可以将属性分为 <strong>数据属性</strong> 和 <strong>访问器属性</strong>。</p>
<h2>数据属性</h2>
<p>数据属性，顾名思义，它是包含一个值的属性，数据属性一共以下四个特性：</p>
<ul>
<li><code>[[Configurable]]</code>：属性是否可配置：是否可以 <code>delete</code> 删除，是否可以修改特性，以及是否可以改成访问器属性。默认为 <code>true</code>。</li>
<li><code>[[Enumerable]]</code>：属性是否可以枚举（使用 <code>for-in</code>）。默认为 <code>true</code>。</li>
<li><code>[[Writable]]</code>：属性的值是否可以被修改。默认为 <code>true</code>。</li>
<li><code>[[Value]]</code>：属性的值。默认为 <code>undefined</code>。</li>
</ul>
<p>使用字面量或 <code>new</code> 操作符定义对象时，默认就是一个数据属性。前三个特性都默认为 <code>true</code>，而 <code>[[value]]</code> 则为指定的值。</p>
<p>可以使用 <code>Object.getOwnPropertyDescriptor()</code> 查看属性的描述符，他接收两个参数，第一个参数为对象，第二个参数为需要查看描述符的属性。</p>
<div class="language-javascript" data-ext="js" data-title="js"><pre class="language-javascript"><code><span class="token keyword">const</span> o <span class="token operator">=</span> <span class="token punctuation">{</span> <span class="token literal-property property">name</span><span class="token operator">:</span> <span class="token string">'wang'</span> <span class="token punctuation">}</span>

console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>Object<span class="token punctuation">.</span><span class="token function">getOwnPropertyDescriptor</span><span class="token punctuation">(</span>o<span class="token punctuation">,</span> <span class="token string">'name'</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
<span class="token comment">// {</span>
<span class="token comment">//   value: 'wang',</span>
<span class="token comment">//   writable: true,</span>
<span class="token comment">//   enumerable: true,</span>
<span class="token comment">//   configurable: true</span>
<span class="token comment">// }</span>
</code></pre></div><p>另外除了使用字面量声明属性，还可以通过 <code>Object.defineProperty()</code> 定义属性，同时定义多个属性则可以使用 <code>Object.defineProperties()</code>，</p>
<div class="hint-container warning">
<p class="hint-container-title">注意</p>
<p>在调用 <code>Object.defineProperty()</code> 时，<code>configurable</code>、<code>enumerable</code> 和 <code>writable</code> 的值如果不指定，则都默认为 <code>false</code>。</p>
<p>在严格模式下，尝试删除不可配置属性会抛出错误，尝试修改只读属性也会抛出错误。</p>
</div>
<div class="language-javascript" data-ext="js" data-title="js"><pre class="language-javascript"><code><span class="token keyword">const</span> o <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token punctuation">}</span>

Object<span class="token punctuation">.</span><span class="token function">defineProperty</span><span class="token punctuation">(</span>o<span class="token punctuation">,</span> <span class="token string">'name'</span><span class="token punctuation">,</span> <span class="token punctuation">{</span>
  <span class="token literal-property property">value</span><span class="token operator">:</span> <span class="token string">'wang'</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span>

console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>Object<span class="token punctuation">.</span><span class="token function">getOwnPropertyDescriptor</span><span class="token punctuation">(</span>o<span class="token punctuation">,</span> <span class="token string">'name'</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
<span class="token comment">// {</span>
<span class="token comment">//   value: 'wang',</span>
<span class="token comment">//   writable: false,</span>
<span class="token comment">//   enumerable: false,</span>
<span class="token comment">//   configurable: false</span>
<span class="token comment">// }</span>
</code></pre></div><h2>访问器属性</h2>
<p>访问器属性不包含值，而是有一个 <code>getter()</code> 函数和一个 <code>setter()</code> 函数。在写入访问器属性时，会调用设置（<code>setter()</code>）函数，在读取时，会调用获取（<code>getter()</code>）函数。它一共包括四种特性：</p>
<ul>
<li><code>[[Configurable]]</code>：属性是否可配置：是否可以 <code>delete</code>，是否可以修改特性，以及是否可以改成数据属性。默认为 <code>true</code>。</li>
<li><code>[[Enumerable]]</code>：属性是否可以枚举。默认为 <code>true</code>。</li>
<li><code>[[Get]]</code>：获取函数，读取属性时调用。默认为 <code>undefined</code>。</li>
<li><code>[[Set]]</code>：设置函数，写入属性时调用。默认为 <code>undefined</code>。</li>
</ul>
<p>访问器属性 <strong>只能</strong> 通过 <code>Object.defineProperty()</code> 或 <code>Object.defineProperties()</code> 定义：</p>
<div class="hint-container warning">
<p class="hint-container-title">注意</p>
<p>在调用 <code>Object.defineProperty()</code> 时，<code>configurable</code> 和 <code>enumerable</code> 的值如果不指定，则都默认为 <code>false</code>。</p>
</div>
<div class="language-javascript" data-ext="js" data-title="js"><pre class="language-javascript"><code><span class="token comment">// 定义一个对象，包含伪私有成员 year_ 和公共成员 edition</span>
<span class="token keyword">let</span> book <span class="token operator">=</span> <span class="token punctuation">{</span>
  <span class="token literal-property property">year_</span><span class="token operator">:</span> <span class="token number">2017</span><span class="token punctuation">,</span>
  <span class="token literal-property property">edition</span><span class="token operator">:</span> <span class="token number">1</span>
<span class="token punctuation">}</span>

Object<span class="token punctuation">.</span><span class="token function">defineProperty</span><span class="token punctuation">(</span>book<span class="token punctuation">,</span> <span class="token string">'year'</span><span class="token punctuation">,</span> <span class="token punctuation">{</span>
  <span class="token function">get</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">return</span> <span class="token keyword">this</span><span class="token punctuation">.</span>year_
  <span class="token punctuation">}</span><span class="token punctuation">,</span>
  <span class="token function">set</span><span class="token punctuation">(</span>newValue<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span>newValue <span class="token operator">&gt;</span> <span class="token number">2017</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
      <span class="token keyword">this</span><span class="token punctuation">.</span>year_ <span class="token operator">=</span> newValue
      <span class="token keyword">this</span><span class="token punctuation">.</span>edition <span class="token operator">+=</span> newValue <span class="token operator">-</span> <span class="token number">2017</span>
    <span class="token punctuation">}</span>
  <span class="token punctuation">}</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span>

<span class="token comment">// 设置时，会调用 setter 函数</span>
book<span class="token punctuation">.</span>year <span class="token operator">=</span> <span class="token number">2018</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>book<span class="token punctuation">.</span>edition<span class="token punctuation">)</span> <span class="token comment">// 2</span>

<span class="token comment">// 读取时，会调用 getter 函数</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>book<span class="token punctuation">.</span>year_<span class="token punctuation">)</span> <span class="token comment">// 2018</span>

<span class="token comment">// configurable 和 enumerable 的值如果不指定，则都默认为 false</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>Object<span class="token punctuation">.</span><span class="token function">getOwnPropertyDescriptor</span><span class="token punctuation">(</span>book<span class="token punctuation">,</span> <span class="token string">'year'</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
<span class="token comment">// {</span>
<span class="token comment">//   get: [Function: get],</span>
<span class="token comment">//   set: [Function: set],</span>
<span class="token comment">//   enumerable: false,</span>
<span class="token comment">//   configurable: false</span>
<span class="token comment">// }</span>
</code></pre></div><div class="hint-container tip">
<p class="hint-container-title">提示</p>
<p>Vue 中的计算属性就是访问器属性中的 <code>getter()</code> 和 <code>setter</code>。</p>
</div>
]]></content>
    <category term="JavaScript"/>
    <published>2022-08-25T00:00:00.000Z</published>
  </entry>
  <entry>
    <title type="text">集合引用类型</title>
    <id>https://dribble-njr.github.io/blog/blog/frontend/basic/javascript/008-collection-reference-type.html</id>
    <link href="https://dribble-njr.github.io/blog/blog/frontend/basic/javascript/008-collection-reference-type.html"/>
    <updated>2024-04-30T07:44:46.000Z</updated>
    <summary type="html"><![CDATA[<h2><code>Object</code></h2>
<p>创建方式：</p>
<ul>
<li>构造函数；</li>
<li>对象字面量。</li>
</ul>
<div class="language-javascript" data-ext="js" data-title="js"><pre class="language-javascript"><code><span class="token keyword">let</span> person1 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Object</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
person<span class="token punctuation">.</span>name <span class="token operator">=</span> <span class="token string">'Nicholas'</span>
person<span class="token punctuation">.</span>age <span class="token operator">=</span> <span class="token number">29</span>

<span class="token keyword">let</span> person2 <span class="token operator">=</span> <span class="token punctuation">{</span>
  <span class="token literal-property property">name</span><span class="token operator">:</span> <span class="token string">'Nicholas'</span><span class="token punctuation">,</span>
  <span class="token literal-property property">age</span><span class="token operator">:</span> <span class="token number">29</span>
<span class="token punctuation">}</span>
</code></pre></div>]]></summary>
    <content type="html"><![CDATA[<h2><code>Object</code></h2>
<p>创建方式：</p>
<ul>
<li>构造函数；</li>
<li>对象字面量。</li>
</ul>
<div class="language-javascript" data-ext="js" data-title="js"><pre class="language-javascript"><code><span class="token keyword">let</span> person1 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Object</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
person<span class="token punctuation">.</span>name <span class="token operator">=</span> <span class="token string">'Nicholas'</span>
person<span class="token punctuation">.</span>age <span class="token operator">=</span> <span class="token number">29</span>

<span class="token keyword">let</span> person2 <span class="token operator">=</span> <span class="token punctuation">{</span>
  <span class="token literal-property property">name</span><span class="token operator">:</span> <span class="token string">'Nicholas'</span><span class="token punctuation">,</span>
  <span class="token literal-property property">age</span><span class="token operator">:</span> <span class="token number">29</span>
<span class="token punctuation">}</span>
</code></pre></div><p>在对象字面量表示法中，属性名可以是字符串或数值，比如：</p>
<div class="language-javascript" data-ext="js" data-title="js"><pre class="language-javascript"><code><span class="token keyword">let</span> person <span class="token operator">=</span> <span class="token punctuation">{</span>
  <span class="token literal-property property">name</span><span class="token operator">:</span> <span class="token string">'Nicholas'</span><span class="token punctuation">,</span>
  <span class="token literal-property property">age</span><span class="token operator">:</span> <span class="token number">29</span><span class="token punctuation">,</span>
  <span class="token number">5</span><span class="token operator">:</span> <span class="token boolean">true</span>
<span class="token punctuation">}</span>
</code></pre></div><div class="hint-container warning">
<p class="hint-container-title">注意</p>
<p>数值属性会自动转换为字符串。</p>
</div>
<h2><code>Array</code></h2>
<p>ECMAScript 数组的两个特点：</p>
<ul>
<li>每个槽位可以存储任意类型的数据。</li>
<li>数组长度是动态大小的，会随着数据添加而自动增长。</li>
</ul>
<h3>创建方式</h3>
<p>创建方式共有四种：</p>
<ul>
<li>构造函数；</li>
<li>字面量；</li>
<li><code>Array.from()</code>；</li>
<li><code>Array.of()</code>。</li>
</ul>
<p><code>from()</code> 用于将  转换为数组实例，而 <code>of()</code> 用于将一组参数转换为数组实例。</p>

<h3>数组空位</h3>
<p>使用数组字面量初始化数组时，可以使用一串逗号来创建空位。</p>
<p>ES6 新增的方法和迭代器与早期 ECMAScript 版本中存在的方法行为不同。ES6 新增方法普遍将这些空位当成存在的元素，只不过值为 <code>undefined</code>：</p>
<div class="language-javascript" data-ext="js" data-title="js"><pre class="language-javascript"><code><span class="token keyword">const</span> options <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token punctuation">,</span> <span class="token punctuation">,</span> <span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">]</span>
<span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">const</span> option <span class="token keyword">of</span> options<span class="token punctuation">)</span> <span class="token punctuation">{</span>
  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>option <span class="token operator">===</span> <span class="token keyword">undefined</span><span class="token punctuation">)</span>
<span class="token punctuation">}</span>
<span class="token comment">// false</span>
<span class="token comment">// true</span>
<span class="token comment">// true</span>
<span class="token comment">// true</span>
<span class="token comment">// false</span>
</code></pre></div><p>ES6 之前的方法则会忽略这个空位，但具体的行为也会因方法而异：</p>
<div class="language-javascript" data-ext="js" data-title="js"><pre class="language-javascript"><code><span class="token keyword">const</span> options <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token punctuation">,</span> <span class="token punctuation">,</span> <span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">]</span>
<span class="token comment">// map() 会跳过空位置</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>options<span class="token punctuation">.</span><span class="token function">map</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token number">6</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token comment">// [6, undefined, undefined, undefined, 6]</span>
<span class="token comment">// join() 视空位置为空字符串</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>options<span class="token punctuation">.</span><span class="token function">join</span><span class="token punctuation">(</span><span class="token string">'-'</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token comment">// "1</span></code></pre></div>]]></content>
    <category term="JavaScript"/>
    <published>2024-04-19T00:00:00.000Z</published>
  </entry>
  <entry>
    <title type="text">类数组对象</title>
    <id>https://dribble-njr.github.io/blog/blog/frontend/basic/javascript/009-array-like-object.html</id>
    <link href="https://dribble-njr.github.io/blog/blog/frontend/basic/javascript/009-array-like-object.html"/>
    <updated>2024-04-24T04:51:59.000Z</updated>
    <summary type="html"><![CDATA[<h2>概念</h2>
<p>在 Javascript 里，有一个特殊的对象，它拥有 <code>length</code> 属性和若干索引属性，被称为类数组对象。常见的类数组对象有 <code>arguments</code> 和 DOM 方法返回的结果。</p>
<div class="language-javascript" data-ext="js" data-title="js"><pre class="language-javascript"><code><span class="token keyword">const</span> arrLike <span class="token operator">=</span> <span class="token punctuation">{</span>
  <span class="token number">0</span><span class="token operator">:</span> <span class="token string">'name'</span><span class="token punctuation">,</span>
  <span class="token number">1</span><span class="token operator">:</span> <span class="token string">'age'</span><span class="token punctuation">,</span>
  <span class="token literal-property property">length</span><span class="token operator">:</span> <span class="token number">2</span>
<span class="token punctuation">}</span>

<span class="token comment">// arguments 对象</span>
<span class="token keyword">function</span> <span class="token function">foo</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token keyword">return</span> arguments
<span class="token punctuation">}</span>
<span class="token function">foo</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">)</span> <span class="token comment">// Arguments(3) [1, 2, 3, callee: ƒ, Symbol(Symbol.iterator): ƒ]</span>

<span class="token comment">// DOM 方法返回的结果</span>
document<span class="token punctuation">.</span><span class="token function">getElementsByTagName</span><span class="token punctuation">(</span><span class="token string">'img'</span><span class="token punctuation">)</span> <span class="token comment">// HTMLCollection(3) [img, img, img]</span>
</code></pre></div>]]></summary>
    <content type="html"><![CDATA[<h2>概念</h2>
<p>在 Javascript 里，有一个特殊的对象，它拥有 <code>length</code> 属性和若干索引属性，被称为类数组对象。常见的类数组对象有 <code>arguments</code> 和 DOM 方法返回的结果。</p>
<div class="language-javascript" data-ext="js" data-title="js"><pre class="language-javascript"><code><span class="token keyword">const</span> arrLike <span class="token operator">=</span> <span class="token punctuation">{</span>
  <span class="token number">0</span><span class="token operator">:</span> <span class="token string">'name'</span><span class="token punctuation">,</span>
  <span class="token number">1</span><span class="token operator">:</span> <span class="token string">'age'</span><span class="token punctuation">,</span>
  <span class="token literal-property property">length</span><span class="token operator">:</span> <span class="token number">2</span>
<span class="token punctuation">}</span>

<span class="token comment">// arguments 对象</span>
<span class="token keyword">function</span> <span class="token function">foo</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token keyword">return</span> arguments
<span class="token punctuation">}</span>
<span class="token function">foo</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">)</span> <span class="token comment">// Arguments(3) [1, 2, 3, callee: ƒ, Symbol(Symbol.iterator): ƒ]</span>

<span class="token comment">// DOM 方法返回的结果</span>
document<span class="token punctuation">.</span><span class="token function">getElementsByTagName</span><span class="token punctuation">(</span><span class="token string">'img'</span><span class="token punctuation">)</span> <span class="token comment">// HTMLCollection(3) [img, img, img]</span>
</code></pre></div><p>类数组对象和数组类似之处在于：访问、赋值、获取长度的操作与数组一致，因此叫做类数组对象。</p>
<div class="language-javascript" data-ext="js" data-title="js"><pre class="language-javascript"><code>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>arrLike<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token comment">// name</span>
arrLike<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token string">'wang'</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>arrLike<span class="token punctuation">.</span>length<span class="token punctuation">)</span> <span class="token comment">// 2</span>
</code></pre></div><h2>使用数组方法</h2>
<p>类数组对象不能 <strong>直接调用</strong> 数组的方法，如果想使用数组方法，需要使用 <code>call()</code> 或 <code>apply</code> 间接调用。</p>
<div class="language-javascript" data-ext="js" data-title="js"><pre class="language-javascript"><code>arrLike<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span><span class="token string">'hobby'</span><span class="token punctuation">)</span> <span class="token comment">// Uncaught TypeError: arrLike.push is not a function</span>

<span class="token class-name">Array</span><span class="token punctuation">.</span>prototype<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">.</span><span class="token function">call</span><span class="token punctuation">(</span>arrLike<span class="token punctuation">,</span> <span class="token string">'hobby'</span><span class="token punctuation">)</span> <span class="token comment">// { '0': 'name', '1': 'age', '2':  'hobby', length: 3 }</span>
</code></pre></div><p>实际开发中，为了使操作方便，通常先将类数组对象转换为数组对象，通常使用 <code>Array.from()</code> 进行转换。</p>
<div class="language-javascript" data-ext="js" data-title="js"><pre class="language-javascript"><code><span class="token comment">// call 调用 slice</span>
<span class="token class-name">Array</span><span class="token punctuation">.</span>prototype<span class="token punctuation">.</span><span class="token function">slice</span><span class="token punctuation">.</span><span class="token function">call</span><span class="token punctuation">(</span>arrLike<span class="token punctuation">)</span>

<span class="token comment">// call 调用 splice</span>
<span class="token class-name">Array</span><span class="token punctuation">.</span>prototype<span class="token punctuation">.</span><span class="token function">splice</span><span class="token punctuation">.</span><span class="token function">call</span><span class="token punctuation">(</span>arrLike<span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">)</span>

<span class="token comment">// apply 调用 concat</span>
<span class="token class-name">Array</span><span class="token punctuation">.</span>prototype<span class="token punctuation">.</span><span class="token function">concat</span><span class="token punctuation">.</span><span class="token function">apply</span><span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">,</span> arrLike<span class="token punctuation">)</span>

<span class="token comment">// Array.from</span>
Array<span class="token punctuation">.</span><span class="token function">from</span><span class="token punctuation">(</span>arrLike<span class="token punctuation">)</span>

<span class="token comment">// 展开运算符</span>
<span class="token punctuation">[</span><span class="token operator">...</span>arrLike<span class="token punctuation">]</span>
</code></pre></div>]]></content>
    <category term="JavaScript"/>
    <published>2022-08-24T00:00:00.000Z</published>
  </entry>
  <entry>
    <title type="text">对象转换方法</title>
    <id>https://dribble-njr.github.io/blog/blog/frontend/basic/javascript/006-toString-toLocalString-valueOf.html</id>
    <link href="https://dribble-njr.github.io/blog/blog/frontend/basic/javascript/006-toString-toLocalString-valueOf.html"/>
    <updated>2024-04-30T07:44:46.000Z</updated>
    <summary type="html"><![CDATA[<p>Object 原型上有三个方法 <code>toString()</code>、<code>toLocalString</code>、<code>valueOf()</code> 可以将对象转换为原始值，然而对于不同的对象类型调用这几种方法会有不同的行为。</p>
<h2><code>toString()</code></h2>
<p><code>toString()</code> 方法用于将一个对象转换为字符串表示形式。对于基本数据类型（如数字、布尔值、字符串等），<code>toString()</code> 方法会返回对应的字符串表示。</p>
<div class="language-javascript" data-ext="js" data-title="js"><pre class="language-javascript"><code><span class="token keyword">const</span> num <span class="token operator">=</span> <span class="token number">123</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>num<span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token comment">// 输出 "123"</span>

<span class="token keyword">const</span> bool <span class="token operator">=</span> <span class="token boolean">true</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>bool<span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token comment">// 输出 "true"</span>

<span class="token keyword">const</span> str <span class="token operator">=</span> <span class="token string">'Hello'</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>str<span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token comment">// 输出 "Hello"</span>
</code></pre></div>]]></summary>
    <content type="html"><![CDATA[<p>Object 原型上有三个方法 <code>toString()</code>、<code>toLocalString</code>、<code>valueOf()</code> 可以将对象转换为原始值，然而对于不同的对象类型调用这几种方法会有不同的行为。</p>
<h2><code>toString()</code></h2>
<p><code>toString()</code> 方法用于将一个对象转换为字符串表示形式。对于基本数据类型（如数字、布尔值、字符串等），<code>toString()</code> 方法会返回对应的字符串表示。</p>
<div class="language-javascript" data-ext="js" data-title="js"><pre class="language-javascript"><code><span class="token keyword">const</span> num <span class="token operator">=</span> <span class="token number">123</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>num<span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token comment">// 输出 "123"</span>

<span class="token keyword">const</span> bool <span class="token operator">=</span> <span class="token boolean">true</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>bool<span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token comment">// 输出 "true"</span>

<span class="token keyword">const</span> str <span class="token operator">=</span> <span class="token string">'Hello'</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>str<span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token comment">// 输出 "Hello"</span>
</code></pre></div><h2><code>toLocaleString()</code></h2>
<p><code>toLocaleString()</code> 方法与 <code>toString()</code> 类似，但它返回的是一个本地化（即与用户本地文化相关的）的字符串表示。</p>
<p>这意味着返回的字符串可能根据用户的地区设置而有所不同，比如使用不同的日期格式、数字格式等。</p>
<div class="language-javascript" data-ext="js" data-title="js"><pre class="language-javascript"><code><span class="token keyword">const</span> date <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Date</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>date<span class="token punctuation">.</span><span class="token function">toLocaleString</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token comment">// 输出本地化的日期时间字符串</span>
</code></pre></div><h2><code>valueOf()</code></h2>
<p><code>valueOf()</code> 方法返回指定对象的原始值。对于大多数对象来说，<code>valueOf()</code> 方法返回的值与对象本身是相同的，但可以通过重写这个方法来改变返回的值。</p>
<div class="language-javascript" data-ext="js" data-title="js"><pre class="language-javascript"><code><span class="token keyword">const</span> obj <span class="token operator">=</span> <span class="token punctuation">{</span>
  <span class="token function">valueOf</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">return</span> <span class="token number">123</span>
  <span class="token punctuation">}</span>
<span class="token punctuation">}</span>

console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>obj<span class="token punctuation">.</span><span class="token function">valueOf</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token comment">// 输出 123</span>
</code></pre></div><h2>自动调用顺序</h2>
<p>在 JavaScript 内部，当需要将对象转换为原始值时（比如在算术运算、逻辑运算、字符串拼接等情况下），会自动调用对象的 <code>valueOf()</code> 和 <code>toString()</code> 方法来获取原始值。它们的调用顺序如下：</p>
<ol>
<li>如果对象具有 <code>valueOf()</code> 方法且返回的是原始值（非对象），则直接使用该值。</li>
<li>如果对象没有 <code>valueOf()</code> 方法，或者 <code>valueOf()</code> 返回的是对象，那么会调用对象的 <code>toString()</code> 方法。</li>
<li>如果对象没有 <code>toString()</code> 方法，或者 <code>toString()</code> 返回的是对象，那么会抛出 TypeError 错误。</li>
</ol>
<div class="hint-container warning">
<p class="hint-container-title">注意</p>
<p><code>valueOf()</code> 和 <code>toString()</code> 方法在不同的上下文中可能会有不同的表现，具体取决于 JavaScript 引擎的实现和调用方式。</p>
</div>
<h2>总结</h2>
<p>这三种方法用于获得对象的字符串或原始值，在一些情况下会被 JavaScript 引擎自动调用，区别如下：</p>
<ul>
<li><code>toString()</code> 用于将对象转换为字符串表示形式。</li>
<li><code>toLocaleString()</code> 返回一个本地化的字符串表示。</li>
<li><code>valueOf()</code> 返回对象的原始值。</li>
</ul>
]]></content>
    <category term="JavaScript"/>
    <published>2024-04-18T00:00:00.000Z</published>
  </entry>
  <entry>
    <title type="text">基本引用类型</title>
    <id>https://dribble-njr.github.io/blog/blog/frontend/basic/javascript/007-basic-reference-type.html</id>
    <link href="https://dribble-njr.github.io/blog/blog/frontend/basic/javascript/007-basic-reference-type.html"/>
    <updated>2024-04-19T05:03:42.000Z</updated>
    <summary type="html"><![CDATA[<p>引用值（或者对象）是某个特定 <strong>引用类型</strong> 的实例。</p>
<p>新对象通过使用 <code>new</code> 操作符后跟一个构造函数（constructor）来创建。构造函数就是用来创建新对象的函数，比如下面这行代码：</p>
<div class="language-javascript" data-ext="js" data-title="js"><pre class="language-javascript"><code><span class="token keyword">let</span> now <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Date</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
</code></pre></div>]]></summary>
    <content type="html"><![CDATA[<p>引用值（或者对象）是某个特定 <strong>引用类型</strong> 的实例。</p>
<p>新对象通过使用 <code>new</code> 操作符后跟一个构造函数（constructor）来创建。构造函数就是用来创建新对象的函数，比如下面这行代码：</p>
<div class="language-javascript" data-ext="js" data-title="js"><pre class="language-javascript"><code><span class="token keyword">let</span> now <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Date</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
</code></pre></div><p>这行代码创建了引用类型 <code>Date</code> 的一个新实例，并将它保存在变量 <code>now</code> 中。<code>Date()</code> 在这里就是构造函数，它负责创建一个只有默认属性和方法的简单对象。</p>
<p>ECMAScript 提供了很多像 <code>Date</code> 这样的原生引用类型，帮助开发者实现常见的任务。</p>
<h2><code>Date</code></h2>
<p><code>Date</code> 类型将日期保存为自协调世界时（UTC，Universal Time Coordinated）时间 1970 年 1 月 1 日午夜（零时）至今所经过的毫秒数。</p>
<p>要创建日期对象，就使用 <code>new</code> 操作符来调用 <code>Date</code> 构造函数：</p>
<div class="language-javascript" data-ext="js" data-title="js"><pre class="language-javascript"><code><span class="token keyword">let</span> now <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Date</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
</code></pre></div><p>在不给 <code>Date</code> 构造函数传参数的情况下，创建的对象将保存当前日期和时间。要基于其他日期和时间创建日期对象，必须传入其毫秒表示（UNIX 纪元 1970 年 1 月 1 日午夜之后的毫秒数）。</p>
<p>为了得到这个时间，可以使用两个辅助函数：</p>
<ul>
<li><code>Date.parse()</code></li>
<li><code>Date.UTC()</code></li>
</ul>
<h3><code>Date.parse()</code> 和 <code>Date.UTC()</code></h3>
<h4><code>Date.parse()</code></h4>
<p><code>Date.parse()</code> 方法接收一个表示日期的字符串参数，尝试将这个字符串转换为表示该日期的毫秒数（本地时间）。</p>
<p>支持下列日期格式：</p>
<ul>
<li>「月/日/年」，如 <code>"5/23/2019"</code>；</li>
<li>「月名 日, 年」，如 <code>"May 23, 2019"</code>；</li>
<li>「周几 月名 日 年 时:分:秒 时区」，如 <code>"Tue May 23 2019 00:00:00 GMT-0700"</code>；</li>
<li>ISO 8601 扩展格式「YYYY-MM-DDTHH:mm:ss.sssZ」，如 <code>"2019-05-23T00:00:00"</code>（只适用于兼容 ES5 的实现）。</li>
</ul>
<p>如果传给 <code>Date.parse()</code> 的字符串并不表示日期，则该方法会返回 <code>NaN</code>。</p>
<p>如果直接把表示日期的字符串传给 <code>Date</code> 构造函数，那么 <code>Date</code> 会在后台调用 <code>Date.parse()</code>。</p>
<div class="language-javascript" data-ext="js" data-title="js"><pre class="language-javascript"><code><span class="token keyword">let</span> someDate1 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Date</span><span class="token punctuation">(</span><span class="token string">'May 23, 2019'</span><span class="token punctuation">)</span>
<span class="token keyword">let</span> someDate2 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Date</span><span class="token punctuation">(</span>Date<span class="token punctuation">.</span><span class="token function">parse</span><span class="token punctuation">(</span><span class="token string">'May 23, 2019'</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
</code></pre></div><p>这两行代码得到的日期对象相同。</p>
<h4><code>Date.UTC()</code></h4>
<p><code>Date.UTC()</code> 方法也返回日期的毫秒表示（UTC 时间），参数是「年、零起点月数（1 月是 0，2 月是 1，以此类推）、日（1 ~ 31）、时（0 ~ 23）、分、秒和毫秒」。</p>
<p>这些参数中，只有前两个（年和月）是必需的。如果不提供日，那么默认为 1 日。其他参数的默认值都是 0。</p>
<div class="language-javascript" data-ext="js" data-title="js"><pre class="language-javascript"><code><span class="token comment">// GMT 时间 2000 年 1 月 1 日零点</span>
<span class="token keyword">let</span> y2k <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Date</span><span class="token punctuation">(</span>Date<span class="token punctuation">.</span><span class="token constant">UTC</span><span class="token punctuation">(</span><span class="token number">2000</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token comment">// 2000-01-01T00:00:00.000Z</span>
<span class="token comment">// GMT 时间 2005 年 5 月 5 日下午 5 点 55 分 55 秒</span>
<span class="token keyword">let</span> allFives <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Date</span><span class="token punctuation">(</span>Date<span class="token punctuation">.</span><span class="token constant">UTC</span><span class="token punctuation">(</span><span class="token number">2005</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">,</span> <span class="token number">17</span><span class="token punctuation">,</span> <span class="token number">55</span><span class="token punctuation">,</span> <span class="token number">55</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token comment">// 2005-05-05T17:55:55.000Z</span>
</code></pre></div><p>与 <code>Date.parse()</code> 一样，<code>Date.UTC()</code> 也会被 <code>Date</code> 构造函数隐式调用，但有一个区别：这种情况下创建的是本地日期，不是 <code>GMT</code> 日期。</p>
<div class="language-javascript" data-ext="js" data-title="js"><pre class="language-javascript"><code><span class="token comment">// 本地时间（北京）为：UTC + 8，因此会相差 8 * 60 * 60 * 1000 = 28800000</span>
<span class="token keyword">let</span> time <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Date</span><span class="token punctuation">(</span>Date<span class="token punctuation">.</span><span class="token constant">UTC</span><span class="token punctuation">(</span><span class="token number">2000</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">-</span> <span class="token keyword">new</span> <span class="token class-name">Date</span><span class="token punctuation">(</span><span class="token number">2000</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token comment">// 28800000</span>
</code></pre></div><div class="hint-container tip">
<p class="hint-container-title">JS 中的时间</p>
<p>不同时间概念，详见 <a href="https://juejin.cn/post/7063118893115670536" target="_blank" rel="noopener noreferrer">GMT、UTC、时区、JavaScript Date 总结</a>。</p>
</div>
<h4>对比</h4>
<p><code>Date.UTC()</code> 日期指的是在没有时区偏差的情况下(将日期转换为 GMT 时间)的日期值。</p>
<p><code>Date.parse()</code> 方法是基于本地时区建立的，而 <code>Date.UTC()</code> 方法是基于无时区偏差建立的。</p>
<p>所以如果我们对两个方法传入相同的时间，我们会发现 <code>Date.UTC()</code> 方法得到的毫秒数相对于 <code>Date.parse()</code> 方法得到的毫秒数会多八个小时的毫秒数(这里的本地时区指的是北京时间)。</p>
<h3>继承的方法</h3>
<p><code>Date</code> 类型重写了 <code>toLocaleString()</code>、<code>toString()</code> 和 <code>valueOf()</code> 方法。</p>
<p><code>Date</code> 类型的 <code>toLocaleString()</code> 方法返回与浏览器运行的本地环境一致的日期和时间。</p>
<p><code>toString()</code> 方法通常返回带时区信息的日期和时间，而时间也是以 24 小时制（0~23）表示的。</p>
<p><code>valueOf()</code> 方法不返回原始对象，而是返回日期的毫秒数。因此，操作符（如小于号和大于号）可以直接使用它返回的值。</p>
<div class="language-javascript" data-ext="js" data-title="js"><pre class="language-javascript"><code><span class="token keyword">let</span> date1 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Date</span><span class="token punctuation">(</span><span class="token number">2019</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token comment">// 2019 年 1 月 1 日</span>
<span class="token keyword">let</span> date2 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Date</span><span class="token punctuation">(</span><span class="token number">2019</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token comment">// 2019 年 2 月 1 日</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>date1 <span class="token operator">&lt;</span> date2<span class="token punctuation">)</span> <span class="token comment">// true</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>date1 <span class="token operator">&gt;</span> date2<span class="token punctuation">)</span> <span class="token comment">// false</span>
</code></pre></div><div class="hint-container tip">
<p class="hint-container-title">提示</p>
<p>当需要将对象转换为原始值时（比如在算术运算、逻辑运算、字符串拼接等情况下），会  对象的 <code>valueOf()</code> 和 <code>toString()</code> 方法来获取原始值。</p>
</div>
<h3>日期格式化方法</h3>
<p><code>Date</code> 类型有几个专门用于格式化日期的方法，它们都会返回字符串：</p>
<ul>
<li><code>toDateString()</code> 显示日期中的周几、月、日、年（格式特定于实现）；</li>
<li><code>toTimeString()</code> 显示日期中的时、分、秒和时区（格式特定于实现）；</li>
<li><code>toLocaleDateString()</code> 显示日期中的周几、月、日、年（格式特定于实现和地区）；</li>
<li><code>toLocaleTimeString()</code> 显示日期中的时、分、秒（格式特定于实现和地区）；</li>
<li><code>toUTCString()</code> 显示完整的 UTC 日期（格式特定于实现）。</li>
</ul>
<p>这些方法的输出与 <code>toLocaleString()</code> 和 <code>toString()</code> 一样，会因浏览器而异。因此不能用于在<br>
用户界面上一致地显示日期。</p>
<h2><code>RegExp</code></h2>
<p>正则表达式（Regular Expression）是一种强大的文本模式匹配工具，用于在字符串中搜索、匹配和替换特定的文本。ECMAScript 通过 <code>RegExp</code> 类型支持正则表达式。</p>
<p>正则表达式由模式和标记组成：</p>
<div class="language-javascript" data-ext="js" data-title="js"><pre class="language-javascript"><code><span class="token keyword">let</span> expression <span class="token operator">=</span> <span class="token operator">/</span>pattern<span class="token operator">/</span>flags<span class="token punctuation">;</span>
</code></pre></div><p>pattern（模式）可以是任何简单或复杂的正则表达式，包括字符类、限定符、分组、向前查找和反向引用。每个正则表达式可以带零个或多个 flags（标记），用于控制正则表达式的行为。</p>
<p>下面给出了表示匹配模式的标记。</p>
<ul>
<li><code>g</code>：全局模式，表示查找字符串的全部内容，而不是找到第一个匹配的内容就结束。</li>
<li><code>i</code>：不区分大小写，表示在查找匹配时忽略 <code>pattern</code> 和字符串的大小写。</li>
<li><code>m</code>：多行模式，表示查找到一行文本末尾时会继续查找。</li>
<li><code>y</code>：粘附模式，表示只查找从 <code>lastIndex</code> 开始及之后的字符串。</li>
<li><code>u</code>：Unicode 模式，启用 Unicode 匹配。</li>
<li><code>s</code>：dotAll 模式，表示元字符 <code>.</code> 匹配任何字符（包括 <code>\n</code> 或 <code>\r</code>）。</li>
</ul>
<div class="language-javascript" data-ext="js" data-title="js"><pre class="language-javascript"><code><span class="token comment">// 匹配字符串中的所有"at"</span>
<span class="token keyword">let</span> pattern1 <span class="token operator">=</span> <span class="token regex"><span class="token regex-delimiter">/</span><span class="token regex-source language-regex">at</span><span class="token regex-delimiter">/</span><span class="token regex-flags">g</span></span>
<span class="token comment">// 匹配第一个"bat"或"cat"，忽略大小写</span>
<span class="token keyword">let</span> pattern2 <span class="token operator">=</span> <span class="token regex"><span class="token regex-delimiter">/</span><span class="token regex-source language-regex">[bc]at</span><span class="token regex-delimiter">/</span><span class="token regex-flags">i</span></span>
<span class="token comment">// 匹配所有以"at"结尾的三字符组合，忽略大小写</span>
<span class="token keyword">let</span> pattern3 <span class="token operator">=</span> <span class="token regex"><span class="token regex-delimiter">/</span><span class="token regex-source language-regex">.at</span><span class="token regex-delimiter">/</span><span class="token regex-flags">gi</span></span>
</code></pre></div><h3>实例属性</h3>
<p>通过实例属性可以全面了解正则表达式的信息，但是在实际开发中使用的并不多，因为从模式中可以直接看出。</p>
<ul>
<li><code>lastIndex</code>：表示在源字符串中下一次搜索的开始位置。</li>
</ul>
<h3>实例方法</h3>
<h4><code>exec()</code></h4>
<p><code>exec()</code> 方法在一个指定字符串中执行一个搜索匹配。返回一个结果数组或 <code>null</code>。</p>
<p>返回的数组虽然是 Array 的实例，但包含两个额外的属性：<code>index</code> 和 <code>input</code>。<code>index</code> 是字符串中匹配模式的起始位置，<code>input</code> 是要查找的字符串。</p>
<div class="language-javascript" data-ext="js" data-title="js"><pre class="language-javascript"><code><span class="token keyword">const</span> regex1 <span class="token operator">=</span> <span class="token regex"><span class="token regex-delimiter">/</span><span class="token regex-source language-regex">foo*</span><span class="token regex-delimiter">/</span><span class="token regex-flags">g</span></span>
<span class="token keyword">const</span> str1 <span class="token operator">=</span> <span class="token string">'table football, foosball'</span>
<span class="token keyword">let</span> array1

<span class="token keyword">while</span> <span class="token punctuation">(</span><span class="token punctuation">(</span>array1 <span class="token operator">=</span> regex1<span class="token punctuation">.</span><span class="token function">exec</span><span class="token punctuation">(</span>str1<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">!==</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token template-string"><span class="token template-punctuation string">`</span><span class="token string">Found </span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">${</span>array1<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token interpolation-punctuation punctuation">}</span></span><span class="token string">. Next starts at </span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">${</span>regex1<span class="token punctuation">.</span>lastIndex<span class="token interpolation-punctuation punctuation">}</span></span><span class="token string">.</span><span class="token template-punctuation string">`</span></span><span class="token punctuation">)</span>
  <span class="token comment">// Expected output: "Found foo. Next starts at 9."</span>
  <span class="token comment">// Expected output: "Found foo. Next starts at 19."</span>
<span class="token punctuation">}</span>
</code></pre></div><div class="language-javascript" data-ext="js" data-title="js"><pre class="language-javascript"><code><span class="token keyword">let</span> text <span class="token operator">=</span> <span class="token string">'mom and dad and baby'</span>
<span class="token keyword">let</span> pattern <span class="token operator">=</span> <span class="token regex"><span class="token regex-delimiter">/</span><span class="token regex-source language-regex">mom( and dad( and baby)?)?</span><span class="token regex-delimiter">/</span><span class="token regex-flags">gi</span></span>
<span class="token keyword">let</span> matches <span class="token operator">=</span> pattern<span class="token punctuation">.</span><span class="token function">exec</span><span class="token punctuation">(</span>text<span class="token punctuation">)</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>matches<span class="token punctuation">.</span>index<span class="token punctuation">)</span> <span class="token comment">// 0</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>matches<span class="token punctuation">.</span>input<span class="token punctuation">)</span> <span class="token comment">// "mom and dad and baby"</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>matches<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token comment">// "mom and dad and baby"</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>matches<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token comment">// " and dad and baby"</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>matches<span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token comment">// " and baby"</span>
</code></pre></div><h4><code>test()</code></h4>
<p><code>test()</code> 方法接收一个字符串参数。如果输入的文本与模式匹配，则参数返回 <code>true</code>，否则返回 <code>false</code>。这个方法适用于只想测试模式是否匹配，而不需要实际匹配内容的情况。</p>
<div class="language-javascript" data-ext="js" data-title="js"><pre class="language-javascript"><code><span class="token keyword">let</span> text <span class="token operator">=</span> <span class="token string">'000-00-0000'</span>
<span class="token keyword">let</span> pattern <span class="token operator">=</span> <span class="token regex"><span class="token regex-delimiter">/</span><span class="token regex-source language-regex">\d{3}-\d{2}-\d{4}</span><span class="token regex-delimiter">/</span></span>
<span class="token keyword">if</span> <span class="token punctuation">(</span>pattern<span class="token punctuation">.</span><span class="token function">test</span><span class="token punctuation">(</span>text<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'The pattern was matched.'</span><span class="token punctuation">)</span>
<span class="token punctuation">}</span>
</code></pre></div><h3>继承的方法</h3>
<p><code>RegExp</code> 也继承了 <code>Object</code> 上的 <code>valueOf()</code>, <code>toString()</code>, <code>toLocalString()</code> 三个方法。</p>
<p>无论正则表达式是怎么创建的，<code>toLocaleString()</code> 和 <code>toString()</code> 都返回正则表达式的字面量表示。比如：</p>
<div class="language-javascript" data-ext="js" data-title="js"><pre class="language-javascript"><code><span class="token keyword">let</span> pattern <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">RegExp</span><span class="token punctuation">(</span><span class="token string">'\\[bc\\]at'</span><span class="token punctuation">,</span> <span class="token string">'gi'</span><span class="token punctuation">)</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>pattern<span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token comment">// /\[bc\]at/gi</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>pattern<span class="token punctuation">.</span><span class="token function">toLocaleString</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token comment">// /\[bc\]at/gi</span>
</code></pre></div><p>这里的模式是通过 <code>RegExp</code> 构造函数创建的，但 <code>toLocaleString()</code> 和 <code>toString()</code> 返回的都是其字面量的形式。</p>
<div class="hint-container warning">
<p class="hint-container-title">注意</p>
<p>正则表达式的 <code>valueOf()</code> 方法返回正则表达式本身。</p>
</div>
<h2>原始值包装类型</h2>
<p>为了方便操作原始值，ECMAScript 提供了 3 种特殊的引用类型：<code>Boolean</code>、<code>Number</code> 和 <code>String</code>。</p>
<p>每当用到某个原始值的方法或属性时，后台都会创建一个相应原始包装类型的对象，从而暴露出操作原始值的各种方法。来看下面的例子：</p>
<div class="language-javascript" data-ext="js" data-title="js"><pre class="language-javascript"><code><span class="token keyword">let</span> s1 <span class="token operator">=</span> <span class="token string">'some text'</span>
<span class="token keyword">let</span> s2 <span class="token operator">=</span> s1<span class="token punctuation">.</span><span class="token function">substring</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">)</span>
</code></pre></div><p>当第二行访问 <code>s1</code> 时，是以读模式访问的，也就是要从内存中读取变量保存的值。</p>
<p>在以读模式访问字符串值的任何时候，后台都会执行以下 3 步：</p>
<ol>
<li>创建一个 <code>String</code> 类型的实例；</li>
<li>调用实例上的特定方法；</li>
<li>销毁实例。</li>
</ol>
<p>相当于下面行为：</p>
<div class="language-javascript" data-ext="js" data-title="js"><pre class="language-javascript"><code><span class="token keyword">let</span> s1 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">String</span><span class="token punctuation">(</span><span class="token string">'some text'</span><span class="token punctuation">)</span>
<span class="token keyword">let</span> s2 <span class="token operator">=</span> s1<span class="token punctuation">.</span><span class="token function">substring</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">)</span>
s1 <span class="token operator">=</span> <span class="token keyword">null</span>
</code></pre></div><p>引用类型与原始值包装类型的主要区别在于对象的生命周期。在通过 <code>new</code> 实例化引用类型后，得到的实例会在离开作用域时被销毁，而自动创建的原始值包装对象则只存在于访问它的那行代码执行期间。</p>
<p>这意味着不能在运行时给原始值添加属性和方法。比如下面的例子：</p>
<div class="language-javascript" data-ext="js" data-title="js"><pre class="language-javascript"><code><span class="token keyword">let</span> s1 <span class="token operator">=</span> <span class="token string">'some text'</span>
s1<span class="token punctuation">.</span>color <span class="token operator">=</span> <span class="token string">'red'</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>s1<span class="token punctuation">.</span>color<span class="token punctuation">)</span> <span class="token comment">// undefined</span>
</code></pre></div><p>这里的第二行代码尝试给字符串 <code>s1</code> 添加了一个 <code>color</code> 属性。可是，第三行代码访问 <code>color</code> 属性时，它却不见了。</p>
<p>原因就是第二行代码运行时会临时创建一个 <code>String</code> 对象，而当第三行代码执行时，这个对象已经被销毁了。实际上，第三行代码在这里创建了自己的 <code>String</code> 对象，但这个对象没有 <code>color</code> 属性。</p>
<div class="hint-container warning">
<p class="hint-container-title">注意</p>
<p>上述代码在严格模式下会报错：<code>TypeError: Cannot create property 'color' on string 'some text'</code>。</p>
</div>
<p>另外，<code>Object</code> 构造函数作为一个工厂方法，能够根据传入值的类型返回相应原始值包装类型的实例。比如：</p>
<div class="language-javascript" data-ext="js" data-title="js"><pre class="language-javascript"><code><span class="token keyword">let</span> obj <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Object</span><span class="token punctuation">(</span><span class="token string">'some text'</span><span class="token punctuation">)</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>obj <span class="token keyword">instanceof</span> <span class="token class-name">String</span><span class="token punctuation">)</span> <span class="token comment">// true</span>
</code></pre></div><div class="hint-container warning">
<p class="hint-container-title">注意</p>
<p>注意，使用 new 调用原始值包装类型的构造函数，与调用同名的转型函数并不一样。例如：</p>
<div class="language-javascript" data-ext="js" data-title="js"><pre class="language-javascript"><code><span class="token keyword">let</span> value <span class="token operator">=</span> <span class="token string">'25'</span>
<span class="token keyword">let</span> number <span class="token operator">=</span> <span class="token function">Number</span><span class="token punctuation">(</span>value<span class="token punctuation">)</span> <span class="token comment">// 转型函数</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token keyword">typeof</span> number<span class="token punctuation">)</span> <span class="token comment">// "number"</span>
<span class="token keyword">let</span> obj <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Number</span><span class="token punctuation">(</span>value<span class="token punctuation">)</span> <span class="token comment">// 构造函数</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token keyword">typeof</span> obj<span class="token punctuation">)</span> <span class="token comment">// "object"</span>
</code></pre></div></div>
<h3><code>Boolean</code></h3>
<p><code>Boolean</code> 的实例会重写 <code>valueOf()</code> 方法，返回一个原始值 <code>true</code> 或 <code>false</code>。<code>toString()</code> 方法被调用时也会被覆盖，返回字符串 <code>"true"</code> 或 <code>"false"</code>。</p>
<div class="hint-container warning">
<p class="hint-container-title">注意</p>
<p>永远不要显示使用 <code>Boolean</code> 对象。</p>
</div>
<h3><code>Number</code></h3>
<p>与 <code>Boolean</code> 类型一样，<code>Number</code> 类型重写了 <code>valueOf()</code>、<code>toLocaleString()</code> 和 <code>toString()</code> 方法。<code>valueOf()</code> 方法返回 <code>Number</code> 对象表示的原始数值，另外两个方法返回数值字符串。</p>
<p><code>toString()</code> 方法可选地接收一个表示基数的参数，并返回相应基数形式的数值字符串，如下所示：</p>
<div class="language-javascript" data-ext="js" data-title="js"><pre class="language-javascript"><code><span class="token keyword">let</span> num <span class="token operator">=</span> <span class="token number">10</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>num<span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token comment">// "10"</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>num<span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token comment">// "1010"</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>num<span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span><span class="token number">8</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token comment">// "12"</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>num<span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span><span class="token number">10</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token comment">// "10"</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>num<span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span><span class="token number">16</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token comment">// "a"</span>
</code></pre></div><div class="hint-container warning">
<p class="hint-container-title">注意</p>
<p>不建议直接实例化 <code>Number</code> 对象。</p>
</div>
<h4><code>toFixed()</code></h4>
<p>返回包含指定小数点位数的数值字符串，如：</p>
<div class="language-javascript" data-ext="js" data-title="js"><pre class="language-javascript"><code><span class="token keyword">let</span> num <span class="token operator">=</span> <span class="token number">10</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>num<span class="token punctuation">.</span><span class="token function">toFixed</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token comment">// "10.00"</span>
</code></pre></div><h4><code>toExponential()</code></h4>
<p>返回以科学记数法（也称为指数记数法）表示的数值字符串。<code>toExponential()</code> 也接收一个参数，表示结果中小数的位数。来看下面的例子：</p>
<div class="language-javascript" data-ext="js" data-title="js"><pre class="language-javascript"><code><span class="token keyword">let</span> num <span class="token operator">=</span> <span class="token number">10</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>num<span class="token punctuation">.</span><span class="token function">toExponential</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token comment">// "1.0e+1"</span>
</code></pre></div><h4><code>toPrecision()</code></h4>
<p>会根据情况返回最合理的输出结果，可能是固定长度，也可能是科学记数法形式。这个方法接收一个参数，表示结果中数字的总位数（不包含指数）。来看几个例子：</p>
<div class="language-javascript" data-ext="js" data-title="js"><pre class="language-javascript"><code><span class="token keyword">let</span> num <span class="token operator">=</span> <span class="token number">99</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>num<span class="token punctuation">.</span><span class="token function">toPrecision</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token comment">// "1e+2"</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>num<span class="token punctuation">.</span><span class="token function">toPrecision</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token comment">// "99"</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>num<span class="token punctuation">.</span><span class="token function">toPrecision</span><span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token comment">// "99.0"</span>
</code></pre></div><h4><code>isInteger()</code></h4>
<p>ES6 新增了 <code>Number.isInteger()</code> 方法，用于辨别一个数值是否保存为整数。</p>
<div class="language-javascript" data-ext="js" data-title="js"><pre class="language-javascript"><code>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>Number<span class="token punctuation">.</span><span class="token function">isInteger</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token comment">// true</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>Number<span class="token punctuation">.</span><span class="token function">isInteger</span><span class="token punctuation">(</span><span class="token number">1.0</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token comment">// true</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>Number<span class="token punctuation">.</span><span class="token function">isInteger</span><span class="token punctuation">(</span><span class="token number">1.01</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token comment">// false</span>
</code></pre></div><h3><code>String</code></h3>
<p>3 个继承的方法 <code>valueOf()</code>、<code>toLocaleString()</code> 和 <code>toString()</code> 都返回对象的原始字符串值。</p>
<div class="hint-container tip">
<p class="hint-container-title">提示</p>
<p><code>String</code> 类型方法较多，可以查看 <a href="https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/String" target="_blank" rel="noopener noreferrer">MDN String</a>，下面介绍一些常用的。</p>
</div>
<h4><code>concat()</code></h4>
<p>用于将一个或多个字符串拼接成一个新字符串。</p>
<div class="language-javascript" data-ext="js" data-title="js"><pre class="language-javascript"><code><span class="token keyword">let</span> stringValue <span class="token operator">=</span> <span class="token string">'hello '</span>
<span class="token keyword">let</span> result <span class="token operator">=</span> stringValue<span class="token punctuation">.</span><span class="token function">concat</span><span class="token punctuation">(</span><span class="token string">'world'</span><span class="token punctuation">)</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>result<span class="token punctuation">)</span> <span class="token comment">// "hello world"</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>stringValue<span class="token punctuation">)</span> <span class="token comment">// "hello"</span>
</code></pre></div><p>虽然 <code>concat()</code> 方法可以拼接字符串，但更常用的方式是使用加号操作符 <code>+</code>。而且多数情况下，对于拼接多个字符串来说，使用「模版字符串」更方便。</p>
<h4><code>slice()</code>, <code>substring()</code></h4>
<p>这两个方法可以从字符串中提取子字符串。</p>
<div class="hint-container warning">
<p class="hint-container-title">注意</p>
<p>还有一个方法 <code>substr()</code>，但是已不再推荐使用该特性。</p>
</div>
<ul>
<li><code>slice(start[, end])</code>：返回 <code>[start, end)</code> 之间的元素，若 <code>end</code> 未指定，则默认到末尾所有元素；</li>
<li><code>substring(start[, end])</code>：返回 <code>[start, end)</code> 之间的元素，若 <code>end</code> 未指定，则默认到末尾所有元素；</li>
</ul>
<p>二者在参数都为正数时，效果一致，但是它们对负数的处理不一样，下面看看例子。</p>
<div class="language-javascript" data-ext="js" data-title="js"><pre class="language-javascript"><code><span class="token comment">// 参数为正数</span>
<span class="token keyword">const</span> str <span class="token operator">=</span> <span class="token string">'Hello world'</span>

console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>str<span class="token punctuation">.</span><span class="token function">slice</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token comment">// "ello world"</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>str<span class="token punctuation">.</span><span class="token function">slice</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token comment">// "ello"</span>

console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>str<span class="token punctuation">.</span><span class="token function">substring</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token comment">// "ello world"</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>str<span class="token punctuation">.</span><span class="token function">substring</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token comment">// "ello"</span>
</code></pre></div><p>对负值的处理如下：</p>
<ul>
<li><code>slice(start[, end])</code>：所有负值与字符串长度相加；</li>
<li><code>substring(start[, end])</code>：所有负值置 0，若 <code>start</code> 大于 <code>end</code>，则会将二者调换。</li>
</ul>
<div class="language-javascript" data-ext="js" data-title="js"><pre class="language-javascript"><code><span class="token comment">// 参数为负数</span>
<span class="token keyword">const</span> str <span class="token operator">=</span> <span class="token string">'Hello world'</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>str<span class="token punctuation">.</span><span class="token function">slice</span><span class="token punctuation">(</span><span class="token operator">-</span><span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token comment">// str.slice(8) "rld"</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>str<span class="token punctuation">.</span><span class="token function">slice</span><span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">,</span> <span class="token operator">-</span><span class="token number">4</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token comment">// str.slice(3, 7) "lo w"</span>

console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>str<span class="token punctuation">.</span><span class="token function">substring</span><span class="token punctuation">(</span><span class="token operator">-</span><span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token comment">// str.substring(0) "hello world"</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>str<span class="token punctuation">.</span><span class="token function">substring</span><span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">,</span> <span class="token operator">-</span><span class="token number">4</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token comment">// str.substring(3, 0) -&gt; str.substring(0, 3) "hel"</span>
</code></pre></div><div class="hint-container warning">
<p class="hint-container-title">注意</p>
<p>为了减少心智负担，给所有参数置为正数即可。</p>
</div>
<h4><code>indexOf()</code>, <code>lastIndexOf()</code></h4>
<p>这两个方法从字符串中搜索传入的字符串，并返回位置（如果没找到，则返回 <code>-1</code>）。</p>
<p>两者的区别在于，<code>indexOf()</code> 方法从字符串开头开始查找子字符串，而 <code>lastIndexOf()</code> 方法从字符串末尾开始查找子字符串。来看下面的例子：</p>
<div class="language-javascript" data-ext="js" data-title="js"><pre class="language-javascript"><code><span class="token keyword">let</span> stringValue <span class="token operator">=</span> <span class="token string">'hello world'</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>stringValue<span class="token punctuation">.</span><span class="token function">indexOf</span><span class="token punctuation">(</span><span class="token string">'o'</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token comment">// 4</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>stringValue<span class="token punctuation">.</span><span class="token function">lastIndexOf</span><span class="token punctuation">(</span><span class="token string">'o'</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token comment">// 7</span>
</code></pre></div><h4><code>startsWith()</code>, <code>endsWith()</code>, <code>includes()</code></h4>
<p>这些方法都会从字符串中搜索传入的字符串，并返回一个表示是否包含的布尔值。它们的区别在于，<code>startsWith()</code> 检查开始于索引 <code>0</code> 的匹配项，<code>endsWith()</code> 检查开始于索引 <code>(string.length - substring.length)</code> 的匹配项，而 <code>includes()</code> 检查整个字符串：</p>
<div class="language-javascript" data-ext="js" data-title="js"><pre class="language-javascript"><code><span class="token keyword">let</span> message <span class="token operator">=</span> <span class="token string">'foo bar baz'</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>message<span class="token punctuation">.</span><span class="token function">startsWith</span><span class="token punctuation">(</span><span class="token string">'foo'</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token comment">// true</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>message<span class="token punctuation">.</span><span class="token function">startsWith</span><span class="token punctuation">(</span><span class="token string">'bar'</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token comment">// false</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>message<span class="token punctuation">.</span><span class="token function">endsWith</span><span class="token punctuation">(</span><span class="token string">'baz'</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token comment">// true</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>message<span class="token punctuation">.</span><span class="token function">endsWith</span><span class="token punctuation">(</span><span class="token string">'bar'</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token comment">// false</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>message<span class="token punctuation">.</span><span class="token function">includes</span><span class="token punctuation">(</span><span class="token string">'bar'</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token comment">// true</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>message<span class="token punctuation">.</span><span class="token function">includes</span><span class="token punctuation">(</span><span class="token string">'qux'</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token comment">// false</span>
</code></pre></div>]]></content>
    <category term="JavaScript"/>
    <published>2024-04-17T00:00:00.000Z</published>
  </entry>
  <entry>
    <title type="text">执行上下文</title>
    <id>https://dribble-njr.github.io/blog/blog/frontend/basic/javascript/005-execution-context.html</id>
    <link href="https://dribble-njr.github.io/blog/blog/frontend/basic/javascript/005-execution-context.html"/>
    <updated>2024-04-16T05:23:03.000Z</updated>
    <summary type="html"><![CDATA[<h2>执行上下文</h2>
<p>执行上下文（Execution Context）是 JavaScript 代码执行时所在的环境，一共有三种不同的执行上下文：</p>
<ul>
<li>全局执行上下文（Global Execution Context, GEC）：最基本的执行上下文，在一开始就会进行初始化：创建全局上下文，将 <code>this</code> 指向这个对象；一个 JavaScript 程序只有一个 GEC；浏览器环境中的全局对象是 <code>window</code>，在 Node 环境中全局对象是 <code>global</code>；</li>
<li>函数执行上下文（Function Execution Context, FEC）：函数只有在调用时才会产生一个函数执行上下文；</li>
<li>Eval 执行上下文（Eval Execution Context, EEC）：<code>eval</code> 函数执行时产生的执行上下文。</li>
</ul>]]></summary>
    <content type="html"><![CDATA[<h2>执行上下文</h2>
<p>执行上下文（Execution Context）是 JavaScript 代码执行时所在的环境，一共有三种不同的执行上下文：</p>
<ul>
<li>全局执行上下文（Global Execution Context, GEC）：最基本的执行上下文，在一开始就会进行初始化：创建全局上下文，将 <code>this</code> 指向这个对象；一个 JavaScript 程序只有一个 GEC；浏览器环境中的全局对象是 <code>window</code>，在 Node 环境中全局对象是 <code>global</code>；</li>
<li>函数执行上下文（Function Execution Context, FEC）：函数只有在调用时才会产生一个函数执行上下文；</li>
<li>Eval 执行上下文（Eval Execution Context, EEC）：<code>eval</code> 函数执行时产生的执行上下文。</li>
</ul>
<p>下面是一个简单的例子：</p>
<div class="language-javascript" data-ext="js" data-title="js"><pre class="language-javascript"><code><span class="token comment">/* global execution context */</span>
<span class="token keyword">function</span> <span class="token function">baz</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token comment">// FEC of baz</span>
  <span class="token keyword">var</span> foo <span class="token operator">=</span> <span class="token number">3</span>
  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>foo<span class="token punctuation">)</span> <span class="token comment">// 3</span>
<span class="token punctuation">}</span>

<span class="token keyword">function</span> <span class="token function">bar</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token comment">// FEC of bar</span>
  <span class="token keyword">var</span> foo <span class="token operator">=</span> <span class="token number">2</span>
  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>foo<span class="token punctuation">)</span> <span class="token comment">//2</span>
  <span class="token function">baz</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
<span class="token punctuation">}</span>

<span class="token keyword">var</span> foo <span class="token operator">=</span> <span class="token number">1</span> <span class="token comment">// GEC</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>foo<span class="token punctuation">)</span> <span class="token comment">// 1</span>
<span class="token function">bar</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>foo<span class="token punctuation">)</span> <span class="token comment">// 1</span>
<span class="token comment">/* global execution context */</span>
</code></pre></div><ol>
<li>当程序执行时，首先 JS 引擎会创建一个 GEC，不在函数内的代码都是 GEC 的一部分；</li>
<li>当函数被调用时，会创建对应的 FEC，函数内部的代码会马上执行；</li>
<li><strong>每一个执行上下文都有自己的变量环境</strong>，因此尽管 <code>foo</code> 被声明了三次，但因为它们在不同的上下文，因此它们是独立的，不会相互影响；</li>
</ol>
<figure><img src="https://raw.githubusercontent.com/dribble-njr/typora-njr/master/img/example1.png" alt="example" tabindex="0" loading="lazy"><figcaption>example</figcaption></figure>
<h2>执行上下文栈</h2>
<p>执行上下文栈（Execution Context Stack）也叫调用栈。</p>
<p>当程序执行时，JS 引擎会创建 <strong>全局执行上下文</strong>，并将它压入当前调用栈。每当函数调用时，JS 引擎会创建对应的函数上下文，并将它压入栈顶，当函数执行完毕时，则会将该函数的执行上下文从调用栈弹出。</p>
<div class="language-javascript" data-ext="js" data-title="js"><pre class="language-javascript"><code>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'global execution context'</span><span class="token punctuation">)</span>

<span class="token keyword">function</span> <span class="token function">foo</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'foo 正在执行'</span><span class="token punctuation">)</span>
  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'foo 结束执行'</span><span class="token punctuation">)</span>
<span class="token punctuation">}</span>

<span class="token keyword">function</span> <span class="token function">bar</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'bar 正在执行'</span><span class="token punctuation">)</span>
  <span class="token function">foo</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'bar 结束执行'</span><span class="token punctuation">)</span>
<span class="token punctuation">}</span>

<span class="token keyword">function</span> <span class="token function">baz</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'baz 正在执行'</span><span class="token punctuation">)</span>
  <span class="token function">bar</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'baz 结束执行'</span><span class="token punctuation">)</span>
<span class="token punctuation">}</span>

<span class="token function">baz</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'program successfully executed'</span><span class="token punctuation">)</span>

<span class="token comment">// global execution context</span>
<span class="token comment">// baz 正在执行</span>
<span class="token comment">// bar 正在执行</span>
<span class="token comment">// foo 正在执行</span>
<span class="token comment">// foo 结束执行</span>
<span class="token comment">// bar 结束执行</span>
<span class="token comment">// baz 结束执行</span>
<span class="token comment">// program successfully executed</span>
</code></pre></div><p>示意图如下：</p>
<figure><img src="https://raw.githubusercontent.com/dribble-njr/typora-njr/master/img/example2.png" alt="执行上下文栈" tabindex="0" loading="lazy"><figcaption>执行上下文栈</figcaption></figure>
<h2>ES3 中的执行上下文</h2>
<p>上面从宏观角度分析了 JavaScript 执行机制，接下来看看执行上下文中的详细内容。</p>
<h3>变量对象（variable object, VO）</h3>
<p>每个执行上下文都有一个存储变量的对象，称为变量对象，包含当前函数定义的变量、函数、参数。</p>
<ol>
<li>检查当前上下文的参数列表，将 VO 中的 <code>arguments</code> 属性赋值为 <code>Arguments</code> 对象；</li>
<li>检查当前上下文中的函数声明，每检查到一个函数声明，则在 VO 中以函数名建立一个属性，指向函数所在的内存地址；</li>
<li>检查所有 <code>var</code> 变量声明，为其赋值。</li>
</ol>
<div class="hint-container tip">
<p class="hint-container-title">提示</p>
<p>这个操作就是变量提升，但是函数声明会比 <code>var</code> 声明更加靠前。</p>
</div>
<div class="language-javascript" data-ext="js" data-title="js"><pre class="language-javascript"><code><span class="token keyword">function</span> <span class="token function">baz</span><span class="token punctuation">(</span><span class="token parameter">a<span class="token punctuation">,</span> b</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">"baz"</span><span class="token punctuation">,</span> a<span class="token punctuation">,</span> b<span class="token punctuation">)</span><span class="token punctuation">;</span>

  <span class="token keyword">function</span> <span class="token function">foo</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">"foo"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span>

  <span class="token keyword">var</span> v1<span class="token punctuation">;</span>
  <span class="token keyword">var</span> v2 <span class="token operator">=</span> <span class="token string">"v2"</span>
<span class="token punctuation">}</span>

<span class="token function">baz</span><span class="token punctuation">(</span>a<span class="token punctuation">,</span> b<span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token constant">VO</span> <span class="token operator">=</span> <span class="token punctuation">{</span>
  <span class="token literal-property property">arguments</span><span class="token operator">:</span> Arguments Object<span class="token punctuation">,</span>
  <span class="token literal-property property">foo</span><span class="token operator">:</span> <span class="token number">0x111</span> Function<span class="token punctuation">,</span>
  <span class="token literal-property property">v1</span><span class="token operator">:</span> <span class="token keyword">undefined</span><span class="token punctuation">,</span>
  <span class="token literal-property property">v2</span><span class="token operator">:</span> <span class="token string">"v2"</span>
<span class="token punctuation">}</span>
</code></pre></div><h3>活动对象（activation object, AO）</h3>
<p>当函数进入执行阶段时，变量对象则会变成一个活动对象，能访问到其中的各种属性。</p>
<div class="hint-container tip">
<p class="hint-container-title">提示</p>
<p>变量对象和活动对象就是同一个东西，只是处于不同时期而已。</p>
</div>
<h3>作用域链（scope chain）</h3>
<p>作用域链由当前 AO 和父级 VO 组成。当函数创建时，会有一个名为 <code>[[scope]]</code> 的内部属性保存所有父变量对象到其中。</p>
<div class="language-javascript" data-ext="js" data-title="js"><pre class="language-javascript"><code>Scope <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token constant">AO</span><span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token function">concat</span><span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token punctuation">[</span>Scope<span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">)</span>
</code></pre></div><p>作用域链决定了各级上下文的代码在访问变量和函数时的顺序，在搜索变量时会从最前端开始查找，然后逐级往后，直到找到变量。</p>
<div class="language-javascript" data-ext="js" data-title="js"><pre class="language-javascript"><code><span class="token keyword">var</span> color <span class="token operator">=</span> <span class="token string">'blue'</span>
<span class="token keyword">function</span> <span class="token function">changeColor</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token keyword">if</span> <span class="token punctuation">(</span>color <span class="token operator">===</span> <span class="token string">'blue'</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    color <span class="token operator">=</span> <span class="token string">'red'</span>
  <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>
    color <span class="token operator">=</span> <span class="token string">'blue'</span>
  <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
<span class="token function">changeColor</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
</code></pre></div><p>这里由于作用域链就可以访问到 <code>color</code> 变量，这里 <code>changeColor</code> 的作用域链包含两个对象，自身的活动对象和全局上下文的变量对象。</p>
<h3><code>this</code></h3>
<p>执行上下文的最后一个部分为当前函数的调用者，关于 <code>this</code> 的各种问题，见 。</p>
<h2>ES5 中的执行上下文</h2>
<p>ES5 中去除了 ES3 里变量对象和活动对象，取而代之的是词法环境（Lexical Environment）和变量环境（Variable Environment）。</p>
<p>ES5 中的词法环境和变量环境和 ES3 中的变量环境是一样的，只不过分成了两部分而已。其中词法环境绑定的是 <code>let</code>、<code>const</code> 声明的变量，而变量环境绑定的是 <code>var</code> 声明的值。</p>
<h2>面试题</h2>
<h3>面试题一</h3>
<div class="language-javascript" data-ext="js" data-title="js"><pre class="language-javascript"><code><span class="token keyword">var</span> n <span class="token operator">=</span> <span class="token number">100</span>

<span class="token keyword">function</span> <span class="token function">foo</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  n <span class="token operator">=</span> <span class="token number">200</span>
<span class="token punctuation">}</span>

<span class="token function">foo</span><span class="token punctuation">(</span><span class="token punctuation">)</span>

console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>n<span class="token punctuation">)</span> <span class="token comment">// 200</span>
</code></pre></div><p><code>foo()</code> 内的 <code>n</code> 会通过作用域链访问到全局执行上下文中的变量 <code>n</code>，因此会打印 <code>200</code>。</p>
<h3>面试题二</h3>
<div class="language-javascript" data-ext="js" data-title="js"><pre class="language-javascript"><code><span class="token keyword">function</span> <span class="token function">foo</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>n<span class="token punctuation">)</span> <span class="token comment">// undefined</span>
  <span class="token keyword">var</span> n <span class="token operator">=</span> <span class="token number">200</span>
  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>n<span class="token punctuation">)</span> <span class="token comment">// 200</span>
<span class="token punctuation">}</span>

<span class="token keyword">var</span> n <span class="token operator">=</span> <span class="token number">100</span>
<span class="token function">foo</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
</code></pre></div><p>由于变量提升，首先输出 <code>undefined</code>，然后输出 <code>200</code>。</p>
<h3>面试题三</h3>
<div class="language-javascript" data-ext="js" data-title="js"><pre class="language-javascript"><code><span class="token keyword">var</span> a <span class="token operator">=</span> <span class="token number">100</span>

<span class="token keyword">function</span> <span class="token function">foo</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>a<span class="token punctuation">)</span> <span class="token comment">// undefined</span>
  <span class="token keyword">return</span>
  <span class="token keyword">var</span> a <span class="token operator">=</span> <span class="token number">200</span>
<span class="token punctuation">}</span>

<span class="token function">foo</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
</code></pre></div><p>虽然 <code>a = 200</code> 不会执行，但是会被变量提升。</p>
<h3>面试题四</h3>
<div class="language-javascript" data-ext="js" data-title="js"><pre class="language-javascript"><code><span class="token keyword">function</span> <span class="token function">foo</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token keyword">var</span> a <span class="token operator">=</span> <span class="token punctuation">(</span>b <span class="token operator">=</span> <span class="token number">10</span><span class="token punctuation">)</span>
  <span class="token comment">// =&gt; 转成下面的两行代码</span>
  <span class="token comment">// var a = 10</span>
  <span class="token comment">// b = 10</span>
<span class="token punctuation">}</span>

<span class="token function">foo</span><span class="token punctuation">(</span><span class="token punctuation">)</span>

console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>a<span class="token punctuation">)</span> <span class="token comment">// a is not undefined</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>b<span class="token punctuation">)</span> <span class="token comment">// 10</span>
</code></pre></div><h3>面试题五</h3>
<div class="language-javascript" data-ext="js" data-title="js"><pre class="language-javascript"><code><span class="token keyword">var</span> foo <span class="token operator">=</span> <span class="token number">1</span>

<span class="token keyword">function</span> <span class="token function">bar</span><span class="token punctuation">(</span><span class="token parameter">foo</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>foo<span class="token punctuation">)</span> <span class="token comment">// 123</span>
  foo <span class="token operator">=</span> <span class="token number">234</span>
<span class="token punctuation">}</span>

<span class="token function">bar</span><span class="token punctuation">(</span><span class="token number">123</span><span class="token punctuation">)</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>foo<span class="token punctuation">)</span> <span class="token comment">// 1</span>
</code></pre></div><p>运行 <code>bar</code> 函数的时候将 <code>123</code> 数字作为实参传入，所以操作的还是本地作用域的 <code>foo</code>。</p>
<h2>参考链接</h2>
<ul>
<li><a href="https://dev.to/ahmedtahir/what-is-the-execution-context-execution-stack-scope-chain-in-js-26nc" target="_blank" rel="noopener noreferrer">What is the Execution Context, Execution Stack &amp; Scope Chain in JS - DEV Community</a></li>
<li><a href="https://juejin.cn/post/6844904158957404167" target="_blank" rel="noopener noreferrer">面试官：说说执行上下文吧 - 掘金 (juejin.cn)</a></li>
</ul>
]]></content>
    <category term="JavaScript"/>
    <published>2022-04-21T00:00:00.000Z</published>
  </entry>
  <entry>
    <title type="text">原始值和引用值</title>
    <id>https://dribble-njr.github.io/blog/blog/frontend/basic/javascript/004-primitive-value-reference-value.html</id>
    <link href="https://dribble-njr.github.io/blog/blog/frontend/basic/javascript/004-primitive-value-reference-value.html"/>
    <updated>2024-04-16T04:38:18.000Z</updated>
    <summary type="html"><![CDATA[<h2>按值访问和按引用访问</h2>
<p>ECMAScript 变量可以包含两种不同类型的数据：原始值和引用值。原始值（primitive value）就是最简单的数据，引用值（reference value）则是由多个值构成的对象。</p>
<p>在把一个值赋给变量时，JavaScript 引擎必须确定这个值是原始值还是引用值。</p>
<p>保存原始值的变量是 <strong>按值</strong>（by value）访问的，因为我们操作的就是存储在变量中的实际值。引用值是保存在内存中的对象。</p>
<p>与其他语言不同，JavaScript 不允许直接访问内存位置，因此也就不能直接操作对象所在的内存空间。在操作对象时，实际上操作的是对该对象的 <strong>引用</strong>（reference）而非实际的对象本身。为此，保存引用值的变量是 <strong>按引用</strong>（by reference）访问的。</p>]]></summary>
    <content type="html"><![CDATA[<h2>按值访问和按引用访问</h2>
<p>ECMAScript 变量可以包含两种不同类型的数据：原始值和引用值。原始值（primitive value）就是最简单的数据，引用值（reference value）则是由多个值构成的对象。</p>
<p>在把一个值赋给变量时，JavaScript 引擎必须确定这个值是原始值还是引用值。</p>
<p>保存原始值的变量是 <strong>按值</strong>（by value）访问的，因为我们操作的就是存储在变量中的实际值。引用值是保存在内存中的对象。</p>
<p>与其他语言不同，JavaScript 不允许直接访问内存位置，因此也就不能直接操作对象所在的内存空间。在操作对象时，实际上操作的是对该对象的 <strong>引用</strong>（reference）而非实际的对象本身。为此，保存引用值的变量是 <strong>按引用</strong>（by reference）访问的。</p>
<figure><img src="https://raw.githubusercontent.com/dribble-njr/typora-njr/master/img/V8-stack-heap.png" alt="按值访问和按引用访问" tabindex="0" loading="lazy"><figcaption>按值访问和按引用访问</figcaption></figure>
<h2>传递参数</h2>
<p>ECMAScript 中所有函数的参数都是按值传递的。这意味着函数外的值会被复制到函数内部的参数中，就像从一个变量复制到另一个变量一样。</p>
<p>如果是原始值，那么就跟原始值变量的复制一样，如果是引用值，那么就跟引用值变量的复制一样。</p>
<div class="hint-container warning">
<p class="hint-container-title">注意</p>
<p>变量有按值和按引用访问，而传参则只有按值传递。</p>
</div>
<p>在按值传递参数时，值会被复制到一个局部变量（即一个命名参数，<code>arguments</code> 对象中的一个槽位）。来看几个例子。</p>
<p><strong>参数为基本类型</strong></p>
<div class="language-javascript" data-ext="js" data-title="js"><pre class="language-javascript"><code><span class="token keyword">let</span> a <span class="token operator">=</span> <span class="token number">1</span>
<span class="token keyword">function</span> <span class="token function">foo</span><span class="token punctuation">(</span><span class="token parameter">value</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  value <span class="token operator">=</span> <span class="token number">2</span>
  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>value<span class="token punctuation">)</span> <span class="token comment">// 输出: 2</span>
<span class="token punctuation">}</span>

<span class="token function">foo</span><span class="token punctuation">(</span>a<span class="token punctuation">)</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>a<span class="token punctuation">)</span> <span class="token comment">//输出: 1</span>
</code></pre></div><div class="language-text" data-ext="text" data-title="text"><pre class="language-text"><code>a: 1
foo:
  - value: 1
</code></pre></div><p>在这个例子中，声明了一个变量 <code>a</code>，把它传入 <code>foo</code> 函数，函数中我们改变了 <code>value</code> 的值，但在函数外 <code>a</code> 的值没有改变。</p>
<p>因为基本类型是按值传递，改变的只是 <code>value</code> 这个拷贝副本的值，对原值没有影响。</p>
<p><strong>参数为引用类型</strong></p>
<div class="language-javascript" data-ext="js" data-title="js"><pre class="language-javascript"><code><span class="token keyword">let</span> obj <span class="token operator">=</span> <span class="token punctuation">{</span> <span class="token literal-property property">a</span><span class="token operator">:</span> <span class="token number">1</span> <span class="token punctuation">}</span>
<span class="token keyword">function</span> <span class="token function">foo</span><span class="token punctuation">(</span><span class="token parameter">o</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  o<span class="token punctuation">.</span>a <span class="token operator">=</span> <span class="token number">2</span>
  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>o<span class="token punctuation">.</span>a<span class="token punctuation">)</span> <span class="token comment">// 输出: 2</span>
<span class="token punctuation">}</span>

<span class="token function">foo</span><span class="token punctuation">(</span>obj<span class="token punctuation">)</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>obj<span class="token punctuation">.</span>a<span class="token punctuation">)</span> <span class="token comment">// 输出: 2</span>
</code></pre></div><div class="language-text" data-ext="text" data-title="text"><pre class="language-text"><code>obj: 0x01 -&gt; { a: 1 }
foo:          |
  - 0: 0x01 -&gt;
</code></pre></div><p>在这里，声明了一个对象 <code>obj</code>，把它传入 <code>foo</code> 函数赋值为 <code>o</code>，此时 <code>o</code> 与外部定义的 <code>obj</code> 的值为同一个内存地址，指向同一个对象。</p>
<p>函数中改变了 <code>o</code> 的 <code>a</code> 属性的值（按引用访问），然后可以看到在函数外 <code>obj.a</code> 的值也被改变了。</p>
<p>再来看一个例子：</p>
<div class="language-javascript" data-ext="js" data-title="js"><pre class="language-javascript"><code><span class="token keyword">let</span> obj <span class="token operator">=</span> <span class="token punctuation">{</span> <span class="token literal-property property">value</span><span class="token operator">:</span> <span class="token number">1</span> <span class="token punctuation">}</span>
<span class="token keyword">function</span> <span class="token function">foo</span><span class="token punctuation">(</span><span class="token parameter">o</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  o <span class="token operator">=</span> <span class="token number">2</span>
  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>o<span class="token punctuation">)</span> <span class="token comment">// 输出：2</span>
<span class="token punctuation">}</span>
<span class="token function">foo</span><span class="token punctuation">(</span>obj<span class="token punctuation">)</span> 
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>obj<span class="token punctuation">.</span>value<span class="token punctuation">)</span> <span class="token comment">// 输出：1</span>
</code></pre></div><div class="language-text" data-ext="text" data-title="text"><pre class="language-text"><code>obj: 0x01 -&gt; { value: 1 }
foo:          |
  - o: 0x01 -&gt;
</code></pre></div><p>这里也声明了一个对象，不同的是，<code>foo</code> 函数直接修改了 <code>o</code> 的值，将内存地址变为一个普通原始值 <code>2</code>，但是这里并没有对外部的 <code>obj</code> 地址进行修改，因此 <code>console.log(obj.value)</code> 仍然打印 <code>1</code>。</p>
]]></content>
    <category term="JavaScript"/>
    <published>2024-04-16T00:00:00.000Z</published>
  </entry>
  <entry>
    <title type="text">浏览器渲染原理</title>
    <id>https://dribble-njr.github.io/blog/blog/frontend/browser/01-how-browser-rendering-works.html</id>
    <link href="https://dribble-njr.github.io/blog/blog/frontend/browser/01-how-browser-rendering-works.html"/>
    <updated>2024-04-15T05:32:00.000Z</updated>
    <summary type="html"><![CDATA[<p>浏览器渲染主要是依靠浏览器内核也就是浏览器渲染引擎，它通过一系列的解析将 HTML 文档渲染在浏览器上。</p>
<h2>主要流程</h2>
<p>渲染引擎会从网络层中获取将要渲染的文档，主要的工作流程如下：</p>
<figure><img src="https://raw.githubusercontent.com/dribble-njr/typora-njr/master/img/1-webkitflow.png" alt="webkit-flow" tabindex="0" loading="lazy"><figcaption>webkit-flow</figcaption></figure>]]></summary>
    <content type="html"><![CDATA[<p>浏览器渲染主要是依靠浏览器内核也就是浏览器渲染引擎，它通过一系列的解析将 HTML 文档渲染在浏览器上。</p>
<h2>主要流程</h2>
<p>渲染引擎会从网络层中获取将要渲染的文档，主要的工作流程如下：</p>
<figure><img src="https://raw.githubusercontent.com/dribble-njr/typora-njr/master/img/1-webkitflow.png" alt="webkit-flow" tabindex="0" loading="lazy"><figcaption>webkit-flow</figcaption></figure>
<ol>
<li>首先浏览器会解析 HTML 文档，将 HTML 解析成 DOM 树；CSS 样式表也会在同时进行加载，生成样式规则；而 JavaScript 会通过 DOM API 和 CSSOM API 来操作 DOM Tree 和 Style Rules。</li>
<li>解析完成后，渲染引擎会通过 DOM Tree 和 Style Rules 创造 Render Tree，此时会计算各个 DOM 在浏览器上的具体坐标。</li>
<li>最后渲染引擎遍历整个 Render Tree，由 UI 后端层绘制。</li>
</ol>
<p>整个渲染过程一个渐进的过程。为了更好的用户体验，渲染引擎将尽快在屏幕上显示内容。在开始构件和渲染 Render Tree 之前，它不会等到所有 HTML 都被解析。在部分内容被渲染的同时，渲染引擎会继续向服务器请求剩下的内容。</p>
<h2>HTML 解析器</h2>
<p>HTML 解析器的作用是将 HTML 解析成 DOM 树：</p>
<div class="language-html" data-ext="html" data-title="html"><pre class="language-html"><code><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>html</span><span class="token punctuation">&gt;</span></span>
  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>body</span><span class="token punctuation">&gt;</span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>p</span><span class="token punctuation">&gt;</span></span>Hello World<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>p</span><span class="token punctuation">&gt;</span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>img</span> <span class="token attr-name">src</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>example.png<span class="token punctuation">"</span></span> <span class="token punctuation">/&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">&gt;</span></span>
  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>body</span><span class="token punctuation">&gt;</span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>html</span><span class="token punctuation">&gt;</span></span>
</code></pre></div><figure><img src="https://raw.githubusercontent.com/dribble-njr/typora-njr/master/img/2-dom-tree.png" alt="dom-tree" tabindex="0" loading="lazy"><figcaption>dom-tree</figcaption></figure>
<p>HTML 解析算法包括两个阶段：</p>
<ol>
<li>标记化：词法分析，将输入解析为标记。HTML 标记包括开始标记、结束标记、属性名称和属性值。标记器识别 token，将它传递给树构造器，然后接受下一个字符以识别下一个标记，直到输入的结束。</li>
<li>树构建：构建成 DOM 树。</li>
</ol>
<figure><img src="https://raw.githubusercontent.com/dribble-njr/typora-njr/master/img/3-html-parse.png" alt="html-parse" tabindex="0" loading="lazy"><figcaption>html-parse</figcaption></figure>
<h2>CSS 解析器</h2>
<p>解析器都会将 CSS 文件解析成 StyleSheet 对象，且每个对象都包含 CSS 规则。CSS 规则对象则包含选择器和声明对象，以及其他与 CSS 语法对应的对象。</p>
<figure><img src="https://raw.githubusercontent.com/dribble-njr/typora-njr/master/img/4-css-parse.png" alt="css-parse" tabindex="0" loading="lazy"><figcaption>css-parse</figcaption></figure>
<h2>Render Tree</h2>
<p>在 DOM 树构建的同时，浏览器还会构建另一个树结构：呈现树。这是由可视化元素按照其显示顺序而组成的树，也是文档的可视化表示。它的作用是让您按照正确的顺序绘制内容。</p>
<p>Render Tree 和 DOM Tree 并不是一一对应的，非可视化的 DOM 元素不会插入呈现树中，例如 <code>head</code> 元素。如果元素的 <code>display</code> 属性值为 <code>none</code>，那么也不会显示在呈现树中（但是 <code>visibility</code> 属性值为 <code>hidden</code> 的元素仍会显示）。</p>
<figure><img src="https://raw.githubusercontent.com/dribble-njr/typora-njr/master/img/5-render-tree.png" alt="render-tree" tabindex="0" loading="lazy"><figcaption>render-tree</figcaption></figure>
<p>接下来浏览器需要做的就是计算样式，将每一个 Render 对象的可视化属性计算（根据一系列规则，如层叠性、选择器权重等）出来，但是在这个过程中，并不包含位置和大小信息。计算这些值的过程叫做布局或回流。</p>
<p>总之，到目前为止，渲染引擎已经经历了一系列的工作，可以将页面展示到浏览器上了。</p>
<h2>参考链接</h2>
<ol>
<li><a href="https://www.html5rocks.com/en/tutorials/internals/howbrowserswork/#The_order_of_processing_scripts_and_style_sheets" target="_blank" rel="noopener noreferrer">How Browsers Work: Behind the scenes of modern web browsers - HTML5 Rocks</a></li>
<li><a href="https://coolshell.cn/articles/9666.html" target="_blank" rel="noopener noreferrer">浏览器的渲染原理简介</a></li>
<li><a href="https://zh.wiki.hancel.org/wiki/JavaScript%E5%BC%95%E6%93%8E" target="_blank" rel="noopener noreferrer">JavaScript 引擎 - 维基百科</a></li>
<li><a href="https://zh.m.wikipedia.org/wiki/%E6%B5%8F%E8%A7%88%E5%99%A8%E5%BC%95%E6%93%8E" target="_blank" rel="noopener noreferrer">浏览器引擎 - 维基百科</a></li>
<li><a href="https://cloud.tencent.com/developer/article/1679313" target="_blank" rel="noopener noreferrer">浏览器内核及分类 - 腾讯云社区</a></li>
</ol>
]]></content>
    <category term="browser"/>
    <published>2021-12-16T00:00:00.000Z</published>
  </entry>
  <entry>
    <title type="text">V8 引擎</title>
    <id>https://dribble-njr.github.io/blog/blog/frontend/browser/02-V8.html</id>
    <link href="https://dribble-njr.github.io/blog/blog/frontend/browser/02-V8.html"/>
    <updated>2024-04-15T05:32:00.000Z</updated>
    <summary type="html"><![CDATA[<p>在 JavaScript 引擎中，V8 无疑是最流行的，Chrome 与 Node.js 都使用了 V8 引擎。</p>
<p>V8 由很多子模块构成，有几个核心模块：</p>
<ul>
<li>Parser：解析器，负责将 JavaScript 代码解析成抽象语法树（Abstract Syntax Tree, AST）；</li>
<li>Ignition：解释器（interpreter），负责将 AST 转换为字节码（Bytecode）并执行；同时收集 TurboFan 优化编译所需的信息，比如函数参数的类型；</li>
<li>TurboFan：编译器（compiler），利用 Ignition 所收集的信息，将字节码转换为优化的机器码；</li>
<li>Orinoco：垃圾回收（garbage collector），负责将程序不再需要的内存空间回收。</li>
</ul>]]></summary>
    <content type="html"><![CDATA[<p>在 JavaScript 引擎中，V8 无疑是最流行的，Chrome 与 Node.js 都使用了 V8 引擎。</p>
<p>V8 由很多子模块构成，有几个核心模块：</p>
<ul>
<li>Parser：解析器，负责将 JavaScript 代码解析成抽象语法树（Abstract Syntax Tree, AST）；</li>
<li>Ignition：解释器（interpreter），负责将 AST 转换为字节码（Bytecode）并执行；同时收集 TurboFan 优化编译所需的信息，比如函数参数的类型；</li>
<li>TurboFan：编译器（compiler），利用 Ignition 所收集的信息，将字节码转换为优化的机器码；</li>
<li>Orinoco：垃圾回收（garbage collector），负责将程序不再需要的内存空间回收。</li>
</ul>
<p>下面这张图是 V8 现有的工作流程，非常重要，在后面阅读的时候可以翻上来看看。</p>
<figure><img src="https://raw.githubusercontent.com/dribble-njr/typora-njr/master/img/v8-work-flow.webp" alt="v8-work-flow" tabindex="0" loading="lazy"><figcaption>v8-work-flow</figcaption></figure>
<h2>Parser</h2>
<p>为了让 V8 能够理解 JavaScript 代码，必须先将源码通过 <strong>Parser</strong> 解析成抽象语法树——代表程序结构的一系列对象。然后抽象语法树会被 <strong>Ignition</strong> 编译成字节码。这两个阶段是 V8 引擎性能的关键。</p>
<p>下图是 Parser 的工作流程：</p>
<img src="https://raw.githubusercontent.com/dribble-njr/typora-njr/master/img/parser.svg" style="background-color: #fff">
<p>整个流程分为两个阶段：词法分析和语法分析。</p>
<ul>
<li><strong>词法分析</strong>：scanner 从我们编写的 JavaScript 代码中生成一系列的 tokens。而 tokens 是由一个或多个具有单一语义的字符组成的块：字符串、标识符、运算符 <code>++</code> 等。</li>
<li><strong>语法分析</strong>：语法分析的输入就是词法分析的输出（即 tokens），输出是 AST 抽象语法树。当程序出现语法错误的时候，V8 会在语法分析阶段抛出异常。</li>
</ul>
<p>V8 为了提升 scanner 性能，又做了 <strong>延迟解析</strong>（lazy parsing）的优化，一些不会用到函数并不会被马上编译，他们会被 PreParser 处理，当以后调用一个 <code>preparsed</code> 函数时，它会根据需要进行完全解析和编译。</p>
<h2>Ignition</h2>
<p>当 Parser 将代码解析成 AST 输入给 Ignition，Ignition 会将 AST 转换为字节码，分三种情况：</p>
<ul>
<li>函数只声明而不调用，则 Ignition 不会做任何操作；</li>
<li>如果函数只调用一次，则 Ignition 会解释字节码并执行。下面来看看例子；</li>
<li>如果函数调用多次，则 Ignition 会收集 TurboFan 优化所需的信息（比如函数参数的类型信息等）。</li>
</ul>
<p>下面来看看例子。</p>
<ol>
<li>
<p>只是声明函数 <code>add</code>，但是没有调用，则 Ignition 不会做任何转换。</p>
<div class="language-javascript" data-ext="js" data-title="js"><pre class="language-javascript"><code><span class="token keyword">function</span> <span class="token function">add</span><span class="token punctuation">(</span><span class="token parameter">x<span class="token punctuation">,</span> y</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token keyword">return</span> x <span class="token operator">+</span> y
<span class="token punctuation">}</span>
</code></pre></div></li>
<li>
<p>声明后第一次调用 <code>add</code> 函数，Ignition 会把它编译成字节码执行。到这个时候，JavaScript 代码就已经执行完成了。</p>
<div class="language-javascript" data-ext="js" data-title="js"><pre class="language-javascript"><code><span class="token function">add</span><span class="token punctuation">(</span><span class="token number">1</span> <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">)</span>
</code></pre></div></li>
<li>
<p>但是如果发现有<strong>热点函数</strong>（即一个函数被多次调用），Ignition 就会收集 <code>add</code> 函数的各种参数类型，为 TurboFan 的优化提供支持。</p>
<div class="language-javascript" data-ext="js" data-title="js"><pre class="language-javascript"><code><span class="token comment">// 调用多次，标记成热点函数，收集各种信息</span>
<span class="token function">add</span><span class="token punctuation">(</span><span class="token number">1</span> <span class="token operator">+</span> <span class="token number">2</span><span class="token punctuation">)</span>
<span class="token function">add</span><span class="token punctuation">(</span><span class="token number">1</span> <span class="token operator">+</span> <span class="token number">3</span><span class="token punctuation">)</span>
</code></pre></div></li>
</ol>
<h2>TurboFan</h2>
<p>TurboFan 是一个编译器，可以将字节码编译为 CPU 可以直接执行的机器码。如果一个函数被多次调用，就会被标记为<strong>热点函数</strong>，那么就会经过 TurboFan 转换成优化的机器码，提高代码的执行性能。</p>
<div class="language-javascript" data-ext="js" data-title="js"><pre class="language-javascript"><code><span class="token keyword">function</span> <span class="token function">add</span><span class="token punctuation">(</span><span class="token parameter">x<span class="token punctuation">,</span> y</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token keyword">return</span> x <span class="token operator">+</span> y
<span class="token punctuation">}</span>
<span class="token function">add</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token operator">%</span> <span class="token function">OptimizeFunctionOnNextCall</span><span class="token punctuation">(</span>add<span class="token punctuation">)</span>
<span class="token function">add</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">)</span>
</code></pre></div><p>V8 的 <code>%OptimizeFunctionOnNextCall</code> 可以直接指定优化哪个函数，它根据上次调用的参数反馈优化 <code>add</code> 函数，很明显这次的反馈是整型数，所以 TurboFan 会根据参数是整型数进行优化直接生成机器码，下次函数调用直接调用优化好的机器码。</p>
<p>但是，机器码实际上也会被还原为字节码，这是因为如果后续执行函数的过程中，类型发生了变化（比如 <code>add</code> 函数原来执行的是 <code>number</code> 类型，后来执行变成了 <code>string</code> 类型），之前优化的机器码并不能正确的处理运算，就会逆向的转换成字节码。这个就是最上面那个图还有个 <code>Deoptimization</code> 的原因。</p>
<div class="language-javascript" data-ext="js" data-title="js"><pre class="language-javascript"><code><span class="token keyword">function</span> <span class="token function">add</span><span class="token punctuation">(</span><span class="token parameter">x<span class="token punctuation">,</span> y</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token keyword">return</span> x <span class="token operator">+</span> y
<span class="token punctuation">}</span>
<span class="token function">add</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">)</span>
<span class="token function">add</span><span class="token punctuation">(</span><span class="token string">'1'</span><span class="token punctuation">,</span> <span class="token string">'2'</span><span class="token punctuation">)</span>
</code></pre></div><blockquote>
<p>到此，V8 引擎的工作流程就已经完成了，但是还没有细究里面的执行细节，只是大概地了解了工作流程，等以后能完全看懂官方文章了再回来更新。</p>
</blockquote>
<h2>参考链接</h2>
<ol>
<li><a href="https://zh.wikipedia.org/wiki/JavaScript%E5%BC%95%E6%93%8E" target="_blank" rel="noopener noreferrer">JavaScript 引擎 - 维基百科</a></li>
<li><a href="https://blog.fundebug.com/2019/07/16/how-does-v8-work/" target="_blank" rel="noopener noreferrer">JavaScript 深入浅出第 4 课：V8 引擎是如何工作的？</a></li>
<li><a href="https://v8.dev/blog/scanner" target="_blank" rel="noopener noreferrer">Blazingly fast parsing, part 1: optimizing the scanner</a></li>
<li><a href="https://v8.dev/blog/preparser" target="_blank" rel="noopener noreferrer">Blazingly fast parsing, part 2: lazy parsing · V8</a></li>
<li><a href="https://v8.dev/blog/ignition-interpreter" target="_blank" rel="noopener noreferrer">Firing up the Ignition interpreter · V8</a></li>
<li><a href="https://mp.weixin.qq.com/s/t__Jqzg1rbTlsCHXKMwh6A" target="_blank" rel="noopener noreferrer">JavaScript 引擎 V8 执行流程概述</a></li>
</ol>
]]></content>
    <category term="browser"/>
    <published>2022-01-13T00:00:00.000Z</published>
  </entry>
  <entry>
    <title type="text">内存管理</title>
    <id>https://dribble-njr.github.io/blog/blog/frontend/browser/03-memory-management.html</id>
    <link href="https://dribble-njr.github.io/blog/blog/frontend/browser/03-memory-management.html"/>
    <updated>2024-04-15T05:32:00.000Z</updated>
    <summary type="html"><![CDATA[<p>像 C、C++ 等编程语言都需要手动管理内存，在创建变量时需要申请（<code>malloc()</code>），不需要用了之后在释放内存空间（<code>free()</code>）。而 JavaScript、Java、Python 等都是自动管理内存，在创建变量时自动分配内存，而在不使用后自动释放，释放的过程称为 <strong>垃圾回收</strong>。</p>
<p>虽然不同语言管理内存的方式不同，但是内存声明周期是基本一致的：</p>
<ol>
<li>分配你所需要的内存</li>
<li>使用分配到的内存（读、写）</li>
<li>不需要时将其释放</li>
</ol>
]]></summary>
    <content type="html"><![CDATA[<p>像 C、C++ 等编程语言都需要手动管理内存，在创建变量时需要申请（<code>malloc()</code>），不需要用了之后在释放内存空间（<code>free()</code>）。而 JavaScript、Java、Python 等都是自动管理内存，在创建变量时自动分配内存，而在不使用后自动释放，释放的过程称为 <strong>垃圾回收</strong>。</p>
<p>虽然不同语言管理内存的方式不同，但是内存声明周期是基本一致的：</p>
<ol>
<li>分配你所需要的内存</li>
<li>使用分配到的内存（读、写）</li>
<li>不需要时将其释放</li>
</ol>
<p>第二步的使用内存就很常见了，我们写的代码就是这一步，因此这里介绍第一步和第三步的基本内容。</p>
<h2>分配内存空间</h2>
<p>现在来看看 V8 引擎是如何给不同变量分配内存的。</p>
<p>V8 主要有三种内存空间：</p>
<ul>
<li>代码空间：主要存储可执行代码；</li>
<li>栈空间：JavaScript 对于 <strong>基本数据类型</strong> 内存的分配会在执行时直接在栈空间进行分配；</li>
<li>堆空间：JavaScript 对于 <strong>复杂数据类型</strong> 内存的分配会在堆内存中开辟一块空间，并且将这块空间的指针（地址）返回给变量引用（存放在栈空间）。</li>
</ul>
<p>下面看看例子：</p>
<div class="language-javascript" data-ext="js" data-title="js"><pre class="language-javascript"><code><span class="token keyword">function</span> <span class="token function">foo</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token keyword">var</span> a <span class="token operator">=</span> <span class="token number">1</span>
  <span class="token keyword">var</span> b <span class="token operator">=</span> <span class="token punctuation">{</span> <span class="token literal-property property">name</span><span class="token operator">:</span> <span class="token string">'heap'</span> <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
<span class="token function">foo</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
</code></pre></div><p>当代码执行到第二行时，栈底是 <code>a</code>，栈顶是 <code>b</code>，此时 <code>b</code> 的值是一个复杂数据类型，那么会在堆空间中为这个数据分配一个空间，并把 <code>b</code> 的变量值赋值为这个空间的地址。</p>
<figure><img src="https://raw.githubusercontent.com/dribble-njr/typora-njr/master/img/V8-stack-heap.png" alt="V8-stack-heap" tabindex="0" loading="lazy"><figcaption>V8-stack-heap</figcaption></figure>
<p>那么，为什么要将复杂数据类型放在堆空间，而不是一起放在栈空间呢？</p>
<p>因为 V8 引擎需要用栈来维护程序执行期间上下文的状态，如果栈空间分配的内存过大，那么会影响到上下文切换的效率，从而导致代码执行速度过慢。</p>
<p>因此，栈空间不会设置太大，主要用来存放基本数据类型（占用空间小），而像复杂数据类型，因为他们的占用空间一般较大，因此会被存放在堆空间中。</p>
<h2>常见的垃圾回收算法</h2>
<p>了解了如何分配不同变量的内存后，第二步的读写其实已经包含在代码里了，最关键的一步就是如何将不再需要的 <strong>内存回收</strong>。</p>
<p>在整个垃圾回收的过程中，最困难的地方在于如何找到「哪些被分配的内存确实已经不再需要了」，而这个步骤没有任何算法可以准确的判断，只是一个近似的过程。</p>
<p>下面先介绍几种常见的垃圾回收算法，再介绍 V8 的垃圾回收机制。</p>
<h3>引用计数算法</h3>
<p>这是最初级的垃圾收集算法。此算法把「对象是否不再需要」简化定义为「对象有没有其他对象引用到它」。当一个对象有一个引用指向它时，它的引用数就会 <code>+1</code>；当没有引用时，即引用数为 <code>0</code>，这个对象就可以被销毁了。</p>
<p>但是一个很大的弊端是会产生循环引用。</p>
<div class="language-javascript" data-ext="js" data-title="js"><pre class="language-javascript"><code><span class="token keyword">function</span> <span class="token function">f</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token keyword">var</span> o <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token punctuation">}</span>
  <span class="token keyword">var</span> o2 <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token punctuation">}</span>
  o<span class="token punctuation">.</span>a <span class="token operator">=</span> o2 <span class="token comment">// o 引用 o2</span>
  o2<span class="token punctuation">.</span>a <span class="token operator">=</span> o <span class="token comment">// o2 引用 o</span>

  <span class="token keyword">return</span> <span class="token string">'azerty'</span>
<span class="token punctuation">}</span>

<span class="token function">f</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
</code></pre></div><p>在执行 <code>f()</code> 时，创建了两个对象并相互引用。函数执行结束后，会离开函数作用域，因此它们已经没有用了，按照常理来说应该被销毁。但是因为它们至少都有一次引用，所以不会被回收，造成内存泄露。</p>
<h3>标记清除算法</h3>
<p>这个算法把「对象是否不再需要」简化定义为「对象是否可以获得」，简称「可达性」。</p>
<p>这个算法假定设置一个叫做根（root）的对象（在 Javascript 里，根是全局对象）。垃圾回收器将定期从根开始，找所有从根开始引用的对象，然后找这些对象引用的对象。</p>
<img src="https://raw.githubusercontent.com/dribble-njr/typora-njr/master/img/mark-clear.png" style="background-color: #fff">
<p>在上图中，<code>g</code> 和 <code>h</code> 对象互相引用，如果采用 <strong>引用计数算法</strong>，那么这两个对象将不会被垃圾回收。但是使用标记清除算法，因为根对象没有对它们引用，因此会被垃圾回收。这样，循环引用的问题就不存在了。</p>
<h2>V8 垃圾回收机制</h2>
<p>在过去几年，V8 垃圾回收发生了很多变化。以前的垃圾回收器是一个连续的过程，在进行垃圾回收的过程中会暂停其他活动（全停顿，stop-the-world），而现在 V8 的垃圾回收器转变成了具有 <strong>增量回退</strong> 的 <strong>并行</strong>、<strong>并发</strong> 垃圾回收器。</p>
<p>任何垃圾回收器都会执行下面几个基本任务：</p>
<ol>
<li>
<p><strong>标记</strong> 活动对象和非活动对象</p>
</li>
<li>
<p><strong>回收或者重排</strong> 非活动对象占据的内存</p>
</li>
<li>
<p><strong>合并或者整理</strong> 内存（可选）</p>
</li>
</ol>
<p>这些任务可以按顺序执行，也可以任意交错执行。一种直接的方法是暂停 JavaScript 执行，并在主线程上按顺序执行这些任务。这可能会导致主线程出现卡顿和延迟问题，并降低程序吞吐量。</p>
<h3>V8 内存限制</h3>
<p>在介绍 V8 垃圾回收机制之前，我们先来探讨一下为什么需要垃圾回收。</p>
<ul>
<li>当创建一个对象时，就会分配大量内存</li>
<li>在 V8 中限制 64 位的机器大约 1.4GB，32 位机器大约为 0.7GB</li>
<li>操作系统会自动进行栈内存的分配和释放，而堆内存，则由 V8 引擎进行释放</li>
</ul>
<h3>分代堆布局</h3>
<p>V8 中的堆被分成不同的区域，称为代：分为新生代（进一步分为 <code>nursery</code> 和 <code>intermediate</code>），和一个老生代。对象首先被分配到 <code>nursery</code>。如果它们在下一个 GC 中幸存下来，这时候我们把它们移动到 <code>intermediate</code> 子代，如果再经过下一次垃圾回收这个对象仍然存活，这时候我们就会把这个对象移动到老生代（这个策略称为 <strong>对象晋升策略</strong>）。</p>
<figure><img src="https://raw.githubusercontent.com/dribble-njr/typora-njr/master/img/generations.svg" alt="generations" tabindex="0" loading="lazy"><figcaption>generations</figcaption></figure>
<div class="hint-container tip">
<p class="hint-container-title">提示</p>
<p>在垃圾回收中有一个重要的术语：「代际假说」，指大多数对象在新生代就会被回收。从垃圾回收的角度来看，大部分对象一经分配之后就几乎马上变成不可达状态。</p>
</div>
<p>根据 V8 堆中分为不同的区域，可以容易地想到 V8 有两个不同的垃圾回收器：清理新生区的副垃圾回收器和清理老生区的主垃圾回收器。</p>
<p>下面就一一介绍 V8 中的两个垃圾回收器。</p>
<h3>副垃圾回收器——清道夫（Scavenge）</h3>
<p>副垃圾回收器（Scavenger）从新生代中回收垃圾。</p>
<p>在清理时，初始的空闲区域称之为 <code>To-Space</code>，复制对象过来的区域称之为 <code>From-Space</code>；在最坏的情况下，如果每一个对象在清理的时候存活了下来，那我们就要从 <code>From-Space</code> 复制每一个对象到 <code>To-Space</code> 中。</p>
<p>清除步骤（Evacuation）会将所有的活动对象移动到连续的一块内存中，并且标记它们（图中的小圆圈，代表已经经历过一次 GC）；然后会将两块内存空间互换，即把 <code>To-Space</code> 变成 <code>From-Space</code>，<code>From-Space</code> 变成 <code>To-Space</code>。</p>
<figure><img src="https://raw.githubusercontent.com/dribble-njr/typora-njr/master/img/Scavenge-1.svg" alt="Scavenge-1" tabindex="0" loading="lazy"><figcaption>Scavenge-1</figcaption></figure>
<p>如果仅仅是凭借这一策略，我们就会很快的耗尽新生代的内存空间；为了新生代的内存空间不被耗尽，在下一次垃圾回收的时候，我们会把活动对象移动（evacuate）到老生代，而不是 <code>To-Space</code>。</p>
<p>在下图中，两块内存空间已经互换，而且 <code>From-Space</code> 又有一个新的对象，假定这个对象在第一次 GC 时存活了下来，那么它将被复制到 <code>To-Space</code> 中。而 <code>From-Space</code> 中已经经历过一次 GC 的对象（通过这个小圆圈的标记得知），假如它们又存活下来，则会被复制到老生区（<strong>对象晋升策略</strong>）。</p>
<p>Scavenge 的最后一步是把移动后的对象的指针地址更新，每一个被复制对象都会留下一个转发地址（forwarding-address），用于更新指针以指向新的地址。</p>
<figure><img src="https://raw.githubusercontent.com/dribble-njr/typora-njr/master/img/Scavenge-2.svg" alt="Scavenge-2" tabindex="0" loading="lazy"><figcaption>Scavenge-2</figcaption></figure>
<p>在副垃圾回收器回收过程中，实际上执行了三个步骤：标记、清除和指针更新。</p>
<h3>主垃圾回收器 —— 全量标记和整理（Full Mark-Compact）</h3>
<p>主垃圾回收器从整个堆（heap）中收集垃圾。</p>
<figure><img src="https://raw.githubusercontent.com/dribble-njr/typora-njr/master/img/three-phases.svg" alt="three-phases" tabindex="0" loading="lazy"><figcaption>three-phases</figcaption></figure>
<p>标记阶段是利用对象的可达性确定对象是否活跃。从初始的根对象开始，垃圾回收器会跟踪每一个指向其他对象的指针，将其标记为可访问的，同时跟踪对象中每一个属性的指针。整个过程递归进行，直到标记到运行时每一个可访问的对象。</p>
<figure><img src="https://raw.githubusercontent.com/dribble-njr/typora-njr/master/img/marking.png" alt="marking" width="50%" height="50%" tabindex="0" loading="lazy"><figcaption>marking</figcaption></figure>
<p>清除阶段将非活动对象进行清除。</p>
<figure><img src="https://raw.githubusercontent.com/dribble-njr/typora-njr/master/img/sweeping.png" alt="sweeping" width="50%" height="50%" tabindex="0" loading="lazy"><figcaption>sweeping</figcaption></figure>
<p>一般来说，频繁回收对象后，内存中就会存在大量不连续空间，我们把这些不连续的内存空间称为内存碎片。当内存中出现了大量的内存碎片之后，如果需要分配较大连续内存的时候，就有可能出现内存不足的情况。所以最后一步需要整理这些内存碎片，但这步其实是可选的，因为有的垃圾回收器不会产生内存碎片。</p>
<figure><img src="https://raw.githubusercontent.com/dribble-njr/typora-njr/master/img/compaction.png" alt="compaction" width="50%" height="50%" tabindex="0" loading="lazy"><figcaption>compaction</figcaption></figure>
<h2>Orinoco</h2>
<p>Orinoco 是 V8 垃圾回收器项目的代号，它利用最新的和最好的垃圾回收技术来降低主线程挂起的时间， 比如：并行（parallel）垃圾回收，增量（incremental）垃圾回收和并发（concurrent）垃圾回收。</p>
<p>2011 年，V8 从 stop-the-world 标记切换到增量标记。</p>
<p>2018 年，GC 技术又有了一个重大突破，这项技术名为并发标记。在 Chrome 64 和 Node.js v10 中已启用，它将标记时间缩短了 60%~70%。还有并行技术，它将新生代的垃圾回收时间缩短了 20%~50%。</p>
<h3>并行垃圾回收（Parallel）</h3>
<p>并行是主线程和协助线程同时执行同样的工作，但是这仍然是一种 <code>stop-the-world</code> 的垃圾回收方式，但是垃圾回收全停顿时间等于总时间除以参与的线程数量（加上一些同步开销）。</p>
<figure><img src="https://raw.githubusercontent.com/dribble-njr/typora-njr/master/img/parallel.svg" alt="parallel" tabindex="0" loading="lazy"><figcaption>parallel</figcaption></figure>
<h3>增量垃圾回收（Incremental）</h3>
<p>增量式垃圾回收是主线程间歇性的去做少量的垃圾回收的方式。同时让垃圾回收和 JavaScript 应用逻辑交替进行，这意味着堆的状态可能已经发生了变化，有可能会导致之前的增量回收工作完全无效。</p>
<p>从图中可以看出并没有减少主线程暂停的总时间（事实上，通常会略微增加）。通过允许 JavaScript 间歇执行，同时也间歇性地去做垃圾回收工作，应用程序仍然可以在用户输入或者执行动画的时候得到及时的响应。</p>
<figure><img src="https://raw.githubusercontent.com/dribble-njr/typora-njr/master/img/incremental.svg" alt="incremental" tabindex="0" loading="lazy"><figcaption>incremental</figcaption></figure>
<h3>并发垃圾回收（Concurrent）</h3>
<p>并发是主线程持续执行 JavaScript，而辅助线程完全在后台执行垃圾回收。这种方式是这三种技术中最难的一种：JavaScript 堆里面的内容随时都有可能发生变化，从而使之前做的工作完全无效，主线程和辅助线程极有可能在同一时间去更改同一个对象。这种方式的优势也非常明显，主线程不会被挂起，JavaScript 可以自由地执行。</p>
<figure><img src="https://raw.githubusercontent.com/dribble-njr/typora-njr/master/img/concurrent.svg" alt="concurrent" tabindex="0" loading="lazy"><figcaption>concurrent</figcaption></figure>
<h2>总结</h2>
<p>首先介绍了内存管理的一般流程，分为三大步：分配、使用、释放。</p>
<p>然后是 V8 如何分配内存：基本数据类型存放在栈空间，复杂数据类型存放在堆空间，以及为什么要这样做。</p>
<p>接着又介绍了常见的垃圾回收算法，主要包括引用计数法和标记清除法。</p>
<p>最后介绍了 V8 的垃圾回收机制以及做出的优化。</p>
<h2>参考链接</h2>
<ul>
<li><a href="https://v8.dev/blog/trash-talk" target="_blank" rel="noopener noreferrer">Trash talk: the Orinoco garbage collector · V8</a></li>
<li><a href="https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Memory_Management" target="_blank" rel="noopener noreferrer">内存管理 - JavaScript | MDN (mozilla.org)</a></li>
<li><a href="https://time.geekbang.org/column/article/129596" target="_blank" rel="noopener noreferrer">12 | 栈空间和堆空间：数据是如何存储的？</a></li>
<li><a href="https://juejin.cn/post/6844904016325902344" target="_blank" rel="noopener noreferrer">一文搞懂 V8 引擎的垃圾回收</a></li>
<li><a href="https://www.nodejs.red/#/nodejs/memory?id=v8%E5%9E%83%E5%9C%BE%E5%9B%9E%E6%94%B6%E6%9C%BA%E5%88%B6" target="_blank" rel="noopener noreferrer">Memory 内存管理和 V8 垃圾回收机制 (nodejs.red)</a></li>
</ul>
]]></content>
    <category term="browser"/>
    <published>2022-01-13T00:00:00.000Z</published>
  </entry>
  <entry>
    <title type="text">跨域</title>
    <id>https://dribble-njr.github.io/blog/blog/frontend/browser/04-cross-domain.html</id>
    <link href="https://dribble-njr.github.io/blog/blog/frontend/browser/04-cross-domain.html"/>
    <updated>2024-04-15T05:32:00.000Z</updated>
    <summary type="html"><![CDATA[<p>跨域是因为浏览器的同源策略，协议、域名、端口三者不一致即会造成跨域问题。</p>
<h2>CORS</h2>
<p>简单请求和非简单请求</p>
<h3>简单请求</h3>
<p>请求方法：</p>
<ul>
<li>HEAD</li>
<li>GET</li>
<li>POST</li>
</ul>
<p>请求头：</p>
<ul>
<li>Accept</li>
<li>Accept-Language</li>
<li>Content-Language</li>
<li>Last-Event-ID</li>
<li>Content-Type</li>
</ul>
<p>对于简单请求，浏览器会在请求头信息增加一个 origin 字段，该字段用来说明本次请求来自哪个源：协议+端口+域名。</p>]]></summary>
    <content type="html"><![CDATA[<p>跨域是因为浏览器的同源策略，协议、域名、端口三者不一致即会造成跨域问题。</p>
<h2>CORS</h2>
<p>简单请求和非简单请求</p>
<h3>简单请求</h3>
<p>请求方法：</p>
<ul>
<li>HEAD</li>
<li>GET</li>
<li>POST</li>
</ul>
<p>请求头：</p>
<ul>
<li>Accept</li>
<li>Accept-Language</li>
<li>Content-Language</li>
<li>Last-Event-ID</li>
<li>Content-Type</li>
</ul>
<p>对于简单请求，浏览器会在请求头信息增加一个 origin 字段，该字段用来说明本次请求来自哪个源：协议+端口+域名。</p>
<p>服务器根据这个值来决定是否同意这次请求，如果 origin 指定的源在允许范围内，服务器就返回如下响应头：</p>
<div class="language-text" data-ext="text" data-title="text"><pre class="language-text"><code>Access-Control-Allow-Origin: http://api.bob.com 和 origin 一致
Access-Control-Allow-Credentials: true
Access-Control-Expose-Headers: FooBar
Content-Type: text/html; charset=utf-8
</code></pre></div><p>服务器至少设置 Access-Control-Allow-Origin。</p>
<h3>非简单请求</h3>
<p>需要进行 options 预检请求。</p>
<p>请求头</p>
<div class="language-text" data-ext="text" data-title="text"><pre class="language-text"><code>Access-Control-Request-Method 必须
Access-Control-Request-Headers 逗号分隔符，指定请求会额外发送的头信息字段
</code></pre></div><p>响应头：</p>
<div class="language-text" data-ext="text" data-title="text"><pre class="language-text"><code>Access-Control-Allow-Origin: http://api.bob.com 和 origin 一致
Access-Control-Allow-Methods: GET, POST, PUT
Access-Control-Allow-Credentials: true
Access-Control-Allow-Headers: FooBar
Access-Control-Max-Age: 1728000 本次预检的有效期，秒
</code></pre></div>]]></content>
    <category term="browser"/>
    <published>2022-05-06T00:00:00.000Z</published>
  </entry>
  <entry>
    <title type="text">输入 URL 后发生了什么</title>
    <id>https://dribble-njr.github.io/blog/blog/frontend/browser/05-what-happens-after-entering-the-URL.html</id>
    <link href="https://dribble-njr.github.io/blog/blog/frontend/browser/05-what-happens-after-entering-the-URL.html"/>
    <updated>2024-04-15T05:32:00.000Z</updated>
    <summary type="html"><![CDATA[<p>先看看大致流程：</p>
<ol>
<li>生成 HTTP 请求消息：当用户在浏览器中输入网址，浏览器就会对 URL 进行解析；然后浏览器会根据网址的含义来生成请求消息；</li>
<li>向 DNS 服务器查询 Web 服务器的 IP 地址：请求消息生成后，浏览器向 DNS 服务器查询域名对应的 IP 地址，然后委托操作系统（浏览器本身并没有网络通讯的能力）向 Web 服务器发送请求。</li>
<li>委托协议栈发送消息：查询到 IP 地址之后，浏览器就可以将消息委托给操作系统的协议栈（TCP/IP）发送给服务器。</li>
<li>数字信息转换为电信号：通过协议栈将数据变成网络包后，网卡负责将数字信号转换为电信号。</li>
</ol>]]></summary>
    <content type="html"><![CDATA[<p>先看看大致流程：</p>
<ol>
<li>生成 HTTP 请求消息：当用户在浏览器中输入网址，浏览器就会对 URL 进行解析；然后浏览器会根据网址的含义来生成请求消息；</li>
<li>向 DNS 服务器查询 Web 服务器的 IP 地址：请求消息生成后，浏览器向 DNS 服务器查询域名对应的 IP 地址，然后委托操作系统（浏览器本身并没有网络通讯的能力）向 Web 服务器发送请求。</li>
<li>委托协议栈发送消息：查询到 IP 地址之后，浏览器就可以将消息委托给操作系统的协议栈（TCP/IP）发送给服务器。</li>
<li>数字信息转换为电信号：通过协议栈将数据变成网络包后，网卡负责将数字信号转换为电信号。</li>
</ol>
<h2>生成 HTTP 请求消息</h2>
<p>浏览器要做的第一步工作就是对 URL 进行解析，从而生成发送给 Web 服务器的请求消息。</p>
<img src="/assets/image/computer-science/networking/010/parse-url.png" alt="Web浏览器解析URL" style="zoom:60%;">
<h3>省略文件名的情况</h3>
<ol>
<li>
<p><a href="http://www.lab.glasscom.com/dir/" target="_blank" rel="noopener noreferrer">http://www.lab.glasscom.com/dir/</a></p>
<p>以 <code>/</code> 结尾代表访问默认文件，大多数情况下是 <code>index.html</code> 或者 <code>default.htm</code> 之类的文件。</p>
</li>
<li>
<p><a href="http://www.lab.glasscom.com" target="_blank" rel="noopener noreferrer">http://www.lab.glasscom.com</a></p>
<p>省略结尾的 <code>/</code> 符，代表访问服务器根目录下的默认文件，也就是 <code>index.html</code> 或者 <code>default.htm</code>。</p>
</li>
<li>
<p><a href="http://www.lab.glasscom.com/whatisthis" target="_blank" rel="noopener noreferrer">http://www.lab.glasscom.com/whatisthis</a></p>
<p>如果 Web 服务器上存在名 whatisthis 的文件，则作为文件名来处理；如果存在名为 whatisthis 的目录，则作为目录名来处。</p>
</li>
</ol>
<h3>生成请求消息</h3>
<p>对 URL 进行解析之后，浏览器确定了 Web 服务器和文件名，接下来就是根据这些信息来生成 HTTP 请求消息了。</p>
<img src="/assets/image/computer-science/networking/010/message.png" alt="消息格式" style="zoom:60%;">
<h2>向 DNS 服务器查询域名 IP 地址</h2>
<p>浏览器解析完 URL 并生成请求消息后，需要委托操作系统向服务器发送请求消息。</p>
<p>但是在这之前，还需要知道服务器域名对应的 IP 地址。因此需要使用 DNS 服务器查询 IP 地址。</p>
<p>DNS 服务器保存了域名和 IP 的对应关系。</p>
<p>域名中用 <code>.</code> 来分隔，比如 <code>www.lab.glasscom.com.</code>，越往右层级越高，最后的一个点代表根域名，一般可以省略。</p>
<p>根域的服务器信息保存在互联网中的所有 DNS 服务器中，这样任意一台服务器都可以找到并访问根服务器，从而找到其它服务器。</p>
<figure><img src="/assets/image/computer-science/networking/010/DNS.png" alt="DNS" tabindex="0" loading="lazy"><figcaption>DNS</figcaption></figure>
<h2>协议栈</h2>
<p>通过 DNS 获取到服务器的 IP 地址后，浏览器就可以通过 socket 库把 HTTP 报文的传输工作委托给操作系统中的<strong>协议栈</strong>。</p>
<figure><img src="/assets/image/computer-science/networking/010/TCP-IP.png" alt="客户端" tabindex="0" loading="lazy"><figcaption>客户端</figcaption></figure>
<p>其中应用程序当然为应用层，协议栈中的 TCP/UDP 为传输层，他们会接收应用程序的委托执行收发数据的操作。</p>
<blockquote>
<p>像浏览器、邮件等一般的应用程序都是使用 TCP 收发数据的，而像 DNS 查询等收发较短的控制数据的时候则使用 UDP。</p>
</blockquote>
<p>在传送数据时，数据会切分成一个个网络包，而 IP 协议为网络层，负责控制网络包的发给通信对象。</p>
<p>IP 中还包括 ICMP 协议和 ARP 协议。ICMP 用于告知网络包传输过程中产生的错误及各种控制消息，ARP 用于根据 IP 地址查询相应的 MAC 地址。</p>
<h2>网卡</h2>
]]></content>
    <category term="browser"/>
    <published>2021-12-11T00:00:00.000Z</published>
  </entry>
  <entry>
    <title type="text">判断数据类型</title>
    <id>https://dribble-njr.github.io/blog/blog/frontend/basic/javascript/003-judge-type.html</id>
    <link href="https://dribble-njr.github.io/blog/blog/frontend/basic/javascript/003-judge-type.html"/>
    <updated>2024-04-14T15:32:30.000Z</updated>
    <summary type="html"><![CDATA[<p><code>ECMAScript</code> 有 8 种基本的数据类型（ 7 种原始类型和 1 种引用类型）。</p>
<ul>
<li>原始类型：<code>Undefined</code>、<code>Null</code>、<code>Boolean</code>、<code>Number</code>、<code>String</code>、<code>Symbol</code>、<code>BigInt</code>；</li>
<li>引用类型：<code>Object</code>。</li>
</ul>
<p>下面介绍几种判断变量数据类型的几种方法。</p>
<h2><code>typeof</code></h2>]]></summary>
    <content type="html"><![CDATA[<p><code>ECMAScript</code> 有 8 种基本的数据类型（ 7 种原始类型和 1 种引用类型）。</p>
<ul>
<li>原始类型：<code>Undefined</code>、<code>Null</code>、<code>Boolean</code>、<code>Number</code>、<code>String</code>、<code>Symbol</code>、<code>BigInt</code>；</li>
<li>引用类型：<code>Object</code>。</li>
</ul>
<p>下面介绍几种判断变量数据类型的几种方法。</p>
<h2><code>typeof</code></h2>
<p>用来返回操作数类型的字符串。语法：</p>
<div class="language-javascript" data-ext="js" data-title="js"><pre class="language-javascript"><code><span class="token keyword">typeof</span> operand
</code></pre></div><p>但是由于 JavaScript 设计的缺陷，<code>typeof</code> 基本上不能得到想要的结果。它只有一个实际应用场景：<strong>检测一个对象是否已经定义或者是否已经赋值</strong>。</p>
<p>特点：</p>
<ul>
<li>对于基本类型，除 <code>null</code> 外，均可以返回正确结果；</li>
<li>对于引用类型，除 <code>function</code> 外，一律返回 <code>"object"</code>；</li>
<li>对于 <code>null</code>，返回 <code>"object"</code> 类型；</li>
<li>对于 <code>function</code>，返回 <code>"function"</code>；</li>
<li>对于 <code>array</code>, 返回 <code>"object"</code>。</li>
</ul>
<div class="language-javascript" data-ext="js" data-title="js"><pre class="language-javascript"><code><span class="token keyword">const</span> <span class="token function-variable function">fn</span> <span class="token operator">=</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token punctuation">}</span>

<span class="token keyword">typeof</span> <span class="token keyword">null</span> <span class="token comment">// "object"，得不到想要的值</span>
<span class="token keyword">typeof</span> fn <span class="token comment">// "function"</span>
</code></pre></div><p>总之，数组、对象、<code>null</code> 都会返回 <code>object</code>，其他都能判断正确。</p>
<div class="hint-container tip">
<p class="hint-container-title">为什么 `typeof null` 返回 `object`</p>
<p>由于 JavaScript 第一个版本中，所有值都存在 32 位单元中，每个单元包含一个小的类型标签以及存储的真实值，<code>object</code> 的类型标签是 <code>000</code>，而 <code>null</code> 的类型标签也是 <code>000</code>，因此使用 <code>typeof</code> 判断 <code>null</code> 会被判定为 <code>object</code>。</p>
<ul>
<li><code>000</code>：对象；</li>
<li><code>001</code>: 整数；</li>
<li><code>010</code>：浮点数；</li>
<li><code>100</code>：字符串；</li>
<li><code>110</code>：布尔。</li>
</ul>
</div>
<h2><code>instanceof</code></h2>
<p>用来检测构造函数的 <code>prototype</code> 属性是否出现在某个实例对象的原型链上，返回布尔值。语法：</p>
<div class="language-javascript" data-ext="js" data-title="js"><pre class="language-javascript"><code>object <span class="token keyword">instanceof</span> <span class="token class-name">constructor</span>
</code></pre></div><p>特点：</p>
<ul>
<li>对于 <strong>字面量声明</strong> 的 <code>Number</code>、<code>BigInt</code>、<code>String</code>、<code>Boolean</code>、<code>Symbol</code> 都会返回 <code>false</code>；</li>
<li><strong>只能正确判断引用数据类型</strong>；</li>
<li>只要在当前实例的原型链上，检测结果均为 <code>true</code>；</li>
</ul>
<p>原理：遍历实例对象的原型链 <code>__proto__</code>，直到找到构造函数的 <code>prototype</code> 属性。</p>
<div class="hint-container tip">
<p class="hint-container-title">提示</p>
<p>不同环境对 <code>__proto__</code> 的实现不同，而且 Web 标准已经删除该特性，这里只是为了表示方便，开发中需要使用 <code>Object.getPrototypeOf()</code> 获取原型对象。</p>
</div>
<div class="language-javascript" data-ext="js" data-title="js"><pre class="language-javascript"><code><span class="token keyword">function</span> <span class="token function">myInstanceOf</span><span class="token punctuation">(</span><span class="token parameter">left<span class="token punctuation">,</span> right</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token comment">// 在 ES5 中，如果 Object.getPrototypeOf 参数不是一个对象类型</span>
  <span class="token comment">// 将抛出一个TypeError异常。在 ES2015 中，参数会被强制转换为一个 Object。</span>
  <span class="token comment">// 因此需提前判断是否为引用类型</span>
  <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token keyword">typeof</span> left <span class="token operator">!==</span> <span class="token string">'object'</span> <span class="token operator">||</span> left <span class="token operator">===</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token keyword">return</span> <span class="token boolean">false</span>

  <span class="token comment">// right 必须是函数，函数才有 prototype</span>
  <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token keyword">typeof</span> constructor <span class="token operator">!==</span> <span class="token string">'function'</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">Error</span><span class="token punctuation">(</span><span class="token string">'The "constructor" parameter must be a function.'</span><span class="token punctuation">)</span>
  <span class="token punctuation">}</span>

  <span class="token comment">// 获取实例对象的原型</span>
  <span class="token keyword">let</span> proto <span class="token operator">=</span> Object<span class="token punctuation">.</span><span class="token function">getPrototypeOf</span><span class="token punctuation">(</span>left<span class="token punctuation">)</span>

  <span class="token keyword">while</span> <span class="token punctuation">(</span><span class="token boolean">true</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span>proto <span class="token operator">===</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token keyword">return</span> <span class="token boolean">false</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span>proto <span class="token operator">===</span> right<span class="token punctuation">.</span>prototype<span class="token punctuation">)</span> <span class="token keyword">return</span> <span class="token boolean">true</span>
    proto <span class="token operator">=</span> Object<span class="token punctuation">.</span><span class="token function">getPrototypeOf</span><span class="token punctuation">(</span>proto<span class="token punctuation">)</span>
  <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre></div><h2>简单实现</h2>
<p>如果只需要准确判断六种基本数据类型，同时又能够准确区分数据类型是 <code>null</code>、<code>array</code>、还是 <code>object</code> 就足够的话，那么我们可以这样实现：</p>
<div class="language-javascript" data-ext="js" data-title="js"><pre class="language-javascript"><code><span class="token keyword">const</span> <span class="token function-variable function">superTypeof</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token parameter">val</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
  <span class="token keyword">let</span> res <span class="token operator">=</span> <span class="token keyword">typeof</span> val

  <span class="token keyword">if</span> <span class="token punctuation">(</span>res <span class="token operator">===</span> <span class="token string">'object'</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span>val <span class="token operator">===</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
      res <span class="token operator">=</span> <span class="token string">'null'</span>
    <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>Array<span class="token punctuation">.</span><span class="token function">isArray</span><span class="token punctuation">(</span>val<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
      res <span class="token operator">=</span> <span class="token string">'array'</span>
    <span class="token punctuation">}</span>
  <span class="token punctuation">}</span>

  <span class="token keyword">return</span> res
<span class="token punctuation">}</span>
</code></pre></div><h2><code>Object.prototype.toString.call(obj)</code></h2>
<p>当 <code>Array.isArray()</code> 不可用时，有如下的补丁，因此更推荐使用 <code>Object.prototype.toString.call(obj)</code> 检测数据类型。</p>
<div class="language-javascript" data-ext="js" data-title="js"><pre class="language-javascript"><code><span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>Array<span class="token punctuation">.</span>isArray<span class="token punctuation">)</span> <span class="token punctuation">{</span>
  Array<span class="token punctuation">.</span><span class="token function-variable function">isArray</span> <span class="token operator">=</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token parameter">arg</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">return</span> <span class="token class-name">Object</span><span class="token punctuation">.</span>prototype<span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">.</span><span class="token function">call</span><span class="token punctuation">(</span>arg<span class="token punctuation">)</span> <span class="token operator">===</span> <span class="token string">'[Object Array]'</span>
  <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre></div><p>如果需要判断所有类型，那么可以调用对象原型中的 <code>toString()</code> 方法，<code>Object.prototype.toString.call(obj)</code>：</p>
<div class="language-javascript" data-ext="js" data-title="js"><pre class="language-javascript"><code><span class="token keyword">function</span> <span class="token function">_getClass</span><span class="token punctuation">(</span><span class="token parameter">obj</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token keyword">if</span> <span class="token punctuation">(</span>obj <span class="token operator">===</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token keyword">return</span> <span class="token string">'null'</span>
  <span class="token keyword">return</span> <span class="token class-name">Object</span><span class="token punctuation">.</span>prototype<span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">.</span><span class="token function">call</span><span class="token punctuation">(</span>obj<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">slice</span><span class="token punctuation">(</span><span class="token number">8</span><span class="token punctuation">,</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span>
<span class="token punctuation">}</span>
</code></pre></div>]]></content>
    <category term="JavaScript"/>
    <published>2022-05-02T00:00:00.000Z</published>
  </entry>
  <entry>
    <title type="text">数据类型</title>
    <id>https://dribble-njr.github.io/blog/blog/frontend/basic/javascript/002-types.html</id>
    <link href="https://dribble-njr.github.io/blog/blog/frontend/basic/javascript/002-types.html"/>
    <updated>2024-04-15T05:32:00.000Z</updated>
    <summary type="html"><![CDATA[<p>ECMAScript 有 7 种简单数据类型（也称为原始类型）：<code>Undefined</code>、<code>Null</code>、<code>Boolean</code>、<code>Number</code>、<code>String</code>、<code>Symbol</code> 和 <code>BigInt</code>。</p>
<p><code>Symbol</code>（符号）是 ES6 新增的，<code>BigInt</code> 是 ES10 新增。</p>
<p>还有一种复杂数据类型叫 <code>Object</code>（对象）。<code>Object</code> 是一种 <strong>无序</strong> 键值对的集合。</p>]]></summary>
    <content type="html"><![CDATA[<p>ECMAScript 有 7 种简单数据类型（也称为原始类型）：<code>Undefined</code>、<code>Null</code>、<code>Boolean</code>、<code>Number</code>、<code>String</code>、<code>Symbol</code> 和 <code>BigInt</code>。</p>
<p><code>Symbol</code>（符号）是 ES6 新增的，<code>BigInt</code> 是 ES10 新增。</p>
<p>还有一种复杂数据类型叫 <code>Object</code>（对象）。<code>Object</code> 是一种 <strong>无序</strong> 键值对的集合。</p>
<p>不同的数据存放在不同的空间中：</p>
<ul>
<li>栈空间：JavaScript 对于 <strong>基本数据类型</strong> 内存的分配会在执行时直接在栈空间进行分配；</li>
<li>堆空间：JavaScript 对于 <strong>复杂数据类型</strong> 内存的分配会在堆内存中开辟一块空间，并且将这块空间的指针（地址）返回给变量引用（存放在栈空间）。</li>
</ul>
<p>这么做的原因是  需要用栈来维护程序执行期间上下文的状态，如果栈空间分配的内存过大，那么会影响到上下文切换的效率，从而导致代码执行速度过慢。</p>
<p>因此，栈空间不会设置太大，主要用来存放基本数据类型（占用空间小），而像复杂数据类型，因为他们的占用空间一般较大，因此会被存放在堆空间中。</p>
<h2><code>Undefined</code></h2>
<p>该类型只有一个值，即 <code>undefined</code>，当时用 <code>var</code>、<code>let</code> 没有初始化时，就相当于给变量赋值为了 <code>undefined</code>。</p>
<h2><code>Null</code></h2>
<p>该类型同样只有一个值 <code>null</code>，表示一个空对象指针，因此使用 <code>typeof</code> 操作符判断会返回 <code>object</code>。</p>
<div class="language-javascript" data-ext="js" data-title="js"><pre class="language-javascript"><code><span class="token keyword">let</span> car <span class="token operator">=</span> <span class="token keyword">null</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>car<span class="token punctuation">)</span> <span class="token comment">// 'object'</span>
</code></pre></div><p>在定义将来要保存对象值的变量时，建议使用 <code>null</code> 来初始化，不要使用其他值（如 <code>undefined</code>）。</p>
<p>这样，只要检查这个变量的值是不是 <code>null</code> 就可以知道这个变量是否在后来被重新赋予了一个对象的引用，比如：</p>
<div class="language-javascript" data-ext="js" data-title="js"><pre class="language-javascript"><code><span class="token keyword">if</span> <span class="token punctuation">(</span>car <span class="token operator">!==</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token comment">// car 是一个对象的引用</span>
<span class="token punctuation">}</span>
</code></pre></div><h2><code>Boolean</code></h2>
<p>布尔类型有两个字面值：<code>true</code> 和 <code>false</code>。</p>
<p>虽然布尔值只有两个，但所有其他 ECMAScript 类型的值都有相应布尔值的等价形式。要将一个其他类型的值转换为布尔值，可以调用特定的 <code>Boolean()</code> 转型函数：</p>
<div class="language-javascript" data-ext="js" data-title="js"><pre class="language-javascript"><code><span class="token keyword">let</span> message <span class="token operator">=</span> <span class="token string">'Hello world!'</span>
<span class="token keyword">let</span> messageAsBoolean <span class="token operator">=</span> <span class="token function">Boolean</span><span class="token punctuation">(</span>message<span class="token punctuation">)</span>
</code></pre></div><p>转换规则如下：</p>
<p>| 数据类型  | 转换为 <code>true</code> 的值     | 转换为 <code>false</code> 的值 |<br>
|</p>
]]></content>
    <category term="JavaScript"/>
    <published>2024-04-14T00:00:00.000Z</published>
  </entry>
  <entry>
    <title type="text">var、let、const 区别</title>
    <id>https://dribble-njr.github.io/blog/blog/frontend/basic/javascript/001-var-let-const.html</id>
    <link href="https://dribble-njr.github.io/blog/blog/frontend/basic/javascript/001-var-let-const.html"/>
    <updated>2024-04-16T04:38:18.000Z</updated>
    <summary type="html"><![CDATA[<p>首先，三者都是 JavaScript 声明变量的方式。区别在于：</p>
<table>
<thead>
<tr>
<th></th>
<th>var</th>
<th>let</th>
<th>const</th>
</tr>
</thead>
<tbody>
<tr>
<td><strong>作用域</strong></td>
<td>全局作用域和函数作用域</td>
<td>块级作用域</td>
<td>块级作用域</td>
</tr>
<tr>
<td><strong>变量提升</strong></td>
<td>自动提升到作用域顶部</td>
<td>提升，暂时性死区</td>
<td>提升，暂时性死区</td>
</tr>
<tr>
<td><strong>冗余声明</strong></td>
<td>允许冗余声明</td>
<td>不允许</td>
<td>不允许</td>
</tr>
<tr>
<td><strong>赋值</strong></td>
<td>可以重新赋值，且不需初始化</td>
<td>可以重新赋值，且不需初始化</td>
<td>不可以重新赋值，必须初始化</td>
</tr>
<tr>
<td><strong>全局声明</strong></td>
<td>成为 <code>window</code> 对象的属性</td>
<td>不会</td>
<td>不会</td>
</tr>
</tbody>
</table>]]></summary>
    <content type="html"><![CDATA[<p>首先，三者都是 JavaScript 声明变量的方式。区别在于：</p>
<p>|              | var                        | let                        | const                      |<br>
|</p>
]]></content>
    <category term="JavaScript"/>
    <published>2022-05-02T00:00:00.000Z</published>
  </entry>
  <entry>
    <title type="text">placeholder 支持换行展示</title>
    <id>https://dribble-njr.github.io/blog/blog/frontend/practice/010-antd-textarea-placeholder-pre-line.html</id>
    <link href="https://dribble-njr.github.io/blog/blog/frontend/practice/010-antd-textarea-placeholder-pre-line.html"/>
    <updated>2024-04-08T10:29:30.000Z</updated>
    <summary type="html"><![CDATA[<p><code>placeholder</code> 内容有时需要支持换行，查了网上一些例子，结果都无法实现。</p>
<h2>错误 demo</h2>
<h3>直接使用 <code>\n</code></h3>
<p>会被当成字符渲染。</p>
<div class="language-jsx" data-ext="jsx" data-title="jsx"><pre class="language-jsx"><code><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span><span class="token class-name">Input.TextArea</span></span>
  <span class="token attr-name">rows</span><span class="token script language-javascript"><span class="token script-punctuation punctuation">=</span><span class="token punctuation">{</span><span class="token number">5</span><span class="token punctuation">}</span></span>
  <span class="token attr-name">placeholder</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>多个关键词请使用逗号分隔\nShift+Enter换行，Enter搜索<span class="token punctuation">"</span></span>
<span class="token punctuation">/&gt;</span></span>
</code></pre></div>]]></summary>
    <content type="html"><![CDATA[<p><code>placeholder</code> 内容有时需要支持换行，查了网上一些例子，结果都无法实现。</p>
<h2>错误 demo</h2>
<h3>直接使用 <code>\n</code></h3>
<p>会被当成字符渲染。</p>
<div class="language-jsx" data-ext="jsx" data-title="jsx"><pre class="language-jsx"><code><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span><span class="token class-name">Input.TextArea</span></span>
  <span class="token attr-name">rows</span><span class="token script language-javascript"><span class="token script-punctuation punctuation">=</span><span class="token punctuation">{</span><span class="token number">5</span><span class="token punctuation">}</span></span>
  <span class="token attr-name">placeholder</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>多个关键词请使用逗号分隔\nShift+Enter换行，Enter搜索<span class="token punctuation">"</span></span>
<span class="token punctuation">/&gt;</span></span>
</code></pre></div><figure><img src="https://raw.githubusercontent.com/dribble-njr/typora-njr/master/img/20240408181616.png" alt="直接使用 " tabindex="0" loading="lazy"><figcaption>直接使用 <code>\n</code></figcaption></figure>
<h3>使用 ASCII 码</h3>
<p>若使用 <code>ASCII</code> 码会被处理成空格。</p>
<ul>
<li><code>&amp;#10;</code>——换行符 <code>\n</code></li>
<li><code>&amp;#13;</code>——回车 <code>\r</code></li>
</ul>
<div class="language-jsx" data-ext="jsx" data-title="jsx"><pre class="language-jsx"><code><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span><span class="token class-name">Input.TextArea</span></span>
  <span class="token attr-name">rows</span><span class="token script language-javascript"><span class="token script-punctuation punctuation">=</span><span class="token punctuation">{</span><span class="token number">5</span><span class="token punctuation">}</span></span>
  <span class="token attr-name">placeholder</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>多个关键词请使用逗号分隔<span class="token entity" title="">&amp;#13;</span>Shift+Enter换行，Enter搜索<span class="token punctuation">"</span></span>
<span class="token punctuation">/&gt;</span></span>
</code></pre></div><figure><img src="https://raw.githubusercontent.com/dribble-njr/typora-njr/master/img/20240408182209.png" alt="使用 ASCII 码" tabindex="0" loading="lazy"><figcaption>使用 ASCII 码</figcaption></figure>
<h2>正确做法 —— 使用 JSX</h2>
<p>此时应该使用 <code>\n</code> 实现换行。</p>
<div class="hint-container tip">
<p class="hint-container-title">提示</p>
<p>在 JSX 中，要在字符串中插入 ASCII 字符，你需要直接使用对应的字符或者使用其 Unicode 表示方式，因为 HTML entities 在 JSX 中不会被解析。</p>
</div>
<div class="language-jsx" data-ext="jsx" data-title="jsx"><pre class="language-jsx"><code><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span><span class="token class-name">Input.TextArea</span></span>
  <span class="token attr-name">rows</span><span class="token script language-javascript"><span class="token script-punctuation punctuation">=</span><span class="token punctuation">{</span><span class="token number">5</span><span class="token punctuation">}</span></span>
  <span class="token attr-name">placeholder</span><span class="token script language-javascript"><span class="token script-punctuation punctuation">=</span><span class="token punctuation">{</span><span class="token template-string"><span class="token template-punctuation string">`</span><span class="token string">多个关键词请使用逗号分隔\nShift+Enter换行，Enter搜索</span><span class="token template-punctuation string">`</span></span><span class="token punctuation">}</span></span>
<span class="token punctuation">/&gt;</span></span>
</code></pre></div><figure><img src="https://raw.githubusercontent.com/dribble-njr/typora-njr/master/img/20240408182716.png" alt="JSX" tabindex="0" loading="lazy"><figcaption>JSX</figcaption></figure>
]]></content>
    <category term="practice"/>
    <published>2024-04-08T00:00:00.000Z</published>
  </entry>
  <entry>
    <title type="text">务实的偏执</title>
    <id>https://dribble-njr.github.io/blog/blog/reading/pragmatic-programmer/04-pragmatic-paranoid.html</id>
    <link href="https://dribble-njr.github.io/blog/blog/reading/pragmatic-programmer/04-pragmatic-paranoid.html"/>
    <updated>2024-04-08T09:07:59.000Z</updated>
    <summary type="html"><![CDATA[<h2>契约式设计</h2>
<p>文档化及对主张进行检验是契约式设计（缩写为 DBC）的核心。</p>
<div class="hint-container tip">
<p class="hint-container-title">提示</p>
<p>前置条件</p>
<p>为调用这个例程，必须为真的是什么？例程的需求。一个例程永远不应该在前置条件被违反的时候被调用。传递良好的数据是调用者的责任。</p>
<p>后置条件</p>
<p>例程保证要做的是什么？例程完成时世界的状态。例程有后置条件这个事实，意味着能得出这样的结论——不允许无限循环。</p>
<p>类的不变式</p>
<p>从调用者的角度来看，类会确保该条件始终为真。在例程的内部处理期间，可以不遵守不变式，但是当例程退出并将控制权返回给调用者时，不变式必须为真。（注意，一个类不能给参与不变式的任何数据成员不受限制的写访问权限。）</p>
</div>]]></summary>
    <content type="html"><![CDATA[<h2>契约式设计</h2>
<p>文档化及对主张进行检验是契约式设计（缩写为 DBC）的核心。</p>
<div class="hint-container tip">
<p class="hint-container-title">提示</p>
<p>前置条件</p>
<p>为调用这个例程，必须为真的是什么？例程的需求。一个例程永远不应该在前置条件被违反的时候被调用。传递良好的数据是调用者的责任。</p>
<p>后置条件</p>
<p>例程保证要做的是什么？例程完成时世界的状态。例程有后置条件这个事实，意味着能得出这样的结论——不允许无限循环。</p>
<p>类的不变式</p>
<p>从调用者的角度来看，类会确保该条件始终为真。在例程的内部处理期间，可以不遵守不变式，但是当例程退出并将控制权返回给调用者时，不变式必须为真。（注意，一个类不能给参与不变式的任何数据成员不受限制的写访问权限。）</p>
</div>
<h2>通过契约进行设计</h2>
<p>如果你订的契约是可以接受任何东西，并且承诺要回报整个世界，那么你就有很多代码要写！</p>
<div class="hint-container tip">
<p class="hint-container-title">提示</p>
<p>是不是这就是需要解耦？</p>
</div>
]]></content>
    <category term="READING"/>
    <published>2024-04-08T00:00:00.000Z</published>
  </entry>
  <entry>
    <title type="text">SEO</title>
    <id>https://dribble-njr.github.io/blog/blog/frontend/basic/html/013-seo.html</id>
    <link href="https://dribble-njr.github.io/blog/blog/frontend/basic/html/013-seo.html"/>
    <updated>2024-03-24T12:23:26.000Z</updated>
    <summary type="html"><![CDATA[<h2>什么是 SEO</h2>
<p>SEO（Search Engine Optimization，搜索引擎优化）。这是一套指导原则，旨在使网站在搜索结果中的排名高于其他网站。特别是针对有机（未付费）搜索结果。</p>
<div class="hint-container tip">
<p class="hint-container-title">提示</p>
<p>谷歌是迄今为止全球最主要的搜索引擎。作为行业领导者，谷歌为其他搜索引擎定下了基调。</p>
</div>
<h2>过去</h2>
<p>在 2000 年代，搜索引擎优化意味着通过一系列肮脏的手段来提高网站在谷歌上的排名。</p>]]></summary>
    <content type="html"><![CDATA[<h2>什么是 SEO</h2>
<p>SEO（Search Engine Optimization，搜索引擎优化）。这是一套指导原则，旨在使网站在搜索结果中的排名高于其他网站。特别是针对有机（未付费）搜索结果。</p>
<div class="hint-container tip">
<p class="hint-container-title">提示</p>
<p>谷歌是迄今为止全球最主要的搜索引擎。作为行业领导者，谷歌为其他搜索引擎定下了基调。</p>
</div>
<h2>过去</h2>
<p>在 2000 年代，搜索引擎优化意味着通过一系列肮脏的手段来提高网站在谷歌上的排名。</p>
<p>例如，人们在网页底部放置大量关键词列表。有时，他们还会将关键词重复 1000 次，并将其放在白色区域或隐形 <code>div</code> 内。谷歌被欺骗了，从而提高了他们的排名。</p>
<p>这种时代已经一去不复返了。谷歌聘请了世界上最优秀的人才，确保用户只能搜索到最有用的网页。</p>
<p>上述漏洞以及更多漏洞在 <a href="https://support.google.com/webmasters/topic/6001971" target="_blank" rel="noopener noreferrer">谷歌质量指南</a> 中都有详细说明。</p>
<p>如果您的产品出于某种原因包含任何违反这些指南的内容，即使它们是不小心出现的，我也强烈建议将其删除，因为谷歌现在会对违反指南的网站进行惩罚。</p>
<h2>搜索引擎优化</h2>
<p>谷歌的排名算法非常复杂。谷歌的专家多年来一直在研究这些算法。如今，谷歌每天都会进行更新，更大的更新每年发布一到两次。</p>
<p>有关 Google 如何对网页进行排名的信息一直在发布，有时还会有额外的信息泄露。一些网站试图跟踪这些更新，了解更新对搜索引擎优化的影响。</p>
<p>对于开发人员来说，许多工具都可以抓取网站，并生成一份可以改进的网站技术方面的清单。例如，如果你没有使用正确的标题或状态代码。以下是其中几种工具：</p>
<ul>
<li><a href="https://www.checkbot.io/" target="_blank" rel="noopener noreferrer">checkbot</a></li>
<li><a href="https://seositecheckup.com/" target="_blank" rel="noopener noreferrer">SEO Site Checkup</a></li>
<li><a href="https://www.woorank.com/" target="_blank" rel="noopener noreferrer">woorank</a></li>
<li><a href="https://suite.seotesteronline.com/" target="_blank" rel="noopener noreferrer">SEO Tester Online</a></li>
<li><a href="https://freetools.seobility.net/" target="_blank" rel="noopener noreferrer">seobility</a></li>
<li><a href="https://www.screamingfrog.co.uk/seo-spider/" target="_blank" rel="noopener noreferrer">screamingfrog</a></li>
<li><a href="https://gtmetrix.com/" target="_blank" rel="noopener noreferrer">GTmetrix</a></li>
</ul>
<h2>最佳实践</h2>
<p>作为开发人员，应该考虑：快速，可访问性，使用正确的语义 <code>html</code> 标签，包括正确的结构化数据，移动友好，使用 <code>https</code>， <code>url</code> 清晰，等等。</p>
<p><a href="https://developers.google.com/search/docs/fundamentals/seo-starter-guide?visit_id=638468790764088645-267844796&amp;rd=1&amp;hl=zh-cn" target="_blank" rel="noopener noreferrer">谷歌 SEO 指南</a> 有详细介绍，下面是一些较为重要的最佳实践。</p>
<ul>
<li><code>&lt;title&gt;</code> 和 <code>&lt;meta name="description"&gt;</code> 是控制网页在 Google 结果页面上显示方式的标签。</li>
<li>HTML 标签（如标题标签 <code>h1</code>、<code>h2</code>）和 HTML 属性（如 <code>&lt;img&gt;</code> 标签上的 <code>alt</code> 属性）可帮助创建网页结构，以便爬虫更好地解读内容。</li>
<li>结构化数据将网页中的信息，如排名、位置、营业时间和价格等，显示在谷歌搜索页面上。搜索页面上出现的信息越多，网页被点击的几率就越高。</li>
<li>使网站对移动设备友好。</li>
<li>使用 HTTPS 协议。</li>
<li>让残疾人也能访问您的网站。这样不仅能让更多人访问你的网站，谷歌也会给你更高的排名。</li>
<li>使用合理且有意义的网站分层。<code>example.com/RunningShoes/Womens</code>而不是 <code>example.com/123123/123123</code></li>
<li>注意你的 <code>&lt;a href&gt;</code> 链接
<ul>
<li>每个链接都必须包含有意义的文本。</li>
<li>使用 <code>&lt;a&gt;</code> 标签上的额外属性告诉谷歌你的外部网站链接的性质。例如，<code>rel="nofollow"</code> 用于让谷歌知道你与链接的网站没有关联。</li>
<li>确保您希望谷歌抓取的每个页面都通过 <code>&lt;a href&gt;</code> 从主页链接（可能通过多个链接）。</li>
</ul>
</li>
<li>确保不同版本之间的内容不重复，以免相互竞争：
<ul>
<li>如果您对网站进行了结构调整，请使用 301 重定向，这样两个版本就不会被分别收录，也不会相互竞争。</li>
<li>坚持使用一个版本的网站链接：</li>
<li>使用 <code>&lt;meta rel="canonical"&gt;</code> 标签来表示不同的页面和 URL 包含相同的内容。</li>
</ul>
</li>
<li>本地化——使用 <code>hreflang meta</code> 标签告诉谷歌一个网页在不同语言中有不同的版本。</li>
<li>提高网站速度，在 <a href="https://pagespeed.web.dev/?utm_source=psi&amp;utm_medium=redirect" target="_blank" rel="noopener noreferrer">Google PageSpeed Insights</a> 上获得高分。</li>
</ul>
<div class="hint-container tip">
<p class="hint-container-title">提示</p>
<p>网站响应速度会影响搜索引擎排名，这一部分涉及到性能优化。</p>
</div>
]]></content>
    <category term="HTML"/>
    <published>2024-03-24T00:00:00.000Z</published>
  </entry>
  <entry>
    <title type="text">表单数据校验</title>
    <id>https://dribble-njr.github.io/blog/blog/frontend/basic/html/012-form-validation.html</id>
    <link href="https://dribble-njr.github.io/blog/blog/frontend/basic/html/012-form-validation.html"/>
    <updated>2024-03-24T07:43:55.000Z</updated>
    <summary type="html"><![CDATA[<p>表单校验帮助我们确保用户以正确格式填写表单数据，确保提交的数据能使我们的应用程序正常工作。</p>
<h2>什么是表单数据校验</h2>
<p>表单校验——验证你输入表单的数据是否正确。</p>
<ul>
<li>该字段是必填的</li>
<li>请输入你的电话号码，它的格式是：xxx-xxxx</li>
<li>请输入一个合法的邮箱地址</li>
<li>你的密码长度应该是 8 至 30 位的，并且至少应该包含一个大写字母、一个符号以及一个数字</li>
</ul>
<h2>不同类型的表单数据校验</h2>
<p>在 Web 中，你可能会遇见各种不同的表单校验：</p>
<ul>
<li>「客户端校验」：这种类型的校验可以进一步细分成下面这些方式：
<ul>
<li>JavaScript 校验，这是可以完全自定义的实现方式；</li>
<li>HTML5 内置校验，这不需要 JavaScript，而且性能更好，但是不能像 JavaScript 那样可自定义。</li>
</ul>
</li>
<li>「服务器端校验」：通常服务器端校验都是发生在将数据写入数据库之前，如果数据没通过校验，则会直接从服务器端返回错误消息。</li>
</ul>]]></summary>
    <content type="html"><![CDATA[<p>表单校验帮助我们确保用户以正确格式填写表单数据，确保提交的数据能使我们的应用程序正常工作。</p>
<h2>什么是表单数据校验</h2>
<p>表单校验——验证你输入表单的数据是否正确。</p>
<ul>
<li>该字段是必填的</li>
<li>请输入你的电话号码，它的格式是：xxx-xxxx</li>
<li>请输入一个合法的邮箱地址</li>
<li>你的密码长度应该是 8 至 30 位的，并且至少应该包含一个大写字母、一个符号以及一个数字</li>
</ul>
<h2>不同类型的表单数据校验</h2>
<p>在 Web 中，你可能会遇见各种不同的表单校验：</p>
<ul>
<li>「客户端校验」：这种类型的校验可以进一步细分成下面这些方式：
<ul>
<li>JavaScript 校验，这是可以完全自定义的实现方式；</li>
<li>HTML5 内置校验，这不需要 JavaScript，而且性能更好，但是不能像 JavaScript 那样可自定义。</li>
</ul>
</li>
<li>「服务器端校验」：通常服务器端校验都是发生在将数据写入数据库之前，如果数据没通过校验，则会直接从服务器端返回错误消息。</li>
</ul>
<p>在真实的项目开发过程中，开发者一般都倾向于使用客户端校验与服务器端校验的组合校验方式以更好的保证数据的正确性与安全性。</p>
<h2>HTML5 内置校验</h2>
<p>HTML5 可以通过表单元素的 <a href="https://developer.mozilla.org/zh-CN/docs/Web/HTML/Constraint_validation" target="_blank" rel="noopener noreferrer">校验属性</a> 实现对用户的输入进行数据校验。</p>
<p>这些属性可以让你定义一些规则，用于限定用户的输入，比如某个输入框是否必须输入，或者某个输入框的字符串的最小最大长度限制，或者某个输入框必须输入一个数字、邮箱地址等；还有数据必须匹配的模式。</p>
<p>如果表单中输入的数据都符合这些限定规则，那么表示这个表单校验通过，否则则认为校验未通过。</p>
<p>当一个元素校验通过时：</p>
<ul>
<li>该元素将可以通过 CSS 伪类 <code>:valid</code> 进行特殊的样式化；</li>
<li>如果用户尝试提交表单，如果没有其他的控制来阻止该操作（比如 JavaScript 即可阻止提交），那么该表单的数据会被提交。</li>
</ul>
<p>如果一个元素未校验通过：</p>
<ul>
<li>该元素将可以通过 CSS 伪类 <code>:invalid</code> 进行特殊的样式化；</li>
<li>如果用户尝试提交表单，浏览器会展示出错误消息，并停止表单的提交。</li>
</ul>
<h3>required 属性</h3>
<p>最简单的 HTML5 校验功能是 <code>required</code> 属性 — 如果要使输入成为必需的，则可以使用此属性标记元素。</p>
<p>当设置此属性时，如果输入为空，该表单将不会提交（并将显示错误消息），输入也将被视为无效。</p>
<p>在校验失败时输入框会有一个亮红色的虚线边框，在校验通过时会有一个黄色边框。</p>

<h3>正则表达式</h3>
<p>另一个常用的校验功能是 <code>pattern</code> 属性，以正则表达式作为 <code>value</code> 值。</p>
<div class="language-html" data-ext="html" data-title="html"><pre class="language-html"><code><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>form</span><span class="token punctuation">&gt;</span></span>
  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>label</span> <span class="token attr-name">for</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>choose<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span>Would you prefer a banana or a cherry?<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>label</span><span class="token punctuation">&gt;</span></span>
  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>input</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>choose<span class="token punctuation">"</span></span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>i_like<span class="token punctuation">"</span></span> <span class="token attr-name">required</span> <span class="token attr-name">pattern</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>banana|cherry<span class="token punctuation">"</span></span> <span class="token punctuation">/&gt;</span></span>
  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>button</span><span class="token punctuation">&gt;</span></span>Submit<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>button</span><span class="token punctuation">&gt;</span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>form</span><span class="token punctuation">&gt;</span></span>
</code></pre></div>
<h3>demo</h3>
<p>这里展示一个较为完整的例子：</p>

<h3>自定义错误信息</h3>
<p>每次我们提交无效的表单数据时，浏览器总会显示错误信息。但是显示的信息取决于你所使用的浏览器。</p>
<p>这些自动生成的错误有两个缺点：</p>
<ul>
<li>没有标准可以让 CSS 来改变他们的界面外观。</li>
<li>这依赖于他们使用的浏览器环境，意味着你可能在这种语言的页面里得到另一种语言的错误提示。</li>
</ul>
<figure><img src="https://raw.githubusercontent.com/dribble-njr/typora-njr/master/img/20240320183034.png" alt="错误信息" tabindex="0" loading="lazy"><figcaption>错误信息</figcaption></figure>
<p>要自定义这些消息的外观和文本，你必须使用 JavaScript; 不能使用 HTML 和 CSS 来改变。</p>
<p>HTML5 提供 <a href="https://html.spec.whatwg.org/multipage/forms.html#the-constraint-validation-api" target="_blank" rel="noopener noreferrer">constraint validation API</a> 来检测和自定义表单元素的状态。</p>
<p>除此之外，它可以改变错误信息的文本。让我们快速的看一个例子：</p>

<h2>JavaScript 校验</h2>
<h3>约束校验的 API</h3>
<p>越来越多的浏览器支持限制校验 API，并且这逐渐变得可靠。这些 API 由成组的方法和属性构成，可在特定的表单元素接口上调用：</p>
<ul>
<li>HTMLButtonElement</li>
<li>HTMLFieldSetElement</li>
<li>HTMLInputElement</li>
<li>HTMLOutputElement</li>
<li>HTMLSelectElement</li>
<li>HTMLTextAreaElement</li>
</ul>
<div class="hint-container info">
<p class="hint-container-title">相关信息</p>
<p>具体属性见 <a href="https://developer.mozilla.org/zh-CN/docs/Learn/Forms/Form_validation#%E4%BD%BF%E7%94%A8_javascript_%E6%A0%A1%E9%AA%8C%E8%A1%A8%E5%8D%95" target="_blank" rel="noopener noreferrer">约束校验的 API</a></p>
</div>
<h3>demo</h3>
<p>这个简单的表单使用 <code>novalidate</code> 属性关闭浏览器的自动校验；这允许我们使用脚本控制表单校验。</p>
<p>但是，这并不禁止对约束校验 API 的支持或是以下 CSS 伪类：<code>:valid</code>、<code>:invalid</code>、<code>:in-range</code> 、<code>:out-of-range</code> 的应用。</p>
<p>这意味着，即使浏览器在发送数据之前没有自动检查表单的有效性，你仍然可以自己做，并相应地设置表单的样式。</p>

<div class="hint-container info">
<p class="hint-container-title">一些校验库</p>
<ul>
<li><a href="https://github.com/rickharrison/validate.js" target="_blank" rel="noopener noreferrer">Validate.js</a></li>
<li><a href="https://github.com/react-component/field-form" target="_blank" rel="noopener noreferrer">rc-field-form</a></li>
</ul>
</div>
]]></content>
    <category term="HTML"/>
    <published>2024-03-19T00:00:00.000Z</published>
  </entry>
  <entry>
    <title type="text">Style Props</title>
    <id>https://dribble-njr.github.io/blog/blog/frontend/framework/chakra/02-style-props.html</id>
    <link href="https://dribble-njr.github.io/blog/blog/frontend/framework/chakra/02-style-props.html"/>
    <updated>2024-03-07T10:41:37.000Z</updated>
    <summary type="html"><![CDATA[<p>Style Props 是一种通过简单传递 <code>prop</code> 来改变组件样式的方法。它通过提供有用的速记方法来改变组件的样式，从而节省时间。</p>
<div class="hint-container tip">
<p class="hint-container-title">提示</p>
<p>完整 <code>prop</code> 别名见：<a href="https://chakra-ui.com/docs/styled-system/style-props" target="_blank" rel="noopener noreferrer">Chakra UI - Style Props</a>。</p>
<p>类似 Tailwind 和 驼峰 CSS。</p>
</div>]]></summary>
    <content type="html"><![CDATA[<p>Style Props 是一种通过简单传递 <code>prop</code> 来改变组件样式的方法。它通过提供有用的速记方法来改变组件的样式，从而节省时间。</p>
<div class="hint-container tip">
<p class="hint-container-title">提示</p>
<p>完整 <code>prop</code> 别名见：<a href="https://chakra-ui.com/docs/styled-system/style-props" target="_blank" rel="noopener noreferrer">Chakra UI - Style Props</a>。</p>
<p>类似 Tailwind 和 驼峰 CSS。</p>
</div>
<h2>margin and padding</h2>
<div class="language-jsx" data-ext="jsx" data-title="jsx"><pre class="language-jsx"><code><span class="token keyword">import</span> <span class="token punctuation">{</span> Box <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">"@chakra-ui/react"</span>

<span class="token comment">// m={2} refers to the value of `theme.space[2]`</span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span><span class="token class-name">Box</span></span> <span class="token attr-name">m</span><span class="token script language-javascript"><span class="token script-punctuation punctuation">=</span><span class="token punctuation">{</span><span class="token number">2</span><span class="token punctuation">}</span></span><span class="token punctuation">&gt;</span></span><span class="token plain-text">Tomato</span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span><span class="token class-name">Box</span></span><span class="token punctuation">&gt;</span></span>

<span class="token comment">// You can also use custom values</span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span><span class="token class-name">Box</span></span> <span class="token attr-name">maxW</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>960px<span class="token punctuation">"</span></span> <span class="token attr-name">mx</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>auto<span class="token punctuation">"</span></span> <span class="token punctuation">/&gt;</span></span>

<span class="token comment">// sets margin `8px` on all viewports and `12px` from the first breakpoint and up</span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span><span class="token class-name">Box</span></span> <span class="token attr-name">m</span><span class="token script language-javascript"><span class="token script-punctuation punctuation">=</span><span class="token punctuation">{</span><span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">]</span><span class="token punctuation">}</span></span> <span class="token punctuation">/&gt;</span></span>
</code></pre></div><h2>color and background-color</h2>
<div class="language-jsx" data-ext="jsx" data-title="jsx"><pre class="language-jsx"><code><span class="token keyword">import</span> <span class="token punctuation">{</span> Box <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">"@chakra-ui/react"</span>

<span class="token comment">// picks up a nested color value using dot notation</span>
<span class="token comment">// =&gt; `theme.colors.gray[50]`</span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span><span class="token class-name">Box</span></span> <span class="token attr-name">color</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">'</span>gray.50<span class="token punctuation">'</span></span> <span class="token punctuation">/&gt;</span></span>

<span class="token comment">// raw CSS color value</span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span><span class="token class-name">Box</span></span> <span class="token attr-name">color</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">'</span>#f00<span class="token punctuation">'</span></span> <span class="token punctuation">/&gt;</span></span>

<span class="token comment">// background colors</span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span><span class="token class-name">Box</span></span> <span class="token attr-name">bg</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">'</span>tomato<span class="token punctuation">'</span></span> <span class="token punctuation">/&gt;</span></span>

<span class="token comment">// verbose prop</span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span><span class="token class-name">Box</span></span> <span class="token attr-name">backgroundColor</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">'</span>tomato<span class="token punctuation">'</span></span> <span class="token punctuation">/&gt;</span></span>
</code></pre></div><h2>Gradient</h2>
<div class="language-jsx" data-ext="jsx" data-title="jsx"><pre class="language-jsx"><code><span class="token keyword">import</span> <span class="token punctuation">{</span> Box<span class="token punctuation">,</span> Text <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">"@chakra-ui/react"</span>

<span class="token comment">// adding linear gradient and color transitions</span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span><span class="token class-name">Box</span></span> <span class="token attr-name">w</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>100%<span class="token punctuation">"</span></span> <span class="token attr-name">h</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>200px<span class="token punctuation">"</span></span> <span class="token attr-name">bgGradient</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>linear(to-t, green.200, pink.500)<span class="token punctuation">"</span></span> <span class="token punctuation">/&gt;</span></span>

<span class="token comment">// adding radial gradient and color transitions</span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span><span class="token class-name">Box</span></span> <span class="token attr-name">w</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>100%<span class="token punctuation">"</span></span> <span class="token attr-name">h</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>200px<span class="token punctuation">"</span></span> <span class="token attr-name">bgGradient</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>radial(gray.300, yellow.400, pink.200)<span class="token punctuation">"</span></span> <span class="token punctuation">/&gt;</span></span>

<span class="token comment">// adding the text gradient</span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span><span class="token class-name">Text</span></span>
  <span class="token attr-name">bgGradient</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>linear(to-l, #7928CA, #FF0080)<span class="token punctuation">"</span></span>
  <span class="token attr-name">bgClip</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>text<span class="token punctuation">"</span></span>
  <span class="token attr-name">fontSize</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>6xl<span class="token punctuation">"</span></span>
  <span class="token attr-name">fontWeight</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>extrabold<span class="token punctuation">"</span></span>
<span class="token punctuation">&gt;</span></span><span class="token plain-text">
  Welcome to Chakra UI
</span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span><span class="token class-name">Text</span></span><span class="token punctuation">&gt;</span></span>
</code></pre></div><h2>Typography</h2>
<div class="language-jsx" data-ext="jsx" data-title="jsx"><pre class="language-jsx"><code><span class="token keyword">import</span> <span class="token punctuation">{</span> Text <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">"@chakra-ui/react"</span>

<span class="token comment">// font-size of `theme.fontSizes.md`</span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span><span class="token class-name">Text</span></span> <span class="token attr-name">fontSize</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>md<span class="token punctuation">"</span></span> <span class="token punctuation">/&gt;</span></span>

<span class="token comment">// font-size `32px`</span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span><span class="token class-name">Text</span></span> <span class="token attr-name">fontSize</span><span class="token script language-javascript"><span class="token script-punctuation punctuation">=</span><span class="token punctuation">{</span><span class="token number">32</span><span class="token punctuation">}</span></span> <span class="token punctuation">/&gt;</span></span>

<span class="token comment">// font-size `'2em'`</span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span><span class="token class-name">Text</span></span> <span class="token attr-name">fontSize</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">'</span>2em<span class="token punctuation">'</span></span> <span class="token punctuation">/&gt;</span></span>

<span class="token comment">// text-align `left` on all viewports and `center` from the first breakpoint and up</span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span><span class="token class-name">Text</span></span> <span class="token attr-name">textAlign</span><span class="token script language-javascript"><span class="token script-punctuation punctuation">=</span><span class="token punctuation">{</span><span class="token punctuation">[</span> <span class="token string">'left'</span><span class="token punctuation">,</span> <span class="token string">'center'</span> <span class="token punctuation">]</span><span class="token punctuation">}</span></span> <span class="token punctuation">/&gt;</span></span>
</code></pre></div><h2>Layout, width and height</h2>
<div class="language-jsx" data-ext="jsx" data-title="jsx"><pre class="language-jsx"><code><span class="token keyword">import</span> <span class="token punctuation">{</span> Box <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">"@chakra-ui/react"</span>

<span class="token comment">// verbose</span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span><span class="token class-name">Box</span></span> <span class="token attr-name">width</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>100%<span class="token punctuation">"</span></span> <span class="token attr-name">height</span><span class="token script language-javascript"><span class="token script-punctuation punctuation">=</span><span class="token punctuation">{</span><span class="token number">32</span><span class="token punctuation">}</span></span> <span class="token punctuation">/&gt;</span></span>

<span class="token comment">// shorthand</span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span><span class="token class-name">Box</span></span> <span class="token attr-name">w</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>100%<span class="token punctuation">"</span></span> <span class="token attr-name">h</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>32px<span class="token punctuation">"</span></span> <span class="token punctuation">/&gt;</span></span>

<span class="token comment">// use theme sizing</span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span><span class="token class-name">Box</span></span> <span class="token attr-name">boxSize</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>sm<span class="token punctuation">"</span></span> <span class="token punctuation">/&gt;</span></span>

<span class="token comment">// width `256px`</span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span><span class="token class-name">Box</span></span> <span class="token attr-name">w</span><span class="token script language-javascript"><span class="token script-punctuation punctuation">=</span><span class="token punctuation">{</span><span class="token number">256</span><span class="token punctuation">}</span></span> <span class="token punctuation">/&gt;</span></span>

<span class="token comment">// width `'40px'`</span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span><span class="token class-name">Box</span></span> <span class="token attr-name">w</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">'</span>40px<span class="token punctuation">'</span></span> <span class="token punctuation">/&gt;</span></span>
</code></pre></div><h2>Display</h2>
<div class="language-jsx" data-ext="jsx" data-title="jsx"><pre class="language-jsx"><code><span class="token keyword">import</span> <span class="token punctuation">{</span> Box <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">'@chakra-ui/react'</span>

<span class="token comment">// hide the element on all viewports</span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span><span class="token class-name">Box</span></span> <span class="token attr-name">display</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">'</span>none<span class="token punctuation">'</span></span> <span class="token punctuation">/&gt;</span></span>

<span class="token comment">// hide the element by default, and show from 'md' up</span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span><span class="token class-name">Box</span></span> <span class="token attr-name">display</span><span class="token script language-javascript"><span class="token script-punctuation punctuation">=</span><span class="token punctuation">{</span><span class="token punctuation">{</span> <span class="token literal-property property">base</span><span class="token operator">:</span> <span class="token string">"none"</span><span class="token punctuation">,</span> <span class="token literal-property property">md</span><span class="token operator">:</span> <span class="token string">"block"</span> <span class="token punctuation">}</span><span class="token punctuation">}</span></span> <span class="token punctuation">/&gt;</span></span>

<span class="token comment">// shorthand</span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span><span class="token class-name">Box</span></span> <span class="token attr-name">hideBelow</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">'</span>md<span class="token punctuation">'</span></span> <span class="token punctuation">/&gt;</span></span>

<span class="token comment">// hide the element from 'md' up</span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span><span class="token class-name">Box</span></span> <span class="token attr-name">display</span><span class="token script language-javascript"><span class="token script-punctuation punctuation">=</span><span class="token punctuation">{</span><span class="token punctuation">{</span> <span class="token literal-property property">base</span><span class="token operator">:</span> <span class="token string">"block"</span><span class="token punctuation">,</span> <span class="token literal-property property">md</span><span class="token operator">:</span> <span class="token string">"none"</span> <span class="token punctuation">}</span><span class="token punctuation">}</span></span> <span class="token punctuation">/&gt;</span></span>

<span class="token comment">// shorthand</span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span><span class="token class-name">Box</span></span> <span class="token attr-name">hideFrom</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">'</span>md<span class="token punctuation">'</span></span> <span class="token punctuation">/&gt;</span></span>
</code></pre></div><h2>Flexbox</h2>
<div class="language-jsx" data-ext="jsx" data-title="jsx"><pre class="language-jsx"><code><span class="token keyword">import</span> <span class="token punctuation">{</span> Box<span class="token punctuation">,</span> Flex <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">"@chakra-ui/react"</span>

<span class="token comment">// verbose</span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span><span class="token class-name">Box</span></span> <span class="token attr-name">display</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>flex<span class="token punctuation">"</span></span> <span class="token attr-name">alignItems</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>center<span class="token punctuation">"</span></span> <span class="token attr-name">justifyContent</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>space-between<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span><span class="token plain-text">
  Box with Flex props
</span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span><span class="token class-name">Box</span></span><span class="token punctuation">&gt;</span></span>

<span class="token comment">// shorthand using the `Flex` component</span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span><span class="token class-name">Flex</span></span> <span class="token attr-name">align</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>center<span class="token punctuation">"</span></span> <span class="token attr-name">justify</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>center<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span><span class="token plain-text">
  Flex Container
</span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span><span class="token class-name">Flex</span></span><span class="token punctuation">&gt;</span></span>
</code></pre></div><h2>Grid Layout</h2>
<div class="language-jsx" data-ext="jsx" data-title="jsx"><pre class="language-jsx"><code><span class="token keyword">import</span> <span class="token punctuation">{</span> Box<span class="token punctuation">,</span> Grid <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">"@chakra-ui/react"</span>

<span class="token comment">// verbose</span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span><span class="token class-name">Box</span></span> <span class="token attr-name">display</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>grid<span class="token punctuation">"</span></span> <span class="token attr-name">gridGap</span><span class="token script language-javascript"><span class="token script-punctuation punctuation">=</span><span class="token punctuation">{</span><span class="token number">2</span><span class="token punctuation">}</span></span> <span class="token attr-name">gridAutoFlow</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>row dense<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span><span class="token plain-text">
  Grid
</span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span><span class="token class-name">Box</span></span><span class="token punctuation">&gt;</span></span>

<span class="token comment">// shorthand using the `Grid` component</span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span><span class="token class-name">Grid</span></span> <span class="token attr-name">gap</span><span class="token script language-javascript"><span class="token script-punctuation punctuation">=</span><span class="token punctuation">{</span><span class="token number">2</span><span class="token punctuation">}</span></span> <span class="token attr-name">autoFlow</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>row dense<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span><span class="token plain-text">
  Grid
</span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span><span class="token class-name">Grid</span></span><span class="token punctuation">&gt;</span></span>
</code></pre></div><h2>Background</h2>
<div class="language-jsx" data-ext="jsx" data-title="jsx"><pre class="language-jsx"><code><span class="token keyword">import</span> <span class="token punctuation">{</span> Box <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">"@chakra-ui/react"</span>

<span class="token comment">// verbose</span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span><span class="token class-name">Box</span></span>
  <span class="token attr-name">backgroundImage</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>url('/images/kyuubi.png')<span class="token punctuation">"</span></span>
  <span class="token attr-name">backgroundPosition</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>center<span class="token punctuation">"</span></span>
  <span class="token attr-name">backgroundRepeat</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>no-repeat<span class="token punctuation">"</span></span>
<span class="token punctuation">/&gt;</span></span>

<span class="token comment">// shorthand</span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span><span class="token class-name">Box</span></span>
  <span class="token attr-name">bgImage</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>url('/images/gaara.png')<span class="token punctuation">"</span></span>
  <span class="token attr-name">bgPosition</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>center<span class="token punctuation">"</span></span>
  <span class="token attr-name">bgRepeat</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>no-repeat<span class="token punctuation">"</span></span>
<span class="token punctuation">/&gt;</span></span>
</code></pre></div><h2>Border</h2>
<div class="language-jsx" data-ext="jsx" data-title="jsx"><pre class="language-jsx"><code><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span><span class="token class-name">Box</span></span> <span class="token attr-name">border</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>1px<span class="token punctuation">"</span></span> <span class="token attr-name">borderColor</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>gray.200<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span><span class="token plain-text">
  Card
</span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span><span class="token class-name">Box</span></span><span class="token punctuation">&gt;</span></span>
</code></pre></div><h2>Border Radius</h2>
<div class="language-jsx" data-ext="jsx" data-title="jsx"><pre class="language-jsx"><code><span class="token keyword">import</span> <span class="token punctuation">{</span> Button <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">"@chakra-ui/react"</span>

<span class="token comment">// This button will have no right borderRadius</span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span><span class="token class-name">Button</span></span> <span class="token attr-name">borderRightRadius</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>0<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span><span class="token plain-text">Button 1</span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span><span class="token class-name">Button</span></span><span class="token punctuation">&gt;</span></span>

<span class="token comment">// This button will have no left borderRadius*/</span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span><span class="token class-name">Button</span></span> <span class="token attr-name">borderLeftRadius</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>0<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span><span class="token plain-text">Button 2</span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span><span class="token class-name">Button</span></span><span class="token punctuation">&gt;</span></span>

<span class="token comment">// top left and top right radius will be `theme.radii.md` =&gt; 4px</span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span><span class="token class-name">Button</span></span> <span class="token attr-name">borderTopRadius</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>md<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span><span class="token plain-text">Button 2</span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span><span class="token class-name">Button</span></span><span class="token punctuation">&gt;</span></span>
</code></pre></div><h2>Position</h2>
<div class="language-jsx" data-ext="jsx" data-title="jsx"><pre class="language-jsx"><code><span class="token keyword">import</span> <span class="token punctuation">{</span> Box <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">"@chakra-ui/react"</span>

<span class="token comment">// verbose</span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span><span class="token class-name">Box</span></span> <span class="token attr-name">position</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>absolute<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span><span class="token plain-text">Cover</span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span><span class="token class-name">Box</span></span><span class="token punctuation">&gt;</span></span>

<span class="token comment">// shorthand</span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span><span class="token class-name">Box</span></span> <span class="token attr-name">pos</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>absolute<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span><span class="token plain-text">Cover</span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span><span class="token class-name">Box</span></span><span class="token punctuation">&gt;</span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span><span class="token class-name">Box</span></span> <span class="token attr-name">pos</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>absolute<span class="token punctuation">"</span></span> <span class="token attr-name">top</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>0<span class="token punctuation">"</span></span> <span class="token attr-name">left</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>0<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span><span class="token plain-text">
  Absolute with top and left
</span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span><span class="token class-name">Box</span></span><span class="token punctuation">&gt;</span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span><span class="token class-name">Box</span></span> <span class="token attr-name">pos</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>fixed<span class="token punctuation">"</span></span> <span class="token attr-name">w</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>100%<span class="token punctuation">"</span></span> <span class="token attr-name">zIndex</span><span class="token script language-javascript"><span class="token script-punctuation punctuation">=</span><span class="token punctuation">{</span><span class="token number">2</span><span class="token punctuation">}</span></span><span class="token punctuation">&gt;</span></span><span class="token plain-text">
  Fixed with zIndex
</span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span><span class="token class-name">Box</span></span><span class="token punctuation">&gt;</span></span>
</code></pre></div><h2>Shadow</h2>
<figure><img src="https://raw.githubusercontent.com/dribble-njr/typora-njr/master/img/20240307183600.png" alt="Shadow" tabindex="0" loading="lazy"><figcaption>Shadow</figcaption></figure>
<div class="language-jsx" data-ext="jsx" data-title="jsx"><pre class="language-jsx"><code><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span><span class="token class-name">SimpleGrid</span></span>
  <span class="token attr-name">bg</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>gray.50<span class="token punctuation">"</span></span>
  <span class="token attr-name">columns</span><span class="token script language-javascript"><span class="token script-punctuation punctuation">=</span><span class="token punctuation">{</span><span class="token punctuation">{</span> <span class="token literal-property property">sm</span><span class="token operator">:</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token literal-property property">md</span><span class="token operator">:</span> <span class="token number">4</span> <span class="token punctuation">}</span><span class="token punctuation">}</span></span>
  <span class="token attr-name">spacing</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>8<span class="token punctuation">"</span></span>
  <span class="token attr-name">p</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>10<span class="token punctuation">"</span></span>
  <span class="token attr-name">textAlign</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>center<span class="token punctuation">"</span></span>
  <span class="token attr-name">rounded</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>lg<span class="token punctuation">"</span></span>
  <span class="token attr-name">color</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>gray.400<span class="token punctuation">"</span></span>
<span class="token punctuation">&gt;</span></span><span class="token plain-text">
  </span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span><span class="token class-name">Box</span></span> <span class="token attr-name">boxShadow</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>xs<span class="token punctuation">"</span></span> <span class="token attr-name">p</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>6<span class="token punctuation">"</span></span> <span class="token attr-name">rounded</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>md<span class="token punctuation">"</span></span> <span class="token attr-name">bg</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>white<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span><span class="token plain-text">
    xs
  </span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span><span class="token class-name">Box</span></span><span class="token punctuation">&gt;</span></span><span class="token plain-text">
  </span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span><span class="token class-name">Box</span></span> <span class="token attr-name">boxShadow</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>sm<span class="token punctuation">"</span></span> <span class="token attr-name">p</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>6<span class="token punctuation">"</span></span> <span class="token attr-name">rounded</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>md<span class="token punctuation">"</span></span> <span class="token attr-name">bg</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>white<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span><span class="token plain-text">
    sm
  </span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span><span class="token class-name">Box</span></span><span class="token punctuation">&gt;</span></span><span class="token plain-text">
  </span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span><span class="token class-name">Box</span></span> <span class="token attr-name">boxShadow</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>base<span class="token punctuation">"</span></span> <span class="token attr-name">p</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>6<span class="token punctuation">"</span></span> <span class="token attr-name">rounded</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>md<span class="token punctuation">"</span></span> <span class="token attr-name">bg</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>white<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span><span class="token plain-text">
    Base
  </span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span><span class="token class-name">Box</span></span><span class="token punctuation">&gt;</span></span><span class="token plain-text">
  </span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span><span class="token class-name">Box</span></span> <span class="token attr-name">boxShadow</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>md<span class="token punctuation">"</span></span> <span class="token attr-name">p</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>6<span class="token punctuation">"</span></span> <span class="token attr-name">rounded</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>md<span class="token punctuation">"</span></span> <span class="token attr-name">bg</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>white<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span><span class="token plain-text">
    md
  </span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span><span class="token class-name">Box</span></span><span class="token punctuation">&gt;</span></span><span class="token plain-text">
  </span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span><span class="token class-name">Box</span></span> <span class="token attr-name">boxShadow</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>lg<span class="token punctuation">"</span></span> <span class="token attr-name">p</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>6<span class="token punctuation">"</span></span> <span class="token attr-name">rounded</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>md<span class="token punctuation">"</span></span> <span class="token attr-name">bg</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>white<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span><span class="token plain-text">
    lg
  </span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span><span class="token class-name">Box</span></span><span class="token punctuation">&gt;</span></span><span class="token plain-text">
  </span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span><span class="token class-name">Box</span></span> <span class="token attr-name">boxShadow</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>xl<span class="token punctuation">"</span></span> <span class="token attr-name">p</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>6<span class="token punctuation">"</span></span> <span class="token attr-name">rounded</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>md<span class="token punctuation">"</span></span> <span class="token attr-name">bg</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>white<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span><span class="token plain-text">
    xl
  </span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span><span class="token class-name">Box</span></span><span class="token punctuation">&gt;</span></span><span class="token plain-text">
  </span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span><span class="token class-name">Box</span></span> <span class="token attr-name">boxShadow</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>2xl<span class="token punctuation">"</span></span> <span class="token attr-name">p</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>6<span class="token punctuation">"</span></span> <span class="token attr-name">rounded</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>md<span class="token punctuation">"</span></span> <span class="token attr-name">bg</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>white<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span><span class="token plain-text">
    2xl
  </span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span><span class="token class-name">Box</span></span><span class="token punctuation">&gt;</span></span><span class="token plain-text">
  </span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span><span class="token class-name">Box</span></span> <span class="token attr-name">boxShadow</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>dark-lg<span class="token punctuation">"</span></span> <span class="token attr-name">p</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>6<span class="token punctuation">"</span></span> <span class="token attr-name">rounded</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>md<span class="token punctuation">"</span></span> <span class="token attr-name">bg</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>white<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span><span class="token plain-text">
    Dark lg
  </span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span><span class="token class-name">Box</span></span><span class="token punctuation">&gt;</span></span><span class="token plain-text">
  </span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span><span class="token class-name">Box</span></span> <span class="token attr-name">boxShadow</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>outline<span class="token punctuation">"</span></span> <span class="token attr-name">p</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>6<span class="token punctuation">"</span></span> <span class="token attr-name">rounded</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>md<span class="token punctuation">"</span></span> <span class="token attr-name">bg</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>white<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span><span class="token plain-text">
    Outline
  </span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span><span class="token class-name">Box</span></span><span class="token punctuation">&gt;</span></span><span class="token plain-text">
  </span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span><span class="token class-name">Box</span></span> <span class="token attr-name">boxShadow</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>inner<span class="token punctuation">"</span></span> <span class="token attr-name">p</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>6<span class="token punctuation">"</span></span> <span class="token attr-name">rounded</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>md<span class="token punctuation">"</span></span> <span class="token attr-name">bg</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>white<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span><span class="token plain-text">
    Inner
  </span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span><span class="token class-name">Box</span></span><span class="token punctuation">&gt;</span></span><span class="token plain-text">
</span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span><span class="token class-name">SimpleGrid</span></span><span class="token punctuation">&gt;</span></span>
</code></pre></div><h2>Filter</h2>
<figure><img src="https://raw.githubusercontent.com/dribble-njr/typora-njr/master/img/20240307183703.png" alt="Filter" tabindex="0" loading="lazy"><figcaption>Filter</figcaption></figure>
<div class="language-jsx" data-ext="jsx" data-title="jsx"><pre class="language-jsx"><code><span class="token keyword">function</span> <span class="token function">Filters</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token keyword">const</span> basicBoxStyles <span class="token operator">=</span> <span class="token punctuation">{</span>
    <span class="token literal-property property">display</span><span class="token operator">:</span> <span class="token string">'flex'</span><span class="token punctuation">,</span>
    <span class="token literal-property property">alignItems</span><span class="token operator">:</span> <span class="token string">'center'</span><span class="token punctuation">,</span>
    <span class="token literal-property property">justifyContent</span><span class="token operator">:</span> <span class="token string">'center'</span><span class="token punctuation">,</span>
    <span class="token literal-property property">textAlign</span><span class="token operator">:</span> <span class="token string">'center'</span><span class="token punctuation">,</span>
    <span class="token literal-property property">boxSize</span><span class="token operator">:</span> <span class="token string">'250px'</span><span class="token punctuation">,</span>
    <span class="token literal-property property">color</span><span class="token operator">:</span> <span class="token string">'white'</span><span class="token punctuation">,</span>
    <span class="token literal-property property">textShadow</span><span class="token operator">:</span> <span class="token string">'0 0 20px black'</span><span class="token punctuation">,</span>
    <span class="token literal-property property">fontWeight</span><span class="token operator">:</span> <span class="token string">'bold'</span><span class="token punctuation">,</span>
    <span class="token literal-property property">fontSize</span><span class="token operator">:</span> <span class="token string">'20px'</span><span class="token punctuation">,</span>
    <span class="token literal-property property">px</span><span class="token operator">:</span> <span class="token number">4</span><span class="token punctuation">,</span>
    <span class="token literal-property property">background</span><span class="token operator">:</span>
      <span class="token string">'url(https://picsum.photos/id/1080/200/300) center/cover no-repeat'</span>
  <span class="token punctuation">}</span>
  <span class="token keyword">return</span> <span class="token punctuation">(</span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span><span class="token class-name">Flex</span></span> <span class="token attr-name">flexWrap</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>wrap<span class="token punctuation">"</span></span> <span class="token attr-name">gap</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>24px<span class="token punctuation">"</span></span> <span class="token attr-name">justifyContent</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>space-evenly<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span><span class="token plain-text">
      </span><span class="token punctuation">{</span><span class="token comment">/* adding filter property to the element */</span><span class="token punctuation">}</span><span class="token plain-text">
      </span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span><span class="token class-name">Box</span></span> <span class="token attr-name">sx</span><span class="token script language-javascript"><span class="token script-punctuation punctuation">=</span><span class="token punctuation">{</span>basicBoxStyles<span class="token punctuation">}</span></span> <span class="token attr-name">filter</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>grayscale(80%)<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span><span class="token plain-text">
        Box with Filter
      </span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span><span class="token class-name">Box</span></span><span class="token punctuation">&gt;</span></span><span class="token plain-text">
      </span><span class="token punctuation">{</span><span class="token comment">/* adding blur property to the element */</span><span class="token punctuation">}</span><span class="token plain-text">
      </span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span><span class="token class-name">Box</span></span> <span class="token attr-name">sx</span><span class="token script language-javascript"><span class="token script-punctuation punctuation">=</span><span class="token punctuation">{</span>basicBoxStyles<span class="token punctuation">}</span></span> <span class="token attr-name">filter</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>auto<span class="token punctuation">"</span></span> <span class="token attr-name">blur</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>2px<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span><span class="token plain-text">
        Box with Blur
      </span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span><span class="token class-name">Box</span></span><span class="token punctuation">&gt;</span></span><span class="token plain-text">
      </span><span class="token punctuation">{</span><span class="token comment">/* adding brightness property to the element */</span><span class="token punctuation">}</span><span class="token plain-text">
      </span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span><span class="token class-name">Box</span></span> <span class="token attr-name">sx</span><span class="token script language-javascript"><span class="token script-punctuation punctuation">=</span><span class="token punctuation">{</span>basicBoxStyles<span class="token punctuation">}</span></span> <span class="token attr-name">filter</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>auto<span class="token punctuation">"</span></span> <span class="token attr-name">brightness</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>40%<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span><span class="token plain-text">
        Box with Brightness
      </span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span><span class="token class-name">Box</span></span><span class="token punctuation">&gt;</span></span><span class="token plain-text">
    </span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span><span class="token class-name">Flex</span></span><span class="token punctuation">&gt;</span></span>
  <span class="token punctuation">)</span>
<span class="token punctuation">}</span>
</code></pre></div><h2>伪类</h2>
<div class="language-jsx" data-ext="jsx" data-title="jsx"><pre class="language-jsx"><code><span class="token keyword">import</span> <span class="token punctuation">{</span> Button <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">"@chakra-ui/react"</span>

<span class="token comment">// :hover style</span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span><span class="token class-name">Button</span></span>
  <span class="token attr-name">colorScheme</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>teal<span class="token punctuation">"</span></span>
  <span class="token attr-name">_hover</span><span class="token script language-javascript"><span class="token script-punctuation punctuation">=</span><span class="token punctuation">{</span><span class="token punctuation">{</span>
    <span class="token literal-property property">background</span><span class="token operator">:</span> <span class="token string">"white"</span><span class="token punctuation">,</span>
    <span class="token literal-property property">color</span><span class="token operator">:</span> <span class="token string">"teal.500"</span><span class="token punctuation">,</span>
  <span class="token punctuation">}</span><span class="token punctuation">}</span></span>
<span class="token punctuation">&gt;</span></span><span class="token plain-text">
  Hover me
</span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span><span class="token class-name">Button</span></span><span class="token punctuation">&gt;</span></span>

<span class="token comment">// apply :hover over parent element</span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span><span class="token class-name">Box</span></span>
  <span class="token attr-name">role</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>group<span class="token punctuation">"</span></span>
<span class="token punctuation">&gt;</span></span><span class="token plain-text">
  </span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span><span class="token class-name">Box</span></span>
    <span class="token attr-name">_hover</span><span class="token script language-javascript"><span class="token script-punctuation punctuation">=</span><span class="token punctuation">{</span><span class="token punctuation">{</span> <span class="token literal-property property">fontWeight</span><span class="token operator">:</span> <span class="token string">'semibold'</span> <span class="token punctuation">}</span><span class="token punctuation">}</span></span>
    <span class="token attr-name">_groupHover</span><span class="token script language-javascript"><span class="token script-punctuation punctuation">=</span><span class="token punctuation">{</span><span class="token punctuation">{</span> <span class="token literal-property property">color</span><span class="token operator">:</span> <span class="token string">'tomato'</span> <span class="token punctuation">}</span><span class="token punctuation">}</span></span>
  <span class="token punctuation">&gt;</span></span><span class="token plain-text">
  </span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span><span class="token class-name">Box</span></span><span class="token punctuation">&gt;</span></span><span class="token plain-text">
</span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span><span class="token class-name">Box</span></span><span class="token punctuation">&gt;</span></span>

<span class="token comment">// add ::before pseudo element</span>
<span class="token comment">// Note: the content value needs an extra set of quotes!</span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span><span class="token class-name">Box</span></span>
  <span class="token attr-name">_before</span><span class="token script language-javascript"><span class="token script-punctuation punctuation">=</span><span class="token punctuation">{</span><span class="token punctuation">{</span> <span class="token literal-property property">content</span><span class="token operator">:</span> <span class="token string">'"🙂"'</span><span class="token punctuation">,</span> <span class="token literal-property property">display</span><span class="token operator">:</span> <span class="token string">'inline-block'</span><span class="token punctuation">,</span> <span class="token literal-property property">mr</span><span class="token operator">:</span> <span class="token string">'5px'</span> <span class="token punctuation">}</span><span class="token punctuation">}</span></span>
<span class="token punctuation">&gt;</span></span><span class="token plain-text">
  A pseudo element
</span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span><span class="token class-name">Box</span></span><span class="token punctuation">&gt;</span></span>
</code></pre></div><h2><code>as</code></h2>
<p><code>as</code> prop 是所有组件中的一项功能，它允许您传递要呈现的 HTML 标记或组件。</p>
<p>例如，您正在使用一个 Button 组件，但需要将其转换为一个链接。您可以像这样组成一个和 Button：</p>
<div class="language-jsx" data-ext="jsx" data-title="jsx"><pre class="language-jsx"><code><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span><span class="token class-name">Button</span></span> <span class="token attr-name">as</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>a<span class="token punctuation">"</span></span> <span class="token attr-name">target</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>_blank<span class="token punctuation">"</span></span> <span class="token attr-name">variant</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>outline<span class="token punctuation">"</span></span> <span class="token attr-name">href</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>https://chakra-ui.com<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span><span class="token plain-text">
  Hello
</span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span><span class="token class-name">Button</span></span><span class="token punctuation">&gt;</span></span>
</code></pre></div>]]></content>
    <category term="chakra"/>
    <published>2024-03-07T00:00:00.000Z</published>
  </entry>
  <entry>
    <title type="text">快速开始</title>
    <id>https://dribble-njr.github.io/blog/blog/frontend/framework/chakra/01-getting-started.html</id>
    <link href="https://dribble-njr.github.io/blog/blog/frontend/framework/chakra/01-getting-started.html"/>
    <updated>2024-03-07T10:41:37.000Z</updated>
    <summary type="html"><![CDATA[<p><a href="https://chakra-ui.com/" target="_blank" rel="noopener noreferrer">Chakra UI</a> 是一个简单、模块化和可访问的组件库，可提供构建 React 应用程序所需的组件。</p>
<div class="hint-container tip">
<p class="hint-container-title">总结</p>
<p>非常灵活自由，但有一定上手门槛。</p>
</div>
<h2>设计原则</h2>
<p>Chakra UI 建立在保持组件一致性的原则之上。了解这些概念将有助于您更好地为 Chakra UI 做出贡献。</p>]]></summary>
    <content type="html"><![CDATA[<p><a href="https://chakra-ui.com/" target="_blank" rel="noopener noreferrer">Chakra UI</a> 是一个简单、模块化和可访问的组件库，可提供构建 React 应用程序所需的组件。</p>
<div class="hint-container tip">
<p class="hint-container-title">总结</p>
<p>非常灵活自由，但有一定上手门槛。</p>
</div>
<h2>设计原则</h2>
<p>Chakra UI 建立在保持组件一致性的原则之上。了解这些概念将有助于您更好地为 Chakra UI 做出贡献。</p>
<p>我们的目标是设计简单、可组合的组件，以解决现实生活中的用户界面设计问题。为此，我们制定了一系列原则，帮助我们始终沿着这条道路前进。</p>
<ul>
<li>Style Props：所有组件的样式都可以通过 <code>style props</code> 覆盖或扩展，以减少 <code>css prop</code> 或 <code>styled()</code> 的使用。从 Box 中组合新组件。</li>
<li>简单：努力保持组件应用程序接口（API）相当简单，并展示组件在现实世界中的使用场景。</li>
<li>组合：将组件分解成具有最小道具的较小部分，以降低复杂性，并将它们组合在一起。这将确保样式和功能的灵活性和可扩展性。</li>
<li>可访问性：创建组件时，应将可访问性放在首位。这包括键盘导航、焦点管理、色彩对比、语音播报以及正确的 <code>aria-*</code> 属性。</li>
<li>暗色模式：使组件兼容暗色模式。使用 <code>useColorMode</code> 钩子处理样式。了解有关 <a href="https://chakra-ui.com/docs/styled-system/color-mode" target="_blank" rel="noopener noreferrer">暗色模式</a> 的更多信息。</li>
<li><code>Naming Props</code>：命名是最难的事情。一般来说，要确保 <code>prop name</code> 能说明其作用。<code>Boolean prop</code> 应使用助动词命名，如 <code>does</code>、<code>has</code>、<code>is</code> 和 <code>should</code>。例如，按钮使用 <code>isDisabled</code>、<code>isLoading</code> 等。</li>
</ul>
<h2>对比</h2>
<h3>Tailwind CSS</h3>
<h4>总览</h4>
<p><a href="https://tailwindcss.com/" target="_blank" rel="noopener noreferrer">Tailwind CSS</a>：CSS 框架，提供原子 CSS 类，帮助你为组件设计样式、可访问性、组件组成、键盘导航、样式重写等。</p>
<p>Chakra UI：一个由精心创建的 React 组件组成的库，具有 Tailwind 的所有样式优势，并能处理所有细节。</p>
<h4>学习曲线</h4>
<p>Tailwind CSS：如果你有过 Bootstrap 或 Bulma CSS 背景，你可能会发现学习 Tailwind 非常容易。但是，如果你是 <code>styled-components</code> 或 <code>emotion</code> 背景，学习曲线可能会相当陡峭。</p>
<p>Chakra UI：Chakra UI 采用非常直观、类似 CSS 和基于 <code>prop</code> 的组件样式模型，因此很容易上手。组件名称和 <code>prop</code> 名称也非常容易理解。</p>
<h4>响应式</h4>
<p>Tailwind CSS：在 Tailwind 中创建响应式样式需要结合伪类。随着项目的增长，这可能会变得相当冗长。</p>
<div class="language-html" data-ext="html" data-title="html"><pre class="language-html"><code><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>img</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>w-16 md:w-32 lg:w-48<span class="token punctuation">"</span></span> <span class="token attr-name">src</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>...<span class="token punctuation">"</span></span> <span class="token punctuation">/&gt;</span></span>
</code></pre></div><p>Chakra UI：以非常简单直观的方式创建响应式样式。可以使用数组或对象符号：</p>
<div class="language-jsx" data-ext="jsx" data-title="jsx"><pre class="language-jsx"><code><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span><span class="token class-name">Img</span></span> <span class="token attr-name">w</span><span class="token script language-javascript"><span class="token script-punctuation punctuation">=</span><span class="token punctuation">{</span><span class="token punctuation">[</span><span class="token number">16</span><span class="token punctuation">,</span> <span class="token number">32</span><span class="token punctuation">,</span> <span class="token number">48</span><span class="token punctuation">]</span><span class="token punctuation">}</span></span> <span class="token attr-name">src</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>...<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span><span class="token plain-text">
</span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span><span class="token class-name">Img</span></span> <span class="token attr-name">w</span><span class="token script language-javascript"><span class="token script-punctuation punctuation">=</span><span class="token punctuation">{</span><span class="token punctuation">{</span> base：<span class="token number">16</span><span class="token punctuation">,</span> md：<span class="token number">32</span><span class="token punctuation">,</span> lg：<span class="token number">48</span> <span class="token punctuation">}</span><span class="token punctuation">}</span></span> <span class="token attr-name">src</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>...<span class="token punctuation">"</span></span> <span class="token punctuation">/&gt;</span></span><span class="token plain-text">
</span></code></pre></div><h4>样式覆盖</h4>
<p>在大多数应用中，为满足设计要求而覆盖特定上下文的样式是一项常见的挑战。</p>
<p>Tailwind CSS：鉴于 Tailwind 是一个 CSS 实用框架，你可能需要找出覆盖特定 classNames 或编写自定义 CSS 的最佳方法。</p>
<p>Chakra UI：Chakra UI 的样式是基于 <code>prop</code> 的，因此覆盖就像传递 <code>prop</code> 一样简单。</p>
<h4>可访问性</h4>
<p>如前所述，Tailwind CSS 只是一个 CSS 框架，类似于 Bootstrap 或 Bulma CSS。这样，用户就可以处理语义 html 结构、满足 WAI-ARIA 要求、键盘导航等。</p>
<p>Chakra 不仅提供了 Tailwind 的便利性，还具有其他所有优点。</p>
<h4>暗色模式</h4>
<p>Tailwind CSS：所有组件均与暗色模式兼容。</p>
<p>Chakra UI：所有组件均兼容明暗模式。还可以在整个应用程序中创建自己的明暗模式体验。</p>
<h3>Theme UI</h3>
<p>Chakra UI 深受 Theme UI 的启发，并遵循系统 UI 规范。</p>
<p>与 Theme UI 相比，Chakra UI 提供了更多组件、改进的样式 API、可访问性和直观的组件 API。</p>
<p>可以将 Chakra 视为更强大的 Theme UI 版本，它充分利用了 <code>styled-system</code> 的全部功能，提供更好的组件样式和主题。</p>
<h3>Material UI</h3>
<p>Material UI React 库为用户提供了大量 UI 布局工具，但其最著名的地方在于它提供了大量预设样式的 UI 组件，开发人员可以在这些组件上应用自定义样式来覆盖开箱即用的基础样式。</p>
<p>Chakra UI 是一个更强大、更注重布局的库，它也为开发人员提供了与 Material UI 类似的 UI 组件，但更注重创建灵活、可组合和可扩展的代码。</p>
<p>在比较这两个框架时，需要考虑的一个核心概念是 "易于修改"。</p>
<p>相比之下，Material UI 为与导出组件和布局相关的单个 HTML 标签添加了更多的类，这迫使开发人员在定制界面时不得不与基本样式作斗争。</p>
<p>Chakra 为开发人员提供了更大的自由度来操作导出组件和布局的 CSS 类，而且通常只需较少的代码即可完成。</p>
<p>例如，Material UI 需要单独的代码来控制基于视口变化的响应式样式，而 Chakra 提供了内置的响应式样式支持，无需创建 CSS 类或媒体查询。</p>
<p>如果自定义样式并不是项目的主要关注点，Material UI 则是有益的，因为您可以避免创建该库所提供的自定义组件。</p>
<p>如果可扩展的自定义设计对您的项目很重要（很多时候确实如此），Chakra 对开发人员的便利性比 Material UI 更为突出，尤其是在项目随时间扩展的情况下。</p>
<h3>Ant Design</h3>
<p>Ant Design React 库是 ant.design 设计语言的实现。这意味着组件遵循现有的设计规则和值，只允许在有限的范围内自定义某些变量。</p>
<p>Chakra 不受任何设计系统的束缚，可以更自由地定制组件，实现自己的设计。</p>
<h4>样式组件</h4>
<p>Ant Design 组件是为开箱即用而构建的，因此它们的特定样式 <code>prop</code> 和自定义功能非常有限。</p>
<p>另一方面，Chakra 组件的主要风格化方式是将样式作为 <code>prop</code>。</p>
<p>以按钮组件为例。Chakra Button 的 <code>colorScheme</code>（色彩主题）道具在默认情况下有许多不同的值，您可以对其进行自定义和/或扩展，以应用自己的设计。</p>
<p>相比之下，您需要记住，Antd Design 按钮只有在拥有 <code>primary prop</code> 和 <code>danger prop</code> 的情况下才能着色，而不能因为 Ant Design 的现有设计值而着色。</p>
<p>同样的模式也可以在布局、表单和排版等其他组件中看到。</p>
<h4>设置和自定义</h4>
<p>Ant Design 有一长串可修改的默认变量，包括颜色、页边距、边距、动画、阴影、边框、屏幕尺寸、尺寸等，有些是通用变量，有些则是用户界面组件的特定变量。为了尊重底层设计规范，除修改这些现有变量外，不建议进行其他自定义操作。</p>
<p>Chakra 的特点是所有全局和组件样式默认值都可以轻松定制/扩展。可以为每个组件定义新的尺寸或变体。此外，您还可以使用 Chakra Factory 从现有组件甚至非 Chakra 组件中组合出新的组件。</p>
]]></content>
    <category term="chakra"/>
    <published>2024-03-07T00:00:00.000Z</published>
  </entry>
  <entry>
    <title type="text">chakra</title>
    <id>https://dribble-njr.github.io/blog/blog/frontend/framework/chakra/</id>
    <link href="https://dribble-njr.github.io/blog/blog/frontend/framework/chakra/"/>
    <updated>2024-03-07T09:35:01.000Z</updated>
    <published>2024-03-07T09:35:01.000Z</published>
  </entry>
  <entry>
    <title type="text">页面和布局</title>
    <id>https://dribble-njr.github.io/blog/blog/frontend/framework/next/pages-router/01-pages-layouts.html</id>
    <link href="https://dribble-njr.github.io/blog/blog/frontend/framework/next/pages-router/01-pages-layouts.html"/>
    <updated>2024-03-05T05:06:40.000Z</updated>
    <summary type="html"><![CDATA[<p><code>pages router</code> 是基于文件系统的路由器，以页面概念为基础。</p>
<p>当一个文件被添加到 <code>pages</code> 目录时，它就会自动成为一个路由。</p>
<p>在 Next.js 中，页面是从页面目录中的 <code>.js</code>、<code>.jsx</code>、<code>.ts</code> 或 <code>.tsx</code> 文件导出的 React 组件。每个页面都根据其文件名与路由相关联。</p>
<p>例如如果创建的 <code>pages/about.js</code> 导出了一个 React 组件（如下所示），则可通过 <code>/about</code> 访问该组件。</p>]]></summary>
    <content type="html"><![CDATA[<p><code>pages router</code> 是基于文件系统的路由器，以页面概念为基础。</p>
<p>当一个文件被添加到 <code>pages</code> 目录时，它就会自动成为一个路由。</p>
<p>在 Next.js 中，页面是从页面目录中的 <code>.js</code>、<code>.jsx</code>、<code>.ts</code> 或 <code>.tsx</code> 文件导出的 React 组件。每个页面都根据其文件名与路由相关联。</p>
<p>例如如果创建的 <code>pages/about.js</code> 导出了一个 React 组件（如下所示），则可通过 <code>/about</code> 访问该组件。</p>
<div class="language-javascript" data-ext="js" data-title="js"><pre class="language-javascript"><code><span class="token keyword">export</span> <span class="token keyword">default</span> <span class="token keyword">function</span> <span class="token function">About</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token keyword">return</span> <span class="token operator">&lt;</span>div<span class="token operator">&gt;</span>About<span class="token operator">&lt;</span><span class="token operator">/</span>div<span class="token operator">&gt;</span>
<span class="token punctuation">}</span>
</code></pre></div><h2>根路由</h2>
<p>路由器会自动将名为 <code>index</code> 的文件路由到目录根目录。</p>
<ul>
<li><code>pages/index.js</code> → <code>/</code></li>
<li><code>pages/blog/index.js</code> → <code>/blog</code></li>
</ul>
<h2>嵌套路由</h2>
<p>路由器支持嵌套文件。如果创建了嵌套文件夹结构，文件仍会自动以相同方式路由。</p>
<ul>
<li><code>pages/blog/first-post.js</code> → <code>/blog/first-post</code></li>
<li><code>pages/dashboard/settings/username.js</code> → <code>/dashboard/settings/username</code></li>
</ul>
<h2>带有动态路由的页面</h2>
<p>Next.js 支持带有动态路由的页面。例如，如果你创建了一个名为 <code>pages/posts/[id].js</code> 的文件，那么就可以通过 <code>posts/1</code>、<code>posts/2</code> 等路径访问该文件。</p>
<h2>布局模式</h2>
<p>React 模型允许我们将页面解构为一系列组件。其中许多组件通常会在页面之间重复使用。例如，您可能会在每个页面上使用相同的导航栏和页脚。</p>
<p><strong><code>components/layout.js</code></strong></p>
<div class="language-javascript" data-ext="js" data-title="js"><pre class="language-javascript"><code><span class="token keyword">import</span> Navbar <span class="token keyword">from</span> <span class="token string">'./navbar'</span>
<span class="token keyword">import</span> Footer <span class="token keyword">from</span> <span class="token string">'./footer'</span>

<span class="token keyword">export</span> <span class="token keyword">default</span> <span class="token keyword">function</span> <span class="token function">Layout</span><span class="token punctuation">(</span><span class="token parameter"><span class="token punctuation">{</span> children <span class="token punctuation">}</span></span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token keyword">return</span> <span class="token punctuation">(</span>
    <span class="token operator">&lt;</span><span class="token operator">&gt;</span>
      <span class="token operator">&lt;</span>Navbar <span class="token operator">/</span><span class="token operator">&gt;</span>
      <span class="token operator">&lt;</span>main<span class="token operator">&gt;</span><span class="token punctuation">{</span>children<span class="token punctuation">}</span><span class="token operator">&lt;</span><span class="token operator">/</span>main<span class="token operator">&gt;</span>
      <span class="token operator">&lt;</span>Footer <span class="token operator">/</span><span class="token operator">&gt;</span>
    <span class="token operator">&lt;</span><span class="token operator">/</span><span class="token operator">&gt;</span>
  <span class="token punctuation">)</span>
<span class="token punctuation">}</span>
</code></pre></div><h2>例子</h2>
<h3>使用自定义应用程序的单一共享布局</h3>
<p>如果您的整个应用程序只有一个布局，您可以创建一个自定义应用程序，并用该布局包装您的应用程序。</p>
<p>由于 <code>&lt;Layout /&gt;</code> 组件在更改页面时会被重复使用，因此其组件状态（如输入值）会被保留。</p>
<p><strong><code>pages/_app.js</code></strong></p>
<div class="language-javascript" data-ext="js" data-title="js"><pre class="language-javascript"><code><span class="token keyword">import</span> Layout <span class="token keyword">from</span> <span class="token string">'../components/layout'</span>

<span class="token keyword">export</span> <span class="token keyword">default</span> <span class="token keyword">function</span> <span class="token function">MyApp</span><span class="token punctuation">(</span><span class="token parameter"><span class="token punctuation">{</span> Component<span class="token punctuation">,</span> pageProps <span class="token punctuation">}</span></span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token keyword">return</span> <span class="token punctuation">(</span>
    <span class="token operator">&lt;</span>Layout<span class="token operator">&gt;</span>
      <span class="token operator">&lt;</span>Component <span class="token punctuation">{</span><span class="token operator">...</span>pageProps<span class="token punctuation">}</span> <span class="token operator">/</span><span class="token operator">&gt;</span>
    <span class="token operator">&lt;</span><span class="token operator">/</span>Layout<span class="token operator">&gt;</span>
  <span class="token punctuation">)</span>
<span class="token punctuation">}</span>
</code></pre></div><h3>按页面布局</h3>
<p>如果需要多种布局，可以在页面中添加 <code>getLayout</code> 属性，这样就可以返回布局的 React 组件，可以实现按页面定义布局。</p>
<p>由于我们返回的是一个函数，因此如果需要，我们可以使用复杂的嵌套布局。</p>
<p><strong><code>pages/index.js</code></strong></p>
<div class="language-javascript" data-ext="js" data-title="js"><pre class="language-javascript"><code><span class="token keyword">import</span> Layout <span class="token keyword">from</span> <span class="token string">'../components/layout'</span>
<span class="token keyword">import</span> NestedLayout <span class="token keyword">from</span> <span class="token string">'../components/nested-layout'</span>

<span class="token keyword">export</span> <span class="token keyword">default</span> <span class="token keyword">function</span> <span class="token function">Page</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token keyword">return</span> <span class="token punctuation">(</span>
    <span class="token doc-comment comment">/** Your content */</span>
  <span class="token punctuation">)</span>
<span class="token punctuation">}</span>

Page<span class="token punctuation">.</span><span class="token function-variable function">getLayout</span> <span class="token operator">=</span> <span class="token keyword">function</span> <span class="token function">getLayout</span><span class="token punctuation">(</span><span class="token parameter">page</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token keyword">return</span> <span class="token punctuation">(</span>
    <span class="token operator">&lt;</span>Layout<span class="token operator">&gt;</span>
      <span class="token operator">&lt;</span>NestedLayout<span class="token operator">&gt;</span><span class="token punctuation">{</span>page<span class="token punctuation">}</span><span class="token operator">&lt;</span><span class="token operator">/</span>NestedLayout<span class="token operator">&gt;</span>
    <span class="token operator">&lt;</span><span class="token operator">/</span>Layout<span class="token operator">&gt;</span>
  <span class="token punctuation">)</span>
<span class="token punctuation">}</span>
</code></pre></div><p><strong><code>pages/_app.js</code></strong></p>
<div class="language-javascript" data-ext="js" data-title="js"><pre class="language-javascript"><code><span class="token keyword">export</span> <span class="token keyword">default</span> <span class="token keyword">function</span> <span class="token function">MyApp</span><span class="token punctuation">(</span><span class="token parameter"><span class="token punctuation">{</span> Component<span class="token punctuation">,</span> pageProps <span class="token punctuation">}</span></span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token comment">// Use the layout defined at the page level, if available</span>
  <span class="token keyword">const</span> getLayout <span class="token operator">=</span> Component<span class="token punctuation">.</span>getLayout <span class="token operator">??</span> <span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token parameter">page</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> page<span class="token punctuation">)</span>

  <span class="token keyword">return</span> <span class="token function">getLayout</span><span class="token punctuation">(</span><span class="token operator">&lt;</span>Component <span class="token punctuation">{</span><span class="token operator">...</span>pageProps<span class="token punctuation">}</span> <span class="token operator">/</span><span class="token operator">&gt;</span><span class="token punctuation">)</span>
<span class="token punctuation">}</span>
</code></pre></div><p>在页面之间导航时，我们希望持久保存页面状态（输入值、滚动位置等），以获得单页面应用程序 (SPA) 体验。</p>
<p>这种布局模式可以实现状态持久化，因为 React 组件树会在页面转换之间保持不变。通过组件树，React 可以了解哪些元素发生了变化，从而保持状态。</p>
<h3>使用 TypeScript</h3>
<p>使用 TypeScript 时，首先必须为页面创建一个包含 <code>getLayout</code> 函数的新类型。然后，您必须为您的 <code>AppProps</code> 创建一个新类型，重载 <code>Component</code> 属性以使用之前创建的类型。</p>
<p><strong><code>pages/index.tsx</code></strong></p>
<div class="language-typescript" data-ext="ts" data-title="ts"><pre class="language-typescript"><code><span class="token keyword">import</span> <span class="token keyword">type</span> <span class="token punctuation">{</span> ReactElement <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">'react'</span>
<span class="token keyword">import</span> Layout <span class="token keyword">from</span> <span class="token string">'../components/layout'</span>
<span class="token keyword">import</span> NestedLayout <span class="token keyword">from</span> <span class="token string">'../components/nested-layout'</span>
<span class="token keyword">import</span> <span class="token keyword">type</span> <span class="token punctuation">{</span> NextPageWithLayout <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">'./_app'</span>

<span class="token keyword">const</span> Page<span class="token operator">:</span> <span class="token function-variable function">NextPageWithLayout</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
  <span class="token keyword">return</span> <span class="token operator">&lt;</span>p<span class="token operator">&gt;</span>hello world<span class="token operator">&lt;</span><span class="token operator">/</span>p<span class="token operator">&gt;</span>
<span class="token punctuation">}</span>

Page<span class="token punctuation">.</span><span class="token function-variable function">getLayout</span> <span class="token operator">=</span> <span class="token keyword">function</span> <span class="token function">getLayout</span><span class="token punctuation">(</span>page<span class="token operator">:</span> ReactElement<span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token keyword">return</span> <span class="token punctuation">(</span>
    <span class="token operator">&lt;</span>Layout<span class="token operator">&gt;</span>
      <span class="token operator">&lt;</span>NestedLayout<span class="token operator">&gt;</span><span class="token punctuation">{</span>page<span class="token punctuation">}</span><span class="token operator">&lt;</span><span class="token operator">/</span>NestedLayout<span class="token operator">&gt;</span>
    <span class="token operator">&lt;</span><span class="token operator">/</span>Layout<span class="token operator">&gt;</span>
  <span class="token punctuation">)</span>
<span class="token punctuation">}</span>

<span class="token keyword">export</span> <span class="token keyword">default</span> Page
</code></pre></div><p><strong><code>pages/_app.tsx</code></strong></p>
<div class="language-typescript" data-ext="ts" data-title="ts"><pre class="language-typescript"><code><span class="token keyword">import</span> <span class="token keyword">type</span> <span class="token punctuation">{</span> ReactElement<span class="token punctuation">,</span> ReactNode <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">'react'</span>
<span class="token keyword">import</span> <span class="token keyword">type</span> <span class="token punctuation">{</span> NextPage <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">'next'</span>
<span class="token keyword">import</span> <span class="token keyword">type</span> <span class="token punctuation">{</span> AppProps <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">'next/app'</span>

<span class="token keyword">export</span> <span class="token keyword">type</span> <span class="token class-name">NextPageWithLayout<span class="token operator">&lt;</span><span class="token constant">P</span> <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">,</span> <span class="token constant">IP</span> <span class="token operator">=</span> <span class="token constant">P</span><span class="token operator">&gt;</span></span> <span class="token operator">=</span> NextPage<span class="token operator">&lt;</span><span class="token constant">P</span><span class="token punctuation">,</span> <span class="token constant">IP</span><span class="token operator">&gt;</span> <span class="token operator">&amp;</span> <span class="token punctuation">{</span>
  getLayout<span class="token operator">?</span><span class="token operator">:</span> <span class="token punctuation">(</span>page<span class="token operator">:</span> ReactElement<span class="token punctuation">)</span> <span class="token operator">=&gt;</span> ReactNode
<span class="token punctuation">}</span>

<span class="token keyword">type</span> <span class="token class-name">AppPropsWithLayout</span> <span class="token operator">=</span> AppProps <span class="token operator">&amp;</span> <span class="token punctuation">{</span>
  Component<span class="token operator">:</span> NextPageWithLayout
<span class="token punctuation">}</span>

<span class="token keyword">export</span> <span class="token keyword">default</span> <span class="token keyword">function</span> <span class="token function">MyApp</span><span class="token punctuation">(</span><span class="token punctuation">{</span> Component<span class="token punctuation">,</span> pageProps <span class="token punctuation">}</span><span class="token operator">:</span> AppPropsWithLayout<span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token comment">// Use the layout defined at the page level, if available</span>
  <span class="token keyword">const</span> getLayout <span class="token operator">=</span> Component<span class="token punctuation">.</span>getLayout <span class="token operator">??</span> <span class="token punctuation">(</span><span class="token punctuation">(</span>page<span class="token punctuation">)</span> <span class="token operator">=&gt;</span> page<span class="token punctuation">)</span>

  <span class="token keyword">return</span> <span class="token function">getLayout</span><span class="token punctuation">(</span><span class="token operator">&lt;</span>Component <span class="token punctuation">{</span><span class="token operator">...</span>pageProps<span class="token punctuation">}</span> <span class="token operator">/</span><span class="token operator">&gt;</span><span class="token punctuation">)</span>
<span class="token punctuation">}</span>
</code></pre></div><h3>获取数据</h3>
<p>在布局中，您可以使用 <code>useEffect</code> 或类似 <a href="https://swr.vercel.app/zh-CN" target="_blank" rel="noopener noreferrer">SWR</a> 的库在客户端获取数据。由于该文件不是页面，因此目前无法使用 <code>getStaticProps</code> 或 <code>getServerSideProps</code>。</p>
<div class="language-javascript" data-ext="js" data-title="js"><pre class="language-javascript"><code><span class="token keyword">import</span> useSWR <span class="token keyword">from</span> <span class="token string">'swr'</span>
<span class="token keyword">import</span> Navbar <span class="token keyword">from</span> <span class="token string">'./navbar'</span>
<span class="token keyword">import</span> Footer <span class="token keyword">from</span> <span class="token string">'./footer'</span>

<span class="token keyword">export</span> <span class="token keyword">default</span> <span class="token keyword">function</span> <span class="token function">Layout</span><span class="token punctuation">(</span><span class="token parameter"><span class="token punctuation">{</span> children <span class="token punctuation">}</span></span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token keyword">const</span> <span class="token punctuation">{</span> data<span class="token punctuation">,</span> error <span class="token punctuation">}</span> <span class="token operator">=</span> <span class="token function">useSWR</span><span class="token punctuation">(</span><span class="token string">'/api/navigation'</span><span class="token punctuation">,</span> fetcher<span class="token punctuation">)</span>

  <span class="token keyword">if</span> <span class="token punctuation">(</span>error<span class="token punctuation">)</span> <span class="token keyword">return</span> <span class="token operator">&lt;</span>div<span class="token operator">&gt;</span>Failed to load<span class="token operator">&lt;</span><span class="token operator">/</span>div<span class="token operator">&gt;</span>
  <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>data<span class="token punctuation">)</span> <span class="token keyword">return</span> <span class="token operator">&lt;</span>div<span class="token operator">&gt;</span>Loading<span class="token operator">...</span><span class="token operator">&lt;</span><span class="token operator">/</span>div<span class="token operator">&gt;</span>

  <span class="token keyword">return</span> <span class="token punctuation">(</span>
    <span class="token operator">&lt;</span><span class="token operator">&gt;</span>
      <span class="token operator">&lt;</span>Navbar links<span class="token operator">=</span><span class="token punctuation">{</span>data<span class="token punctuation">.</span>links<span class="token punctuation">}</span> <span class="token operator">/</span><span class="token operator">&gt;</span>
      <span class="token operator">&lt;</span>main<span class="token operator">&gt;</span><span class="token punctuation">{</span>children<span class="token punctuation">}</span><span class="token operator">&lt;</span><span class="token operator">/</span>main<span class="token operator">&gt;</span>
      <span class="token operator">&lt;</span>Footer <span class="token operator">/</span><span class="token operator">&gt;</span>
    <span class="token operator">&lt;</span><span class="token operator">/</span><span class="token operator">&gt;</span>
  <span class="token punctuation">)</span>
<span class="token punctuation">}</span>
</code></pre></div>]]></content>
    <category term="next"/>
    <published>2024-03-05T00:00:00.000Z</published>
  </entry>
  <entry>
    <title type="text">defer 和 async 的区别</title>
    <id>https://dribble-njr.github.io/blog/blog/frontend/basic/html/011-defer-vs-async.html</id>
    <link href="https://dribble-njr.github.io/blog/blog/frontend/basic/html/011-defer-vs-async.html"/>
    <updated>2024-03-04T11:59:34.000Z</updated>
    <summary type="html"><![CDATA[<p>HTML 中在页面插入 JavaScript 的主要方式就是使用 <code>&lt;script&gt;</code> 元素，可以直接在页面中嵌入 JavaScript 代码，但是一般来说，通常会通过 <code>src</code> 属性来引入外部脚本。</p>
<p>在  中提到了 <code>src</code> 会暂停当前页面的加载，直到获取、解析并执行完这个 JS 文件。这样就会阻塞后续文档的加载。</p>
<p>而使用 <code>defer</code> 和 <code>async</code> 都可以 <strong>异步加载</strong> 外部的 JavaScript 脚本，主要区别如下：</p>]]></summary>
    <content type="html"><![CDATA[<p>HTML 中在页面插入 JavaScript 的主要方式就是使用 <code>&lt;script&gt;</code> 元素，可以直接在页面中嵌入 JavaScript 代码，但是一般来说，通常会通过 <code>src</code> 属性来引入外部脚本。</p>
<p>在  中提到了 <code>src</code> 会暂停当前页面的加载，直到获取、解析并执行完这个 JS 文件。这样就会阻塞后续文档的加载。</p>
<p>而使用 <code>defer</code> 和 <code>async</code> 都可以 <strong>异步加载</strong> 外部的 JavaScript 脚本，主要区别如下：</p>
<ul>
<li><strong>执行顺序</strong>：多个带 <code>async</code> 属性的标签，不能保证加载的顺序；多个带 <code>defer</code> 属性的标签，按照加载顺序执行；</li>
<li><strong>脚本何时执行</strong>：<code>async</code> 属性表示脚本加载完成后立即执行，不会等到文档解析完成。<code>defer</code> 属性表示脚本加载完成后还需等到所有元素解析完成，即 <code>DOMContentLoaded</code> 事件触发前完成。</li>
</ul>
]]></content>
    <category term="HTML"/>
    <published>2022-07-25T00:00:00.000Z</published>
  </entry>
  <entry>
    <title type="text">HTML5 新特性</title>
    <id>https://dribble-njr.github.io/blog/blog/frontend/basic/html/010-html5.html</id>
    <link href="https://dribble-njr.github.io/blog/blog/frontend/basic/html/010-html5.html"/>
    <updated>2024-03-04T11:54:28.000Z</updated>
    <summary type="html"><![CDATA[<p>HTML5 总共以下新特性，但不支持 IE8 及以下版本浏览器。</p>
<ol>
<li>语义化标签</li>
<li>增强型表单</li>
<li>视频和音频</li>
<li>Canvas 绘图</li>
<li>SVG 绘图</li>
<li>地理定位 API</li>
<li>拖拽 API</li>
<li>WebWorker</li>
<li>WebStorage</li>
<li>WebSocket</li>
<li>选择器 <code>query.selector</code> 和 <code>query.selectorAll</code></li>
</ol>
]]></summary>
    <content type="html"><![CDATA[<p>HTML5 总共以下新特性，但不支持 IE8 及以下版本浏览器。</p>
<ol>
<li>语义化标签</li>
<li>增强型表单</li>
<li>视频和音频</li>
<li>Canvas 绘图</li>
<li>SVG 绘图</li>
<li>地理定位 API</li>
<li>拖拽 API</li>
<li>WebWorker</li>
<li>WebStorage</li>
<li>WebSocket</li>
<li>选择器 <code>query.selector</code> 和 <code>query.selectorAll</code></li>
</ol>
]]></content>
    <category term="HTML"/>
    <published>2022-04-30T00:00:00.000Z</published>
  </entry>
  <entry>
    <title type="text">src 和 href 的区别</title>
    <id>https://dribble-njr.github.io/blog/blog/frontend/basic/html/009-src-vs-href.html</id>
    <link href="https://dribble-njr.github.io/blog/blog/frontend/basic/html/009-src-vs-href.html"/>
    <updated>2024-03-04T11:50:03.000Z</updated>
    <summary type="html"><![CDATA[<p><code>src</code> 和 <code>href</code> 之间存在区别，不能互换使用。</p>
<ul>
<li><code>src</code>：表示对资源的 <strong>引入</strong>，它指向的内容会被浏览器替换，嵌入到当前标签所在的位置；</li>
<li><code>href</code>：表示对资源的 <strong>引用</strong>，建立当前元素或当前文档和外部资源之间的链接关系。</li>
</ul>
<h2>src</h2>
<p><code>src</code>(Source) 属性仅仅表示会在此文档当前元素的位置上嵌入资源，它会 <strong>暂停其他资源的下载和处理</strong>。比如，当浏览器读到：</p>]]></summary>
    <content type="html"><![CDATA[<p><code>src</code> 和 <code>href</code> 之间存在区别，不能互换使用。</p>
<ul>
<li><code>src</code>：表示对资源的 <strong>引入</strong>，它指向的内容会被浏览器替换，嵌入到当前标签所在的位置；</li>
<li><code>href</code>：表示对资源的 <strong>引用</strong>，建立当前元素或当前文档和外部资源之间的链接关系。</li>
</ul>
<h2>src</h2>
<p><code>src</code>(Source) 属性仅仅表示会在此文档当前元素的位置上嵌入资源，它会 <strong>暂停其他资源的下载和处理</strong>。比如，当浏览器读到：</p>
<div class="language-javascript" data-ext="js" data-title="js"><pre class="language-javascript"><code><span class="token operator">&lt;</span>script src<span class="token operator">=</span><span class="token string">"script.js"</span><span class="token operator">&gt;</span><span class="token operator">&lt;</span><span class="token operator">/</span>script<span class="token operator">&gt;</span>
</code></pre></div><p>那么浏览器会暂停当前页面的加载，直到获取、解析并执行完这个 JS 文件。它类似于将 JS 文件的内容转存到 <code>&lt;script&gt;</code> 标签中。</p>
<div class="hint-container tip">
<p class="hint-container-title">提示</p>
<p>这就是为什么需要将 <code>&lt;script&gt;</code> 标签放到最后。</p>
</div>
<p><code>&lt;img&gt;</code> 标签也类似，它是一个空标签，包含的内容由 <code>src</code> 属性定义，当遇到这个标签，浏览器也会停止加载页面，直到获取并加载这个图片。</p>
<p>类似的，<code>&lt;iframe&gt;</code> 标签也一样。</p>
<h2>href</h2>
<p><code>href</code>(Hypertext Reference) 属性即超文本引用，它会指定 Web 资源的位置，从而定义当前链接（<code>&lt;a&gt;</code> 标签）或当前文档（<code>link</code> 标签）与目标之间的联系，<strong>不会暂停对当前文档的解析</strong>。</p>
<p>比如：</p>
<div class="language-html" data-ext="html" data-title="html"><pre class="language-html"><code><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>link</span> <span class="token attr-name">href</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>style.css<span class="token punctuation">"</span></span> <span class="token attr-name">rel</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>stylesheet<span class="token punctuation">"</span></span> <span class="token punctuation">/&gt;</span></span>
</code></pre></div><p>浏览器会知道这是个 CSS 文件，HTML 的解析 <strong>不会</strong> 暂停，但是渲染有可能暂停，因为浏览器需要知道样式规则。</p>
]]></content>
    <category term="HTML"/>
    <published>2022-04-28T00:00:00.000Z</published>
  </entry>
  <entry>
    <title type="text">怎样实现响应式网页布局</title>
    <id>https://dribble-njr.github.io/blog/blog/frontend/basic/css/016-how-to-responsive.html</id>
    <link href="https://dribble-njr.github.io/blog/blog/frontend/basic/css/016-how-to-responsive.html"/>
    <updated>2024-03-04T10:51:20.000Z</updated>
    <summary type="html"><![CDATA[<h2>设置响应式断点</h2>
<p><a href="https://tailwindcss.com/docs/responsive-design" target="_blank" rel="noopener noreferrer"><code>tailwind</code></a> 典型的断点如下：</p>
<div class="language-css" data-ext="css" data-title="css"><pre class="language-css"><code><span class="token atrule"><span class="token rule">@media</span> <span class="token punctuation">(</span><span class="token property">min-width</span><span class="token punctuation">:</span> 640px<span class="token punctuation">)</span></span> <span class="token punctuation">{</span>
  <span class="token comment">/* ... */</span>
<span class="token punctuation">}</span>
<span class="token atrule"><span class="token rule">@media</span> <span class="token punctuation">(</span><span class="token property">min-width</span><span class="token punctuation">:</span> 768px<span class="token punctuation">)</span></span> <span class="token punctuation">{</span>
  <span class="token comment">/* ... */</span>
<span class="token punctuation">}</span>
<span class="token atrule"><span class="token rule">@media</span> <span class="token punctuation">(</span><span class="token property">min-width</span><span class="token punctuation">:</span> 1024px<span class="token punctuation">)</span></span> <span class="token punctuation">{</span>
  <span class="token comment">/* ... */</span>
<span class="token punctuation">}</span>
<span class="token atrule"><span class="token rule">@media</span> <span class="token punctuation">(</span><span class="token property">min-width</span><span class="token punctuation">:</span> 1280px<span class="token punctuation">)</span></span> <span class="token punctuation">{</span>
  <span class="token comment">/* ... */</span>
<span class="token punctuation">}</span>
<span class="token atrule"><span class="token rule">@media</span> <span class="token punctuation">(</span><span class="token property">min-width</span><span class="token punctuation">:</span> 1536px<span class="token punctuation">)</span></span> <span class="token punctuation">{</span>
  <span class="token comment">/* ... */</span>
<span class="token punctuation">}</span>
</code></pre></div>]]></summary>
    <content type="html"><![CDATA[<h2>设置响应式断点</h2>
<p><a href="https://tailwindcss.com/docs/responsive-design" target="_blank" rel="noopener noreferrer"><code>tailwind</code></a> 典型的断点如下：</p>
<div class="language-css" data-ext="css" data-title="css"><pre class="language-css"><code><span class="token atrule"><span class="token rule">@media</span> <span class="token punctuation">(</span><span class="token property">min-width</span><span class="token punctuation">:</span> 640px<span class="token punctuation">)</span></span> <span class="token punctuation">{</span>
  <span class="token comment">/* ... */</span>
<span class="token punctuation">}</span>
<span class="token atrule"><span class="token rule">@media</span> <span class="token punctuation">(</span><span class="token property">min-width</span><span class="token punctuation">:</span> 768px<span class="token punctuation">)</span></span> <span class="token punctuation">{</span>
  <span class="token comment">/* ... */</span>
<span class="token punctuation">}</span>
<span class="token atrule"><span class="token rule">@media</span> <span class="token punctuation">(</span><span class="token property">min-width</span><span class="token punctuation">:</span> 1024px<span class="token punctuation">)</span></span> <span class="token punctuation">{</span>
  <span class="token comment">/* ... */</span>
<span class="token punctuation">}</span>
<span class="token atrule"><span class="token rule">@media</span> <span class="token punctuation">(</span><span class="token property">min-width</span><span class="token punctuation">:</span> 1280px<span class="token punctuation">)</span></span> <span class="token punctuation">{</span>
  <span class="token comment">/* ... */</span>
<span class="token punctuation">}</span>
<span class="token atrule"><span class="token rule">@media</span> <span class="token punctuation">(</span><span class="token property">min-width</span><span class="token punctuation">:</span> 1536px<span class="token punctuation">)</span></span> <span class="token punctuation">{</span>
  <span class="token comment">/* ... */</span>
<span class="token punctuation">}</span>
</code></pre></div><p><a href="">Bootstrap</a> 断点如下：</p>
<div class="language-css" data-ext="css" data-title="css"><pre class="language-css"><code><span class="token atrule"><span class="token rule">@media</span> <span class="token punctuation">(</span><span class="token property">min-width</span><span class="token punctuation">:</span> 576px<span class="token punctuation">)</span></span> <span class="token punctuation">{</span>
  <span class="token comment">/* ... */</span>
<span class="token punctuation">}</span>
<span class="token atrule"><span class="token rule">@media</span> <span class="token punctuation">(</span><span class="token property">min-width</span><span class="token punctuation">:</span> 768px<span class="token punctuation">)</span></span> <span class="token punctuation">{</span>
  <span class="token comment">/* ... */</span>
<span class="token punctuation">}</span>
<span class="token atrule"><span class="token rule">@media</span> <span class="token punctuation">(</span><span class="token property">min-width</span><span class="token punctuation">:</span> 992px<span class="token punctuation">)</span></span> <span class="token punctuation">{</span>
  <span class="token comment">/* ... */</span>
<span class="token punctuation">}</span>
<span class="token atrule"><span class="token rule">@media</span> <span class="token punctuation">(</span><span class="token property">min-width</span><span class="token punctuation">:</span> 1200px<span class="token punctuation">)</span></span> <span class="token punctuation">{</span>
  <span class="token comment">/* ... */</span>
<span class="token punctuation">}</span>
<span class="token atrule"><span class="token rule">@media</span> <span class="token punctuation">(</span><span class="token property">min-width</span><span class="token punctuation">:</span> 1400px<span class="token punctuation">)</span></span> <span class="token punctuation">{</span>
  <span class="token comment">/* ... */</span>
<span class="token punctuation">}</span>
</code></pre></div><h2>用百分比确定布局元素的大小或创建 CSS 网格布局</h2>
<p>布局容器的数量取决于设计，但大多数网站都将重点放在以下元素上：</p>
<ul>
<li>Wrapper or Container</li>
<li>Header</li>
<li>Content</li>
<li>Sidebar</li>
<li>Footer</li>
</ul>
<figure><img src="https://raw.githubusercontent.com/dribble-njr/typora-njr/master/img/20240304183547.png" alt="Common layout" tabindex="0" loading="lazy"><figcaption>Common layout</figcaption></figure>
<p>根据 ，你可以像这样设计主要布局元素的样式（针对手机的基本样式不使用媒体查询）：</p>
<div class="language-css" data-ext="css" data-title="css"><pre class="language-css"><code><span class="token selector">#wrapper</span> <span class="token punctuation">{</span>
  <span class="token property">width</span><span class="token punctuation">:</span> 95%<span class="token punctuation">;</span>
  <span class="token property">margin</span><span class="token punctuation">:</span> 0 auto<span class="token punctuation">;</span>
<span class="token punctuation">}</span>

<span class="token selector">#header</span> <span class="token punctuation">{</span>
  <span class="token property">width</span><span class="token punctuation">:</span> 100%<span class="token punctuation">;</span>
<span class="token punctuation">}</span>

<span class="token selector">#content</span> <span class="token punctuation">{</span>
  <span class="token property">width</span><span class="token punctuation">:</span> 100%<span class="token punctuation">;</span>
<span class="token punctuation">}</span>

<span class="token selector">#sidebar</span> <span class="token punctuation">{</span>
  <span class="token property">width</span><span class="token punctuation">:</span> 100%<span class="token punctuation">;</span>
<span class="token punctuation">}</span>

<span class="token selector">#footer</span> <span class="token punctuation">{</span>
  <span class="token property">width</span><span class="token punctuation">:</span> 100%<span class="token punctuation">;</span>
<span class="token punctuation">}</span>

<span class="token comment">/* Small devices (landscape phones, 576px and up) */</span>

<span class="token atrule"><span class="token rule">@media</span> <span class="token punctuation">(</span><span class="token property">min-width</span><span class="token punctuation">:</span> 576px<span class="token punctuation">)</span></span> <span class="token punctuation">{</span>
  <span class="token comment">/* ... */</span>
<span class="token punctuation">}</span>

<span class="token comment">/* Medium devices (tablets, 768px and up) */</span>

<span class="token atrule"><span class="token rule">@media</span> <span class="token punctuation">(</span><span class="token property">min-width</span><span class="token punctuation">:</span> 768px<span class="token punctuation">)</span></span> <span class="token punctuation">{</span>
  <span class="token selector">#wrapper</span> <span class="token punctuation">{</span>
    <span class="token property">width</span><span class="token punctuation">:</span> 90%<span class="token punctuation">;</span>
    <span class="token property">margin</span><span class="token punctuation">:</span> 0 auto<span class="token punctuation">;</span>
  <span class="token punctuation">}</span>

  <span class="token selector">#content</span> <span class="token punctuation">{</span>
    <span class="token property">width</span><span class="token punctuation">:</span> 70%<span class="token punctuation">;</span>
    <span class="token property">float</span><span class="token punctuation">:</span> left<span class="token punctuation">;</span>
  <span class="token punctuation">}</span>

  <span class="token selector">#sidebar</span> <span class="token punctuation">{</span>
    <span class="token property">width</span><span class="token punctuation">:</span> 30%<span class="token punctuation">;</span>
    <span class="token property">float</span><span class="token punctuation">:</span> right<span class="token punctuation">;</span>
  <span class="token punctuation">}</span>
<span class="token punctuation">}</span>

<span class="token comment">/* Large devices (desktops, 992px and up) */</span>

<span class="token atrule"><span class="token rule">@media</span> <span class="token punctuation">(</span><span class="token property">min-width</span><span class="token punctuation">:</span> 992px<span class="token punctuation">)</span></span> <span class="token punctuation">{</span>
  <span class="token comment">/* ... */</span>
<span class="token punctuation">}</span>

<span class="token comment">/* Extra large devices (large desktops, 1200px and up) */</span>

<span class="token atrule"><span class="token rule">@media</span> <span class="token punctuation">(</span><span class="token property">min-width</span><span class="token punctuation">:</span> 1200px<span class="token punctuation">)</span></span> <span class="token punctuation">{</span>
  <span class="token selector">#wrapper</span> <span class="token punctuation">{</span>
    <span class="token property">width</span><span class="token punctuation">:</span> 90%<span class="token punctuation">;</span>
    <span class="token property">margin</span><span class="token punctuation">:</span> 0 auto<span class="token punctuation">;</span>
  <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre></div><p>在基于百分比的方法中， 属性控制元素显示在屏幕的左侧或右侧。</p>
<p>如果要完成响应式设计，还需要熟悉 CSS 的  布局及其它属性，如 。</p>
<h2>响应式图片</h2>
<p>见 。</p>
<h2>响应式文字</h2>
<p>响应式网页设计的重点在于布局块、元素和媒体的响应性。文字往往是事后才考虑的问题。</p>
<p>但要实现真正的响应式设计，还应该根据屏幕尺寸适当调整字体大小。</p>
<p>最简单的方法是为字体大小设置一个静态值，如 <code>22px</code>，并在每个媒体查询中进行调整。</p>
<figure><img src="https://raw.githubusercontent.com/dribble-njr/typora-njr/master/img/20240304184534.png" alt="Font size vs view size scatter points" tabindex="0" loading="lazy"><figcaption>Font size vs view size scatter points</figcaption></figure>
<div class="hint-container tip">
<p class="hint-container-title">提示</p>
<p>一般设置 <code>html</code> 字体大小，并使用 <code>rem</code> 单位，或使用插件转换为「视口」单位。</p>
<p>相关阅读：</p>
<ul>
<li></li>
<li></li>
</ul>
</div>
]]></content>
    <category term="CSS"/>
    <published>2024-03-04T00:00:00.000Z</published>
  </entry>
  <entry>
    <title type="text">响应式设计介绍</title>
    <id>https://dribble-njr.github.io/blog/blog/frontend/basic/css/014-responsive-design-intro.html</id>
    <link href="https://dribble-njr.github.io/blog/blog/frontend/basic/css/014-responsive-design-intro.html"/>
    <updated>2024-03-04T10:51:20.000Z</updated>
    <summary type="html"><![CDATA[<p>响应式设计是一种使网页内容适应各种设备的不同屏幕和窗口尺寸的网页设计方法。</p>
<p>它并不是设计网站的第一种方法。在采用响应式设计之前的几年里，网页设计师和开发人员尝试过许多不同的技术。</p>
<h2>固定宽度设计</h2>
<p>20 世纪 90 年代初，当网络开始流行时，大多数显示器的屏幕尺寸为宽 <code>640</code> 像素、高 <code>480</code> 像素。这些显示器是凸面阴极射线管，与现在的平面液晶显示器不同。</p>
<p>在早期网页设计的雏形时期，设计宽度为 <code>640</code> 像素的网页是比较安全的。但是，在手机和相机等其他技术不断微型化的同时，屏幕却越来越大（最终变得越来越扁平）。</p>]]></summary>
    <content type="html"><![CDATA[<p>响应式设计是一种使网页内容适应各种设备的不同屏幕和窗口尺寸的网页设计方法。</p>
<p>它并不是设计网站的第一种方法。在采用响应式设计之前的几年里，网页设计师和开发人员尝试过许多不同的技术。</p>
<h2>固定宽度设计</h2>
<p>20 世纪 90 年代初，当网络开始流行时，大多数显示器的屏幕尺寸为宽 <code>640</code> 像素、高 <code>480</code> 像素。这些显示器是凸面阴极射线管，与现在的平面液晶显示器不同。</p>
<p>在早期网页设计的雏形时期，设计宽度为 <code>640</code> 像素的网页是比较安全的。但是，在手机和相机等其他技术不断微型化的同时，屏幕却越来越大（最终变得越来越扁平）。</p>
<p>不久之后，大多数屏幕的尺寸都达到了 <code>800 x 600</code> 像素。网页设计也随之改变。设计师和开发人员开始认为 <code>800</code> 像素是一个安全的默认值。</p>
<p>后来，屏幕又变大了。<code>1024 x 768</code> 成为默认值。这感觉就像是网页设计师和硬件制造商之间的军备竞赛。</p>
<p>无论是 <code>640</code>、<code>800</code> 还是 <code>1024</code> 像素，选择一种特定宽度进行设计被称为「固定宽度设计」。</p>
<p>如果你为布局指定了一个固定的宽度，那么你的布局只能在这个特定的宽度下才好看。如果访问者的屏幕比你选择的宽度更宽，那么屏幕上就会出现浪费的空间。你可以将页面内容居中，使空间分布更均匀（而不是一边空着），但你仍然无法充分利用可用空间。</p>
<p>同样，如果访客的屏幕比您选择的宽度窄，那么您的内容就无法横向显示。浏览器会生成一个爬行条--相当于水平滚动条，用户必须左右移动整个页面才能看到所有内容。</p>

<h2>流体布局</h2>
<p>虽然大多数设计者都使用固定宽度布局，但也有一些设计者选择流体布局。与使用固定宽度的布局相比，你可以使用百分比作为列宽来制作流体布局。与只能在特定尺寸下看起来合适的固定宽度布局相比，这些设计适用于更多情况。</p>
<p>这就是所谓的流体布局。不过，虽然液态布局在各种宽度下都很美观，但在极端情况下就会开始恶化。在宽屏幕上，布局看起来被拉伸。而在窄屏幕上，布局则显得拥挤。这两种情况都不理想。</p>
<p>使用 <code>min-width</code> 和 <code>max-width</code> 布局可以缓解这些问题。但是，在 <code>min-width</code> 以下或 <code>max-width</code> 以上的任何尺寸下，都会出现与固定宽度布局相同的问题。在宽屏幕上，未使用的空间会被浪费。在窄屏幕上，用户必须左右移动整个页面才能看到所有内容。</p>

<h2>自适应布局</h2>
<p>当 CSS 出现媒体查询时，可以实现更灵活的布局。</p>
<p>其中一种技术就是在指定宽度的几个固定宽度布局之间切换。有人称之为「自适应设计」。</p>
<p>自适应设计允许设计人员提供在几种不同尺寸下看起来都不错的布局，但在这些尺寸之间查看时，设计看起来总是不太合适。空间过大的问题依然存在，尽管不像固定宽度布局那样严重。</p>
<p>使用 CSS 媒体查询，可以为用户提供最接近其浏览器宽度的布局。但鉴于设备尺寸的多样性，对于大多数人来说，这种布局很可能看起来并不完美。</p>

<h2>响应式布局</h2>
<p>如果说自适应布局是媒体查询和固定宽度布局的混合体，那么响应式网页设计就是媒体查询和液体布局的混合体。</p>

]]></content>
    <category term="CSS"/>
    <published>2024-03-04T00:00:00.000Z</published>
  </entry>
  <entry>
    <title type="text">响应式设计</title>
    <id>https://dribble-njr.github.io/blog/blog/frontend/basic/css/015-responsive-design.html</id>
    <link href="https://dribble-njr.github.io/blog/blog/frontend/basic/css/015-responsive-design.html"/>
    <updated>2024-03-04T09:14:57.000Z</updated>
    <summary type="html"><![CDATA[<h2>概念</h2>
<ul>
<li>响应式网页设计可让网页在所有设备上都美观大方。</li>
<li>响应式网页设计只使用 HTML 和 CSS。</li>
<li>响应式网页设计不是一个程序或 JavaScript。</li>
</ul>
<p>网页可以通过多种不同设备浏览：台式电脑、平板电脑和手机。无论使用何种设备，您的网页都应美观大方，易于使用。</p>
<p>网页不应为了适应较小的设备而遗漏信息，而应调整内容以适应任何设备：</p>
<figure><img src="https://raw.githubusercontent.com/dribble-njr/typora-njr/master/img/20240228125357.png" alt="适应任何设备" tabindex="0" loading="lazy"><figcaption>适应任何设备</figcaption></figure>]]></summary>
    <content type="html"><![CDATA[<h2>概念</h2>
<ul>
<li>响应式网页设计可让网页在所有设备上都美观大方。</li>
<li>响应式网页设计只使用 HTML 和 CSS。</li>
<li>响应式网页设计不是一个程序或 JavaScript。</li>
</ul>
<p>网页可以通过多种不同设备浏览：台式电脑、平板电脑和手机。无论使用何种设备，您的网页都应美观大方，易于使用。</p>
<p>网页不应为了适应较小的设备而遗漏信息，而应调整内容以适应任何设备：</p>
<figure><img src="https://raw.githubusercontent.com/dribble-njr/typora-njr/master/img/20240228125357.png" alt="适应任何设备" tabindex="0" loading="lazy"><figcaption>适应任何设备</figcaption></figure>
<p>如果使用 CSS 和 HTML 来调整、隐藏、缩小、放大或移动内容，使其在任何屏幕上看起来都很美观，这就是所谓的响应式网页设计。</p>

<p>接下来会逐步介绍相关概念并实现这个例子。</p>
<h2>视口 <code>viewport</code></h2>
<h3>概念</h3>
<p>视口是用户在网页上的可见区域。</p>
<p>视口因设备而异，手机上的视口会比电脑屏幕上的小。</p>
<p>在平板电脑和手机出现之前，网页只针对电脑屏幕设计，网页通常采用静态设计和固定尺寸。</p>
<p>后来，当我们开始使用平板电脑和手机上网时，固定尺寸的网页太大，无法适应视口。为了解决这个问题，这些设备上的浏览器缩小了整个网页以适应屏幕。</p>
<h3>设置视口</h3>
<p>HTML5 引入了一种方法，让网页设计师通过 <code>&lt;meta&gt;</code> 标签来控制视口。</p>
<p>应在所有网页中包含以下 <code>&lt;meta&gt;</code> 视口元素：</p>
<div class="language-html" data-ext="html" data-title="html"><pre class="language-html"><code><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>meta</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>viewport<span class="token punctuation">"</span></span> <span class="token attr-name">content</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>width=device-width, initial-scale=1.0<span class="token punctuation">"</span></span> <span class="token punctuation">/&gt;</span></span>
</code></pre></div><p>这就为浏览器提供了如何控制页面尺寸和缩放比例的说明。</p>
<p><code>width=device-width</code> 部分将页面宽度设置为设备的屏幕宽度（因设备而异）。</p>
<p><code>initial-scale=1.0</code> 部分设置浏览器首次加载页面时的初始缩放级别。</p>
<p>下面是一个未使用视口 <code>&lt;meta&gt;</code> 标签的网页和使用视口 <code>&lt;meta&gt;</code> 标签的网页的示例：</p>
<figure><img src="https://raw.githubusercontent.com/dribble-njr/typora-njr/master/img/20240228184703.png" alt="未使用视口元标签" tabindex="0" loading="lazy"><figcaption>未使用视口元标签</figcaption></figure>
<figure><img src="https://raw.githubusercontent.com/dribble-njr/typora-njr/master/img/20240228184730.png" alt="使用视口元标签" tabindex="0" loading="lazy"><figcaption>使用视口元标签</figcaption></figure>
<h3>根据视口调整内容大小</h3>
<p>用户习惯在台式机和移动设备上垂直滚动网站，但不习惯水平滚动！</p>
<p>因此，如果用户被迫水平滚动或缩放才能看到整个网页，就会造成糟糕的用户体验。</p>
<p>需要遵循的其他一些规则：</p>
<ol>
<li>切勿使用固定宽度的大型元素 —— 例如，如果显示的图片宽度大于视口宽度，就会导致视口水平滚动。切记调整这些内容，使其适合视口宽度。</li>
<li>不要让内容依赖特定的视口宽度来呈现 —— 由于不同设备的屏幕尺寸和 CSS 像素宽度差异很大，因此内容不应依赖特定的视口宽度来呈现。</li>
<li>使用 CSS 媒体查询为大屏幕和小屏幕应用不同的样式 —— 为页面元素设置较大的绝对 CSS 宽度会导致元素对于较小设备的视口来说过宽。取而代之的是，考虑使用相对宽度值，如 width: 100%。此外，使用较大的绝对定位值也要小心。它可能会导致元素在小型设备上超出视口。</li>
</ol>
<h2>网格</h2>
<h3>概念</h3>
<p>许多网页都采用网格视图，即把网页分成几列：</p>
<p>在设计网页时，使用网格视图非常有帮助。它能让你更轻松地在页面上放置元素。</p>
<p>响应式网格视图通常有 12 列，总宽度为 100%，会随着浏览器窗口大小的调整而缩小或展开。</p>
<h3>建立响应式网格视图</h3>
<p>首先确保所有 HTML 元素的框大小属性都设置为 <code>border-box</code>。这样就能确保元素的总宽度和高度中包含 <code>padding</code> 和 <code>border</code>。</p>
<p>在 CSS 中添加以下代码：</p>
<div class="language-css" data-ext="css" data-title="css"><pre class="language-css"><code><span class="token selector">*</span> <span class="token punctuation">{</span>
  <span class="token property">box-sizing</span><span class="token punctuation">:</span> border-box；<span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre></div><p>有关 <code>box-sizing</code> 属性的更多信息，请参阅 。</p>
<p>下面的示例展示了一个简单的响应式网页，有两列：</p>

<p>如果网页只包含两列，上面的示例就没问题。</p>
<p>但是，我们希望使用有 12 列的响应式网格视图，以便对网页有更多的控制。</p>
<p>首先，我们必须计算一列的百分比：100% / 12 列 = 8.33%。</p>
<p>然后，我们为 12 列中的每一列创建一个类，<code>class="col-"</code>，并用一个数字定义该部分应跨越多少列：</p>
<div class="language-css" data-ext="css" data-title="css"><pre class="language-css"><code><span class="token selector">.col-1</span> <span class="token punctuation">{</span>
  <span class="token property">width</span><span class="token punctuation">:</span> 8.33%<span class="token punctuation">;</span>
<span class="token punctuation">}</span>
<span class="token selector">.col-2</span> <span class="token punctuation">{</span>
  <span class="token property">width</span><span class="token punctuation">:</span> 16.66%<span class="token punctuation">;</span>
<span class="token punctuation">}</span>
<span class="token selector">.col-3</span> <span class="token punctuation">{</span>
  <span class="token property">width</span><span class="token punctuation">:</span> 25%<span class="token punctuation">;</span>
<span class="token punctuation">}</span>
<span class="token selector">.col-4</span> <span class="token punctuation">{</span>
  <span class="token property">width</span><span class="token punctuation">:</span> 33.33%<span class="token punctuation">;</span>
<span class="token punctuation">}</span>
<span class="token selector">.col-5</span> <span class="token punctuation">{</span>
  <span class="token property">width</span><span class="token punctuation">:</span> 41.66%<span class="token punctuation">;</span>
<span class="token punctuation">}</span>
<span class="token selector">.col-6</span> <span class="token punctuation">{</span>
  <span class="token property">width</span><span class="token punctuation">:</span> 50%<span class="token punctuation">;</span>
<span class="token punctuation">}</span>
<span class="token selector">.col-7</span> <span class="token punctuation">{</span>
  <span class="token property">width</span><span class="token punctuation">:</span> 58.33%<span class="token punctuation">;</span>
<span class="token punctuation">}</span>
<span class="token selector">.col-8</span> <span class="token punctuation">{</span>
  <span class="token property">width</span><span class="token punctuation">:</span> 66.66%<span class="token punctuation">;</span>
<span class="token punctuation">}</span>
<span class="token selector">.col-9</span> <span class="token punctuation">{</span>
  <span class="token property">width</span><span class="token punctuation">:</span> 75%<span class="token punctuation">;</span>
<span class="token punctuation">}</span>
<span class="token selector">.col-10</span> <span class="token punctuation">{</span>
  <span class="token property">width</span><span class="token punctuation">:</span> 83.33%<span class="token punctuation">;</span>
<span class="token punctuation">}</span>
<span class="token selector">.col-11</span> <span class="token punctuation">{</span>
  <span class="token property">width</span><span class="token punctuation">:</span> 91.66%<span class="token punctuation">;</span>
<span class="token punctuation">}</span>
<span class="token selector">.col-12</span> <span class="token punctuation">{</span>
  <span class="token property">width</span><span class="token punctuation">:</span> 100%<span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre></div><p>所有这些列都应向左浮动，并有 <code>15px</code> 的边距：</p>
<div class="language-css" data-ext="css" data-title="css"><pre class="language-css"><code><span class="token selector">[class*='col-']</span> <span class="token punctuation">{</span>
  <span class="token property">float</span><span class="token punctuation">:</span> left<span class="token punctuation">;</span>
  <span class="token property">padding</span><span class="token punctuation">:</span> 15px<span class="token punctuation">;</span>
  <span class="token property">border</span><span class="token punctuation">:</span> 1px solid red<span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre></div><p>每一行都应包裹在 <code>&lt;div&gt;</code> 中。一行内的列数相加应为 12：</p>
<div class="language-html" data-ext="html" data-title="html"><pre class="language-html"><code><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>row<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span>
  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>col-3<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span>...<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">&gt;</span></span>
  <span class="token comment">&lt;!-- 25% --&gt;</span>
  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>col-9<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span>...<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">&gt;</span></span>
  <span class="token comment">&lt;!-- 75% --&gt;</span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">&gt;</span></span>
</code></pre></div><p>行内的列都会向左浮动，因此会脱离页面的流程，其他元素的放置就好像这些列不存在一样。为了避免这种情况，添加一种样式来 ：</p>
<div class="language-css" data-ext="css" data-title="css"><pre class="language-css"><code><span class="token selector">.row::after</span> <span class="token punctuation">{</span>
  <span class="token property">content</span><span class="token punctuation">:</span> <span class="token string">''</span><span class="token punctuation">;</span>
  <span class="token property">clear</span><span class="token punctuation">:</span> both<span class="token punctuation">;</span>
  <span class="token property">display</span><span class="token punctuation">:</span> table<span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre></div><p>最后添加一些样式：</p>

<div class="hint-container tip">
<p class="hint-container-title">注意</p>
<p>将浏览器窗口调整到非常小的宽度时，示例中的网页看起来并不好。在下一章中，你将学习如何解决这个问题。</p>
</div>
<h2>媒体查询</h2>
<h3>概念</h3>
<p>媒体查询是 CSS3 中引入的一种 CSS 技术。</p>
<p>它使用 <code>@media</code> 规则，只有在特定条件为真的情况下才会包含 CSS 属性块。</p>

<h3>添加手机断点</h3>
<p>前面制作了一个有行和列的网页，它是响应式的，但在小屏幕上看起来并不好。</p>
<p>媒体查询可以帮助我们解决这个问题。我们可以添加一个断点，在断点两侧，设计的某些部分会有不同的表现。</p>
<figure><img src="https://raw.githubusercontent.com/dribble-njr/typora-njr/master/img/20240228205102.png" alt="desktop" tabindex="0" loading="lazy"><figcaption>desktop</figcaption></figure>
<figure><img src="https://raw.githubusercontent.com/dribble-njr/typora-njr/master/img/20240228205114.png" alt="phone" tabindex="0" loading="lazy"><figcaption>phone</figcaption></figure>
<p>使用媒体查询在 <code>768px</code> 处添加断点：</p>
<p>当屏幕（浏览器窗口）小于 <code>768px</code> 时，每列的宽度应为 <code>100%</code>：</p>
<div class="language-css" data-ext="css" data-title="css"><pre class="language-css"><code><span class="token comment">/* For desktop: */</span>
<span class="token selector">.col-1</span> <span class="token punctuation">{</span>
  <span class="token property">width</span><span class="token punctuation">:</span> 8.33%<span class="token punctuation">;</span>
<span class="token punctuation">}</span>
<span class="token selector">.col-2</span> <span class="token punctuation">{</span>
  <span class="token property">width</span><span class="token punctuation">:</span> 16.66%<span class="token punctuation">;</span>
<span class="token punctuation">}</span>
<span class="token selector">.col-3</span> <span class="token punctuation">{</span>
  <span class="token property">width</span><span class="token punctuation">:</span> 25%<span class="token punctuation">;</span>
<span class="token punctuation">}</span>
<span class="token selector">.col-4</span> <span class="token punctuation">{</span>
  <span class="token property">width</span><span class="token punctuation">:</span> 33.33%<span class="token punctuation">;</span>
<span class="token punctuation">}</span>
<span class="token selector">.col-5</span> <span class="token punctuation">{</span>
  <span class="token property">width</span><span class="token punctuation">:</span> 41.66%<span class="token punctuation">;</span>
<span class="token punctuation">}</span>
<span class="token selector">.col-6</span> <span class="token punctuation">{</span>
  <span class="token property">width</span><span class="token punctuation">:</span> 50%<span class="token punctuation">;</span>
<span class="token punctuation">}</span>
<span class="token selector">.col-7</span> <span class="token punctuation">{</span>
  <span class="token property">width</span><span class="token punctuation">:</span> 58.33%<span class="token punctuation">;</span>
<span class="token punctuation">}</span>
<span class="token selector">.col-8</span> <span class="token punctuation">{</span>
  <span class="token property">width</span><span class="token punctuation">:</span> 66.66%<span class="token punctuation">;</span>
<span class="token punctuation">}</span>
<span class="token selector">.col-9</span> <span class="token punctuation">{</span>
  <span class="token property">width</span><span class="token punctuation">:</span> 75%<span class="token punctuation">;</span>
<span class="token punctuation">}</span>
<span class="token selector">.col-10</span> <span class="token punctuation">{</span>
  <span class="token property">width</span><span class="token punctuation">:</span> 83.33%<span class="token punctuation">;</span>
<span class="token punctuation">}</span>
<span class="token selector">.col-11</span> <span class="token punctuation">{</span>
  <span class="token property">width</span><span class="token punctuation">:</span> 91.66%<span class="token punctuation">;</span>
<span class="token punctuation">}</span>
<span class="token selector">.col-12</span> <span class="token punctuation">{</span>
  <span class="token property">width</span><span class="token punctuation">:</span> 100%<span class="token punctuation">;</span>
<span class="token punctuation">}</span>

<span class="token atrule"><span class="token rule">@media</span> <span class="token keyword">only</span> screen <span class="token keyword">and</span> <span class="token punctuation">(</span><span class="token property">max-width</span><span class="token punctuation">:</span> 768px<span class="token punctuation">)</span></span> <span class="token punctuation">{</span>
  <span class="token comment">/* For mobile phones: */</span>
  <span class="token selector">[class*='col-']</span> <span class="token punctuation">{</span>
    <span class="token property">width</span><span class="token punctuation">:</span> 100%<span class="token punctuation">;</span>
  <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre></div>
<h3>始终坚持移动端优先的设计理念</h3>
<p>移动优先是指在为台式机或其他设备设计之前，先为移动设备设计（这将使页面在较小的设备上显示更快）。</p>
<p>这意味着我们必须对 CSS 进行一些修改。</p>
<p>我们不应在宽度小于 <code>768px</code> 时更改样式，而应在宽度大于 <code>768px</code> 时更改设计。这将使我们的设计成为 「移动端优先」：</p>
<div class="language-css" data-ext="css" data-title="css"><pre class="language-css"><code><span class="token comment">/* For mobile phones: */</span>
<span class="token selector">[class*='col-']</span> <span class="token punctuation">{</span>
  <span class="token property">width</span><span class="token punctuation">:</span> 100%<span class="token punctuation">;</span>
<span class="token punctuation">}</span>

<span class="token atrule"><span class="token rule">@media</span> <span class="token keyword">only</span> screen <span class="token keyword">and</span> <span class="token punctuation">(</span><span class="token property">min-width</span><span class="token punctuation">:</span> 768px<span class="token punctuation">)</span></span> <span class="token punctuation">{</span>
  <span class="token comment">/* For desktop: */</span>
  <span class="token selector">.col-1</span> <span class="token punctuation">{</span>
    <span class="token property">width</span><span class="token punctuation">:</span> 8.33%<span class="token punctuation">;</span>
  <span class="token punctuation">}</span>
  <span class="token selector">.col-2</span> <span class="token punctuation">{</span>
    <span class="token property">width</span><span class="token punctuation">:</span> 16.66%<span class="token punctuation">;</span>
  <span class="token punctuation">}</span>
  <span class="token selector">.col-3</span> <span class="token punctuation">{</span>
    <span class="token property">width</span><span class="token punctuation">:</span> 25%<span class="token punctuation">;</span>
  <span class="token punctuation">}</span>
  <span class="token selector">.col-4</span> <span class="token punctuation">{</span>
    <span class="token property">width</span><span class="token punctuation">:</span> 33.33%<span class="token punctuation">;</span>
  <span class="token punctuation">}</span>
  <span class="token selector">.col-5</span> <span class="token punctuation">{</span>
    <span class="token property">width</span><span class="token punctuation">:</span> 41.66%<span class="token punctuation">;</span>
  <span class="token punctuation">}</span>
  <span class="token selector">.col-6</span> <span class="token punctuation">{</span>
    <span class="token property">width</span><span class="token punctuation">:</span> 50%<span class="token punctuation">;</span>
  <span class="token punctuation">}</span>
  <span class="token selector">.col-7</span> <span class="token punctuation">{</span>
    <span class="token property">width</span><span class="token punctuation">:</span> 58.33%<span class="token punctuation">;</span>
  <span class="token punctuation">}</span>
  <span class="token selector">.col-8</span> <span class="token punctuation">{</span>
    <span class="token property">width</span><span class="token punctuation">:</span> 66.66%<span class="token punctuation">;</span>
  <span class="token punctuation">}</span>
  <span class="token selector">.col-9</span> <span class="token punctuation">{</span>
    <span class="token property">width</span><span class="token punctuation">:</span> 75%<span class="token punctuation">;</span>
  <span class="token punctuation">}</span>
  <span class="token selector">.col-10</span> <span class="token punctuation">{</span>
    <span class="token property">width</span><span class="token punctuation">:</span> 83.33%<span class="token punctuation">;</span>
  <span class="token punctuation">}</span>
  <span class="token selector">.col-11</span> <span class="token punctuation">{</span>
    <span class="token property">width</span><span class="token punctuation">:</span> 91.66%<span class="token punctuation">;</span>
  <span class="token punctuation">}</span>
  <span class="token selector">.col-12</span> <span class="token punctuation">{</span>
    <span class="token property">width</span><span class="token punctuation">:</span> 100%<span class="token punctuation">;</span>
  <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre></div><h3>添加平板电脑断点</h3>
<p>我们可以随意添加断点。</p>
<p>我们还将在平板电脑和手机之间插入一个断点。</p>
<figure><img src="https://raw.githubusercontent.com/dribble-njr/typora-njr/master/img/20240228205615.png" alt="平板电脑" tabindex="0" loading="lazy"><figcaption>平板电脑</figcaption></figure>
<p>为此，我们增加了一个媒体查询（<code>600px</code>），并为大于 <code>600px</code>（但小于 <code>768px</code>）的设备增加了一组新的类：</p>
<div class="language-css" data-ext="css" data-title="css"><pre class="language-css"><code><span class="token comment">/* For mobile phones: */</span>
<span class="token selector">[class*='col-']</span> <span class="token punctuation">{</span>
  <span class="token property">width</span><span class="token punctuation">:</span> 100%<span class="token punctuation">;</span>
<span class="token punctuation">}</span>

<span class="token atrule"><span class="token rule">@media</span> <span class="token keyword">only</span> screen <span class="token keyword">and</span> <span class="token punctuation">(</span><span class="token property">min-width</span><span class="token punctuation">:</span> 600px<span class="token punctuation">)</span></span> <span class="token punctuation">{</span>
  <span class="token comment">/* For tablets: */</span>
  <span class="token selector">.col-s-1</span> <span class="token punctuation">{</span>
    <span class="token property">width</span><span class="token punctuation">:</span> 8.33%<span class="token punctuation">;</span>
  <span class="token punctuation">}</span>
  <span class="token selector">.col-s-2</span> <span class="token punctuation">{</span>
    <span class="token property">width</span><span class="token punctuation">:</span> 16.66%<span class="token punctuation">;</span>
  <span class="token punctuation">}</span>
  <span class="token selector">.col-s-3</span> <span class="token punctuation">{</span>
    <span class="token property">width</span><span class="token punctuation">:</span> 25%<span class="token punctuation">;</span>
  <span class="token punctuation">}</span>
  <span class="token selector">.col-s-4</span> <span class="token punctuation">{</span>
    <span class="token property">width</span><span class="token punctuation">:</span> 33.33%<span class="token punctuation">;</span>
  <span class="token punctuation">}</span>
  <span class="token selector">.col-s-5</span> <span class="token punctuation">{</span>
    <span class="token property">width</span><span class="token punctuation">:</span> 41.66%<span class="token punctuation">;</span>
  <span class="token punctuation">}</span>
  <span class="token selector">.col-s-6</span> <span class="token punctuation">{</span>
    <span class="token property">width</span><span class="token punctuation">:</span> 50%<span class="token punctuation">;</span>
  <span class="token punctuation">}</span>
  <span class="token selector">.col-s-7</span> <span class="token punctuation">{</span>
    <span class="token property">width</span><span class="token punctuation">:</span> 58.33%<span class="token punctuation">;</span>
  <span class="token punctuation">}</span>
  <span class="token selector">.col-s-8</span> <span class="token punctuation">{</span>
    <span class="token property">width</span><span class="token punctuation">:</span> 66.66%<span class="token punctuation">;</span>
  <span class="token punctuation">}</span>
  <span class="token selector">.col-s-9</span> <span class="token punctuation">{</span>
    <span class="token property">width</span><span class="token punctuation">:</span> 75%<span class="token punctuation">;</span>
  <span class="token punctuation">}</span>
  <span class="token selector">.col-s-10</span> <span class="token punctuation">{</span>
    <span class="token property">width</span><span class="token punctuation">:</span> 83.33%<span class="token punctuation">;</span>
  <span class="token punctuation">}</span>
  <span class="token selector">.col-s-11</span> <span class="token punctuation">{</span>
    <span class="token property">width</span><span class="token punctuation">:</span> 91.66%<span class="token punctuation">;</span>
  <span class="token punctuation">}</span>
  <span class="token selector">.col-s-12</span> <span class="token punctuation">{</span>
    <span class="token property">width</span><span class="token punctuation">:</span> 100%<span class="token punctuation">;</span>
  <span class="token punctuation">}</span>
<span class="token punctuation">}</span>

<span class="token atrule"><span class="token rule">@media</span> <span class="token keyword">only</span> screen <span class="token keyword">and</span> <span class="token punctuation">(</span><span class="token property">min-width</span><span class="token punctuation">:</span> 768px<span class="token punctuation">)</span></span> <span class="token punctuation">{</span>
  <span class="token comment">/* For desktop: */</span>
  <span class="token selector">.col-1</span> <span class="token punctuation">{</span>
    <span class="token property">width</span><span class="token punctuation">:</span> 8.33%<span class="token punctuation">;</span>
  <span class="token punctuation">}</span>
  <span class="token selector">.col-2</span> <span class="token punctuation">{</span>
    <span class="token property">width</span><span class="token punctuation">:</span> 16.66%<span class="token punctuation">;</span>
  <span class="token punctuation">}</span>
  <span class="token selector">.col-3</span> <span class="token punctuation">{</span>
    <span class="token property">width</span><span class="token punctuation">:</span> 25%<span class="token punctuation">;</span>
  <span class="token punctuation">}</span>
  <span class="token selector">.col-4</span> <span class="token punctuation">{</span>
    <span class="token property">width</span><span class="token punctuation">:</span> 33.33%<span class="token punctuation">;</span>
  <span class="token punctuation">}</span>
  <span class="token selector">.col-5</span> <span class="token punctuation">{</span>
    <span class="token property">width</span><span class="token punctuation">:</span> 41.66%<span class="token punctuation">;</span>
  <span class="token punctuation">}</span>
  <span class="token selector">.col-6</span> <span class="token punctuation">{</span>
    <span class="token property">width</span><span class="token punctuation">:</span> 50%<span class="token punctuation">;</span>
  <span class="token punctuation">}</span>
  <span class="token selector">.col-7</span> <span class="token punctuation">{</span>
    <span class="token property">width</span><span class="token punctuation">:</span> 58.33%<span class="token punctuation">;</span>
  <span class="token punctuation">}</span>
  <span class="token selector">.col-8</span> <span class="token punctuation">{</span>
    <span class="token property">width</span><span class="token punctuation">:</span> 66.66%<span class="token punctuation">;</span>
  <span class="token punctuation">}</span>
  <span class="token selector">.col-9</span> <span class="token punctuation">{</span>
    <span class="token property">width</span><span class="token punctuation">:</span> 75%<span class="token punctuation">;</span>
  <span class="token punctuation">}</span>
  <span class="token selector">.col-10</span> <span class="token punctuation">{</span>
    <span class="token property">width</span><span class="token punctuation">:</span> 83.33%<span class="token punctuation">;</span>
  <span class="token punctuation">}</span>
  <span class="token selector">.col-11</span> <span class="token punctuation">{</span>
    <span class="token property">width</span><span class="token punctuation">:</span> 91.66%<span class="token punctuation">;</span>
  <span class="token punctuation">}</span>
  <span class="token selector">.col-12</span> <span class="token punctuation">{</span>
    <span class="token property">width</span><span class="token punctuation">:</span> 100%<span class="token punctuation">;</span>
  <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre></div><p>我们有两组完全相同的类，这似乎有点奇怪，但这给了我们在 HTML 中决定在每个断点处如何处理列的机会：</p>
<div class="hint-container tip">
<p class="hint-container-title">提示</p>
<p><strong>用于电脑：</strong></p>
<p>第一部分和第三部分各占 3 列。中间部分将横跨 6 列。</p>
<p><strong>平板电脑：</strong></p>
<p>第一部分跨 3 列，第二部分跨 9 列，第三部分显示在前两个部分的下方，跨 12 列：</p>
</div>

<h3>典型设备断点</h3>
<p>屏幕和设备的高度和宽度各不相同，因此很难为每种设备创建精确的断点。为了简单起见，可以将目标锁定为五组：</p>
<div class="language-css" data-ext="css" data-title="css"><pre class="language-css"><code><span class="token comment">/* Extra small devices (phones, 600px and down) */</span>
<span class="token atrule"><span class="token rule">@media</span> <span class="token keyword">only</span> screen <span class="token keyword">and</span> <span class="token punctuation">(</span><span class="token property">max-width</span><span class="token punctuation">:</span> 600px<span class="token punctuation">)</span></span> <span class="token punctuation">{</span>
  ...<span class="token punctuation">;</span>
<span class="token punctuation">}</span>

<span class="token comment">/* Small devices (portrait tablets and large phones, 600px and up) */</span>
<span class="token atrule"><span class="token rule">@media</span> <span class="token keyword">only</span> screen <span class="token keyword">and</span> <span class="token punctuation">(</span><span class="token property">min-width</span><span class="token punctuation">:</span> 600px<span class="token punctuation">)</span></span> <span class="token punctuation">{</span>
  ...<span class="token punctuation">;</span>
<span class="token punctuation">}</span>

<span class="token comment">/* Medium devices (landscape tablets, 768px and up) */</span>
<span class="token atrule"><span class="token rule">@media</span> <span class="token keyword">only</span> screen <span class="token keyword">and</span> <span class="token punctuation">(</span><span class="token property">min-width</span><span class="token punctuation">:</span> 768px<span class="token punctuation">)</span></span> <span class="token punctuation">{</span>
  ...<span class="token punctuation">;</span>
<span class="token punctuation">}</span>

<span class="token comment">/* Large devices (laptops/desktops, 992px and up) */</span>
<span class="token atrule"><span class="token rule">@media</span> <span class="token keyword">only</span> screen <span class="token keyword">and</span> <span class="token punctuation">(</span><span class="token property">min-width</span><span class="token punctuation">:</span> 992px<span class="token punctuation">)</span></span> <span class="token punctuation">{</span>
  ...<span class="token punctuation">;</span>
<span class="token punctuation">}</span>

<span class="token comment">/* Extra large devices (large laptops and desktops, 1200px and up) */</span>
<span class="token atrule"><span class="token rule">@media</span> <span class="token keyword">only</span> screen <span class="token keyword">and</span> <span class="token punctuation">(</span><span class="token property">min-width</span><span class="token punctuation">:</span> 1200px<span class="token punctuation">)</span></span> <span class="token punctuation">{</span>
  ...<span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre></div><h3>方向纵向/横向</h3>
<p>媒体查询还可用于根据浏览器的方向改变页面布局。</p>
<p>您可以设置一组 CSS 属性，只有当浏览器窗口的宽度大于高度（即所谓的「横向」方向）时才适用：</p>
<div class="language-css" data-ext="css" data-title="css"><pre class="language-css"><code><span class="token atrule"><span class="token rule">@media</span> <span class="token keyword">only</span> screen <span class="token keyword">and</span> <span class="token punctuation">(</span><span class="token property">orientation</span><span class="token punctuation">:</span> landscape<span class="token punctuation">)</span></span> <span class="token punctuation">{</span>
  <span class="token selector">body</span> <span class="token punctuation">{</span>
    <span class="token property">background-color</span><span class="token punctuation">:</span> lightblue<span class="token punctuation">;</span>
  <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre></div><h3>使用媒体查询隐藏元素</h3>
<p>媒体查询的另一个常见用途是在不同尺寸的屏幕上隐藏元素：</p>
<div class="language-css" data-ext="css" data-title="css"><pre class="language-css"><code><span class="token comment">/* If the screen size is 600px wide or less, hide the element */</span>
<span class="token atrule"><span class="token rule">@media</span> <span class="token keyword">only</span> screen <span class="token keyword">and</span> <span class="token punctuation">(</span><span class="token property">max-width</span><span class="token punctuation">:</span> 600px<span class="token punctuation">)</span></span> <span class="token punctuation">{</span>
  <span class="token selector">div.example</span> <span class="token punctuation">{</span>
    <span class="token property">display</span><span class="token punctuation">:</span> none<span class="token punctuation">;</span>
  <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre></div>
<div class="hint-container tip">
<p class="hint-container-title">提示</p>
<p>实际上可以使用这实现侧边栏。</p>
<p>屏幕宽度小于 900px 时显示菜单按钮，并隐藏菜单项。</p>
<div class="language-css" data-ext="css" data-title="css"><pre class="language-css"><code><span class="token selector">.menu-content.active</span> <span class="token punctuation">{</span>
  <span class="token property">transform</span><span class="token punctuation">:</span> <span class="token function">translateX</span><span class="token punctuation">(</span>0<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>

<span class="token atrule"><span class="token rule">@media</span> <span class="token keyword">only</span> screen <span class="token keyword">and</span> <span class="token punctuation">(</span><span class="token property">max-width</span><span class="token punctuation">:</span> 900px<span class="token punctuation">)</span></span> <span class="token punctuation">{</span>
  <span class="token selector">.menu-content</span> <span class="token punctuation">{</span>
    <span class="token property">z-index</span><span class="token punctuation">:</span> 125<span class="token punctuation">;</span>
    <span class="token property">box-shadow</span><span class="token punctuation">:</span> none<span class="token punctuation">;</span>
    <span class="token property">transform</span><span class="token punctuation">:</span> <span class="token function">translateX</span><span class="token punctuation">(</span>-100%<span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span>
<span class="token punctuation">}</span>

<span class="token selector">.menu-button</span> <span class="token punctuation">{</span>
  <span class="token property">display</span><span class="token punctuation">:</span> none<span class="token punctuation">;</span>
<span class="token punctuation">}</span>

<span class="token atrule"><span class="token rule">@media</span> <span class="token keyword">only</span> screen <span class="token keyword">and</span> <span class="token punctuation">(</span><span class="token property">max-width</span><span class="token punctuation">:</span> 900px<span class="token punctuation">)</span></span> <span class="token punctuation">{</span>
  <span class="token selector">.menu-button</span> <span class="token punctuation">{</span>
    <span class="token property">display</span><span class="token punctuation">:</span> block<span class="token punctuation">;</span>
  <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre></div></div>

<h3>通过媒体查询改变字体大小</h3>
<p>还可以使用媒体查询来改变元素在不同屏幕尺寸下的字体大小：</p>
<div class="language-css" data-ext="css" data-title="css"><pre class="language-css"><code><span class="token comment">/* If the screen size is 601px or more, set the font-size of &lt;div&gt; to 80px */</span>
<span class="token atrule"><span class="token rule">@media</span> <span class="token keyword">only</span> screen <span class="token keyword">and</span> <span class="token punctuation">(</span><span class="token property">min-width</span><span class="token punctuation">:</span> 601px<span class="token punctuation">)</span></span> <span class="token punctuation">{</span>
  <span class="token selector">div.example</span> <span class="token punctuation">{</span>
    <span class="token property">font-size</span><span class="token punctuation">:</span> 80px<span class="token punctuation">;</span>
  <span class="token punctuation">}</span>
<span class="token punctuation">}</span>

<span class="token comment">/* If the screen size is 600px or less, set the font-size of &lt;div&gt; to 30px */</span>
<span class="token atrule"><span class="token rule">@media</span> <span class="token keyword">only</span> screen <span class="token keyword">and</span> <span class="token punctuation">(</span><span class="token property">max-width</span><span class="token punctuation">:</span> 600px<span class="token punctuation">)</span></span> <span class="token punctuation">{</span>
  <span class="token selector">div.example</span> <span class="token punctuation">{</span>
    <span class="token property">font-size</span><span class="token punctuation">:</span> 30px<span class="token punctuation">;</span>
  <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre></div><div class="hint-container tip">
<p class="hint-container-title">提示</p>
<p>实际上可以使用媒体查询改变 HTML 字体大小，并使用 <code>rem</code> 单位设置其他字体大小。</p>
<p>相关阅读：。</p>
</div>
<h2>响应式图片</h2>
<h3>使用 <code>width</code> 属性</h3>
<p>如果将 <code>width</code> 属性设置为百分比，而 <code>height</code> 属性设置为 <code>auto</code>，图像就会响应并上下缩放。</p>
<div class="language-css" data-ext="css" data-title="css"><pre class="language-css"><code><span class="token selector">img</span> <span class="token punctuation">{</span>
  <span class="token property">width</span><span class="token punctuation">:</span> 100%<span class="token punctuation">;</span>
  <span class="token property">height</span><span class="token punctuation">:</span> auto<span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre></div>
<div class="hint-container warning">
<p class="hint-container-title">注意</p>
<p>在上面的示例中，图片可以按比例放大到比原始尺寸更大。在许多情况下，更好的解决方案是使用 <code>max-width</code> 属性。</p>
</div>
<h3>使用 <code>max-width</code> 属性</h3>
<p>如果 <code>max-width</code> 属性设置为 100%，图片会在必要时缩小，但绝不会放大到大于原始尺寸：</p>
<div class="language-css" data-ext="css" data-title="css"><pre class="language-css"><code><span class="token selector">img</span> <span class="token punctuation">{</span>
  <span class="token property">max-width</span><span class="token punctuation">:</span> 100%<span class="token punctuation">;</span>
  <span class="token property">height</span><span class="token punctuation">:</span> auto<span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre></div><h3>背景图片</h3>
<p>背景图片还可以对大小和比例进行调整。</p>
<ol>
<li>如果 <code>background-size</code> 属性设置为 <code>contain</code>，背景图片就会缩放，并尽量适应内容区域。不过，图像将保持其宽高比（图像宽度和高度之间的比例关系）：</li>
</ol>

<ol start="2">
<li>如果 <code>background-size</code> 属性设置为 <code>100% 100%</code>，背景图片就会拉伸以覆盖整个内容区域：</li>
</ol>

<ol start="3">
<li>如果 <code>background-size</code> 属性设置为 <code>cover</code>，背景图片将按比例覆盖整个内容区域。请注意，<code>cover</code> 将保持纵横比，背景图片的某些部分可能会被剪切：</li>
</ol>

<h3>不同设备使用不同图像</h3>
<p>大尺寸图片在电脑大屏幕上可能非常完美，但在小设备上却毫无用处。既然要缩小图片，为什么还要加载大图片呢？为了减少加载或出于其他原因，您可以使用媒体查询在不同设备上显示不同的图片。</p>
<p>下面是将在不同设备上显示的一张大图和一张小图：</p>
<figure><img src="https://raw.githubusercontent.com/dribble-njr/typora-njr/master/img/20240229125238.png" alt="不同设备使用不同图像" tabindex="0" loading="lazy"><figcaption>不同设备使用不同图像</figcaption></figure>
<div class="language-css" data-ext="css" data-title="css"><pre class="language-css"><code><span class="token comment">/* For width smaller than 400px: */</span>
<span class="token selector">body</span> <span class="token punctuation">{</span>
  <span class="token property">background-image</span><span class="token punctuation">:</span> <span class="token url"><span class="token function">url</span><span class="token punctuation">(</span><span class="token string url">'img_smallflower.jpg'</span><span class="token punctuation">)</span></span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>

<span class="token comment">/* For width 400px and larger: */</span>
<span class="token atrule"><span class="token rule">@media</span> <span class="token keyword">only</span> screen <span class="token keyword">and</span> <span class="token punctuation">(</span><span class="token property">min-width</span><span class="token punctuation">:</span> 400px<span class="token punctuation">)</span></span> <span class="token punctuation">{</span>
  <span class="token selector">body</span> <span class="token punctuation">{</span>
    <span class="token property">background-image</span><span class="token punctuation">:</span> <span class="token url"><span class="token function">url</span><span class="token punctuation">(</span><span class="token string url">'img_flowers.jpg'</span><span class="token punctuation">)</span></span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre></div><p>可以使用媒体查询 <code>min-device-width</code> 代替 <code>min-width</code>，后者检查的是设备宽度，而不是浏览器宽度。这样，当调整浏览器窗口大小时，图片就不会改变：</p>
<div class="language-css" data-ext="css" data-title="css"><pre class="language-css"><code><span class="token comment">/* For devices smaller than 400px: */</span>
<span class="token selector">body</span> <span class="token punctuation">{</span>
  <span class="token property">background-image</span><span class="token punctuation">:</span> <span class="token url"><span class="token function">url</span><span class="token punctuation">(</span><span class="token string url">'img_smallflower.jpg'</span><span class="token punctuation">)</span></span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>

<span class="token comment">/* For devices 400px and larger: */</span>
<span class="token atrule"><span class="token rule">@media</span> <span class="token keyword">only</span> screen <span class="token keyword">and</span> <span class="token punctuation">(</span><span class="token property">min-device-width</span><span class="token punctuation">:</span> 400px<span class="token punctuation">)</span></span> <span class="token punctuation">{</span>
  <span class="token selector">body</span> <span class="token punctuation">{</span>
    <span class="token property">background-image</span><span class="token punctuation">:</span> <span class="token url"><span class="token function">url</span><span class="token punctuation">(</span><span class="token string url">'img_flowers.jpg'</span><span class="token punctuation">)</span></span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre></div><h3>HTML <code>&lt;picture&gt;</code> 元素</h3>
<p>HTML <code>&lt;picture&gt;</code> 元素为网络开发人员指定图像资源提供了更大的灵活性。</p>
<p><code>&lt;picture&gt;</code> 元素最常用于响应式设计中使用的图像。与根据视口宽度放大或缩小一张图片的做法不同，可以设计多张图片，以便更好地填充浏览器视口。</p>
<p><code>&lt;picture&gt;</code> 元素的工作原理与 <code>&lt;video&gt;</code> 和 <code>&lt;audio&gt;</code> 元素类似。可以设置不同的来源，符合偏好的第一个来源就是正在使用的来源：</p>
<div class="language-css" data-ext="css" data-title="css"><pre class="language-css"><code>&lt;picture&gt;
  &lt;source srcset=<span class="token string">"img_small_flower.jpg"</span> media=<span class="token string">"(max-width: 400px)"</span>&gt;
  &lt;source srcset=<span class="token string">"img_flowers.jpg"</span>&gt;
  &lt;img src=<span class="token string">"img_flowers.jpg"</span> alt=<span class="token string">"Flowers"</span>&gt;
&lt;/picture&gt;
</code></pre></div><p><code>srcset</code> 属性为必填项，用于定义图像的来源。</p>
<p><code>media</code> 属性是可选属性，可接受 CSS <code>@media</code> 规则中的媒体查询。</p>
<p>还应为不支持 <code>&lt;picture&gt;</code> 元素的浏览器定义 <code>&lt;img&gt;</code> 元素。</p>
<h2>响应式视频</h2>
<h3>使用 <code>width</code> 属性</h3>
<p>如果将 <code>width</code> 属性设置为 <code>100%</code>，视频播放器就会响应并上下缩放：</p>
<div class="language-css" data-ext="css" data-title="css"><pre class="language-css"><code><span class="token selector">video</span> <span class="token punctuation">{</span>
  <span class="token property">width</span><span class="token punctuation">:</span> 100%<span class="token punctuation">;</span>
  <span class="token property">height</span><span class="token punctuation">:</span> auto<span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre></div><h3>使用 <code>max-width</code> 属性</h3>
<p>和 <a href="#%E5%93%8D%E5%BA%94%E5%BC%8F%E5%9B%BE%E7%89%87">响应式图片</a> 一样，最好使用 <code>max-width</code> 属性，视频会在必要时缩小，但绝不会放大到大于原始尺寸：</p>
<div class="language-css" data-ext="css" data-title="css"><pre class="language-css"><code><span class="token selector">video</span> <span class="token punctuation">{</span>
  <span class="token property">max-width</span><span class="token punctuation">:</span> 100%<span class="token punctuation">;</span>
  <span class="token property">height</span><span class="token punctuation">:</span> auto<span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre></div><h3>HTML <code>&lt;video&gt;</code> 元素</h3>
<p><code>&lt;video&gt;</code> 元素的工作原理与 <a href="#html-picture-%E5%85%83%E7%B4%A0"><code>&lt;picture&gt;</code></a> 元素类似。可以设置不同的来源，符合偏好的第一个来源就是正在使用的来源：</p>
<div class="language-html" data-ext="html" data-title="html"><pre class="language-html"><code><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>video</span> <span class="token attr-name">width</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>400<span class="token punctuation">"</span></span> <span class="token attr-name">controls</span><span class="token punctuation">&gt;</span></span>
  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>source</span> <span class="token attr-name">src</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>mov_bbb.mp4<span class="token punctuation">"</span></span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>video/mp4<span class="token punctuation">"</span></span> <span class="token punctuation">/&gt;</span></span>
  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>source</span> <span class="token attr-name">src</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>mov_bbb.ogg<span class="token punctuation">"</span></span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>video/ogg<span class="token punctuation">"</span></span> <span class="token punctuation">/&gt;</span></span>
  Your browser does not support HTML5 video.
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>video</span><span class="token punctuation">&gt;</span></span>
</code></pre></div><h2>参考</h2>
<ul>
<li><a href="https://www.w3schools.com/css/css_rwd_intro.asp" target="_blank" rel="noopener noreferrer">Responsive Web Design</a></li>
</ul>
]]></content>
    <category term="CSS"/>
    <published>2024-02-28T00:00:00.000Z</published>
  </entry>
  <entry>
    <title type="text">Vuepress Plugin Ordered Header</title>
    <id>https://dribble-njr.github.io/blog/blog/project/plugin/01.vuepress-plugin-ordered-header.html</id>
    <link href="https://dribble-njr.github.io/blog/blog/project/plugin/01.vuepress-plugin-ordered-header.html"/>
    <updated>2024-02-29T11:17:41.000Z</updated>
    <summary type="html"><![CDATA[<div class="hint-container tip">
<p class="hint-container-title">提示</p>
<p>该插件已经发布至：<a href="https://github.com/dribble-njr/vuepress-plugin-ordered-header" target="_blank" rel="noopener noreferrer">GitHub</a> | <a href="https://www.npmjs.com/package/vuepress-plugin-ordered-heade" target="_blank" rel="noopener noreferrer">npm</a>。</p>
<p>如有帮助可以点个 star 支持一下~。</p>
</div>]]></summary>
    <content type="html"><![CDATA[<div class="hint-container tip">
<p class="hint-container-title">提示</p>
<p>该插件已经发布至：<a href="https://github.com/dribble-njr/vuepress-plugin-ordered-header" target="_blank" rel="noopener noreferrer">GitHub</a> | <a href="https://www.npmjs.com/package/vuepress-plugin-ordered-heade" target="_blank" rel="noopener noreferrer">npm</a>。</p>
<p>如有帮助可以点个 star 支持一下~。</p>
</div>
<p><a href="https://v2.vuepress.vuejs.org/zh/" target="_blank" rel="noopener noreferrer">VuePress</a> 默认不支持生成有序目录，比如想要下面这种效果：</p>
<div class="language-markdown" data-ext="md" data-title="md"><pre class="language-markdown"><code><span class="token title important"><span class="token punctuation">#</span> 标题 1</span>

<span class="token title important"><span class="token punctuation">##</span> 标题 1-1</span>

<span class="token title important"><span class="token punctuation">###</span> 标题 1-1-1</span>

<span class="token title important"><span class="token punctuation">##</span> 标题 1-2</span>

<span class="token title important"><span class="token punctuation">#</span> 标题 2</span>
</code></pre></div><p>目录将显示为：</p>
<div class="language-text" data-ext="text" data-title="text"><pre class="language-text"><code>1 header 1

1.1 header 1-1

1.1.1 header 1-1-1

1.2 header 1-2

2 header 2
</code></pre></div><p>于是花了一点时间研究了 VuePress 的插件系统。</p>
<h2>VuePress 架构</h2>
<div class="hint-container tip">
<p class="hint-container-title">提示</p>
<p>以下内容来自 <a href="https://v2.vuepress.vuejs.org/zh/advanced/architecture.html" target="_blank" rel="noopener noreferrer">VuePress - 架构</a></p>
</div>
<h3>概览</h3>
<p>VuePress 的简要架构：</p>
<ul>
<li>Node App 会生成临时文件，包括页面、路由等。</li>
<li>Bundler 会将 Client App 和临时文件一起进行打包，就像处理一个普通的 Vue App 一样。</li>
</ul>
<p>VuePress 分为两个主要部分： Node App 和 Client App：</p>
<ul>
<li>插件或者主题的入口文件会在 Node App 中被加载。</li>
<li>客户端文件会在 Client App 中被加载，也就是会被 Bundler 处理。比如组件、客户端配置文件等。</li>
</ul>
<figure><img src="https://raw.githubusercontent.com/dribble-njr/typora-njr/master/img/20240229181754.png" alt="架构" tabindex="0" loading="lazy"><figcaption>架构</figcaption></figure>
<h3>核心流程和 Hooks</h3>
<p>VuePress 的核心流程以及 插件 API 的 Hooks ：</p>
<ul>
<li>在 <code>init</code> 阶段：
<ul>
<li>主题和插件会被加载。这意味着插件需要在初始化之前使用。</li>
<li>由于我们要使用 <code>markdown-it</code> 来解析 Markdown 文件，因此需要在加载页面文件之前创建 <code>markdown-it</code> 实例：
<ul>
<li><code>extendsMarkdownOptions</code> Hook 会被调用，用以创建 <code>markdown-it</code> 实例。</li>
<li><code>extendsMarkdown</code> Hook 会被调用，用以扩展 <code>markdown-it</code> 实例。</li>
</ul>
</li>
<li>页面文件会被加载：
<ul>
<li><code>extendsPageOptions</code> Hook 会被调用，用以创建页面。</li>
<li><code>extendsPage</code> Hook 会被调用，用以扩展页面对象。</li>
</ul>
</li>
</ul>
</li>
<li>在 <code>prepare</code> 阶段：
<ul>
<li>临时文件会被生成，因此所有和客户端文件相关的 Hooks 会在此处调用。</li>
</ul>
</li>
<li>在 <code>dev / build</code> 阶段：
<ul>
<li>Bundler 会被加载：</li>
<li><code>extendsBundlerOptions</code> Hook 会被调用，用以生成 Bundler 的配置。</li>
<li><code>alias</code> Hook 和 <code>define</code> Hook 会被用在 Bundler 的配置中，所以它们会在此处调用。</li>
</ul>
</li>
</ul>
<figure><img src="https://raw.githubusercontent.com/dribble-njr/typora-njr/master/img/20240229181843.png" alt="核心流程和 Hooks" tabindex="0" loading="lazy"><figcaption>核心流程和 Hooks</figcaption></figure>
<h2>开发插件</h2>
<p>开发插件只需要导出一个插件对象，并在对应 Hooks 中实现自己想要的逻辑。</p>
<p>比如要实现有序标题，那么可以在 <a href="https://v2.vuepress.vuejs.org/zh/reference/plugin-api.html#extendspage" target="_blank" rel="noopener noreferrer"><code>extendsPage</code></a> Hooks 中扩展 <a href="https://v2.vuepress.vuejs.org/zh/reference/node-api.html#page-%E5%B1%9E%E6%80%A7" target="_blank" rel="noopener noreferrer"><code>Page</code></a> 实例的 <a href="https://v2.vuepress.vuejs.org/zh/reference/node-api.html#headers" target="_blank" rel="noopener noreferrer"><code>headers</code></a> 属性。</p>
<div class="hint-container tip">
<p class="hint-container-title">提示</p>
<p><code>extendsPage</code>：</p>
<ul>
<li>类型： <code>(page: Page, app: App) =&gt; void | Promise&lt;void&gt;</code></li>
<li>详情：<br>
页面扩展。<br>
该 Hook 接收一个函数，在参数中会收到一个 Page 实例。<br>
该 Hook 可以用来在 <code>Page</code> 对象上添加额外的属性，或修改现有的属性等。<br>
值得一提的是，针对 <code>page.data</code> 和 <code>page.routeMeta</code> 的改动可以在客户端代码中使用。</li>
</ul>
</div>
<div class="language-javascript" data-ext="js" data-title="js"><pre class="language-javascript"><code>module<span class="token punctuation">.</span><span class="token function-variable function">exports</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
  <span class="token keyword">return</span> <span class="token punctuation">{</span>
    <span class="token literal-property property">name</span><span class="token operator">:</span> <span class="token string">'vuepress-plugin-ordered-header'</span><span class="token punctuation">,</span>
    <span class="token function-variable function">extendsPage</span><span class="token operator">:</span> <span class="token punctuation">(</span><span class="token parameter">page</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
      <span class="token comment">// 实现扩展逻辑</span>
    <span class="token punctuation">}</span>
  <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre></div><h2>实现功能</h2>
<p><code>headers: PageHeader[]</code> 数据结构如下：</p>
<div class="language-typescript" data-ext="ts" data-title="ts"><pre class="language-typescript"><code><span class="token keyword">interface</span> <span class="token class-name">PageHeader</span> <span class="token punctuation">{</span>
  level<span class="token operator">:</span> <span class="token builtin">number</span>
  title<span class="token operator">:</span> <span class="token builtin">string</span>
  slug<span class="token operator">:</span> <span class="token builtin">string</span>
  children<span class="token operator">:</span> PageHeader<span class="token punctuation">[</span><span class="token punctuation">]</span>
<span class="token punctuation">}</span>
</code></pre></div><p>每个标题下的子标题会被放入 <code>children</code> 数组，因此需要利用递归实现。</p>
<ol>
<li>首先初始化一个计数数组 <code>counter</code>，代表 <code>h1</code> ~ <code>h6</code> 6 个标题层级。</li>
<li>在每个标题层级上，首先将对应的层级计数器加一（即 <code>counter[level] = (counter[level] || 0) + 1</code>）。</li>
<li>然后对于比当前层级更深的计数器（即该标题的子标题）进行重置（即 counter[i] = undefined）。</li>
<li>再利用 <code>counter</code> 数组给标题增加序号。</li>
<li>最后返回处理好的 <code>page</code> 对象。</li>
</ol>
<div class="language-javascript" data-ext="js" data-title="js"><pre class="language-javascript"><code>module<span class="token punctuation">.</span><span class="token function-variable function">exports</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
  <span class="token keyword">return</span> <span class="token punctuation">{</span>
    <span class="token literal-property property">name</span><span class="token operator">:</span> <span class="token string">'vuepress-plugin-ordered-header'</span><span class="token punctuation">,</span>
    <span class="token function-variable function">extendsPage</span><span class="token operator">:</span> <span class="token punctuation">(</span><span class="token parameter">page</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
      <span class="token keyword">const</span> counter <span class="token operator">=</span> <span class="token function">Array</span><span class="token punctuation">(</span><span class="token number">6</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">fill</span><span class="token punctuation">(</span><span class="token keyword">undefined</span><span class="token punctuation">)</span>

      <span class="token keyword">const</span> <span class="token function-variable function">reorderHeaders</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token parameter">headers</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
        headers<span class="token punctuation">.</span><span class="token function">forEach</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token parameter">header</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
          <span class="token keyword">const</span> level <span class="token operator">=</span> header<span class="token punctuation">.</span>level <span class="token operator">-</span> <span class="token number">1</span>

          counter<span class="token punctuation">[</span>level<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token punctuation">(</span>counter<span class="token punctuation">[</span>level<span class="token punctuation">]</span> <span class="token operator">||</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token number">1</span>

          <span class="token comment">// reset level</span>
          <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">let</span> i <span class="token operator">=</span> level <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> counter<span class="token punctuation">.</span>length<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
            counter<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token keyword">undefined</span>
          <span class="token punctuation">}</span>

          header<span class="token punctuation">.</span>title <span class="token operator">=</span> <span class="token template-string"><span class="token template-punctuation string">`</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">${</span>counter<span class="token punctuation">.</span><span class="token function">filter</span><span class="token punctuation">(</span>Number<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">join</span><span class="token punctuation">(</span><span class="token string">'.'</span><span class="token punctuation">)</span><span class="token interpolation-punctuation punctuation">}</span></span><span class="token string"> </span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">${</span>header<span class="token punctuation">.</span>title<span class="token interpolation-punctuation punctuation">}</span></span><span class="token template-punctuation string">`</span></span>

          <span class="token keyword">if</span> <span class="token punctuation">(</span>header<span class="token punctuation">.</span>children<span class="token punctuation">)</span> <span class="token function">reorderHeaders</span><span class="token punctuation">(</span>header<span class="token punctuation">.</span>children<span class="token punctuation">)</span>
        <span class="token punctuation">}</span><span class="token punctuation">)</span>
      <span class="token punctuation">}</span>

      <span class="token function">reorderHeaders</span><span class="token punctuation">(</span>page<span class="token punctuation">.</span>headers<span class="token punctuation">)</span>

      <span class="token keyword">return</span> page
    <span class="token punctuation">}</span>
  <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre></div>]]></content>
    <category term="Project"/>
    <published>2024-02-19T00:00:00.000Z</published>
  </entry>
  <entry>
    <title type="text">Plugin</title>
    <id>https://dribble-njr.github.io/blog/blog/project/plugin/</id>
    <link href="https://dribble-njr.github.io/blog/blog/project/plugin/"/>
    <updated>2024-02-29T11:17:41.000Z</updated>
    <summary type="html"><![CDATA[<ul>
<li></li>
</ul>
]]></summary>
    <content type="html"><![CDATA[<ul>
<li></li>
</ul>
]]></content>
    <published>2024-02-29T11:17:41.000Z</published>
  </entry>
  <entry>
    <title type="text">静态站点生成器</title>
    <id>https://dribble-njr.github.io/blog/blog/project/ssg/</id>
    <link href="https://dribble-njr.github.io/blog/blog/project/ssg/"/>
    <updated>2024-02-29T11:17:41.000Z</updated>
    <summary type="html"><![CDATA[<p>静态站点生成器（static site generation, ssg）。</p>
<h2>VuePress</h2>
<h2>Docusaurus</h2>
<p><a href="https://docusaurus.io/" target="_blank" rel="noopener noreferrer">Docusaurus</a> 是一款静态网站生成器。</p>
<p>它利用 React 的全部功能来构建具有快速客户端导航功能的单页应用程序，从而使您的网站具有交互性。</p>
<p>它提供开箱即用的文档功能，但也可用于创建任何类型的网站（个人网站、产品、博客、营销登陆页面等）。</p>]]></summary>
    <content type="html"><![CDATA[<p>静态站点生成器（static site generation, ssg）。</p>
<h2>VuePress</h2>
<h2>Docusaurus</h2>
<p><a href="https://docusaurus.io/" target="_blank" rel="noopener noreferrer">Docusaurus</a> 是一款静态网站生成器。</p>
<p>它利用 React 的全部功能来构建具有快速客户端导航功能的单页应用程序，从而使您的网站具有交互性。</p>
<p>它提供开箱即用的文档功能，但也可用于创建任何类型的网站（个人网站、产品、博客、营销登陆页面等）。</p>
<h3>对比</h3>
<h4>Gatsby​</h4>
<p><a href="https://www.gatsbyjs.com/" target="_blank" rel="noopener noreferrer">Gatsby</a> 功能丰富，拥有丰富的插件生态系统，可以实现 Docusaurus 的所有功能。</p>
<p>当然，这带来了较陡的学习曲线。 Gatsby 在许多方面做得都很出色，适合构建许多类型的网站。另一方面，Docusaurus 力图将一件事做到尽善尽美——成为最好的内容撰写与发布工具。</p>
<p>GraphQL 是 Gatsby 的核心，但搭建 Gatsby 网站不一定要用到它。 而在大多数静态网站中，你更不需要 GraphQL 所提供的灵活性。</p>
<p>Docusaurus v2+ 的许多方面都被 Gatsby 的出色之处所启发，这是一个优秀的替代品。</p>
<p>Docz is a Gatsby theme to build documentation websites. 它的功能与 Docusaurus 相比要匮乏。</p>
<h4>VuePress</h4>
<p>VuePress 与 Docusaurus 有许多相似之处--两者都非常重视以内容为中心的网站，并提供开箱即用的定制文档功能。</p>
<p>但是，VuePress 是 Vue 驱动的，而 Docusaurus 则是 React 驱动的。</p>
<p>如果你想要一个基于 Vue 的解决方案，VuePress 是个不错的选择。</p>
]]></content>
    <category term="Project"/>
    <published>2024-02-29T00:00:00.000Z</published>
  </entry>
  <entry>
    <title type="text">基础工具</title>
    <id>https://dribble-njr.github.io/blog/blog/reading/pragmatic-programmer/03-basic-tool.html</id>
    <link href="https://dribble-njr.github.io/blog/blog/reading/pragmatic-programmer/03-basic-tool.html"/>
    <updated>2024-02-29T06:16:22.000Z</updated>
    <summary type="html"><![CDATA[<p>让需求来驱使你不断选购新的工具。</p>
<h2>纯文本的威力</h2>
<p>用纯文本保存知识。</p>
<h2>shell 游戏</h2>
<p>发挥 shell 命令的优势。花费一些精力熟悉 shell。</p>
<h2>加强编辑器能力</h2>
<p>熟悉编辑器：</p>
<ul>
<li>当编辑文本时，以字符、单词、行、段落为单位移动光标及进行选择。</li>
<li>当编辑代码时，在各种语法单元（配对的分隔符、函数、模块……）之间移动。</li>
<li>做完修改后，重新缩进代码。</li>
<li>用单个指令完成代码块的注释或取消注释。</li>
<li>Undo 并 Redo 变更。</li>
<li>把编辑窗口切割成多个面板，然后在它们之间跳转。</li>
<li>跳转到特定的行号。</li>
<li>对选出的多行进行排序。</li>
<li>搜索普通字符串，或用正则表达式搜索，然后重复上一次的搜索。</li>
<li>基于框选或某个模式匹配的结果，临时创建多个光标，并行地在多个光标处编辑文本。</li>
<li>显示当前项目的编译错误。</li>
<li>跑一下当前项目的测试。</li>
</ul>]]></summary>
    <content type="html"><![CDATA[<p>让需求来驱使你不断选购新的工具。</p>
<h2>纯文本的威力</h2>
<p>用纯文本保存知识。</p>
<h2>shell 游戏</h2>
<p>发挥 shell 命令的优势。花费一些精力熟悉 shell。</p>
<h2>加强编辑器能力</h2>
<p>熟悉编辑器：</p>
<ul>
<li>当编辑文本时，以字符、单词、行、段落为单位移动光标及进行选择。</li>
<li>当编辑代码时，在各种语法单元（配对的分隔符、函数、模块……）之间移动。</li>
<li>做完修改后，重新缩进代码。</li>
<li>用单个指令完成代码块的注释或取消注释。</li>
<li>Undo 并 Redo 变更。</li>
<li>把编辑窗口切割成多个面板，然后在它们之间跳转。</li>
<li>跳转到特定的行号。</li>
<li>对选出的多行进行排序。</li>
<li>搜索普通字符串，或用正则表达式搜索，然后重复上一次的搜索。</li>
<li>基于框选或某个模式匹配的结果，临时创建多个光标，并行地在多个光标处编辑文本。</li>
<li>显示当前项目的编译错误。</li>
<li>跑一下当前项目的测试。</li>
</ul>
<p>编辑时要自省。每次发现自己又在重复做某件事情的时候，要习惯性地想到「或许有更好的方法」，然后找到这个方法。</p>
<p>一旦你发掘出一个新的有用的特性，需要尽快把它内化成一种肌肉记忆，这样在使用的时候就能不假思索。</p>
<p>当你在使用编辑器过程中遇到明显的限制时，可以四处找找有什么扩展可以解决问题。</p>
<p>更进一步，深入研究一下编辑器的扩展语言。搞明白怎样用它来将一些重复工作自动化——通常也就是一两行代码的事情。</p>
<p>有时你还会走得更远，不知不觉就写出一个完整的扩展。那么，不妨发布出去：你需要它，其他人也会需要的。</p>
<h2>版本控制</h2>
<p>永远使用版本控制。</p>
<h2>调试</h2>
<ul>
<li>复现</li>
<li>阅读错误信息</li>
</ul>
<h2>文本处理</h2>
<p>学习一门文本处理语言，<code>py</code>、<code>js</code>、<code>ruby</code>。</p>
<h2>工程日记</h2>
<p>记录所做的事情、所学的东西、想法的草图——基本上都是各种与工作有关的东西。</p>
]]></content>
    <category term="READING"/>
    <published>2024-02-20T00:00:00.000Z</published>
  </entry>
  <entry>
    <title type="text">useEffect</title>
    <id>https://dribble-njr.github.io/blog/blog/frontend/framework/react/02-useEffect.html</id>
    <link href="https://dribble-njr.github.io/blog/blog/frontend/framework/react/02-useEffect.html"/>
    <updated>2024-04-02T03:14:43.000Z</updated>
    <summary type="html"><![CDATA[<p><code>useEffect</code> 可以将组件与外部系统同步。</p>
<div class="hint-container info">
<p class="hint-container-title">相关信息</p>
<p>外部系统，包括网络、浏览器 API (<code>setTimeout</code>...）、第三方库或浏览器 DOM。</p>
</div>
<h2>useEffect(setup, dependencies?)</h2>
<h3><code>setup</code></h3>
<p>包含 Effect 逻辑的函数。该 <strong>设置函数</strong> 可以返回一个 <strong>清理函数</strong>。大致运行逻辑如下：</p>]]></summary>
    <content type="html"><![CDATA[<p><code>useEffect</code> 可以将组件与外部系统同步。</p>
<div class="hint-container info">
<p class="hint-container-title">相关信息</p>
<p>外部系统，包括网络、浏览器 API (<code>setTimeout</code>...）、第三方库或浏览器 DOM。</p>
</div>
<h2>useEffect(setup, dependencies?)</h2>
<h3><code>setup</code></h3>
<p>包含 Effect 逻辑的函数。该 <strong>设置函数</strong> 可以返回一个 <strong>清理函数</strong>。大致运行逻辑如下：</p>
<ol>
<li>当组件添加到 DOM 时，React 将运行「设置函数」。</li>
<li>在每次重新渲染依赖关系发生变化后：
<ul>
<li>React 将首先使用 <strong>旧值</strong> 运行「清理函数」；</li>
<li>然后使用 <strong>新值</strong> 运行「设置函数」。</li>
</ul>
</li>
<li>从 DOM 中移除组件后，React 将最后一次运行「清理函数」。</li>
</ol>
<h3><code>dependencies</code></h3>
<p><code>setup</code> 代码中依赖的所有响应值的列表。</p>
<p>响应值包括 <code>props</code>、<code>state</code> 以及直接在组件主体中声明的所有变量和函数。</p>
<div class="hint-container tip">
<p class="hint-container-title">提示</p>
<p>如果为 React 配置了 <a href="https://react.dev/learn/editor-setup#linting" target="_blank" rel="noopener noreferrer">linter</a>，它就会验证是否将每个反应值都正确指定为依赖项。</p>
</div>
<p>依赖项列表必须具有恒定的项数，并以 <code>[dep1、dep2、dep3]</code> 这样的内联方式书写。</p>
<p>React 会使用 <a href="https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/Object/is" target="_blank" rel="noopener noreferrer"><code>Object.is</code></a> 比较法将每个依赖项与其前一个值进行比较。</p>
<p>如果省略此参数，每次重新渲染组件后，Effect 都会重新运行。</p>

<h2>useEffect 完整指南</h2>
<p><a href="https://overreacted.io/a-complete-guide-to-useeffect/" target="_blank" rel="noopener noreferrer">useEffect 完整指南</a></p>
<h3>每一次渲染都有自己的 props 和 state</h3>
<p>和 Vue 不同，Vue 的基本原理是数据绑定、观察者模式、proxy。</p>
<p>React 在状态变更时会重新渲染组件，状态并没有任何的数据绑定。</p>
<p>每一次组件调用引起的渲染，props 和 state 都独立于其他渲染。</p>
<h3>每一次渲染都有自己的事件处理程序</h3>
<p>事件处理函数会记住当前渲染的 <code>props</code> 和 <code>state</code>，从这个角度来说可以印证第一点。</p>
<h3>每一次渲染都有自己的 Effects</h3>
<p>每次渲染都是一个 <em>不同的函数</em> ，每一个 effect 版本「看到」的 <code>props</code> 和 <code>state</code> 值都来自于它属于的那次特定渲染。</p>
<p>从官方文档中的描述中也可以确认这一点：<strong>在每次重新渲染依赖关系发生变化后，React 将首先使用旧值运行清理函数，然后使用新值运行设置函数。</strong></p>
<p>每一次渲染的任何东西都是独立的。**在组件内什么时候去读取 props 或者 state 是无关紧要的。**因为在单次渲染的范围内，props 和 state 始终保持不变。</p>
]]></content>
    <category term="react"/>
    <published>2024-02-27T00:00:00.000Z</published>
  </entry>
  <entry>
    <title type="text">useState</title>
    <id>https://dribble-njr.github.io/blog/blog/frontend/framework/react/01-useState.html</id>
    <link href="https://dribble-njr.github.io/blog/blog/frontend/framework/react/01-useState.html"/>
    <updated>2024-03-25T07:44:17.000Z</updated>
    <summary type="html"><![CDATA[<p><code>useState</code> 声明一个可以直接更新的状态变量。</p>
<p>一般在组件 <strong>最顶层</strong> 调用 <code>useState</code> 给组件添加状态变量，一般使用数组解构来命名状态变量，如 <code>[something, setSomething]</code>。</p>
<div class="language-javascript" data-ext="js" data-title="js"><pre class="language-javascript"><code><span class="token keyword">import</span> <span class="token punctuation">{</span> useState <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">'react'</span>

<span class="token keyword">function</span> <span class="token function">MyComponent</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token keyword">const</span> <span class="token punctuation">[</span>age<span class="token punctuation">,</span> setAge<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token function">useState</span><span class="token punctuation">(</span><span class="token number">28</span><span class="token punctuation">)</span>
  <span class="token keyword">const</span> <span class="token punctuation">[</span>name<span class="token punctuation">,</span> setName<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token function">useState</span><span class="token punctuation">(</span><span class="token string">'Taylor'</span><span class="token punctuation">)</span>
  <span class="token keyword">const</span> <span class="token punctuation">[</span>todos<span class="token punctuation">,</span> setTodos<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token function">useState</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token function">createTodos</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
  <span class="token comment">// ...</span>
<span class="token punctuation">}</span>
</code></pre></div>]]></summary>
    <content type="html"><![CDATA[<p><code>useState</code> 声明一个可以直接更新的状态变量。</p>
<p>一般在组件 <strong>最顶层</strong> 调用 <code>useState</code> 给组件添加状态变量，一般使用数组解构来命名状态变量，如 <code>[something, setSomething]</code>。</p>
<div class="language-javascript" data-ext="js" data-title="js"><pre class="language-javascript"><code><span class="token keyword">import</span> <span class="token punctuation">{</span> useState <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">'react'</span>

<span class="token keyword">function</span> <span class="token function">MyComponent</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token keyword">const</span> <span class="token punctuation">[</span>age<span class="token punctuation">,</span> setAge<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token function">useState</span><span class="token punctuation">(</span><span class="token number">28</span><span class="token punctuation">)</span>
  <span class="token keyword">const</span> <span class="token punctuation">[</span>name<span class="token punctuation">,</span> setName<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token function">useState</span><span class="token punctuation">(</span><span class="token string">'Taylor'</span><span class="token punctuation">)</span>
  <span class="token keyword">const</span> <span class="token punctuation">[</span>todos<span class="token punctuation">,</span> setTodos<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token function">useState</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token function">createTodos</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
  <span class="token comment">// ...</span>
<span class="token punctuation">}</span>
</code></pre></div><h2>useState(initialState)</h2>
<p><strong>参数：</strong></p>
<p><code>initialState</code>：初始状态，可以是任何类型的值，初始渲染后，该参数将被忽略。</p>
<p>如果传递一个函数作为 <code>initialState</code>，它将被视为「初始化函数」。</p>
<p>它应该：</p>
<ul>
<li>是 <strong>纯函数</strong></li>
<li>不带参数</li>
<li>返回任意类型的值</li>
</ul>
<p>React 将在初始化组件时调用初始化函数，并将其返回值存储为初始状态。</p>

<div class="hint-container warning">
<p class="hint-container-title">注意</p>
<p>尽管 <code>createInitialTodos()</code> 的结果仅用于初始渲染，但你仍然在每次渲染时调用此函数。如果它创建大数组或执行昂贵的计算，这可能会浪费资源。</p>
<p>所以对于大型数组的创建，一般传入初始化函数。</p>
</div>
<p><strong>返回值：</strong></p>
<p><code>useState</code> 返回一个数组，使用数组解构接收，其中包含两个值：</p>
<ol>
<li>当前状态。在第一次渲染时，它将与传递的初始状态 <code>initialState</code> 相匹配。</li>
<li><code>set</code> 函数，用于 <strong>状态更新</strong> 并 <strong>触发重新渲染</strong>。</li>
</ol>
<p><strong>注意：</strong></p>
<ul>
<li><code>useState</code> 是一个钩子，所以 <strong>只能</strong> 在组件的顶层或者你自己的钩子中调用它，<strong>不能</strong> 在循环或条件中调用它。</li>
<li>在严格模式下，React 会 <strong>调用两次初始化函数</strong>，其中一次调用的结果将被忽略，以帮助你找到意外的杂质。这是开发专用行为，不会影响生产环境。如果初始化函数是纯函数，就不会影响应用实际行为（因此初始化函数必须是纯函数）。</li>
</ul>
<div class="hint-container warning">
<p class="hint-container-title">注意</p>
<p>若循环调用，则可能造成状态管理混乱、组件不一致、难以调试的问题。</p>
</div>
<h2>setSomething(nextState)</h2>
<p><code>set</code> 函数会 <strong>更新状态并触发重新渲染</strong>，可以直接传入 <code>next state</code>，或者传入一个纯函数。<code>set</code> 函数没有返回值。</p>
<p><code>setSomething()</code> 是一个异步函数，如下所示，<code>handleClick1</code> 点击一次后，年龄将变为 <code>43</code> 岁，而不是 <code>45</code> 岁。</p>
<p>这是因为调用 <code>set</code> 函数 <strong>不会同步</strong> 更新已运行代码中的年龄状态变量。</p>
<p>因此，每次调用 <code>setAge(age + 1)</code> 都会变成 <code>setAge(43)</code>。</p>
<div class="language-javascript" data-ext="js" data-title="js"><pre class="language-javascript"><code><span class="token keyword">function</span> <span class="token function">handleClick1</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token function">setAge</span><span class="token punctuation">(</span>age <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token comment">// setAge(42 + 1)</span>
  <span class="token function">setAge</span><span class="token punctuation">(</span>age <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token comment">// setAge(42 + 1)</span>
  <span class="token function">setAge</span><span class="token punctuation">(</span>age <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token comment">// setAge(42 + 1)</span>
<span class="token punctuation">}</span>
</code></pre></div><div class="hint-container tip">
<p class="hint-container-title">提示</p>
<p><a href="https://github.com/facebook/react/issues/11527" target="_blank" rel="noopener noreferrer">RFClarification: why is setState asynchronous?</a></p>
</div>
<p>如果传递一个函数作为 <code>nextState</code>，它将被视为一个更新函数。它必须是「纯函数」，应将待处理状态作为唯一参数，并返回下一个状态。</p>
<p>React 会将更新函数 <strong>放入队列</strong>，然后重新渲染组件。</p>
<p>在下一次渲染中，React 将通过将所有队列中的更新器 <strong>应用上一个状态来计算下一个状态(<code>previous state</code> to <code>next state</code>)</strong>。</p>
<div class="language-javascript" data-ext="js" data-title="js"><pre class="language-javascript"><code><span class="token keyword">function</span> <span class="token function">handleClick2</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token function">setAge</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token parameter">a</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> a <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token comment">// setAge(42 =&gt; 43)</span>
  <span class="token function">setAge</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token parameter">a</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> a <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token comment">// setAge(43 =&gt; 44)</span>
  <span class="token function">setAge</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token parameter">a</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> a <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token comment">// setAge(44 =&gt; 45)</span>
<span class="token punctuation">}</span>
</code></pre></div><p>上述代码的处理过程如下：</p>
<ol>
<li><code>a =&gt; a + 1</code> 将接收 <code>42</code> 作为待处理状态，并返回 <code>43</code> 作为下一状态。</li>
<li><code>a =&gt; a + 1</code> 将接收 <code>43</code> 作为待处理状态，并返回 <code>44</code> 作为下一个状态。</li>
<li><code>a =&gt; a + 1</code> 将接收 <code>44</code> 作为待处理状态，并返回 <code>45</code> 作为下一个状态。</li>
</ol>
<p>没有其他队列更新，所以 React 会将 <code>45</code> 作为当前状态保存。</p>
<div class="hint-container tip">
<p class="hint-container-title">提示</p>
<p>按照惯例，通常以状态变量名称的首字母来命名待处理状态参数，如年龄的 <code>a</code>，也可以使用更加清晰的名称 <code>prevAge</code>。</p>
</div>
<div class="hint-container warning">
<p class="hint-container-title">注意</p>
<ul>
<li><code>set</code> 函数只更新 <strong>下一次渲染</strong> 的状态变量。如果在调用 <code>set</code> 函数后读取状态变量，您仍然会得到调用前屏幕上的旧值。</li>
<li>如果提供的新值与当前状态相同（由 <code>Object.is</code> 比较确定），React 将 <strong>跳过重新渲染组件及其子代</strong>。</li>
<li>React 会批量更新状态。它会 <strong>在所有事件处理程序运行并调用其设置函数后更新屏幕</strong>。这可以防止在单个事件中多次重新渲染。在极少数情况下，需要强制 React 提前更新屏幕，例如访问 DOM，可以使用 <code>flushSync</code>。</li>
<li>与初始化函数类似，在严格模式下，React 会调用更新器函数 <strong>两次</strong>，以验证它们是否纯粹。</li>
</ul>
</div>
<h2>Usage</h2>
<ul>
<li><a href="https://react.dev/reference/react/useState#adding-state-to-a-component" target="_blank" rel="noopener noreferrer">Adding state to a component</a></li>
<li><a href="https://react.dev/reference/react/useState#updating-state-based-on-the-previous-state" target="_blank" rel="noopener noreferrer">Updating state based on the previous state</a></li>
<li><a href="https://react.dev/reference/react/useState#updating-objects-and-arrays-in-state" target="_blank" rel="noopener noreferrer">Updating objects and arrays in state</a></li>
<li><a href="https://react.dev/reference/react/useState#avoiding-recreating-the-initial-state" target="_blank" rel="noopener noreferrer">Avoiding recreating the initial state</a></li>
<li><a href="https://react.dev/reference/react/useState#resetting-state-with-a-key" target="_blank" rel="noopener noreferrer">Resetting state with a key</a></li>
<li><a href="https://react.dev/reference/react/useState#storing-information-from-previous-renders" target="_blank" rel="noopener noreferrer">Storing information from previous renders</a></li>
</ul>
]]></content>
    <category term="react"/>
    <published>2024-02-27T00:00:00.000Z</published>
  </entry>
  <entry>
    <title type="text">高级数据库模型</title>
    <id>https://dribble-njr.github.io/blog/blog/backend/database/basic/004-advanced-db-model.html</id>
    <link href="https://dribble-njr.github.io/blog/blog/backend/database/basic/004-advanced-db-model.html"/>
    <updated>2024-02-27T08:39:09.000Z</updated>
    <summary type="html"><![CDATA[<p>数据库建立的过程从设计阶段开始，需要提出并回答存储什么信息，信息元素之间如何关联，假定有什么样的约束，诸如键或者参考的完整性等等。</p>
<div class="language-text" data-ext="text" data-title="text"><pre class="language-text"><code>思考 ---&gt; 高级设计 ---&gt; 关系数据库模式 ---&gt; 关系 DBMS
</code></pre></div><p>有几种用符号表达设计的方法。</p>
<ul>
<li>实体-关系图（E-R 图）</li>
<li>UML（统一建模语言）</li>
<li>ODL（对象描述语言）</li>
</ul>]]></summary>
    <content type="html"><![CDATA[<p>数据库建立的过程从设计阶段开始，需要提出并回答存储什么信息，信息元素之间如何关联，假定有什么样的约束，诸如键或者参考的完整性等等。</p>
<div class="language-text" data-ext="text" data-title="text"><pre class="language-text"><code>思考 </code></pre></div>]]></content>
    <category term="database"/>
    <published>2024-01-24T00:00:00.000Z</published>
  </entry>
  <entry>
    <title type="text">集中管理碎片化知识</title>
    <id>https://dribble-njr.github.io/blog/blog/project/RSSHub/</id>
    <link href="https://dribble-njr.github.io/blog/blog/project/RSSHub/"/>
    <updated>2024-02-27T03:18:09.000Z</updated>
    <summary type="html"><![CDATA[<p>将不同平台的信息汇总到一个平台中。</p>
<h2>信息获取的问题</h2>
<ul>
<li>信息多而杂</li>
<li>无法形成有效阅读</li>
</ul>
<h3>信息多而杂</h3>
<p>信息来自不同平台，需要打开不同的软件，知乎、掘金、公众号、B 站、GitHub 等等。</p>
<p>每个平台都充斥着各种你不需要的信息，很容易被其他信息分散注意力。</p>
<p>有时候为了刷到想要的信息，需要长时间停留。</p>
<h3>无法形成有效阅读</h3>
<p>以微信公众号为例，除了一些技术公众号，大部分关注的还是非技术类的，对技术知识获取是一种干扰。</p>
<p>同时由于我们基本都在手机上阅读公众号的文章，难以进行信息提取、标注等，无法形成有效的知识积累。</p>]]></summary>
    <content type="html"><![CDATA[<p>将不同平台的信息汇总到一个平台中。</p>
<h2>信息获取的问题</h2>
<ul>
<li>信息多而杂</li>
<li>无法形成有效阅读</li>
</ul>
<h3>信息多而杂</h3>
<p>信息来自不同平台，需要打开不同的软件，知乎、掘金、公众号、B 站、GitHub 等等。</p>
<p>每个平台都充斥着各种你不需要的信息，很容易被其他信息分散注意力。</p>
<p>有时候为了刷到想要的信息，需要长时间停留。</p>
<h3>无法形成有效阅读</h3>
<p>以微信公众号为例，除了一些技术公众号，大部分关注的还是非技术类的，对技术知识获取是一种干扰。</p>
<p>同时由于我们基本都在手机上阅读公众号的文章，难以进行信息提取、标注等，无法形成有效的知识积累。</p>
<figure><img src="https://raw.githubusercontent.com/dribble-njr/typora-njr/master/img/20240224191619.png" alt="微信公众号" tabindex="0" loading="lazy"><figcaption>微信公众号</figcaption></figure>
<h2>RSS(RDF Site Summary)</h2>
<p>内容共享通常发生在特定网站和聚合网站之间。这种交流是以基本的 XML 形式进行的，人和机器都可以读取。要为网站设置 RSS，必须创建一个 XML 文件，即 RSS 文档或 RSS Feed。发明人为「阿龙·斯沃茨」。</p>
<figure><img src="https://raw.githubusercontent.com/dribble-njr/typora-njr/master/img/20240224190921.png" alt="Aaron Swartz" tabindex="0" loading="lazy"><figcaption>Aaron Swartz</figcaption></figure>
<p>下面是一个 RSS 文档示例。</p>
<div class="language-xml" data-ext="xml" data-title="xml"><pre class="language-xml"><code><span class="token prolog">&lt;?xml version="1.0" encoding="UTF-8" ?&gt;</span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>rss</span> <span class="token attr-name">version</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>2.0<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span>

<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>channel</span><span class="token punctuation">&gt;</span></span>
  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>title</span><span class="token punctuation">&gt;</span></span>RSS title<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>title</span><span class="token punctuation">&gt;</span></span>
  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>link</span><span class="token punctuation">&gt;</span></span> https://mywebsitename/index.html <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>link</span><span class="token punctuation">&gt;</span></span>
  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>description</span><span class="token punctuation">&gt;</span></span>My Blog<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>description</span><span class="token punctuation">&gt;</span></span>
  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>item</span><span class="token punctuation">&gt;</span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>title</span><span class="token punctuation">&gt;</span></span>My First Feed<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>title</span><span class="token punctuation">&gt;</span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>link</span><span class="token punctuation">&gt;</span></span>http://mywebsitename/blog/article/1.html<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>link</span><span class="token punctuation">&gt;</span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>description</span><span class="token punctuation">&gt;</span></span>My new article<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>description</span><span class="token punctuation">&gt;</span></span>
  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>item</span><span class="token punctuation">&gt;</span></span>
  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>item</span><span class="token punctuation">&gt;</span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>title</span><span class="token punctuation">&gt;</span></span>My Second Feed<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>title</span><span class="token punctuation">&gt;</span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>link</span><span class="token punctuation">&gt;</span></span>http://mywebsitename/blog/article/2.html<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>link</span><span class="token punctuation">&gt;</span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>description</span><span class="token punctuation">&gt;</span></span>Another new article<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>description</span><span class="token punctuation">&gt;</span></span>
  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>item</span><span class="token punctuation">&gt;</span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>channel</span><span class="token punctuation">&gt;</span></span>

<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>rss</span><span class="token punctuation">&gt;</span></span>
</code></pre></div><ul>
<li>首先是 XML 标签、其版本和编码方案。</li>
<li>下面一行标志着 RSS 标签的开始及其使用的版本。</li>
<li>接下来的几行显示了频道标签，它标志着 RSS Feed 的开始。它包含频道标题、超链接和频道描述。</li>
<li>在频道标签中定义了一个或多个项目，基本上就是内容或故事，每个项目都有自己的标题、链接和说明。</li>
<li>频道可以容纳任何形式的数据--图片、gifs、音频等。</li>
<li>每个项目都有自己独特的 XML 标签。</li>
</ul>
<h2>如何获取 RSS</h2>
<h3>提供 RSS 的网站</h3>
<p>最直接的方法就是看网站的底部或侧边栏是否有 RSS 图标。</p>
<p>大多数情况下，支持 RSS 订阅的网站都会将 RSS 图标展示出来。不过总有例外，这时候你也可以尝试在网站域名后面加上 <code>/feed</code> 或 <code>/rss</code> 或许可以碰巧猜中，比如少数派的 RSS 订阅链接就是 <a href="https://sspai.com/feed%E3%80%82" target="_blank" rel="noopener noreferrer">https://sspai.com/feed。</a></p>
<figure><img src="https://raw.githubusercontent.com/dribble-njr/typora-njr/master/img/20240225111610.png" alt="RSS 图标" tabindex="0" loading="lazy"><figcaption>RSS 图标</figcaption></figure>
<p>当然，你也可以直接通过搜索引擎通过 网站名 + RSS 的关键字进行搜索，往往都能找到支持网站的 RSS 链接。</p>
<figure><img src="https://raw.githubusercontent.com/dribble-njr/typora-njr/master/img/20240225111905.png" alt="搜索引擎" tabindex="0" loading="lazy"><figcaption>搜索引擎</figcaption></figure>
<h3>未提供 RSS 的网站 —— RSSHub</h3>
<p><a href="https://docs.rsshub.app/" target="_blank" rel="noopener noreferrer">RSSHub</a> 目前提供了 4461 规则，适配了绝大部分网站。</p>
<figure><img src="https://raw.githubusercontent.com/dribble-njr/typora-njr/master/img/20240225110516.png" alt="RSSHub" tabindex="0" loading="lazy"><figcaption>RSSHub</figcaption></figure>
<p>添加订阅时，只需要将举例中的 UID 换成你想要订阅博主的 UID 即可。（划线部分为 UID）</p>
<figure><img src="https://raw.githubusercontent.com/dribble-njr/typora-njr/master/img/20240227103514.pngv" alt="添加路由" tabindex="0" loading="lazy"><figcaption>添加路由</figcaption></figure>
<h3>检测订阅源 —— RSSHub Radar</h3>
<p><a href="https://github.com/DIYgod/RSSHub-Radar" target="_blank" rel="noopener noreferrer">RSSHub Radar</a> 是 RSSHub 官方提供了检测订阅源的工具，当一个网站有 RSS 规则时，会自动显示出来。</p>
<figure><img src="https://raw.githubusercontent.com/dribble-njr/typora-njr/master/img/20240225111133.png" alt="RSSHub Radar" tabindex="0" loading="lazy"><figcaption>RSSHub Radar</figcaption></figure>
<h3>公众号 RSS 源</h3>
<p>由于微信公众号的严格限制，需要使用第三方工具比如 <a href="http://www.jintiankansha.me/" target="_blank" rel="noopener noreferrer">今天看啥</a>，该站目前提供的服务较为稳定，收费如下。</p>
<figure><img src="https://raw.githubusercontent.com/dribble-njr/typora-njr/master/img/20240227103836.png" alt="今天看啥" tabindex="0" loading="lazy"><figcaption>今天看啥</figcaption></figure>
<h3>RSS 阅读工具</h3>
<p>一些较好的 RSS 阅读工具如下：</p>
<ul>
<li>macOS：Reeder 4</li>
<li>iOS：lire</li>
<li>Windows：RSS 追踪</li>
<li>Android：FeedMe</li>
<li>浏览器：Innoreader</li>
</ul>
<figure><img src="https://raw.githubusercontent.com/dribble-njr/typora-njr/master/img/20240227104627.png" alt="inoreader" tabindex="0" loading="lazy"><figcaption>inoreader</figcaption></figure>
<h2>自建 RSSHub 服务</h2>
<p>对于一些需要 cookie 的网站，需要自建 RSSHub 服务。</p>
<figure><img src="https://raw.githubusercontent.com/dribble-njr/typora-njr/master/img/20240227104754.png" alt="Medium" tabindex="0" loading="lazy"><figcaption>Medium</figcaption></figure>
<h3>Vercel</h3>
<p><a href="https://vercel.com" target="_blank" rel="noopener noreferrer">Vercel</a> 可以免费托管。</p>
<p>第一步，打开 <a href="https://vercel.com" target="_blank" rel="noopener noreferrer">Vercel</a>，然后使用 Github 帐号登陆。</p>
<figure><img src="https://raw.githubusercontent.com/dribble-njr/typora-njr/master/img/20240227104926.png" alt="vercel" tabindex="0" loading="lazy"><figcaption>vercel</figcaption></figure>
<h3><a class="header-anchor" href="#create"><span></span></a><a href="https://vercel.com/import/project?template=https://github.com/DIYgod/RSSHub" target="_blank" rel="noopener noreferrer">Create</a></h3>
<p><a href="https://github.com/DIYgod/RSSHub/fork" target="_blank" rel="noopener noreferrer">Fork RSSHub</a> 到 GitHub。</p>
<p>更新一些必要的配置如 <code>cookie</code> 等。</p>
<p>使用你的 RSSHub 项目创建并部署一个新的 Vercel 项目.</p>
<figure><img src="https://raw.githubusercontent.com/dribble-njr/typora-njr/master/img/20240227105036.png" alt="create" tabindex="0" loading="lazy"><figcaption>create</figcaption></figure>
<h3>获取服务地址</h3>
<p>获取部署好的服务地址，并在 RSSHub Radar 中配置即可。</p>
<figure><img src="https://raw.githubusercontent.com/dribble-njr/typora-njr/master/img/20240227105421.png" alt="获取服务地址" tabindex="0" loading="lazy"><figcaption>获取服务地址</figcaption></figure>
<h2>贡献 RSSHub</h2>
<p>如果 RSSHub 提供的订阅源有缺陷，那么我们可以贡献 RSSHub。</p>
<p><a href="https://docs.rsshub.app/zh/joinus/quick-start" target="_blank" rel="noopener noreferrer">官方文档</a> 比较详细，按照步骤来即可。</p>
<h3>安装开发环境</h3>
<ul>
<li><code>fork</code> 然后将你的项目 <code>git clone</code> 到本地。</li>
<li>给你的项目增加上游：<div class="language-bash" data-ext="sh" data-title="sh"><pre class="language-bash"><code><span class="token function">git</span> remote <span class="token function">add</span> upstream https://github.com/DIYgod/RSSHub
</code></pre></div></li>
<li>安装 <code>pnpm</code><div class="language-bash" data-ext="sh" data-title="sh"><pre class="language-bash"><code><span class="token function">npm</span> <span class="token function">install</span> <span class="token function">pnpm</span> <span class="token parameter variable">-g</span>
</code></pre></div></li>
<li>安装依赖并启动项目<div class="language-bash" data-ext="sh" data-title="sh"><pre class="language-bash"><code><span class="token function">pnpm</span> <span class="token function">install</span>
<span class="token function">pnpm</span> dev
</code></pre></div></li>
</ul>
<h3>添加脚本路由</h3>
<p><code>lib/v2/juejin/router.js</code></p>
<div class="language-javascript" data-ext="js" data-title="js"><pre class="language-javascript"><code>module<span class="token punctuation">.</span><span class="token function-variable function">exports</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token parameter">router</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
  router<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token string">'/collections/:userId'</span><span class="token punctuation">,</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">'./favorites'</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
<span class="token punctuation">}</span>
</code></pre></div><h3>获取收藏夹数据</h3>
<p><code>lib/v2/juejin/favorites.js</code></p>
<div class="language-javascript" data-ext="js" data-title="js"><pre class="language-javascript"><code><span class="token doc-comment comment">/**
 * Get all collection by loop
 * <span class="token keyword">@param</span> <span class="token class-name"><span class="token punctuation">{</span>String<span class="token punctuation">}</span></span> <span class="token parameter">user_id</span>
 * <span class="token keyword">@return</span> <span class="token class-name"><span class="token punctuation">{</span>any<span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">}</span></span> collectionSet
 */</span>
<span class="token keyword">const</span> <span class="token function-variable function">getCollectionList</span> <span class="token operator">=</span> <span class="token keyword">async</span> <span class="token punctuation">(</span><span class="token parameter">user_id</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
  <span class="token keyword">const</span> collectionList <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span>
  <span class="token keyword">let</span> cursor <span class="token operator">=</span> <span class="token string">'0'</span>

  <span class="token keyword">let</span> has_more <span class="token operator">=</span> <span class="token boolean">true</span>
  <span class="token keyword">while</span> <span class="token punctuation">(</span>has_more<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token comment">// eslint-disable-next-line no-await-in-loop</span>
    <span class="token keyword">const</span> res <span class="token operator">=</span> <span class="token keyword">await</span> <span class="token function">got</span><span class="token punctuation">(</span><span class="token punctuation">{</span>
      <span class="token literal-property property">method</span><span class="token operator">:</span> <span class="token string">'post'</span><span class="token punctuation">,</span>
      <span class="token literal-property property">url</span><span class="token operator">:</span> <span class="token template-string"><span class="token template-punctuation string">`</span><span class="token string">https://api.juejin.cn/interact_api/v2/collectionset/list?spider=0</span><span class="token template-punctuation string">`</span></span><span class="token punctuation">,</span>
      <span class="token literal-property property">json</span><span class="token operator">:</span> <span class="token punctuation">{</span>
        user_id<span class="token punctuation">,</span>
        cursor<span class="token punctuation">,</span>
        <span class="token literal-property property">limit</span><span class="token operator">:</span> <span class="token number">20</span>
      <span class="token punctuation">}</span>
    <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">json</span><span class="token punctuation">(</span><span class="token punctuation">)</span>

    collectionList<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span><span class="token operator">...</span>res<span class="token punctuation">.</span>data<span class="token punctuation">)</span>

    <span class="token keyword">if</span> <span class="token punctuation">(</span>res<span class="token punctuation">.</span>has_more<span class="token punctuation">)</span> <span class="token punctuation">{</span>
      cursor <span class="token operator">=</span> res<span class="token punctuation">.</span>cursor
    <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>
      has_more <span class="token operator">=</span> <span class="token boolean">false</span>
      <span class="token keyword">break</span>
    <span class="token punctuation">}</span>
  <span class="token punctuation">}</span>

  <span class="token keyword">return</span> collectionList
<span class="token punctuation">}</span>
</code></pre></div><h3>获取文章数据</h3>
<div class="language-javascript" data-ext="js" data-title="js"><pre class="language-javascript"><code><span class="token doc-comment comment">/**
 * Get all posts by collection_id
 * <span class="token keyword">@param</span> <span class="token class-name"><span class="token punctuation">{</span>String<span class="token punctuation">}</span></span> <span class="token parameter">collection_id</span>
 * <span class="token keyword">@returns</span> <span class="token class-name"><span class="token punctuation">{</span>any<span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">}</span></span> posts
 */</span>
<span class="token keyword">const</span> <span class="token function-variable function">getPostList</span> <span class="token operator">=</span> <span class="token keyword">async</span> <span class="token punctuation">(</span><span class="token parameter">collection_id</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
  <span class="token keyword">const</span> postList <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span>
  <span class="token keyword">let</span> cursor <span class="token operator">=</span> <span class="token string">'0'</span>

  <span class="token keyword">let</span> has_more <span class="token operator">=</span> <span class="token boolean">true</span>
  <span class="token keyword">while</span> <span class="token punctuation">(</span>has_more<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token comment">// eslint-disable-next-line no-await-in-loop</span>
    <span class="token keyword">const</span> res <span class="token operator">=</span> <span class="token keyword">await</span> <span class="token function">got</span><span class="token punctuation">(</span><span class="token punctuation">{</span>
      <span class="token literal-property property">method</span><span class="token operator">:</span> <span class="token string">'post'</span><span class="token punctuation">,</span>
      <span class="token literal-property property">url</span><span class="token operator">:</span> <span class="token template-string"><span class="token template-punctuation string">`</span><span class="token string">https://api.juejin.cn/interact_api/v2/collectionset/detail?spider=0</span><span class="token template-punctuation string">`</span></span><span class="token punctuation">,</span>
      <span class="token literal-property property">json</span><span class="token operator">:</span> <span class="token punctuation">{</span>
        collection_id<span class="token punctuation">,</span>
        cursor<span class="token punctuation">,</span>
        <span class="token literal-property property">limit</span><span class="token operator">:</span> <span class="token number">10</span>
      <span class="token punctuation">}</span>
    <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">json</span><span class="token punctuation">(</span><span class="token punctuation">)</span>

    postList<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span><span class="token operator">...</span>res<span class="token punctuation">.</span>data<span class="token punctuation">.</span>articles<span class="token punctuation">)</span>

    <span class="token keyword">if</span> <span class="token punctuation">(</span>res<span class="token punctuation">.</span>has_more<span class="token punctuation">)</span> <span class="token punctuation">{</span>
      cursor <span class="token operator">=</span> res<span class="token punctuation">.</span>cursor
    <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>
      has_more <span class="token operator">=</span> <span class="token boolean">false</span>
      <span class="token keyword">break</span>
    <span class="token punctuation">}</span>
  <span class="token punctuation">}</span>

  <span class="token keyword">return</span> postList
<span class="token punctuation">}</span>
</code></pre></div><h3>生成 RSS 源</h3>
<p>获取数据后，只需将相关数据赋值给 <code>ctx.state.data</code> 对象。</p>
<div class="language-javascript" data-ext="js" data-title="js"><pre class="language-javascript"><code>module<span class="token punctuation">.</span><span class="token function-variable function">exports</span> <span class="token operator">=</span> <span class="token keyword">async</span> <span class="token punctuation">(</span><span class="token parameter">ctx</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
  <span class="token keyword">const</span> <span class="token punctuation">{</span> userId <span class="token punctuation">}</span> <span class="token operator">=</span> ctx<span class="token punctuation">.</span>params

  <span class="token comment">// 获取用户所有收藏夹id</span>
  <span class="token keyword">const</span> collectionList <span class="token operator">=</span> <span class="token keyword">await</span> <span class="token function">getCollectionList</span><span class="token punctuation">(</span>userId<span class="token punctuation">)</span>
  <span class="token keyword">const</span> collectionIds <span class="token operator">=</span> collectionList<span class="token punctuation">.</span><span class="token function">map</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token parameter">item</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> item<span class="token punctuation">.</span>collection_id<span class="token punctuation">)</span>

  <span class="token comment">// 获取所有收藏夹文章内容</span>
  <span class="token keyword">const</span> posts <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token keyword">await</span> Promise<span class="token punctuation">.</span><span class="token function">all</span><span class="token punctuation">(</span>collectionIds<span class="token punctuation">.</span><span class="token function">map</span><span class="token punctuation">(</span>getPostList<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">flat</span><span class="token punctuation">(</span><span class="token punctuation">)</span>

  <span class="token keyword">const</span> result <span class="token operator">=</span> <span class="token keyword">await</span> util<span class="token punctuation">.</span><span class="token function">ProcessFeed</span><span class="token punctuation">(</span>posts<span class="token punctuation">,</span> ctx<span class="token punctuation">.</span>cache<span class="token punctuation">)</span>

  ctx<span class="token punctuation">.</span>state<span class="token punctuation">.</span>data <span class="token operator">=</span> <span class="token punctuation">{</span>
    <span class="token literal-property property">title</span><span class="token operator">:</span> <span class="token string">'掘金 - 收藏集'</span><span class="token punctuation">,</span>
    <span class="token literal-property property">link</span><span class="token operator">:</span> <span class="token template-string"><span class="token template-punctuation string">`</span><span class="token string">https://juejin.im/user/</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">${</span>userId<span class="token interpolation-punctuation punctuation">}</span></span><span class="token string">/collections</span><span class="token template-punctuation string">`</span></span><span class="token punctuation">,</span>
    <span class="token literal-property property">description</span><span class="token operator">:</span> <span class="token string">'掘金，指定用户整个收藏集'</span><span class="token punctuation">,</span>
    <span class="token literal-property property">item</span><span class="token operator">:</span> result<span class="token punctuation">,</span>
    <span class="token literal-property property">allowEmpty</span><span class="token operator">:</span> <span class="token boolean">true</span>
  <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre></div><h3>调试</h3>
<p>运行 <code>pnpm dev</code> 命令：</p>
<figure><img src="https://raw.githubusercontent.com/dribble-njr/typora-njr/master/img/20240225115649.png" alt="debug" tabindex="0" loading="lazy"><figcaption>debug</figcaption></figure>
<p>输入对应路由：</p>
<figure><img src="https://raw.githubusercontent.com/dribble-njr/typora-njr/master/img/20240225115815.png" alt="router" tabindex="0" loading="lazy"><figcaption>router</figcaption></figure>
]]></content>
    <category term="Project"/>
    <published>2024-02-24T00:00:00.000Z</published>
  </entry>
  <entry>
    <title type="text">务实的哲学</title>
    <id>https://dribble-njr.github.io/blog/blog/reading/pragmatic-programmer/01-a-pragmatic-philosophy.html</id>
    <link href="https://dribble-njr.github.io/blog/blog/reading/pragmatic-programmer/01-a-pragmatic-philosophy.html"/>
    <updated>2024-02-20T02:22:03.000Z</updated>
    <summary type="html"><![CDATA[<h2>人生是你的</h2>
<blockquote>
<p>我活着不是为了满足你的期望，正如你活着也不是为了满足我的期望。——李小龙</p>
</blockquote>
<p>你有权选择。</p>
<ul>
<li>工作无聊，技术过时，尝试主动改变，为此而加班才是合理的。</li>
<li>这个行业给了你一系列非凡的机遇。积极主动点，掌控这些机遇。</li>
</ul>
<h2>我的源码被猫吃了</h2>
<ul>
<li>为问题负责，提供解决方案。</li>
<li>增强自己在团队中的信任力。</li>
</ul>
<h2>软件的熵</h2>
<p>破窗——糟糕的设计、错误的决定、低劣的代码。</p>]]></summary>
    <content type="html"><![CDATA[<h2>人生是你的</h2>
<blockquote>
<p>我活着不是为了满足你的期望，正如你活着也不是为了满足我的期望。——李小龙</p>
</blockquote>
<p>你有权选择。</p>
<ul>
<li>工作无聊，技术过时，尝试主动改变，为此而加班才是合理的。</li>
<li>这个行业给了你一系列非凡的机遇。积极主动点，掌控这些机遇。</li>
</ul>
<h2>我的源码被猫吃了</h2>
<ul>
<li>为问题负责，提供解决方案。</li>
<li>增强自己在团队中的信任力。</li>
</ul>
<h2>软件的熵</h2>
<p>破窗——糟糕的设计、错误的决定、低劣的代码。</p>
<ul>
<li>不要容忍破窗。</li>
<li>不要打破窗户。</li>
</ul>
<h2>石头汤与煮青蛙</h2>
<ul>
<li>主动 Own 一件事情，做变革的催化剂。</li>
<li>留意大局，持续观察周围的事情，不局限于自己的工作。</li>
</ul>
<h2>够好即可的软件</h2>
<p>写出够好的软件即可。</p>
<ul>
<li>让质量成为需求问题（先交付再持续根据用户反馈进行优化）。</li>
<li>不要过度设计。</li>
</ul>
<h2>知识资产</h2>
<p>经营你的资产：</p>
<ul>
<li>不断学习，不断提升自己的技能。</li>
<li>保持学习的广度。</li>
<li>在新的技术流行之前学习。</li>
</ul>
<p>目标：</p>
<ul>
<li>每年至少学习一种新语言（或框架）。</li>
<li>每季度阅读一本技术书籍。</li>
<li>也要阅读一些非技术类的书籍。</li>
<li>上课。</li>
<li>参加技术会议。</li>
<li>试验不同的环境。</li>
<li>订阅技术杂志，与时俱进。</li>
</ul>
<p>在学习时，需要批判地进行思考，不要盲目地接受。</p>
<ul>
<li>问「五个为什么」。</li>
<li>谁从中受益。</li>
<li>有什么背景。</li>
<li>什么时候在哪里可以工作。</li>
<li>为什么这是个问题。</li>
</ul>
<h2>交流</h2>
<p>作为开发人员，我们必须在多个层次上进行交流。</p>
<ul>
<li>知道你要说什么。</li>
<li>了解你的听众。</li>
<li>选择时机。</li>
<li>选择风格。</li>
<li>让文档美观。</li>
<li>让听众参与。</li>
<li>做倾听者，如果你不听观众说话，那观众也不会听你说话。</li>
<li>记得回复他人。</li>
</ul>
<p>注释源码，建议给模块和导出函数都加上注释，这能在其他开发者使用的时候，给他们很大的助力。</p>
]]></content>
    <category term="READING"/>
    <published>2024-02-18T00:00:00.000Z</published>
  </entry>
  <entry>
    <title type="text">务实的方法</title>
    <id>https://dribble-njr.github.io/blog/blog/reading/pragmatic-programmer/02-a-pragmatic-approach.html</id>
    <link href="https://dribble-njr.github.io/blog/blog/reading/pragmatic-programmer/02-a-pragmatic-approach.html"/>
    <updated>2024-02-19T14:34:11.000Z</updated>
    <summary type="html"><![CDATA[<h2>优秀设计的精髓</h2>
<p>ETC 原则（Easier To Change）：</p>
<ul>
<li>解耦：隔离关注焦点，可以更容易地进行修改。</li>
<li>单一职责原则：一个需求的变化只会影响一个模块。</li>
<li>命名：良好的命名可以使代码更容易阅读。</li>
</ul>
<h2>DRY——邪恶的重复</h2>
<p>DRY（Don't Repeat Yourself）原则：</p>
<ul>
<li>代码中的重复。</li>
<li>文档中的重复。</li>
<li>数据中的重复。</li>
</ul>
<h2>正交性</h2>
<p>对于两个或多个事物，如果它们的行为不会相互影响，那么它们就是正交的。</p>]]></summary>
    <content type="html"><![CDATA[<h2>优秀设计的精髓</h2>
<p>ETC 原则（Easier To Change）：</p>
<ul>
<li>解耦：隔离关注焦点，可以更容易地进行修改。</li>
<li>单一职责原则：一个需求的变化只会影响一个模块。</li>
<li>命名：良好的命名可以使代码更容易阅读。</li>
</ul>
<h2>DRY——邪恶的重复</h2>
<p>DRY（Don't Repeat Yourself）原则：</p>
<ul>
<li>代码中的重复。</li>
<li>文档中的重复。</li>
<li>数据中的重复。</li>
</ul>
<h2>正交性</h2>
<p>对于两个或多个事物，如果它们的行为不会相互影响，那么它们就是正交的。</p>
<p>象征着独立性和解耦。</p>
<ul>
<li>保持代码解耦。</li>
<li>避免全局数据。</li>
<li>避免相似的函数，每个函数都有不同的中心算法，可以使用「策略模式」进行优化。</li>
<li>编写单元测试。</li>
</ul>
<h2>可逆性</h2>
<ul>
<li>将第三方的 API 隐藏在自己的抽象层之后。</li>
<li>将代码分解为多个组件。</li>
</ul>
<h2>曳光弹</h2>
<p>先实现最小可行产品（MVP）。</p>
<h2>原型与便签</h2>
<p>你可以为下列事物做原型：</p>
<ul>
<li>架构</li>
<li>已存在的系统中的新功能</li>
<li>数据结构或外部数据的内容</li>
<li>第三方工具或组件</li>
<li>性能问题</li>
<li>用户界面设计</li>
</ul>
<p>当制作一个原型时，下面几个方面可以忽略：</p>
<ul>
<li>正确性：你可以在适当的地方使用替代数据。</li>
<li>完整性：原型只需要满足有限的功能，可能只有一个预先选好的输入数据片段及单个菜单选项。</li>
<li>健壮性：错误检查可以不完整，甚至完全没有都行。如果你偏离了预定的航线，原型机很可能烧毁在绚丽的烟火中——那又如何！</li>
<li>格式：原型代码可能并不需要太多注释和文档（尽管围绕从原型中获取的经验，可能会产生大量文档，但是相对而言，原型系统本身的文档要少得多）。</li>
</ul>
<p>制作架构原型：</p>
<ul>
<li>主要组件的职责是否恰当，有没有定义清晰？</li>
<li>主要组件之间的协作是否定义清晰？</li>
<li>耦合度最小化了吗？</li>
<li>你能确定重复的潜在来源吗？</li>
<li>接口的定义和约束能否接受？</li>
<li>在执行过程中是否每个模块都有访问所需数据的途径？在需要数据的时候，能访问到吗？</li>
</ul>
<h2>领域语言</h2>
<p>计算机的语言会影响你怎样思考问题，影响你怎样看待信息的传播。</p>
<p>每一门语言都有一个特性列表——比如这些时髦的术语：静态类型还是动态类型，早期绑定还是晚期绑定，函数式还是面向对象，继承模型，mixin，宏机制——所有这些对问题的解决方案，既可能提供建议也可能扰乱视听。</p>
<p>同样是设计解决方案，用 C++ 的方式和用 Haskell 的思想，得到的结果会大为不同，反之亦然。</p>
<h2>估算</h2>
<p>通过估算来避免意外。</p>
<p>估算项目进度，根据代码不断迭代项目进度表。（TODO 看板？）</p>
]]></content>
    <category term="READING"/>
    <published>2024-02-19T00:00:00.000Z</published>
  </entry>
  <entry>
    <title type="text">数组</title>
    <id>https://dribble-njr.github.io/blog/blog/computer-science/algorithm/01-array.html</id>
    <link href="https://dribble-njr.github.io/blog/blog/computer-science/algorithm/01-array.html"/>
    <updated>2024-03-03T15:27:41.000Z</updated>
    <summary type="html"><![CDATA[<p><code>JavaScript</code> 中数组是一种特殊的对象，用于存储多个值。数组的每个元素都有一个数字索引，用于访问数组中的元素。</p>
<p>常见初始化数组的方式：</p>
<div class="language-typescript" data-ext="ts" data-title="ts"><pre class="language-typescript"><code><span class="token keyword">const</span> arr <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">]</span>
<span class="token keyword">const</span> arr <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name"><span class="token builtin">Array</span></span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">)</span>
<span class="token keyword">const</span> arr <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name"><span class="token builtin">Array</span></span><span class="token punctuation">(</span>n<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">fill</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span>
</code></pre></div>]]></summary>
    <content type="html"><![CDATA[<p><code>JavaScript</code> 中数组是一种特殊的对象，用于存储多个值。数组的每个元素都有一个数字索引，用于访问数组中的元素。</p>
<p>常见初始化数组的方式：</p>
<div class="language-typescript" data-ext="ts" data-title="ts"><pre class="language-typescript"><code><span class="token keyword">const</span> arr <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">]</span>
<span class="token keyword">const</span> arr <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name"><span class="token builtin">Array</span></span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">)</span>
<span class="token keyword">const</span> arr <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name"><span class="token builtin">Array</span></span><span class="token punctuation">(</span>n<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">fill</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span>
</code></pre></div><p>数组是一种线性表数据结构，它用一组连续的内存空间，来存储一组具有相同类型的数据。</p>
<p>常见的解题思路有：</p>
<ul>
<li>二分查找</li>
<li>双指针</li>
<li>滑动窗口</li>
<li>暴力解法</li>
</ul>
<h2>n 数之和</h2>
<p>一般思路为使用哈希表、双指针、排序等方法。</p>
<h3>两数之和</h3>
<div class="hint-container tip">
<p class="hint-container-title">原题链接</p>
<p><a href="https://leetcode-cn.com/problems/two-sum" target="_blank" rel="noopener noreferrer">1. 两数之和</a></p>
</div>
<p>思路：使用哈希表存储遍历过的元素，每次遍历时，判断哈希表中是否存在 <code>target - nums[i]</code>，如果存在则返回结果。</p>
<div class="language-typescript" data-ext="ts" data-title="ts"><pre class="language-typescript"><code><span class="token keyword">function</span> <span class="token function">twoSum</span><span class="token punctuation">(</span>nums<span class="token operator">:</span> <span class="token builtin">number</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">,</span> target<span class="token operator">:</span> <span class="token builtin">number</span><span class="token punctuation">)</span><span class="token operator">:</span> <span class="token builtin">number</span><span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token punctuation">{</span>
  <span class="token keyword">const</span> map <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Map</span><span class="token punctuation">(</span><span class="token punctuation">)</span>

  <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">let</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> nums<span class="token punctuation">.</span>length<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">const</span> diff <span class="token operator">=</span> target <span class="token operator">-</span> nums<span class="token punctuation">[</span>i<span class="token punctuation">]</span>

    <span class="token keyword">if</span> <span class="token punctuation">(</span>map<span class="token punctuation">.</span><span class="token function">has</span><span class="token punctuation">(</span>diff<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
      <span class="token keyword">return</span> <span class="token punctuation">[</span>map<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span>diff<span class="token punctuation">)</span><span class="token punctuation">,</span> i<span class="token punctuation">]</span>
    <span class="token punctuation">}</span>

    map<span class="token punctuation">.</span><span class="token function">set</span><span class="token punctuation">(</span>nums<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">,</span> i<span class="token punctuation">)</span>
  <span class="token punctuation">}</span>

  <span class="token keyword">return</span> <span class="token punctuation">[</span><span class="token punctuation">]</span>
<span class="token punctuation">}</span>
</code></pre></div><h3>三数之和</h3>
<div class="hint-container tip">
<p class="hint-container-title">原题链接</p>
<p><a href="https://leetcode-cn.com/problems/3sum" target="_blank" rel="noopener noreferrer">15. 三数之和</a></p>
</div>
<p>思路：使用双指针，先对数组进行排序，然后遍历数组，使用双指针分别指向当前元素的下一个元素和数组的最后一个元素，计算三数之和，然后移动指针。</p>
<div class="hint-container tip">
<p class="hint-container-title">提示</p>
<p>本题不能无脑使用 <code>for</code> 循环套两数之和哈希表，因为会有重复的结果。</p>
</div>
<div class="language-typescript" data-ext="ts" data-title="ts"><pre class="language-typescript"><code><span class="token keyword">function</span> <span class="token function">threeSum</span><span class="token punctuation">(</span>nums<span class="token operator">:</span> <span class="token builtin">number</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token operator">:</span> <span class="token builtin">number</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token punctuation">{</span>
  <span class="token keyword">const</span> res <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span>
  <span class="token keyword">const</span> len <span class="token operator">=</span> nums<span class="token punctuation">.</span>length

  <span class="token keyword">if</span> <span class="token punctuation">(</span>len <span class="token operator">&lt;</span> <span class="token number">3</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">return</span> res
  <span class="token punctuation">}</span>

  nums<span class="token punctuation">.</span><span class="token function">sort</span><span class="token punctuation">(</span><span class="token punctuation">(</span>a<span class="token punctuation">,</span> b<span class="token punctuation">)</span> <span class="token operator">=&gt;</span> a <span class="token operator">-</span> b<span class="token punctuation">)</span>

  <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">let</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> len<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token comment">// 因为排序过，若大于 0 ，则后面不可能有三个数和等于 0</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span>nums<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">&gt;</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token keyword">return</span> res

    <span class="token comment">// 如果和前一个数相等，因为不能出现重复的答案，因此跳过这个元素</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span>i <span class="token operator">&gt;</span> <span class="token number">0</span> <span class="token operator">&amp;&amp;</span> nums<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">===</span> nums<span class="token punctuation">[</span>i <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
      <span class="token keyword">continue</span>
    <span class="token punctuation">}</span>

    <span class="token keyword">let</span> left <span class="token operator">=</span> i <span class="token operator">+</span> <span class="token number">1</span>
    <span class="token keyword">let</span> right <span class="token operator">=</span> len <span class="token operator">-</span> <span class="token number">1</span>

    <span class="token keyword">while</span> <span class="token punctuation">(</span>left <span class="token operator">&lt;</span> right<span class="token punctuation">)</span> <span class="token punctuation">{</span>
      <span class="token keyword">const</span> sum <span class="token operator">=</span> nums<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">+</span> nums<span class="token punctuation">[</span>left<span class="token punctuation">]</span> <span class="token operator">+</span> nums<span class="token punctuation">[</span>right<span class="token punctuation">]</span>

      <span class="token keyword">if</span> <span class="token punctuation">(</span>sum <span class="token operator">===</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        res<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span><span class="token punctuation">[</span>nums<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">,</span> nums<span class="token punctuation">[</span>left<span class="token punctuation">]</span><span class="token punctuation">,</span> nums<span class="token punctuation">[</span>right<span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">)</span>

        <span class="token comment">// 若左指针与下一位相等，为了去除重复，则将 left 加 1</span>
        <span class="token keyword">while</span> <span class="token punctuation">(</span>left <span class="token operator">&lt;</span> right <span class="token operator">&amp;&amp;</span> nums<span class="token punctuation">[</span>left<span class="token punctuation">]</span> <span class="token operator">===</span> nums<span class="token punctuation">[</span>left <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
          left<span class="token operator">++</span>
        <span class="token punctuation">}</span>

        <span class="token comment">// 若右指针与上一位相等，为了去除重复，则将 right 减 1</span>
        <span class="token keyword">while</span> <span class="token punctuation">(</span>left <span class="token operator">&lt;</span> right <span class="token operator">&amp;&amp;</span> nums<span class="token punctuation">[</span>right<span class="token punctuation">]</span> <span class="token operator">===</span> nums<span class="token punctuation">[</span>right <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
          right<span class="token operator">--</span>
        <span class="token punctuation">}</span>

        <span class="token comment">// 若左右没有与下一位相等，则继续寻找</span>
        left<span class="token operator">++</span>
        right<span class="token operator">--</span>
      <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>sum <span class="token operator">&lt;</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token comment">// 若和大于 0，说明 nums[r] 太大，right 左移</span>
        left<span class="token operator">++</span>
      <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>
        <span class="token comment">// 若和小于 0，说明 nums[L] 太小，left 右移</span>
        right<span class="token operator">--</span>
      <span class="token punctuation">}</span>
    <span class="token punctuation">}</span>
  <span class="token punctuation">}</span>

  <span class="token keyword">return</span> res
<span class="token punctuation">}</span>
</code></pre></div><h3>最接近的三数之和</h3>
<div class="hint-container tip">
<p class="hint-container-title">原题链接</p>
<p><a href="https://leetcode-cn.com/problems/3sum-closest" target="_blank" rel="noopener noreferrer">16. 最接近的三数之和</a></p>
</div>
<h4>暴力解法</h4>
<p>思路：使用三重循环，遍历数组，计算三数之和，然后比较与目标值的差值，找到最接近的结果。</p>
<div class="language-typescript" data-ext="ts" data-title="ts"><pre class="language-typescript"><code><span class="token keyword">function</span> <span class="token function">threeSumClosest</span><span class="token punctuation">(</span>nums<span class="token operator">:</span> <span class="token builtin">number</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">,</span> target<span class="token operator">:</span> <span class="token builtin">number</span><span class="token punctuation">)</span><span class="token operator">:</span> <span class="token builtin">number</span> <span class="token punctuation">{</span>
  <span class="token keyword">let</span> res <span class="token operator">=</span> nums<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">+</span> nums<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">+</span> nums<span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span>

  <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">let</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> nums<span class="token punctuation">.</span>length<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">let</span> j <span class="token operator">=</span> i <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">;</span> j <span class="token operator">&lt;</span> nums<span class="token punctuation">.</span>length<span class="token punctuation">;</span> j<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
      <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">let</span> k <span class="token operator">=</span> j <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">;</span> k <span class="token operator">&lt;</span> nums<span class="token punctuation">.</span>length<span class="token punctuation">;</span> k<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">const</span> sum <span class="token operator">=</span> nums<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">+</span> nums<span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token operator">+</span> nums<span class="token punctuation">[</span>k<span class="token punctuation">]</span>

        <span class="token keyword">if</span> <span class="token punctuation">(</span>Math<span class="token punctuation">.</span><span class="token function">abs</span><span class="token punctuation">(</span>sum <span class="token operator">-</span> target<span class="token punctuation">)</span> <span class="token operator">&lt;</span> Math<span class="token punctuation">.</span><span class="token function">abs</span><span class="token punctuation">(</span>res <span class="token operator">-</span> target<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
          res <span class="token operator">=</span> sum
        <span class="token punctuation">}</span>
      <span class="token punctuation">}</span>
    <span class="token punctuation">}</span>
  <span class="token punctuation">}</span>

  <span class="token keyword">return</span> res
<span class="token punctuation">}</span>
</code></pre></div><h4>双指针</h4>
<p>思路：使用双指针，先对数组进行排序，然后遍历数组，使用双指针分别指向当前元素的下一个元素和数组的最后一个元素，计算三数之和，然后移动指针。</p>
<div class="language-typescript" data-ext="ts" data-title="ts"><pre class="language-typescript"><code><span class="token keyword">function</span> <span class="token function">threeSumClosest</span><span class="token punctuation">(</span>nums<span class="token operator">:</span> <span class="token builtin">number</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">,</span> target<span class="token operator">:</span> <span class="token builtin">number</span><span class="token punctuation">)</span><span class="token operator">:</span> <span class="token builtin">number</span> <span class="token punctuation">{</span>
  <span class="token keyword">let</span> res <span class="token operator">=</span> nums<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">+</span> nums<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">+</span> nums<span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span>

  nums<span class="token punctuation">.</span><span class="token function">sort</span><span class="token punctuation">(</span><span class="token punctuation">(</span>a<span class="token punctuation">,</span> b<span class="token punctuation">)</span> <span class="token operator">=&gt;</span> a <span class="token operator">-</span> b<span class="token punctuation">)</span>

  <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">let</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> nums<span class="token punctuation">.</span>length<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">let</span> left <span class="token operator">=</span> i <span class="token operator">+</span> <span class="token number">1</span>
    <span class="token keyword">let</span> right <span class="token operator">=</span> nums<span class="token punctuation">.</span>length <span class="token operator">-</span> <span class="token number">1</span>

    <span class="token keyword">while</span> <span class="token punctuation">(</span>left <span class="token operator">&lt;</span> right<span class="token punctuation">)</span> <span class="token punctuation">{</span>
      <span class="token keyword">const</span> sum <span class="token operator">=</span> nums<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">+</span> nums<span class="token punctuation">[</span>left<span class="token punctuation">]</span> <span class="token operator">+</span> nums<span class="token punctuation">[</span>right<span class="token punctuation">]</span>

      <span class="token keyword">if</span> <span class="token punctuation">(</span>Math<span class="token punctuation">.</span><span class="token function">abs</span><span class="token punctuation">(</span>sum <span class="token operator">-</span> target<span class="token punctuation">)</span> <span class="token operator">&lt;</span> Math<span class="token punctuation">.</span><span class="token function">abs</span><span class="token punctuation">(</span>res <span class="token operator">-</span> target<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        res <span class="token operator">=</span> sum
      <span class="token punctuation">}</span>

      <span class="token keyword">if</span> <span class="token punctuation">(</span>sum <span class="token operator">&gt;</span> target<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        right<span class="token operator">--</span>
      <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>sum <span class="token operator">&lt;</span> target<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        left<span class="token operator">++</span>
      <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>
        <span class="token keyword">return</span> res
      <span class="token punctuation">}</span>
    <span class="token punctuation">}</span>
  <span class="token punctuation">}</span>

  <span class="token keyword">return</span> res
<span class="token punctuation">}</span>
</code></pre></div><h3>四数之和</h3>
<div class="hint-container tip">
<p class="hint-container-title">原题链接</p>
<p><a href="https://leetcode-cn.com/problems/4sum" target="_blank" rel="noopener noreferrer">18. 四数之和</a></p>
</div>
<p>思路：参照 <a href="#%E4%B8%89%E6%95%B0%E4%B9%8B%E5%92%8C">三数之和</a>，使用双指针，先对数组进行排序，然后遍历数组，使用双指针分别指向当前元素的下一个元素和数组的最后一个元素，计算四数之和，然后移动指针。</p>
<div class="hint-container warning">
<p class="hint-container-title">易错提示</p>
<ul>
<li>在遍历数组时，需要判断是否和前一个元素相等，如果相等则跳过。</li>
<li><code>i</code> 从 0 开始，<code>j</code> 从 <code>i + 1</code> 开始，<code>left</code> 从 <code>j + 1</code> 开始，<code>right</code> 从 <code>nums.length - 1</code> 开始。</li>
</ul>
</div>
<div class="language-typescript" data-ext="ts" data-title="ts"><pre class="language-typescript"><code><span class="token keyword">function</span> <span class="token function">fourSum</span><span class="token punctuation">(</span>nums<span class="token operator">:</span> <span class="token builtin">number</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">,</span> target<span class="token operator">:</span> <span class="token builtin">number</span><span class="token punctuation">)</span><span class="token operator">:</span> <span class="token builtin">number</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token punctuation">{</span>
  <span class="token keyword">const</span> res <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span>
  nums<span class="token punctuation">.</span><span class="token function">sort</span><span class="token punctuation">(</span><span class="token punctuation">(</span>a<span class="token punctuation">,</span> b<span class="token punctuation">)</span> <span class="token operator">=&gt;</span> a <span class="token operator">-</span> b<span class="token punctuation">)</span>

  <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">let</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> nums<span class="token punctuation">.</span>length<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span>i <span class="token operator">&gt;</span> <span class="token number">0</span> <span class="token operator">&amp;&amp;</span> nums<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">===</span> nums<span class="token punctuation">[</span>i <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token keyword">continue</span>

    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">let</span> j <span class="token operator">=</span> i <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">;</span> j <span class="token operator">&lt;</span> nums<span class="token punctuation">.</span>length<span class="token punctuation">;</span> j<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
      <span class="token keyword">if</span> <span class="token punctuation">(</span>j <span class="token operator">&gt;</span> i <span class="token operator">+</span> <span class="token number">1</span> <span class="token operator">&amp;&amp;</span> nums<span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token operator">===</span> nums<span class="token punctuation">[</span>j <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token keyword">continue</span>

      <span class="token keyword">let</span> left <span class="token operator">=</span> j <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">,</span>
        right <span class="token operator">=</span> nums<span class="token punctuation">.</span>length <span class="token operator">-</span> <span class="token number">1</span>

      <span class="token keyword">while</span> <span class="token punctuation">(</span>left <span class="token operator">&lt;</span> right<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">const</span> sum <span class="token operator">=</span> nums<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">+</span> nums<span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token operator">+</span> nums<span class="token punctuation">[</span>left<span class="token punctuation">]</span> <span class="token operator">+</span> nums<span class="token punctuation">[</span>right<span class="token punctuation">]</span>

        <span class="token keyword">if</span> <span class="token punctuation">(</span>sum <span class="token operator">&gt;</span> target<span class="token punctuation">)</span> <span class="token punctuation">{</span>
          right<span class="token operator">--</span>
        <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>sum <span class="token operator">&lt;</span> target<span class="token punctuation">)</span> <span class="token punctuation">{</span>
          left<span class="token operator">++</span>
        <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>
          res<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span><span class="token punctuation">[</span>nums<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">,</span> nums<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">,</span> nums<span class="token punctuation">[</span>left<span class="token punctuation">]</span><span class="token punctuation">,</span> nums<span class="token punctuation">[</span>right<span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">)</span>

          <span class="token keyword">while</span> <span class="token punctuation">(</span>left <span class="token operator">&lt;</span> right <span class="token operator">&amp;&amp;</span> nums<span class="token punctuation">[</span>left<span class="token punctuation">]</span> <span class="token operator">===</span> nums<span class="token punctuation">[</span>left <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span> left<span class="token operator">++</span>
          <span class="token keyword">while</span> <span class="token punctuation">(</span>left <span class="token operator">&lt;</span> right <span class="token operator">&amp;&amp;</span> nums<span class="token punctuation">[</span>right<span class="token punctuation">]</span> <span class="token operator">===</span> nums<span class="token punctuation">[</span>right <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span> right<span class="token operator">--</span>

          left<span class="token operator">++</span>
          right<span class="token operator">--</span>
        <span class="token punctuation">}</span>
      <span class="token punctuation">}</span>
    <span class="token punctuation">}</span>
  <span class="token punctuation">}</span>

  <span class="token keyword">return</span> res
<span class="token punctuation">}</span>
</code></pre></div><h2>双指针</h2>
<h3>接雨水</h3>
<div class="hint-container tip">
<p class="hint-container-title">原题链接</p>
<p><a href="https://leetcode.cn/problems/container-with-most-water" target="_blank" rel="noopener noreferrer">11. 盛最多水的容器</a></p>
<p><a href="https://leetcode-cn.com/problems/trapping-rain-water" target="_blank" rel="noopener noreferrer">42. 接雨水</a></p>
</div>
<p>思路：使用双指针，分别指向数组的头尾，计算当前面积，然后移动高度较小的指针。</p>
<div class="language-typescript" data-ext="ts" data-title="ts"><pre class="language-typescript"><code><span class="token keyword">function</span> <span class="token function">maxArea</span><span class="token punctuation">(</span>height<span class="token operator">:</span> <span class="token builtin">number</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token operator">:</span> <span class="token builtin">number</span> <span class="token punctuation">{</span>
  <span class="token keyword">let</span> res <span class="token operator">=</span> <span class="token number">0</span>
  <span class="token keyword">let</span> left <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">,</span>
    right <span class="token operator">=</span> height<span class="token punctuation">.</span>length <span class="token operator">-</span> <span class="token number">1</span>

  <span class="token keyword">while</span> <span class="token punctuation">(</span>left <span class="token operator">&lt;=</span> right<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">const</span> weight <span class="token operator">=</span> right <span class="token operator">-</span> left

    <span class="token keyword">if</span> <span class="token punctuation">(</span>height<span class="token punctuation">[</span>left<span class="token punctuation">]</span> <span class="token operator">&lt;</span> height<span class="token punctuation">[</span>right<span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
      res <span class="token operator">=</span> Math<span class="token punctuation">.</span><span class="token function">max</span><span class="token punctuation">(</span>height<span class="token punctuation">[</span>left<span class="token punctuation">]</span> <span class="token operator">*</span> weight<span class="token punctuation">,</span> res<span class="token punctuation">)</span>
      left<span class="token operator">++</span>
    <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>
      res <span class="token operator">=</span> Math<span class="token punctuation">.</span><span class="token function">max</span><span class="token punctuation">(</span>height<span class="token punctuation">[</span>right<span class="token punctuation">]</span> <span class="token operator">*</span> weight<span class="token punctuation">,</span> res<span class="token punctuation">)</span>
      right<span class="token operator">--</span>
    <span class="token punctuation">}</span>
  <span class="token punctuation">}</span>

  <span class="token keyword">return</span> res
<span class="token punctuation">}</span>
</code></pre></div><h3>删除有序数组中的重复项</h3>
<div class="hint-container tip">
<p class="hint-container-title">原题链接</p>
<p><a href="https://leetcode-cn.com/problems/remove-duplicates-from-sorted-array" target="_blank" rel="noopener noreferrer">26. 删除有序数组中的重复项</a></p>
</div>
<p>思路：使用双指针，一个指针用于遍历数组，另一个指针用于指向不重复的元素。</p>
<div class="language-typescript" data-ext="ts" data-title="ts"><pre class="language-typescript"><code><span class="token keyword">function</span> <span class="token function">removeDuplicates</span><span class="token punctuation">(</span>nums<span class="token operator">:</span> <span class="token builtin">number</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token operator">:</span> <span class="token builtin">number</span> <span class="token punctuation">{</span>
  <span class="token keyword">if</span> <span class="token punctuation">(</span>nums<span class="token punctuation">.</span>length <span class="token operator">===</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token keyword">return</span> <span class="token number">0</span>

  <span class="token keyword">let</span> slow <span class="token operator">=</span> <span class="token number">0</span>

  <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">let</span> fast <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span> fast <span class="token operator">&lt;</span> nums<span class="token punctuation">.</span>length<span class="token punctuation">;</span> fast<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span>nums<span class="token punctuation">[</span>slow<span class="token punctuation">]</span> <span class="token operator">!==</span> nums<span class="token punctuation">[</span>fast<span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
      slow<span class="token operator">++</span>
      nums<span class="token punctuation">[</span>slow<span class="token punctuation">]</span> <span class="token operator">=</span> nums<span class="token punctuation">[</span>fast<span class="token punctuation">]</span>
    <span class="token punctuation">}</span>
  <span class="token punctuation">}</span>

  <span class="token keyword">return</span> slow <span class="token operator">+</span> <span class="token number">1</span>
<span class="token punctuation">}</span>
</code></pre></div><h3>移除元素</h3>
<div class="hint-container tip">
<p class="hint-container-title">原题链接</p>
<p><a href="https://leetcode-cn.com/problems/remove-element" target="_blank" rel="noopener noreferrer">27. 移除元素</a></p>
</div>
<p>思路：使用双指针，一个指针用于遍历数组，另一个指针用于指向不等于目标值的元素。</p>
<div class="language-typescript" data-ext="ts" data-title="ts"><pre class="language-typescript"><code><span class="token keyword">function</span> <span class="token function">removeElement</span><span class="token punctuation">(</span>nums<span class="token operator">:</span> <span class="token builtin">number</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">,</span> val<span class="token operator">:</span> <span class="token builtin">number</span><span class="token punctuation">)</span><span class="token operator">:</span> <span class="token builtin">number</span> <span class="token punctuation">{</span>
  <span class="token keyword">let</span> slow <span class="token operator">=</span> <span class="token number">0</span>

  <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">let</span> fast <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> fast <span class="token operator">&lt;</span> nums<span class="token punctuation">.</span>length<span class="token punctuation">;</span> fast<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span>nums<span class="token punctuation">[</span>fast<span class="token punctuation">]</span> <span class="token operator">!==</span> val<span class="token punctuation">)</span> <span class="token punctuation">{</span>
      nums<span class="token punctuation">[</span>slow<span class="token operator">++</span><span class="token punctuation">]</span> <span class="token operator">=</span> nums<span class="token punctuation">[</span>fast<span class="token punctuation">]</span>
    <span class="token punctuation">}</span>
  <span class="token punctuation">}</span>

  <span class="token keyword">return</span> slow
<span class="token punctuation">}</span>
</code></pre></div><h3>下一个排列</h3>
<div class="hint-container tip">
<p class="hint-container-title">原题链接</p>
<p><a href="https://leetcode.cn/problems/next-permutation/description/" target="_blank" rel="noopener noreferrer">31. 下一个排列</a></p>
</div>
<p>思路：关键找到「较小数」与「较大数」。</p>
<ol>
<li>我们需要将一个左边的「较小数」与一个右边的「较大数」交换，以能够让当前排列变大，从而得到下一个排列。</li>
<li>同时我们要让这个「较小数」尽量靠右，而「较大数」尽可能小。当交换完成后，「较大数」右边的数需要按照升序重新排列。这样可以在保证新排列大于原来排列的情况下，使变大的幅度尽可能小。</li>
</ol>
<p>以排列 <code>[4,5,2,6,3,1]</code> 为例：</p>
<ul>
<li>我们能找到的符合条件的一对「较小数」与「较大数」的组合为 <code>2</code> 与 <code>3</code>，满足「较小数」尽量靠右，而「较大数」尽可能小。</li>
<li>当我们完成交换后排列变为 <code>[4,5,3,6,2,1]</code>，此时我们可以重排「较小数」右边的序列，序列变为 <code>[4,5,3,1,2,6]</code>。</li>
</ul>
<div class="language-typescript" data-ext="ts" data-title="ts"><pre class="language-typescript"><code><span class="token doc-comment comment">/**
 Do not return anything, modify nums in-place instead.
 */</span>
<span class="token keyword">function</span> <span class="token function">nextPermutation</span><span class="token punctuation">(</span>nums<span class="token operator">:</span> <span class="token builtin">number</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token operator">:</span> <span class="token keyword">void</span> <span class="token punctuation">{</span>
  <span class="token keyword">let</span> i <span class="token operator">=</span> nums<span class="token punctuation">.</span>length <span class="token operator">-</span> <span class="token number">2</span>

  <span class="token comment">// find smaller num</span>
  <span class="token keyword">while</span> <span class="token punctuation">(</span>i <span class="token operator">&gt;=</span> <span class="token number">0</span> <span class="token operator">&amp;&amp;</span> nums<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">&gt;=</span> nums<span class="token punctuation">[</span>i <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    i<span class="token operator">--</span>
  <span class="token punctuation">}</span>

  <span class="token comment">// now [i + 1, end) is decreasing</span>

  <span class="token comment">// find bigger num</span>
  <span class="token keyword">if</span> <span class="token punctuation">(</span>i <span class="token operator">&gt;=</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">let</span> j <span class="token operator">=</span> nums<span class="token punctuation">.</span>length <span class="token operator">-</span> <span class="token number">1</span>
    <span class="token keyword">while</span> <span class="token punctuation">(</span>j <span class="token operator">&gt;</span> <span class="token number">0</span> <span class="token operator">&amp;&amp;</span> nums<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">&gt;=</span> nums<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
      j<span class="token operator">--</span>
    <span class="token punctuation">}</span>
    <span class="token comment">// swap</span>
    <span class="token punctuation">;</span><span class="token punctuation">[</span>nums<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">,</span> nums<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token punctuation">[</span>nums<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">,</span> nums<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">]</span>
  <span class="token punctuation">}</span>

  <span class="token comment">// reverse [i, end)</span>
  <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">let</span> l <span class="token operator">=</span> i <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">,</span> r <span class="token operator">=</span> nums<span class="token punctuation">.</span>length <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">;</span> l <span class="token operator">&lt;</span> r<span class="token punctuation">;</span> l<span class="token operator">++</span><span class="token punctuation">,</span> r<span class="token operator">--</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token punctuation">;</span><span class="token punctuation">[</span>nums<span class="token punctuation">[</span>l<span class="token punctuation">]</span><span class="token punctuation">,</span> nums<span class="token punctuation">[</span>r<span class="token punctuation">]</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token punctuation">[</span>nums<span class="token punctuation">[</span>r<span class="token punctuation">]</span><span class="token punctuation">,</span> nums<span class="token punctuation">[</span>l<span class="token punctuation">]</span><span class="token punctuation">]</span>
  <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre></div>]]></content>
    <category term="algorithm"/>
    <published>2024-02-15T00:00:00.000Z</published>
  </entry>
  <entry>
    <title type="text">自动点亮 GitHub 热点图</title>
    <id>https://dribble-njr.github.io/blog/blog/project/github-auto-commit/</id>
    <link href="https://dribble-njr.github.io/blog/blog/project/github-auto-commit/"/>
    <updated>2024-05-12T06:37:11.000Z</updated>
    <summary type="html"><![CDATA[<p>灵感来源：某天在 GitHub 上看到一个用户的热点图，发现他每天都有提交记录，非常帅！</p>
<p>于是先搜搜有没有自动提交的工具，但是找到的结果有些需要在本地运行；有些则没有检查当天是否有提交记录，如果有提交当然不希望有一个虚拟的提交。</p>
<p>于是就有了这个项目，使用 GitHub Actions 自动提交代码，保持 GitHub 热点图常绿。</p>
<p>项目地址：<a href="https://github.com/dribble-njr/github-auto-commit" target="_blank" rel="noopener noreferrer">github-auto-commit</a>。</p>]]></summary>
    <content type="html"><![CDATA[<p>灵感来源：某天在 GitHub 上看到一个用户的热点图，发现他每天都有提交记录，非常帅！</p>
<p>于是先搜搜有没有自动提交的工具，但是找到的结果有些需要在本地运行；有些则没有检查当天是否有提交记录，如果有提交当然不希望有一个虚拟的提交。</p>
<p>于是就有了这个项目，使用 GitHub Actions 自动提交代码，保持 GitHub 热点图常绿。</p>
<p>项目地址：<a href="https://github.com/dribble-njr/github-auto-commit" target="_blank" rel="noopener noreferrer">github-auto-commit</a>。</p>
<h2>功能特点</h2>
<ul>
<li><strong>自动提交与推送</strong>: 如果所有代码仓库今天没有任何提交，工作流程将自动提交一个虚拟的提交，并将其推送到代码仓库。</li>
<li><strong>支持配置</strong>: 可以根据自己的需求进行配置，包括调整定时任务时间、更改 Git 设置信息以及自定义提交信息等。</li>
</ul>
<h2>使用方法</h2>
<ol>
<li><strong>Fork 本仓库</strong>: 首先，将本仓库 Fork 到你自己的 GitHub 账号下。</li>
<li><strong>生成个人访问令牌（PAT）</strong>: 在 GitHub 设置中生成一个具有 <code>repo</code> 权限范围的个人访问令牌。</li>
<li><strong>设置仓库 Secrets</strong>: 在仓库的设置中，添加一个名为 <code>TOKEN</code> 的 Secrets，将在步骤 2 中生成的 PAT 值作为其值。</li>
</ol>
<h2>配置</h2>
<p>可以根据自己的需求对工作流程进行以下配置：</p>
<ol>
<li><strong>调整定时任务时间</strong>: 可以在工作流程文件中修改 <code>schedule</code> 部分的 cron 表达式，以更改工作流程的触发时间。</li>
<li><strong>更改 Git 设置信息</strong>: 在工作流程文件中的 <code>Set up Git</code> 步骤中，更改 Git 的用户邮箱和用户名。</li>
<li><strong>自定义提交信息</strong>: 在工作流程文件的最后一步中，根据需要修改 <code>date_today</code>、<code>time_start</code>、<code>time_end</code>、<code>repo</code> 和 <code>commit_message</code> 等变量，以调整自动提交的内容和提交信息。</li>
</ol>
<h2>实现</h2>
<p>整体工作原理是使用 GitHub Actions 实现定时触发任务。</p>
<p>使用 GitHub 提供的 API 来获取用户所有的代码仓库，并获取取每个仓库的提交信息。</p>
<p>如果在所有仓库中都没有找到今天的提交记录，工作流程会自动创建一个虚拟的提交并推送到代码仓库中。</p>
<p>完整代码如下：</p>
<div class="language-yaml" data-ext="yml" data-title="yml"><pre class="language-yaml"><code><span class="token key atrule">name</span><span class="token punctuation">:</span> Auto Commit

<span class="token key atrule">on</span><span class="token punctuation">:</span>
  <span class="token key atrule">schedule</span><span class="token punctuation">:</span>
    <span class="token punctuation">-</span> <span class="token key atrule">cron</span><span class="token punctuation">:</span> <span class="token string">'50 15 * * *'</span> <span class="token comment"># run at 23:50 in China time</span>
  <span class="token key atrule">workflow_dispatch</span><span class="token punctuation">:</span>

<span class="token key atrule">jobs</span><span class="token punctuation">:</span>
  <span class="token key atrule">check_commits</span><span class="token punctuation">:</span>
    <span class="token key atrule">runs-on</span><span class="token punctuation">:</span> ubuntu<span class="token punctuation">-</span>latest
    <span class="token key atrule">steps</span><span class="token punctuation">:</span>
      <span class="token punctuation">-</span> <span class="token key atrule">name</span><span class="token punctuation">:</span> Checkout this repository
        <span class="token key atrule">uses</span><span class="token punctuation">:</span> actions/checkout@v2

      <span class="token punctuation">-</span> <span class="token key atrule">name</span><span class="token punctuation">:</span> Set up Git
        <span class="token key atrule">run</span><span class="token punctuation">:</span> <span class="token punctuation">|</span><span class="token scalar string">
          # You should set your email and name here.</span>

          git config <span class="token punctuation">-</span><span class="token punctuation">-</span>global user.email "wzw15292257101@163.com"
          git config <span class="token punctuation">-</span><span class="token punctuation">-</span>global user.name "dribble<span class="token punctuation">-</span>njr"

      <span class="token punctuation">-</span> <span class="token key atrule">name</span><span class="token punctuation">:</span> Get all repositories
        <span class="token key atrule">id</span><span class="token punctuation">:</span> get<span class="token punctuation">-</span>repos
        <span class="token key atrule">run</span><span class="token punctuation">:</span> <span class="token punctuation">|</span><span class="token scalar string">
          echo "Fetching all repositories..."
          response=$(curl -s -w "\n%{http_code}" -H "Authorization: token ${{ secrets.TOKEN }}" "https://api.github.com/user/repos?type=all")
          http_code=$(echo "$response" | tail -n1)
          response_body=$(echo "$response" | sed '$d')</span>

          echo "<span class="token punctuation">[</span>HTTP status code<span class="token punctuation">]</span><span class="token punctuation">:</span> $http_code"

          contained_repos=$(echo "$response_body" <span class="token punctuation">|</span> jq <span class="token punctuation">-</span>r '.<span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token punctuation">|</span> .full_name')
          <span class="token key atrule">echo "Contained repositories</span><span class="token punctuation">:</span> $contained_repos"

          echo "<span class="token punctuation">:</span><span class="token punctuation">:</span>set<span class="token punctuation">-</span>output name=repos<span class="token punctuation">:</span><span class="token punctuation">:</span>$(echo "$contained_repos" <span class="token punctuation">|</span> tr '\n' '<span class="token punctuation">,</span>')" <span class="token comment"># output repos</span>

      <span class="token punctuation">-</span> <span class="token key atrule">name</span><span class="token punctuation">:</span> Read repositories list and check commits
        <span class="token key atrule">run</span><span class="token punctuation">:</span> <span class="token punctuation">|</span><span class="token scalar string">
          # Set custom timezone and other config by yourself.</span>

          date_today=$(TZ='Asia/Shanghai' date <span class="token punctuation">-</span>I) <span class="token comment"># Date part</span>
          time_start="$<span class="token punctuation">{</span>date_today<span class="token punctuation">}</span>T00<span class="token punctuation">:</span>00<span class="token punctuation">:</span>00"
          time_end="$<span class="token punctuation">{</span>date_today<span class="token punctuation">}</span>T23<span class="token punctuation">:</span>55<span class="token punctuation">:</span>00"
          repo="https<span class="token punctuation">:</span>//github.com/dribble<span class="token punctuation">-</span>njr/github<span class="token punctuation">-</span>auto<span class="token punctuation">-</span>commit.git"
          commit_message="Auto commit on $(TZ='Asia/Shanghai' date '+%Y<span class="token punctuation">-</span>%m<span class="token punctuation">-</span>%d %H<span class="token punctuation">:</span>%M<span class="token punctuation">:</span>%S')"

          commits_exist=false
          echo "Checking commits between $time_start and $time_end"

          IFS='<span class="token punctuation">,</span> ' read <span class="token punctuation">-</span>r <span class="token punctuation">-</span>a repos &lt;&lt;&lt; "$<span class="token punctuation">{</span><span class="token punctuation">{</span> steps.get<span class="token punctuation">-</span>repos.outputs.repos <span class="token punctuation">}</span><span class="token punctuation">}</span>"
          for repo in "$<span class="token punctuation">{</span>repos<span class="token punctuation">[</span>@<span class="token punctuation">]</span><span class="token punctuation">}</span>"; do
            echo "Checking commits for $repo"
            <span class="token key atrule">commit_today=$(curl -H "Authorization</span><span class="token punctuation">:</span> token $<span class="token punctuation">{</span><span class="token punctuation">{</span> secrets.TOKEN <span class="token punctuation">}</span><span class="token punctuation">}</span>" <span class="token punctuation">-</span>s "https<span class="token punctuation">:</span>//api.github.com/repos/$repo/commits<span class="token punctuation">?</span>since=$time_start<span class="token important">&amp;until=$time_end")</span>
            if echo "$commit_today" <span class="token punctuation">|</span> jq <span class="token punctuation">-</span>e '.<span class="token punctuation">[</span><span class="token punctuation">]</span>' <span class="token punctuation">&gt;</span> /dev/null; then
                echo "Commits today in $repo<span class="token punctuation">:</span>"
                echo "$commit_today"
                commits_exist=true
                break
            fi
          done

          if <span class="token punctuation">[</span><span class="token punctuation">[</span> "$commits_exist" == "false" <span class="token punctuation">]</span><span class="token punctuation">]</span>; then
            echo "No commits found today across all repositories. Creating a dummy commit<span class="token punctuation">...</span>"
            git clone $repo
            cd github<span class="token punctuation">-</span>auto<span class="token punctuation">-</span>commit
            echo "$date_today No commits found today<span class="token punctuation">,</span> auto commited." <span class="token punctuation">&gt;</span><span class="token punctuation">&gt;</span> dummy.txt
            git add dummy.txt
            git commit <span class="token punctuation">-</span>m "$commit_message"
            git push https<span class="token punctuation">:</span>//$<span class="token punctuation">{</span><span class="token punctuation">{</span> secrets.TOKEN <span class="token punctuation">}</span><span class="token punctuation">}</span>@github.com/$<span class="token punctuation">{</span><span class="token punctuation">{</span> github.repository <span class="token punctuation">}</span><span class="token punctuation">}</span>.git
          else
            echo "Commits found today."
          fi
</code></pre></div>]]></content>
    <category term="Project"/>
    <published>2024-02-10T00:00:00.000Z</published>
  </entry>
  <entry>
    <title type="text">服务器上的 Git</title>
    <id>https://dribble-njr.github.io/blog/blog/reading/pro-git/04-git-server.html</id>
    <link href="https://dribble-njr.github.io/blog/blog/reading/pro-git/04-git-server.html"/>
    <updated>2024-02-07T09:12:42.000Z</updated>
    <summary type="html"><![CDATA[<div class="hint-container tip">
<p class="hint-container-title">提示</p>
<p><a href="https://git-scm.com/book/zh/v2/%E6%9C%8D%E5%8A%A1%E5%99%A8%E4%B8%8A%E7%9A%84-Git-%E5%8D%8F%E8%AE%AE" target="_blank" rel="noopener noreferrer">PRO Git 原文</a></p>
</div>
<p>直接看实战：</p>
<ul>
<li></li>
<li></li>
</ul>
]]></summary>
    <content type="html"><![CDATA[<div class="hint-container tip">
<p class="hint-container-title">提示</p>
<p><a href="https://git-scm.com/book/zh/v2/%E6%9C%8D%E5%8A%A1%E5%99%A8%E4%B8%8A%E7%9A%84-Git-%E5%8D%8F%E8%AE%AE" target="_blank" rel="noopener noreferrer">PRO Git 原文</a></p>
</div>
<p>直接看实战：</p>
<ul>
<li></li>
<li></li>
</ul>
]]></content>
    <category term="READING"/>
    <published>2024-02-07T00:00:00.000Z</published>
  </entry>
  <entry>
    <title type="text">Git 分支</title>
    <id>https://dribble-njr.github.io/blog/blog/reading/pro-git/03-git-branch.html</id>
    <link href="https://dribble-njr.github.io/blog/blog/reading/pro-git/03-git-branch.html"/>
    <updated>2024-02-07T08:47:58.000Z</updated>
    <summary type="html"><![CDATA[<h2>分支简介</h2>
<p>Git 仓库中有五个对象：三个 <em>blob</em> 对象（保存着文件快照）、一个 <strong>树</strong> 对象 （记录着目录结构和 blob 对象索引）以及一个 <strong>提交</strong> 对象（包含着指向前述树对象的指针和所有提交信息）。</p>
<p>做些修改后再次提交，那么这次产生的提交对象会包含一个指向上次提交对象（父对象）的指针。</p>
<figure><img src="https://raw.githubusercontent.com/dribble-njr/typora-njr/master/img/image-20231012172546292.png" alt="提交对象及其父对象" tabindex="0" loading="lazy"><figcaption>提交对象及其父对象</figcaption></figure>]]></summary>
    <content type="html"><![CDATA[<h2>分支简介</h2>
<p>Git 仓库中有五个对象：三个 <em>blob</em> 对象（保存着文件快照）、一个 <strong>树</strong> 对象 （记录着目录结构和 blob 对象索引）以及一个 <strong>提交</strong> 对象（包含着指向前述树对象的指针和所有提交信息）。</p>
<p>做些修改后再次提交，那么这次产生的提交对象会包含一个指向上次提交对象（父对象）的指针。</p>
<figure><img src="https://raw.githubusercontent.com/dribble-njr/typora-njr/master/img/image-20231012172546292.png" alt="提交对象及其父对象" tabindex="0" loading="lazy"><figcaption>提交对象及其父对象</figcaption></figure>
<p>Git 的分支，其实本质上仅仅是指向提交对象的可变指针。 Git 的默认分支名字是 <code>master</code>。 在多次提交操作之后，你其实已经有一个指向最后那个提交对象的 <code>master</code> 分支。 <code>master</code> 分支会在每次提交时自动向前移动。</p>
<figure><img src="https://raw.githubusercontent.com/dribble-njr/typora-njr/master/img/image-20231012172739646.png" alt="分支及其提交历史" tabindex="0" loading="lazy"><figcaption>分支及其提交历史</figcaption></figure>
<h3>新建分支</h3>
<p>Git 在新建分支时创建了一个可以移动的新的指针。 比如，创建一个 testing 分支， 你需要使用 <code>git branch</code> 命令：</p>
<div class="language-bash" data-ext="sh" data-title="sh"><pre class="language-bash"><code>$ <span class="token function">git</span> branch testing
</code></pre></div><p>这会在当前所在的提交对象上创建一个指针。</p>
<figure><img src="https://raw.githubusercontent.com/dribble-njr/typora-njr/master/img/two-branches.png" alt="两个指向相同提交历史的分支" tabindex="0" loading="lazy"><figcaption>两个指向相同提交历史的分支</figcaption></figure>
<p>Git 使用 Head 指针确定当前在哪一个分支上，指向当前所在的本地分支。在本例中，你仍然在 <code>master</code> 分支上。 因为 <code>git branch</code> 命令仅仅 <strong>创建</strong> 一个新分支，并不会自动切换到新分支中去。</p>
<figure><img src="https://raw.githubusercontent.com/dribble-njr/typora-njr/master/img/head-to-master.png" alt="HEAD 指向当前所在的分支" tabindex="0" loading="lazy"><figcaption>HEAD 指向当前所在的分支</figcaption></figure>
<h3>分支切换</h3>
<div class="hint-container tip">
<p class="hint-container-title">提示</p>
<p>新版本使用 <code>git switch</code> 进行分支切换。</p>
</div>
<p>要切换到一个已存在的分支，你需要使用 <code>git checkout</code> 命令。 我们现在切换到新创建的 <code>testing</code> 分支去：</p>
<div class="language-bash" data-ext="sh" data-title="sh"><pre class="language-bash"><code>$ <span class="token function">git</span> checkout testing
</code></pre></div><p>这样 <code>HEAD</code> 就指向 <code>testing</code> 分支了。</p>
<figure><img src="https://raw.githubusercontent.com/dribble-njr/typora-njr/master/img/head-to-testing.png" alt="HEAD 指向当前所在的分支。" tabindex="0" loading="lazy"><figcaption>HEAD 指向当前所在的分支。</figcaption></figure>
<p>现在不妨再提交一次：</p>
<div class="language-bash" data-ext="sh" data-title="sh"><pre class="language-bash"><code>$ <span class="token function">vim</span> test.rb
$ <span class="token function">git</span> commit <span class="token parameter variable">-a</span> <span class="token parameter variable">-m</span> <span class="token string">'made a change'</span>
</code></pre></div><figure><img src="https://raw.githubusercontent.com/dribble-njr/typora-njr/master/img/advance-testing-20231016151948599.png" alt="HEAD 分支随着提交操作自动向前移动" tabindex="0" loading="lazy"><figcaption>HEAD 分支随着提交操作自动向前移动</figcaption></figure>
<p>如图所示，你的 <code>testing</code> 分支向前移动了，但是 <code>master</code> 分支却没有，它仍然指向运行 <code>git checkout</code> 时所指的对象。 这就有意思了，现在我们切换回 <code>master</code> 分支看看：</p>
<div class="language-bash" data-ext="sh" data-title="sh"><pre class="language-bash"><code>$ <span class="token function">git</span> checkout master
</code></pre></div><figure><img src="https://raw.githubusercontent.com/dribble-njr/typora-njr/master/img/checkout-master.png" alt="检出时 HEAD 随之移动" tabindex="0" loading="lazy"><figcaption>检出时 HEAD 随之移动</figcaption></figure>
<p>这条命令做了两件事。 一是使 HEAD 指回 <code>master</code> 分支，二是将工作目录恢复成 <code>master</code> 分支所指向的快照内容。 也就是说，你现在做修改的话，项目将始于一个较旧的版本。 本质上来讲，这就是忽略 <code>testing</code> 分支所做的修改，以便于向另一个方向进行开发。</p>
<div class="hint-container tip">
<p class="hint-container-title">分支新建与切换</p>
<p><code>git checkout -b branch_name</code> 可以快速创建新分支并切换到该分支上。</p>
</div>
<div class="hint-container tip">
<p class="hint-container-title">分支切换会改变你工作目录中的文件</p>
<p>在切换分支时，一定要注意你工作目录里的文件会被改变。 如果是切换到一个较旧的分支，你的工作目录会恢复到该分支最后一次提交时的样子。 如果 Git 不能干净利落地完成这个任务，它将禁止切换分支。</p>
</div>
<p>我们不妨再稍微做些修改并提交：</p>
<div class="language-console" data-ext="console" data-title="console"><pre class="language-console"><code>$ vim test.rb
$ git commit -a -m 'made other changes'
</code></pre></div><p>现在，这个项目的提交历史已经产生了分叉（参见 <a href="https://git-scm.com/book/zh/v2/ch00/divergent_history" target="_blank" rel="noopener noreferrer">项目分叉历史</a>）。 因为刚才你创建了一个新分支，并切换过去进行了一些工作，随后又切换回 master 分支进行了另外一些工作。 上述两次改动针对的是不同分支：你可以在不同分支间不断地来回切换和工作，并在时机成熟时将它们合并起来。 而所有这些工作，你需要的命令只有 <code>branch</code>、<code>checkout</code> 和 <code>commit</code>。</p>
<figure><img src="https://raw.githubusercontent.com/dribble-njr/typora-njr/master/img/advance-master.png" alt="项目分叉历史。" tabindex="0" loading="lazy"><figcaption>项目分叉历史。</figcaption></figure>
<div class="hint-container tip">
<p class="hint-container-title">提示</p>
<p>由于 Git 的分支实质上仅是包含所指对象校验和（长度为 40 的 SHA-1 值字符串）的文件，所以它的创建和销毁都异常高效。创建一个新分支就相当于往一个文件中写入 41 个字节（40 个字符和 1 个换行符），<br>
如此的简单能不快吗？</p>
</div>
<h2>分支合并</h2>
<p>让我们来看一个简单的分支新建与分支合并的例子，实际工作中你可能会用到类似的工作流。 你将经历如下步骤：</p>
<ol>
<li>开发某个网站。</li>
<li>为实现某个新的用户需求，创建一个分支。</li>
<li>在这个分支上开展工作。</li>
</ol>
<p>正在此时，你突然接到一个电话说有个很严重的问题需要紧急修补。 你将按照如下方式来处理：</p>
<ol>
<li>切换到你的线上分支（production branch）。</li>
<li>为这个紧急任务新建一个分支，并在其中修复它。</li>
<li>在测试通过之后，切换回线上分支，然后合并这个修补分支，最后将改动推送到线上分支。</li>
<li>切换回你最初工作的分支上，继续工作。</li>
</ol>
<h3>新建分支</h3>
<p>首先，我们假设你正在你的项目上工作，并且在 <code>master</code> 分支上已经有了一些提交。</p>
<figure><img src="https://raw.githubusercontent.com/dribble-njr/typora-njr/master/img/basic-branching-1.png" alt="一个简单的提交历史。" tabindex="0" loading="lazy"><figcaption>一个简单的提交历史。</figcaption></figure>
<p>现在，你已经决定要解决你的公司使用的问题追踪系统中的 #53 问题。 想要新建一个分支并同时切换到那个分支上，你可以运行一个带有 <code>-b</code> 参数的 <code>git checkout</code> 命令：</p>
<div class="language-console" data-ext="console" data-title="console"><pre class="language-console"><code>$ git checkout -b iss53
Switched to a new branch "iss53"
</code></pre></div><p>它是下面两条命令的简写：</p>
<div class="language-console" data-ext="console" data-title="console"><pre class="language-console"><code>$ git branch iss53
$ git checkout iss53
</code></pre></div><figure><img src="https://raw.githubusercontent.com/dribble-njr/typora-njr/master/img/basic-branching-2.png" alt="创建一个新分支指针" tabindex="0" loading="lazy"><figcaption>创建一个新分支指针</figcaption></figure>
<p>你继续在 #53 问题上工作，并且做了一些提交。 在此过程中，<code>iss53</code> 分支在不断的向前推进，因为你已经检出到该分支 （也就是说，你的 <code>HEAD</code> 指针指向了 <code>iss53</code> 分支）</p>
<div class="language-console" data-ext="console" data-title="console"><pre class="language-console"><code>$ vim index.html
$ git commit -a -m 'added a new footer [issue 53]'
</code></pre></div><figure><img src="https://raw.githubusercontent.com/dribble-njr/typora-njr/master/img/basic-branching-3.png" alt=" 分支随着工作的进展向前推进。" tabindex="0" loading="lazy"><figcaption><code>iss53</code> 分支随着工作的进展向前推进。</figcaption></figure>
<p>现在你接到那个电话，有个紧急问题等待你来解决。有了 Git 的帮助，现在只需要切换回 <code>master</code> 分支。在切换分支之前，需要提交一个 <code>commit</code> <strong>保持干净的工作区</strong>。</p>
<p>现在，我们假设你已经把你的修改全部提交了，这时你可以切换回 <code>master</code> 分支了：</p>
<div class="language-console" data-ext="console" data-title="console"><pre class="language-console"><code>$ git checkout master
Switched to branch 'master'
</code></pre></div><p>这个时候，你的工作目录和你在开始 #53 问题之前一模一样，现在你可以专心修复紧急问题了。建立一个 <code>hotfix</code> 分支，在该分支上工作直到问题解决：</p>
<div class="language-console" data-ext="console" data-title="console"><pre class="language-console"><code>$ git checkout -b hotfix
Switched to a new branch 'hotfix'
$ vim index.html
$ git commit -a -m 'fixed the broken email address'
[hotfix 1fb7853] fixed the broken email address
 1 file changed, 2 insertions(+)
</code></pre></div><figure><img src="https://raw.githubusercontent.com/dribble-njr/typora-njr/master/img/basic-branching-4.png" alt="基于  分支的紧急问题分支（hotfix branch）。" tabindex="0" loading="lazy"><figcaption>基于 <code>master</code> 分支的紧急问题分支（hotfix branch）。</figcaption></figure>
<p>你可以运行你的测试，确保你的修改是正确的，然后将 <code>hotfix</code> 分支合并回你的 <code>master</code> 分支来部署到线上。 你可以使用 <code>git merge</code> 命令来达到上述目的：</p>
<div class="language-console" data-ext="console" data-title="console"><pre class="language-console"><code>$ git checkout master
$ git merge hotfix
Updating f42c576..3a0874c
Fast-forward
 index.html | 2 ++
 1 file changed, 2 insertions(+)
</code></pre></div><p>在合并的时候，你应该注意到了「快进（fast-forward）」这个词。</p>
<p>由于你想要合并的分支 <code>hotfix</code> 所指向的提交 <code>C4</code> 是你所在的提交 <code>C2</code> 的直接后继， 因此 Git 会直接将指针向前移动。换句话说，当你试图合并两个分支时， 如果顺着一个分支走下去能够到达另一个分支，那么 Git 在合并两者的时候， 只会简单的将指针向前推进（指针右移），因为这种情况下的合并操作没有需要解决的分歧——这就叫做「快进（fast-forward）」。</p>
<p>现在，最新的修改已经在 <code>master</code> 分支所指向的提交快照中，你可以着手发布该修复了。</p>
<figure><img src="https://raw.githubusercontent.com/dribble-njr/typora-njr/master/img/basic-branching-5.png" alt=" 被快进到 。" tabindex="0" loading="lazy"><figcaption><code>master</code> 被快进到 <code>hotfix</code>。</figcaption></figure>
<p>关于这个紧急问题的解决方案发布之后，你准备回到被打断之前时的工作中。然而，你应该先删除 <code>hotfix</code> 分支，因为你已经不再需要它了——<code>master</code> 分支已经指向了同一个位置。 你可以使用带 <code>-d</code> 选项的 <code>git branch</code> 命令来删除分支：</p>
<div class="language-console" data-ext="console" data-title="console"><pre class="language-console"><code>$ git branch -d hotfix
Deleted branch hotfix (3a0874c).
</code></pre></div><p>现在你可以切换回你正在工作的分支继续你的工作，也就是针对 #53 问题的那个分支（iss53 分支）。</p>
<div class="language-console" data-ext="console" data-title="console"><pre class="language-console"><code>$ git checkout iss53
Switched to branch "iss53"
$ vim index.html
$ git commit -a -m 'finished the new footer [issue 53]'
[iss53 ad82d7a] finished the new footer [issue 53]
1 file changed, 1 insertion(+)
</code></pre></div><figure><img src="https://raw.githubusercontent.com/dribble-njr/typora-njr/master/img/basic-branching-6-20231016171324548.png" alt="继续在  分支上的工作" tabindex="0" loading="lazy"><figcaption>继续在 <code>iss53</code> 分支上的工作</figcaption></figure>
<h3>分支合并</h3>
<p>假设你已经修正了 #53 问题，并且打算将你的工作合并入 <code>master</code> 分支。 为此，你需要合并 <code>iss53</code> 分支到 <code>master</code> 分支，这和之前你合并 <code>hotfix</code> 分支所做的工作差不多。 你只需要检出到你想合并入的分支，然后运行 <code>git merge</code> 命令：</p>
<div class="language-console" data-ext="console" data-title="console"><pre class="language-console"><code>$ git checkout master
Switched to branch 'master'
$ git merge iss53
Merge made by the 'recursive' strategy.
index.html |    1 +
1 file changed, 1 insertion(+)
</code></pre></div><p>这和你之前合并 <code>hotfix</code> 分支的时候看起来有一点不一样。 在这种情况下，你的开发历史从一个更早的地方开始分叉开来（diverged）。 因为，<code>master</code> 分支所在提交并不是 <code>iss53</code> 分支所在提交的直接祖先，Git 不得不做一些额外的工作。 出现这种情况的时候，Git 会使用两个分支的末端所指的快照（<code>C4</code> 和 <code>C5</code>）以及这两个分支的公共祖先（<code>C2</code>），做一个简单的三方合并。</p>
<figure><img src="https://raw.githubusercontent.com/dribble-njr/typora-njr/master/img/basic-merging-1.png" alt="一次典型合并中所用到的三个快照" tabindex="0" loading="lazy"><figcaption>一次典型合并中所用到的三个快照</figcaption></figure>
<p>和之前将分支指针向前推进所不同的是，Git 将此次三方合并的结果做了一个新的快照并且自动创建一个新的提交指向它。 这个被称作一次合并提交，它的特别之处在于他有不止一个父提交。</p>
<figure><img src="https://raw.githubusercontent.com/dribble-njr/typora-njr/master/img/basic-merging-2.png" alt="一个合并提交" tabindex="0" loading="lazy"><figcaption>一个合并提交</figcaption></figure>
<h3>解决冲突</h3>
<p>如果你在两个不同的分支中，对同一个文件的同一个部分进行了不同的修改，Git 就没法干净的合并它们。 如果你对 #53 问题的修改和有关 <code>hotfix</code> 分支的修改都涉及到同一个文件的同一处，在合并它们的时候就会产生合并冲突：</p>
<div class="language-console" data-ext="console" data-title="console"><pre class="language-console"><code>$ git merge iss53
Auto-merging index.html
CONFLICT (content): Merge conflict in index.html
Automatic merge failed; fix conflicts and then commit the result.
</code></pre></div><p>此时 Git 做了合并，但是没有自动地创建一个新的合并提交。 Git 会暂停下来，等待你去解决合并产生的冲突。 你可以在合并冲突后的任意时刻使用 <code>git status</code> 命令来查看那些因包含合并冲突而处于未合并（unmerged）状态的文件：</p>
<div class="language-console" data-ext="console" data-title="console"><pre class="language-console"><code>$ git status
On branch master
You have unmerged paths.
  (fix conflicts and run "git commit")

Unmerged paths:
  (use "git add &lt;file&gt;..." to mark resolution)

    both modified:      index.html

no changes added to commit (use "git add" and/or "git commit -a")
</code></pre></div><p>任何因包含合并冲突而有待解决的文件，都会以未合并状态标识出来。 Git 会在有冲突的文件中加入标准的冲突解决标记，这样你可以打开这些包含冲突的文件然后手动解决冲突。 出现冲突的文件会包含一些特殊区段，看起来像下面这个样子：</p>
<div class="language-html" data-ext="html" data-title="html"><pre class="language-html"><code>&lt;&lt;&lt;&lt;&lt;&lt;&lt; HEAD:index.html
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>footer<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span>contact : email.support@github.com<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">&gt;</span></span>
=======
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>footer<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span>please contact us at support@github.com<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">&gt;</span></span>
&gt;&gt;&gt;&gt;&gt;&gt;&gt; iss53:index.html
</code></pre></div><p>这表示 <code>HEAD</code> 所指示的版本（也就是你的 <code>master</code> 分支所在的位置，因为你在运行 merge 命令的时候已经检出到了这个分支）在这个区段的上半部分（<code>=======</code> 的上半部分），而 <code>iss53</code> 分支所指示的版本在 <code>=======</code> 的下半部分。 为了解决冲突，你必须选择使用由 <code>=======</code> 分割的两部分中的一个，或者你也可以自行合并这些内容。 例如，你可以通过把这段内容换成下面的样子来解决冲突：</p>
<div class="language-html" data-ext="html" data-title="html"><pre class="language-html"><code><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>footer<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span>please contact us at email.support@github.com<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">&gt;</span></span>
</code></pre></div><p>上述的冲突解决方案仅保留了其中一个分支的修改，并且 <code>&lt;&lt;&lt;&lt;&lt;&lt;&lt;</code> , <code>=======</code> , 和 <code>&gt;&gt;&gt;&gt;&gt;&gt;&gt;</code> 这些行被完全删除了。 在你解决了所有文件里的冲突之后，对每个文件使用 <code>git add</code> 命令来将其标记为冲突已解决。 一旦暂存这些原本有冲突的文件，Git 就会将它们标记为冲突已解决。</p>
<div class="hint-container tip">
<p class="hint-container-title">提示</p>
<p>VScode 提供了图形化工具用以解决冲突。</p>
</div>
<p>等你退出合并工具之后，Git 会询问刚才的合并是否成功。 如果你回答是，Git 会暂存那些文件以表明冲突已解决： 你可以再次运行 <code>git status</code> 来确认所有的合并冲突都已被解决：</p>
<div class="language-console" data-ext="console" data-title="console"><pre class="language-console"><code>$ git status
On branch master
All conflicts fixed but you are still merging.
  (use "git commit" to conclude merge)

Changes to be committed:

    modified:   index.html
</code></pre></div><p>如果你对结果感到满意，并且确定之前有冲突的的文件都已经暂存了，这时你可以输入 <code>git commit</code> 来完成合并提交。 默认情况下提交信息看起来像下面这个样子：</p>
<div class="language-console" data-ext="console" data-title="console"><pre class="language-console"><code>Merge branch 'iss53'

Conflicts:
    index.html
#
# It looks like you may be committing a merge.
# If this is not correct, please remove the file
#	.git/MERGE_HEAD
# and try again.


# Please enter the commit message for your changes. Lines starting
# with '#' will be ignored, and an empty message aborts the commit.
# On branch master
# All conflicts fixed but you are still merging.
#
# Changes to be committed:
#	modified:   index.html
#
</code></pre></div><p>如果你觉得上述的信息不够充分，不能完全体现分支合并的过程，你可以修改上述信息，添加一些细节给未来检视这个合并的读者一些帮助，告诉他们你是如何解决合并冲突的，以及理由是什么。</p>
<h2>分支管理</h2>
<p><code>git branch</code> 命令不只是可以创建与删除分支。 如果不加任何参数运行它，会得到当前所有分支的一个列表：</p>
<div class="language-console" data-ext="console" data-title="console"><pre class="language-console"><code>$ git branch
  iss53
* master
  testing
</code></pre></div><p>注意 <code>master</code> 分支前的 <code>*</code> 字符：它代表现在检出的那一个分支（也就是说，当前 <code>HEAD</code> 指针所指向的分支）。</p>
<p>如果需要查看每一个分支的最后一次提交，可以运行 <code>git branch -v</code> 命令：</p>
<div class="language-console" data-ext="console" data-title="console"><pre class="language-console"><code>$ git branch -v
  iss53   93b412c fix javascript issue
* master  7a98805 Merge branch 'iss53'
  testing 782fd34 add scott to the author list in the readmes
</code></pre></div><p><code>--merged</code> 与 <code>--no-merged</code> 这两个有用的选项可以过滤这个列表中已经合并或尚未合并到当前分支的分支。 如果要查看哪些分支已经合并到当前分支，可以运行 <code>git branch --merged</code>：</p>
<div class="language-console" data-ext="console" data-title="console"><pre class="language-console"><code>$ git branch --merged
  iss53
* master
</code></pre></div><p>因为之前已经合并了 <code>iss53</code> 分支，所以现在看到它在列表中。 在这个列表中分支名字前没有 <code>*</code> 号的分支通常可以使用 <code>git branch -d</code> 删除掉；你已经将它们的工作整合到了另一个分支，所以并不会失去任何东西。</p>
<p>这里显示了其他分支。 因为它包含了还未合并的工作，尝试使用 <code>git branch -d</code> 命令删除它时会失败：</p>
<div class="language-console" data-ext="console" data-title="console"><pre class="language-console"><code>$ git branch -d testing
error: The branch 'testing' is not fully merged.
If you are sure you want to delete it, run 'git branch -D testing'.
</code></pre></div><p>如果真的想要删除分支并丢掉那些工作，如同帮助信息里所指出的，可以使用 <code>-D</code> 选项强制删除它。</p>
<div class="hint-container tip">
<p class="hint-container-title">提示</p>
<p>上面描述的选项 <code>--merged</code> 和 <code>--no-merged</code> 会在没有给定提交或分支名作为参数时， 分别列出已合并或未合并到 <strong>当前</strong> 分支的分支。</p>
<p>你总是可以提供一个附加的参数来查看其它分支的合并状态而不必检出它们。 例如，尚未合并到 <code>master</code> 分支的有哪些？</p>
<div class="language-console" data-ext="console" data-title="console"><pre class="language-console"><code>$ git checkout testing
$ git branch --no-merged master
topicA
featureB
</code></pre></div></div>
<h2>分支开发工作流</h2>
<p>在整个项目开发周期的不同阶段，你可以同时拥有多个开发的分支；你可以定期地把某些主题分支合并入其他分支中。</p>
<p>只在 <code>master</code> 分支上保留完全稳定的代码——有可能仅仅是已经发布或即将发布的代码。 他们还有一些名为 <code>develop</code> 或者 <code>next</code> 的平行分支，被用来做后续开发或者测试稳定性——这些分支不必保持绝对稳定，但是一旦达到稳定状态，它们就可以被合并入 <code>master</code> 分支了。</p>
<figure><img src="https://raw.githubusercontent.com/dribble-njr/typora-njr/master/img/lr-branches-2.png" alt="趋于稳定分支的工作流（“silo”）视图。" tabindex="0" loading="lazy"><figcaption>趋于稳定分支的工作流（“silo”）视图。</figcaption></figure>
<h2>远程分支</h2>
<p>远程分支以 <code>&lt;remote&gt;/&lt;branch&gt;</code> 的形式命名。 例如，<code>origin/master</code> 分支。</p>
<p>假设你的网络里有一个在 <code>git.ourcompany.com</code> 的 Git 服务器。</p>
<p>如果你从这里克隆，Git 的 <code>clone</code> 命令会为你自动将该远程分支命名为 <code>origin</code>，拉取它的所有数据，创建一个指向它的 <code>master</code> 分支的指针，并且在本地将其命名为 <code>origin/master</code>。</p>
<p>Git 也会给你一个与 <code>origin</code> 的 <code>master</code> 分支在指向同一个地方的本地 <code>master</code> 分支。</p>
<figure><img src="https://raw.githubusercontent.com/dribble-njr/typora-njr/master/img/20240207145750.png" alt="克隆之后的服务器与本地仓库" tabindex="0" loading="lazy"><figcaption>克隆之后的服务器与本地仓库</figcaption></figure>
<p>如果你在本地的 <code>master</code> 分支做了一些工作，在同一段时间内有其他人推送提交到 <code>git.ourcompany.com</code> 并且更新了它的 <code>master</code> 分支，这就是说你们的提交历史已走向不同的方向。</p>
<figure><img src="https://raw.githubusercontent.com/dribble-njr/typora-njr/master/img/20240207145827.png" alt="本地与远程的工作可以分叉" tabindex="0" loading="lazy"><figcaption>本地与远程的工作可以分叉</figcaption></figure>
<p>如果要与给定的远程仓库同步数据，运行 <code>git fetch &lt;remote&gt;</code> 命令（在本例中为 <code>git fetch origin</code>）。</p>
<div class="hint-container tip">
<p class="hint-container-title">提示</p>
<p>通常可以省略 <code>&lt;remote&gt;</code>。</p>
</div>
<p>这个命令查找 <code>origin</code> 是哪一个服务器（在本例中，它是 <code>git.ourcompany.com</code>），从中抓取本地没有的数据，并且更新本地数据库，移动 <code>origin/master</code> 指针到更新之后的位置。</p>
<figure><img src="https://raw.githubusercontent.com/dribble-njr/typora-njr/master/img/20240207145928.png" alt="git fetch 更新你的远程跟踪分支" tabindex="0" loading="lazy"><figcaption>git fetch 更新你的远程跟踪分支</figcaption></figure>
<p>为了演示有多个远程仓库与远程分支的情况，我们假定你有另一个内部 Git 服务器，仅服务于你的某个敏捷开发团队。这个服务器位于 <code>git.team1.ourcompany.com</code>。 你可以运行 <code>git remote add</code> 命令添加一个新的远程仓库引用到当前的项目。将这个远程仓库命名为 <code>teamone</code>，将其作为完整 URL 的缩写。</p>
<figure><img src="https://raw.githubusercontent.com/dribble-njr/typora-njr/master/img/20240207150645.png" alt="添加另一个远程仓库" tabindex="0" loading="lazy"><figcaption>添加另一个远程仓库</figcaption></figure>
<p>现在，可以运行 <code>git fetch teamone</code> 来抓取远程仓库 <code>teamone</code> 有而本地没有的数据。 因为那台服务器上现有的数据是 <code>origin</code> 服务器上的一个子集， 所以 Git 并不会抓取数据而是会设置远程跟踪分支 <code>teamone/master</code> 指向 <code>teamone</code> 的 <code>master</code> 分支。</p>
<figure><img src="https://raw.githubusercontent.com/dribble-njr/typora-njr/master/img/20240207150743.png" alt="远程跟踪分支 teamone/master" tabindex="0" loading="lazy"><figcaption>远程跟踪分支 teamone/master</figcaption></figure>
<h3>推送</h3>
<p>本地的分支并不会自动与远程仓库同步——你必须显式地推送想要分享的分支。</p>
<p>如果希望和别人一起在名为 <code>serverfix</code> 的分支上工作，你可以像推送第一个分支那样推送它。 运行 <code>git push &lt;remote&gt; &lt;branch&gt;</code>:</p>
<div class="language-console" data-ext="console" data-title="console"><pre class="language-console"><code>$ git push origin serverfix
Counting objects: 24, done.
Delta compression using up to 8 threads.
Compressing objects: 100% (15/15), done.
Writing objects: 100% (24/24), 1.91 KiB | 0 bytes/s, done.
Total 24 (delta 2), reused 0 (delta 0)
To https://github.com/schacon/simplegit

- [new branch] serverfix -&gt; serverfix
</code></pre></div><p>你也可以运行 <code>git push origin serverfix:serverfix</code>， 它会「推送本地的 <code>serverfix</code> 分支，将其作为远程仓库的 <code>serverfix</code> 分支」。</p>
<p>可以通过这种格式来推送本地分支到一个命名不相同的远程分支。如果并不想让远程仓库上的分支叫做 <code>serverfix</code>，可以运行 <code>git push origin serverfix:awesomebranch</code> 来将本地的 <code>serverfix</code> 分支推送到远程仓库上的 <code>awesomebranch</code> 分支。</p>
<p>下一次其他协作者从服务器上抓取数据时，他们会在本地生成一个远程分支 <code>origin/serverfix</code>，指向服务器的 <code>serverfix</code> 分支的引用：</p>
<div class="language-console" data-ext="console" data-title="console"><pre class="language-console"><code>$ git fetch origin
remote: Counting objects: 7, done.
remote: Compressing objects: 100% (2/2), done.
remote: Total 3 (delta 0), reused 3 (delta 0)
Unpacking objects: 100% (3/3), done.
From https://github.com/schacon/simplegit
 * [new branch]      serverfix    -&gt; origin/serverfix
</code></pre></div><p>要特别注意的一点是使用 <code>git fetch</code> 获取到新的远程跟踪分支时，本地不会有一个新的 <code>serverfix</code> 分支——只有一个不可以修改的 <code>origin/serverfix</code> 指针。</p>
<p>可以运行 <code>git merge origin/serverfix</code> 将这些工作合并到当前所在的分支。 如果想要在自己的 <code>serverfix</code> 分支上工作，可以将其建立在远程跟踪分支之上：</p>
<div class="language-console" data-ext="console" data-title="console"><pre class="language-console"><code>$ git checkout -b serverfix origin/serverfix
Branch serverfix set up to track remote branch serverfix from origin.
Switched to a new branch 'serverfix'
</code></pre></div><p>这会给你一个用于工作的本地分支，并且起点位于 <code>origin/serverfix</code>。</p>
<div class="hint-container tip">
<p class="hint-container-title">提示</p>
<p>也可以使用 <code>git switch &lt;branch&gt;</code>，Git 会自动新建一个分支并跟踪拉取下来的远程分支。</p>
</div>
<h3>拉取</h3>
<p>当 <code>git fetch</code> 命令从服务器上抓取本地没有的数据时，它并不会修改工作目录中的内容。 它只会获取数据然后让你自己合并。</p>
<p>然而，有一个命令叫作 <code>git pull</code> 在大多数情况下它的含义是一个 <code>git fetch</code> 紧接着一个 <code>git merge</code> 命令。</p>
<div class="hint-container tip">
<p class="hint-container-title">提示</p>
<p>由于 <code>git pull</code> 的魔法经常令人困惑所以通常单独显式地使用 <code>fetch</code> 与 <code>merge</code> 命令会更好一些。</p>
</div>
<h3>删除</h3>
<p>假设你已经通过远程分支做完所有的工作了——也就是说你和你的协作者已经完成了一个特性， 并且将其合并到了远程仓库的 <code>master</code> 分支（或任何其他稳定代码分支）。 可以运行带有 <code>--delete</code> 选项的 <code>git push</code> 命令来删除一个远程分支。 如果想要从服务器上删除 <code>serverfix</code> 分支，运行下面的命令：</p>
<div class="language-console" data-ext="console" data-title="console"><pre class="language-console"><code>$ git push origin --delete serverfix
To https://github.com/schacon/simplegit

- [deleted] serverfix
</code></pre></div><p>基本上这个命令做的只是从服务器上移除这个指针。 Git 服务器通常会保留数据一段时间直到垃圾回收运行，所以如果不小心删除掉了，通常是很容易恢复的。</p>
<h2>变基</h2>
<p>在 Git 中整合来自不同分支的修改主要有两种方法：<code>merge</code> 以及 <code>rebase</code>。</p>
<h3>基本操作</h3>
<p>当你的项目目前分叉到两个分支，又各自提交了更新。</p>
<figure><img src="https://raw.githubusercontent.com/dribble-njr/typora-njr/master/img/20240207161737.png" alt="分叉的提交历史" tabindex="0" loading="lazy"><figcaption>分叉的提交历史</figcaption></figure>
<p>之前介绍过，整合分支最容易的方法是 <code>merge</code> 命令。 它会把两个分支的最新快照（<code>C3</code> 和 <code>C4</code>）以及二者最近的共同祖先（<code>C2</code>）进行三方合并，合并的结果是生成一个新的快照（并提交）。</p>
<figure><img src="https://raw.githubusercontent.com/dribble-njr/typora-njr/master/img/20240207161821.png" alt="通过合并操作来整合分叉的历史" tabindex="0" loading="lazy"><figcaption>通过合并操作来整合分叉的历史</figcaption></figure>
<p>其实，还有一种方法：你可以提取在 <code>C4</code> 中引入的补丁和修改，然后在 <code>C3</code> 的基础上应用一次。 在 Git 中，这种操作就叫做「变基（rebase）」。 你可以使用 <code>rebase</code> 命令将提交到某一分支上的所有修改都移至另一分支上，就好像 <strong>重新播放</strong> 一样。</p>
<p>在这个例子中，你可以检出 <code>experiment</code> 分支，然后将它变基到 <code>master</code> 分支上：</p>
<div class="language-bash" data-ext="sh" data-title="sh"><pre class="language-bash"><code>$ <span class="token function">git</span> checkout experiment
$ <span class="token function">git</span> rebase master
First, rewinding <span class="token function">head</span> to replay your work on <span class="token function">top</span> of it<span class="token punctuation">..</span>.
Applying: added staged <span class="token builtin class-name">command</span>
</code></pre></div><p>它的原理是首先找到这两个分支（即当前分支 <code>experiment</code>、变基操作的目标基底分支 <code>master</code>） 的最近共同祖先 <code>C2</code>，然后对比当前分支相对于该祖先的历次提交，提取相应的修改并存为临时文件，然后将当前分支指向目标基底 <code>C3</code>, 最后以此将之前另存为临时文件的修改依序应用。</p>
<figure><img src="https://raw.githubusercontent.com/dribble-njr/typora-njr/master/img/20240207162127.png" alt="将 C4 中的修改变基到 C3 上" tabindex="0" loading="lazy"><figcaption>将 C4 中的修改变基到 C3 上</figcaption></figure>
<p>现在回到 master 分支，进行一次快进合并。</p>
<div class="language-bash" data-ext="sh" data-title="sh"><pre class="language-bash"><code>$ <span class="token function">git</span> checkout master
$ <span class="token function">git</span> merge experiment
</code></pre></div><figure><img src="https://raw.githubusercontent.com/dribble-njr/typora-njr/master/img/20240207163046.png" alt="master 分支的快进合并" tabindex="0" loading="lazy"><figcaption>master 分支的快进合并</figcaption></figure>
<p>这两种整合方法的最终结果没有任何区别，但是变基使得提交历史更加整洁。你在查看一个经过变基的分支的历史记录时会发现，尽管实际的开发工作是并行的，但它们看上去就像是串行的一样，提交历史是一条直线没有分叉。</p>
<p>请注意，无论是通过变基，还是通过三方合并，整合的最终结果所指向的快照始终是一样的，只不过提交历史不同罢了。变基是将一系列提交按照原有次序依次应用到另一分支上，而合并是把最终结果合在一起。</p>
<h3>变基的风险</h3>
<p>呃，奇妙的变基也并非完美无缺，要用它得遵守一条准则：</p>
<p><strong>如果提交存在于你的仓库之外，而别人可能基于这些提交进行开发，那么不要执行变基。</strong></p>
<p>因为 <code>rebase</code> 会修改 <code>commit</code>，若你拉取的是 <code>rebase</code> 后的代码，则会遇到冲突。</p>
<p>若发生 <code>git pull</code> 拉取冲突，需要使用 <code>git pull --rebase</code> 解决。</p>
<h3>变基 vs. 合并</h3>
<p>有一种观点认为，仓库的提交历史即是 <strong>记录实际发生过什么</strong>。 它是针对历史的文档，本身就有价值，不能乱改。从这个角度看来，改变提交历史是一种亵渎，你使用 <strong>谎言</strong> 掩盖了实际发生过的事情。 如果由合并产生的提交历史是一团糟怎么办？ 既然事实就是如此，那么这些痕迹就应该被保留下来，让后人能够查阅。</p>
<p>另一种观点则正好相反，他们认为提交历史是 <strong>项目过程中发生的事</strong>。 没人会出版一本书的第一版草稿，软件维护手册也是需要反复修订才能方便使用。 持这一观点的人会使用 <code>rebase</code> 及 <code>filter-branch</code> 等工具来编写故事，怎么方便后来的读者就怎么写。</p>
<p>总的原则是，只对尚未推送或分享给别人的本地修改执行变基操作清理历史，从不对已推送至别处的提交执行变基操作，这样，你才能享受到两种方式带来的便利。</p>
]]></content>
    <category term="READING"/>
    <published>2024-02-07T00:00:00.000Z</published>
  </entry>
  <entry>
    <title type="text">GET 和 POST 的区别</title>
    <id>https://dribble-njr.github.io/blog/blog/computer-science/networking/003-get-post-difference.html</id>
    <link href="https://dribble-njr.github.io/blog/blog/computer-science/networking/003-get-post-difference.html"/>
    <updated>2024-02-07T05:30:24.000Z</updated>
    <summary type="html"><![CDATA[<h2>概述</h2>
<p>GET 和 POST 是 HTTP 协议中发送请求的方法。</p>
<ul>
<li>GET：请求资源，从服务器获取数据；</li>
<li>POST：将数据提交到指定地址。</li>
</ul>
<p>二者本质上都是 TCP 链接，因此本质上<strong>没有区别</strong>，但由于 HTTP 规定和浏览器/服务器的限制，导致它们在实际操作中会有一定区别。</p>
<h2>区别</h2>
<ul>
<li>GET 在浏览器回退时是无害的，而 POST 会再次提交请求。</li>
<li>GET 产生的 URL 地址可以被 Bookmarked，而 POST 不可以。</li>
<li>GET 请求会被浏览器主动 cache，而 POST 不会，除非手动设置。</li>
<li>GET 请求只能进行 url 编码，而 POST 支持多种编码方式。</li>
<li>GET 请求参数会被完整保留在浏览器历史记录里，而 POST 中的参数不会被保留。</li>
<li>GET 请求在 URL 中传送的参数是有长度限制的，而 POST 没有。</li>
<li>对参数的数据类型，GET 只接受 ASCII 字符，而 POST 没有限制。</li>
<li>GET 比 POST 更不安全，因为参数直接暴露在 URL 上，所以不能用来传递敏感信息。</li>
<li>GET 参数通过 URL 传递，POST 放在 Request body 中。</li>
<li>GET 方法是安全且幂等的，POST 方法是<strong>不安全且不幂等</strong>的。</li>
</ul>]]></summary>
    <content type="html"><![CDATA[<h2>概述</h2>
<p>GET 和 POST 是 HTTP 协议中发送请求的方法。</p>
<ul>
<li>GET：请求资源，从服务器获取数据；</li>
<li>POST：将数据提交到指定地址。</li>
</ul>
<p>二者本质上都是 TCP 链接，因此本质上<strong>没有区别</strong>，但由于 HTTP 规定和浏览器/服务器的限制，导致它们在实际操作中会有一定区别。</p>
<h2>区别</h2>
<ul>
<li>GET 在浏览器回退时是无害的，而 POST 会再次提交请求。</li>
<li>GET 产生的 URL 地址可以被 Bookmarked，而 POST 不可以。</li>
<li>GET 请求会被浏览器主动 cache，而 POST 不会，除非手动设置。</li>
<li>GET 请求只能进行 url 编码，而 POST 支持多种编码方式。</li>
<li>GET 请求参数会被完整保留在浏览器历史记录里，而 POST 中的参数不会被保留。</li>
<li>GET 请求在 URL 中传送的参数是有长度限制的，而 POST 没有。</li>
<li>对参数的数据类型，GET 只接受 ASCII 字符，而 POST 没有限制。</li>
<li>GET 比 POST 更不安全，因为参数直接暴露在 URL 上，所以不能用来传递敏感信息。</li>
<li>GET 参数通过 URL 传递，POST 放在 Request body 中。</li>
<li>GET 方法是安全且幂等的，POST 方法是<strong>不安全且不幂等</strong>的。</li>
</ul>
<div class="hint-container tip">
<p class="hint-container-title">提示</p>
<ul>
<li>安全：请求方法不会破坏服务器上的资源；</li>
<li>幂等：执行多次相同的操作，结果都是相同的。</li>
</ul>
</div>
<h2>误区</h2>
<h3>参数长度</h3>
<p>GET 参数有长度限制，但这是因为浏览器对 URL 的长度限制，而不是 HTTP 协议本身对参数长度的限制。HTTP 同样对 POST 参数长度没有限制，而是靠服务器的设置来限制大小的。</p>
<h3>安全性</h3>
<p>POST <strong>相对</strong>比 GET 安全性要高。</p>
<p>通过 GET 提交的请求都将显示到 URL 上，页面会被浏览器缓存，其他人查看历史记录会看到提交的数据。</p>
<p>这里的相对在于：<strong>HTTP 本身是明文传输的协议</strong>，无论使用 GET 还是 POST 都有可能受到中间人攻击而造成数据泄露。</p>
<p>如果 HTTP 链接使用 SSL/TLS，那么 GET 参数也会被加密，但是仍然会在某些地方出现，比如服务器日志、浏览器插件和其他应用。而 POST 数据会被加密并且不会被任何方式泄露。</p>
<div class="hint-container tip">
<p class="hint-container-title">提示</p>
<p>因此如果想要保证总是安全地传输数据，需要使用 HTTPS 上的 POST。</p>
</div>
<h3>Request Body</h3>
<p>GET 可以带 Request Body，但不能保证一定能被接收到。如果你用 GET 请求，在 Request Body 携带数据，不同服务器的处理方式也是不同的，有些服务器会帮你读出数据，有些服务器直接忽略。</p>
<h3>数据包</h3>
<p>对于 GET 请求，浏览器会把 http header 和 data 一并发送出去，服务器响应 200（返回数据）。</p>
<p>对于 POST，浏览器先发送 header，服务器响应 100 continue，浏览器再发送 data，服务器响应 200 ok。</p>
<p>并不是所有浏览器都会在 POST 中发送两次包，Firefox 就只发送一次。</p>
<h2>参考链接</h2>
<ul>
<li><a href="https://stackoverflow.com/questions/3063530/what-is-the-difference-between-get-and-post-encryption" target="_blank" rel="noopener noreferrer">https - What is the difference between GET and POST encryption? - Stack Overflow</a></li>
<li><a href="https://mp.weixin.qq.com/s?__biz=MzI3NzIzMzg3Mw==&amp;mid=100000054&amp;idx=1&amp;sn=71f6c214f3833d9ca20b9f7dcd9d33e4#rd" target="_blank" rel="noopener noreferrer">99%的人都理解错了 HTTP 中 GET 与 POST 的区别 (qq.com)</a></li>
<li><a href="https://github.com/febobo/web-interview/issues/145" target="_blank" rel="noopener noreferrer">面试官：说一下 GET 和 POST 的区别？ · Issue #145 · febobo/web-interview (github.com)</a></li>
</ul>
]]></content>
    <category term="计算机网络"/>
    <published>2022-04-24T00:00:00.000Z</published>
  </entry>
  <entry>
    <title type="text">TCP 与 UDP 的区别</title>
    <id>https://dribble-njr.github.io/blog/blog/computer-science/networking/008-tcp-udp.html</id>
    <link href="https://dribble-njr.github.io/blog/blog/computer-science/networking/008-tcp-udp.html"/>
    <updated>2024-02-07T05:30:24.000Z</updated>
    <summary type="html"><![CDATA[<p>TCP 和 UDP 都是传输层协议，属于 TCP/IP 协议族。</p>
<h2>UDP</h2>
<p>用户数据报协议（User Datagram Protocol，UDP）用来处理数据包，是一种无连接的协议，它的特点如下：</p>
<p><strong>无连接</strong></p>
<p>不需要像 TCP 一样进行三次握手进行连接，并且也只是数据报文的搬运工，不会对报文进行任何的加工处理。</p>
<p><strong>单播、多播、广播</strong></p>
<p>UDP 支持一对一、一对多、多对多、多对一的传输方式。</p>
<p><strong>面向报文</strong></p>]]></summary>
    <content type="html"><![CDATA[<p>TCP 和 UDP 都是传输层协议，属于 TCP/IP 协议族。</p>
<h2>UDP</h2>
<p>用户数据报协议（User Datagram Protocol，UDP）用来处理数据包，是一种无连接的协议，它的特点如下：</p>
<p><strong>无连接</strong></p>
<p>不需要像 TCP 一样进行三次握手进行连接，并且也只是数据报文的搬运工，不会对报文进行任何的加工处理。</p>
<p><strong>单播、多播、广播</strong></p>
<p>UDP 支持一对一、一对多、多对多、多对一的传输方式。</p>
<p><strong>面向报文</strong></p>
<p>在发送端，应用层将数据传递给传输层，UDP 只会给数据增加一个 UDP 头标识这是一个 UDP 协议报文，然后就传给网络层，对应用层交付的报文既不合并也不拆分，保留报文的边界，一次发送一个报文。</p>
<p>在接收端，网络层将 UDP 数据报传输给 UDP，UDP 去除首部后就会将数据原封不动地传递给应用层，一次交付一个完整的报文。</p>
<p><strong>不可靠</strong></p>
<p>首先体现在无连接上，通信双方想发就发，必然不可靠。没有像 TCP 做重传机制、流量控制和拥塞控制。</p>
<p><strong>头部开销小</strong></p>
<p>UDP 头部只有 8 字节，相比 TCP 20 个字节少得多，传输数据时比较高效。</p>
<p><strong>应用场景</strong></p>
<p>UDP 应用于效率要求高，但可靠性要求相对较低的场景，例如：即时通讯，速度要求高，但是偶尔出现断续不是太大问题，完全可以不使用重传机制，场景有在线视频、网络语音通话、广播通信等。</p>
<h2>TCP</h2>
<p>传输控制协议（Transmission Control Protocol，TCP）是一种面向连接的、可靠的、基于字节流的传输层通讯协议，它的特点如下：</p>
<p><strong>面向连接</strong></p>
<p>在发送前必须进行 TCP 三次握手在两端建立连接。</p>
<p><strong>仅支持单播传输</strong></p>
<p>每个 TCP 只能进行一对一传输，不支持多播和广播的形式。</p>
<p><strong>面向字节流</strong></p>
<p>TCP 不像 UDP 那样一个一个报文独立传输，而是在不保留报文边界的情况下以字节流方式进行传输。</p>
<p><strong>可靠传输</strong></p>
<p>TCP 为了实现可靠传输，使用了重传机制、流量控制和拥塞控制。</p>
<p><strong>头部开销大</strong></p>
<p>TCP 头部最小 20 个字节，最大 60 个字节，传输效率慢。</p>
<p><strong>应用场景</strong></p>
<p>TCP 应用于效率要求相对低，但可靠性要求高的场景，例如：文件传输、邮件传输等。</p>
<h2>区别</h2>
<p>|              | UDP                   | TCP                                          |<br>
|</p>
]]></content>
    <category term="计算机网络"/>
    <published>2022-05-06T00:00:00.000Z</published>
  </entry>
  <entry>
    <title type="text">命令模式</title>
    <id>https://dribble-njr.github.io/blog/blog/reading/patterns/vanilla/01-command-pattern.html</id>
    <link href="https://dribble-njr.github.io/blog/blog/reading/patterns/vanilla/01-command-pattern.html"/>
    <updated>2024-02-07T04:26:52.000Z</updated>
    <summary type="html"><![CDATA[<h2>命令模式</h2>
<p>通过命令模式，我们可以将执行特定任务的对象与调用方法的对象 <em>解耦</em>。</p>
<p>假设我们有一个在线食品配送平台。用户可以下单、跟踪和取消订单。</p>
<div class="language-javascript" data-ext="js" data-title="js"><pre class="language-javascript"><code><span class="token keyword">class</span> <span class="token class-name">OrderManager</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token function">constructor</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">this</span><span class="token punctuation">.</span>orders <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span>
  <span class="token punctuation">}</span>

  <span class="token function">placeOrder</span><span class="token punctuation">(</span><span class="token parameter">order<span class="token punctuation">,</span> id</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">this</span><span class="token punctuation">.</span>orders<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span>id<span class="token punctuation">)</span>
    <span class="token keyword">return</span> <span class="token template-string"><span class="token template-punctuation string">`</span><span class="token string">You have successfully ordered </span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">${</span>order<span class="token interpolation-punctuation punctuation">}</span></span><span class="token string"> (</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">${</span>id<span class="token interpolation-punctuation punctuation">}</span></span><span class="token string">)</span><span class="token template-punctuation string">`</span></span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span>

  <span class="token function">trackOrder</span><span class="token punctuation">(</span><span class="token parameter">id</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">return</span> <span class="token template-string"><span class="token template-punctuation string">`</span><span class="token string">Your order </span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">${</span>id<span class="token interpolation-punctuation punctuation">}</span></span><span class="token string"> will arrive in 20 minutes.</span><span class="token template-punctuation string">`</span></span>
  <span class="token punctuation">}</span>

  <span class="token function">cancelOrder</span><span class="token punctuation">(</span><span class="token parameter">id</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">this</span><span class="token punctuation">.</span>orders <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span>orders<span class="token punctuation">.</span><span class="token function">filter</span><span class="token punctuation">(</span><span class="token parameter">order</span> <span class="token operator">=&gt;</span> order<span class="token punctuation">.</span>id <span class="token operator">!==</span> id<span class="token punctuation">)</span>
    <span class="token keyword">return</span> <span class="token template-string"><span class="token template-punctuation string">`</span><span class="token string">You have canceled your order </span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">${</span>id<span class="token interpolation-punctuation punctuation">}</span></span><span class="token template-punctuation string">`</span></span>
  <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre></div>]]></summary>
    <content type="html"><![CDATA[<h2>命令模式</h2>
<p>通过命令模式，我们可以将执行特定任务的对象与调用方法的对象 <em>解耦</em>。</p>
<p>假设我们有一个在线食品配送平台。用户可以下单、跟踪和取消订单。</p>
<div class="language-javascript" data-ext="js" data-title="js"><pre class="language-javascript"><code><span class="token keyword">class</span> <span class="token class-name">OrderManager</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token function">constructor</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">this</span><span class="token punctuation">.</span>orders <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span>
  <span class="token punctuation">}</span>

  <span class="token function">placeOrder</span><span class="token punctuation">(</span><span class="token parameter">order<span class="token punctuation">,</span> id</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">this</span><span class="token punctuation">.</span>orders<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span>id<span class="token punctuation">)</span>
    <span class="token keyword">return</span> <span class="token template-string"><span class="token template-punctuation string">`</span><span class="token string">You have successfully ordered </span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">${</span>order<span class="token interpolation-punctuation punctuation">}</span></span><span class="token string"> (</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">${</span>id<span class="token interpolation-punctuation punctuation">}</span></span><span class="token string">)</span><span class="token template-punctuation string">`</span></span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span>

  <span class="token function">trackOrder</span><span class="token punctuation">(</span><span class="token parameter">id</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">return</span> <span class="token template-string"><span class="token template-punctuation string">`</span><span class="token string">Your order </span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">${</span>id<span class="token interpolation-punctuation punctuation">}</span></span><span class="token string"> will arrive in 20 minutes.</span><span class="token template-punctuation string">`</span></span>
  <span class="token punctuation">}</span>

  <span class="token function">cancelOrder</span><span class="token punctuation">(</span><span class="token parameter">id</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">this</span><span class="token punctuation">.</span>orders <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span>orders<span class="token punctuation">.</span><span class="token function">filter</span><span class="token punctuation">(</span><span class="token parameter">order</span> <span class="token operator">=&gt;</span> order<span class="token punctuation">.</span>id <span class="token operator">!==</span> id<span class="token punctuation">)</span>
    <span class="token keyword">return</span> <span class="token template-string"><span class="token template-punctuation string">`</span><span class="token string">You have canceled your order </span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">${</span>id<span class="token interpolation-punctuation punctuation">}</span></span><span class="token template-punctuation string">`</span></span>
  <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre></div><p>在 <code>OrderManager</code> 类中，我们可以直接访问 <code>placeOrder</code>、<code>trackOrder</code> 和 <code>cancelOrder</code> 方法。</p>
<div class="language-javascript" data-ext="js" data-title="js"><pre class="language-javascript"><code><span class="token keyword">const</span> manager <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">OrderManager</span><span class="token punctuation">(</span><span class="token punctuation">)</span>

manager<span class="token punctuation">.</span><span class="token function">placeOrder</span><span class="token punctuation">(</span><span class="token string">'Pad Thai'</span><span class="token punctuation">,</span> <span class="token string">'1234'</span><span class="token punctuation">)</span>
manager<span class="token punctuation">.</span><span class="token function">trackOrder</span><span class="token punctuation">(</span><span class="token string">'1234'</span><span class="token punctuation">)</span>
manager<span class="token punctuation">.</span><span class="token function">cancelOrder</span><span class="token punctuation">(</span><span class="token string">'1234'</span><span class="token punctuation">)</span>
</code></pre></div><p>不过，直接在 <code>manager</code> 实例上调用方法也有缺点。我们可能会决定重新命名某些方法，或者方法的功能发生变化。</p>
<p>假设我们现在不调用 <code>placeOrder</code>，而是将其重命名为 <code>addOrder</code>！这意味着我们必须确保不在代码库的任何地方调用 <code>placeOrder</code> 方法，这在大型应用程序中可能会非常棘手。</p>
<p>相反，我们希望将这些方法与管理器对象分离，并为每个命令创建单独的命令函数！</p>
<p>让我们重构 <code>OrderManager</code> 类：它将不再有 <code>placeOrder</code>、<code>cancelOrder</code> 和 <code>trackOrder</code> 方法，而只有一个方法：<code>execute</code>。该方法将执行给定的任何命令。</p>
<p>每个命令都应能访问 <code>OrderManager</code> 的 <code>orders</code>，我们将把它作为第一个参数传递。</p>
<div class="language-javascript" data-ext="js" data-title="js"><pre class="language-javascript"><code><span class="token keyword">class</span> <span class="token class-name">OrderManager</span> <span class="token punctuation">{</span>
  <span class="token function">constructor</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">this</span><span class="token punctuation">.</span>orders <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span>
  <span class="token punctuation">}</span>

  <span class="token function">execute</span><span class="token punctuation">(</span><span class="token parameter">command<span class="token punctuation">,</span> <span class="token operator">...</span>args</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">return</span> command<span class="token punctuation">.</span><span class="token function">execute</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>orders<span class="token punctuation">,</span> <span class="token operator">...</span>args<span class="token punctuation">)</span>
  <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre></div><p>我们需要为订单管理器创建三个命令：</p>
<ul>
<li><code>PlaceOrderCommand</code></li>
<li><code>CancelOrderCommand</code></li>
<li><code>TrackOrderCommand</code></li>
</ul>
<div class="language-javascript" data-ext="js" data-title="js"><pre class="language-javascript"><code><span class="token keyword">class</span> <span class="token class-name">Command</span> <span class="token punctuation">{</span>
  <span class="token function">constructor</span><span class="token punctuation">(</span><span class="token parameter">execute</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">this</span><span class="token punctuation">.</span>execute <span class="token operator">=</span> execute
  <span class="token punctuation">}</span>
<span class="token punctuation">}</span>

<span class="token keyword">function</span> <span class="token function">PlaceOrderCommand</span><span class="token punctuation">(</span><span class="token parameter">order<span class="token punctuation">,</span> id</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">Command</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token parameter">orders</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
    orders<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span>id<span class="token punctuation">)</span>
    <span class="token keyword">return</span> <span class="token template-string"><span class="token template-punctuation string">`</span><span class="token string">You have successfully ordered </span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">${</span>order<span class="token interpolation-punctuation punctuation">}</span></span><span class="token string"> (</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">${</span>id<span class="token interpolation-punctuation punctuation">}</span></span><span class="token string">)</span><span class="token template-punctuation string">`</span></span>
  <span class="token punctuation">}</span><span class="token punctuation">)</span>
<span class="token punctuation">}</span>

<span class="token keyword">function</span> <span class="token function">CancelOrderCommand</span><span class="token punctuation">(</span><span class="token parameter">id</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">Command</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token parameter">orders</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
    orders <span class="token operator">=</span> orders<span class="token punctuation">.</span><span class="token function">filter</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token parameter">order</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> order<span class="token punctuation">.</span>id <span class="token operator">!==</span> id<span class="token punctuation">)</span>
    <span class="token keyword">return</span> <span class="token template-string"><span class="token template-punctuation string">`</span><span class="token string">You have canceled your order </span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">${</span>id<span class="token interpolation-punctuation punctuation">}</span></span><span class="token template-punctuation string">`</span></span>
  <span class="token punctuation">}</span><span class="token punctuation">)</span>
<span class="token punctuation">}</span>

<span class="token keyword">function</span> <span class="token function">TrackOrderCommand</span><span class="token punctuation">(</span><span class="token parameter">id</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">Command</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token template-string"><span class="token template-punctuation string">`</span><span class="token string">Your order </span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">${</span>id<span class="token interpolation-punctuation punctuation">}</span></span><span class="token string"> will arrive in 20 minutes.</span><span class="token template-punctuation string">`</span></span><span class="token punctuation">)</span>
<span class="token punctuation">}</span>
</code></pre></div><p>完美！现在，这些方法不再直接与 <code>OrderManager</code> 实例耦合，而是成为独立的解耦函数，我们可以通过 <code>OrderManager</code> 上可用的执行方法来调用它们。</p>

<h2>优点</h2>
<p>命令模式允许我们将方法与执行操作的对象解耦。如果您要处理的命令有一定的生命周期，或者命令需要排队并在特定时间执行，那么它能让您获得更多控制权。</p>
<h2>缺点</h2>
<p>命令模式的用例非常有限，而且往往会给应用程序增加不必要的模板。</p>
<h2>参考</h2>
<ul>
<li><a href="https://sourcemaking.com/design_patterns/command" target="_blank" rel="noopener noreferrer">Command Design Pattern</a> - SourceMaking</li>
<li><a href="https://refactoring.guru/design-patterns/command" target="_blank" rel="noopener noreferrer">Command Pattern</a> - Refactoring Guru</li>
<li><a href="https://www.carloscaballero.io/design-patterns-command/" target="_blank" rel="noopener noreferrer">Command Pattern</a> - Carlos Caballero</li>
</ul>
]]></content>
    <author>
      <name>patterns</name>
    </author>
    <category term="reading"/>
    <contributor>
      <name>patterns</name>
    </contributor>
    <published>2024-02-04T00:00:00.000Z</published>
    <rights>Copyright by patterns</rights>
  </entry>
  <entry>
    <title type="text">工厂模式</title>
    <id>https://dribble-njr.github.io/blog/blog/reading/patterns/vanilla/02-factory-pattern.html</id>
    <link href="https://dribble-njr.github.io/blog/blog/reading/patterns/vanilla/02-factory-pattern.html"/>
    <updated>2024-02-07T04:26:52.000Z</updated>
    <summary type="html"><![CDATA[<p>通过工厂模式，我们可以使用工厂函数来创建新对象。当一个函数在不使用 <code>new</code> 关键字的情况下返回一个新对象时，它就是一个工厂函数！</p>
<p>假设我们的应用程序需要许多用户。我们可以创建带有名、姓和电子邮件属性的新用户。工厂函数还会为新创建的对象添加一个 <code>fullName</code> 属性，并返回 <code>name</code> 和 <code>lastName</code>。</p>
<div class="language-javascript" data-ext="js" data-title="js"><pre class="language-javascript"><code><span class="token keyword">const</span> <span class="token function-variable function">createUser</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token parameter"><span class="token punctuation">{</span> firstName<span class="token punctuation">,</span> lastName<span class="token punctuation">,</span> email <span class="token punctuation">}</span></span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">(</span><span class="token punctuation">{</span>
  firstName<span class="token punctuation">,</span>
  lastName<span class="token punctuation">,</span>
  email<span class="token punctuation">,</span>
  <span class="token function">fullName</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">return</span> <span class="token template-string"><span class="token template-punctuation string">`</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">${</span><span class="token keyword">this</span><span class="token punctuation">.</span>firstName<span class="token interpolation-punctuation punctuation">}</span></span><span class="token string"> </span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">${</span><span class="token keyword">this</span><span class="token punctuation">.</span>lastName<span class="token interpolation-punctuation punctuation">}</span></span><span class="token template-punctuation string">`</span></span>
  <span class="token punctuation">}</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span>
</code></pre></div>]]></summary>
    <content type="html"><![CDATA[<p>通过工厂模式，我们可以使用工厂函数来创建新对象。当一个函数在不使用 <code>new</code> 关键字的情况下返回一个新对象时，它就是一个工厂函数！</p>
<p>假设我们的应用程序需要许多用户。我们可以创建带有名、姓和电子邮件属性的新用户。工厂函数还会为新创建的对象添加一个 <code>fullName</code> 属性，并返回 <code>name</code> 和 <code>lastName</code>。</p>
<div class="language-javascript" data-ext="js" data-title="js"><pre class="language-javascript"><code><span class="token keyword">const</span> <span class="token function-variable function">createUser</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token parameter"><span class="token punctuation">{</span> firstName<span class="token punctuation">,</span> lastName<span class="token punctuation">,</span> email <span class="token punctuation">}</span></span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">(</span><span class="token punctuation">{</span>
  firstName<span class="token punctuation">,</span>
  lastName<span class="token punctuation">,</span>
  email<span class="token punctuation">,</span>
  <span class="token function">fullName</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">return</span> <span class="token template-string"><span class="token template-punctuation string">`</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">${</span><span class="token keyword">this</span><span class="token punctuation">.</span>firstName<span class="token interpolation-punctuation punctuation">}</span></span><span class="token string"> </span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">${</span><span class="token keyword">this</span><span class="token punctuation">.</span>lastName<span class="token interpolation-punctuation punctuation">}</span></span><span class="token template-punctuation string">`</span></span>
  <span class="token punctuation">}</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span>
</code></pre></div><p>完美！现在，我们可以通过调用 <code>createUser</code> 函数轻松创建多个用户。</p>

<p>如果我们要创建相对复杂且可配置的对象，工厂模式就会非常有用。可能发生的情况是，键和值的值取决于特定的环境或配置。使用工厂模式，我们可以轻松创建包含自定义键和值的新对象！</p>
<div class="language-javascript" data-ext="js" data-title="js"><pre class="language-javascript"><code><span class="token keyword">const</span> <span class="token function-variable function">createObjectFromArray</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token parameter"><span class="token punctuation">[</span>key<span class="token punctuation">,</span> value<span class="token punctuation">]</span></span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">(</span><span class="token punctuation">{</span>
  <span class="token punctuation">[</span>key<span class="token punctuation">]</span><span class="token operator">:</span> value
<span class="token punctuation">}</span><span class="token punctuation">)</span>

<span class="token function">createObjectFromArray</span><span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token string">'name'</span><span class="token punctuation">,</span> <span class="token string">'John'</span><span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token comment">// { name: "John" }</span>
</code></pre></div><h2>优点</h2>
<p>当我们需要创建多个共享相同属性的较小对象时，工厂模式非常有用。工厂函数可以根据当前环境或用户特定配置轻松返回自定义对象。</p>
<h2>缺点</h2>
<p>在 JavaScript 中，工厂模式不过是一个不使用 <code>new</code> 关键字就能返回对象的函数。<strong>ES6 箭头函数</strong> 允许我们创建小型工厂函数，每次都隐式返回一个对象。</p>
<div class="language-javascript" data-ext="js" data-title="js"><pre class="language-javascript"><code><span class="token keyword">const</span> <span class="token function-variable function">createDog</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token parameter">name<span class="token punctuation">,</span> breed</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">(</span><span class="token punctuation">{</span> name<span class="token punctuation">,</span> breed <span class="token punctuation">}</span><span class="token punctuation">)</span>
</code></pre></div><p>不过，在许多情况下，创建新实例比每次创建新对象更节省内存。</p>
<div class="language-javascript" data-ext="js" data-title="js"><pre class="language-javascript"><code><span class="token keyword">class</span> <span class="token class-name">User</span> <span class="token punctuation">{</span>
  <span class="token function">constructor</span><span class="token punctuation">(</span><span class="token parameter">firstName<span class="token punctuation">,</span> lastName<span class="token punctuation">,</span> email</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">this</span><span class="token punctuation">.</span>firstName <span class="token operator">=</span> firstName
    <span class="token keyword">this</span><span class="token punctuation">.</span>lastName <span class="token operator">=</span> lastName
    <span class="token keyword">this</span><span class="token punctuation">.</span>email <span class="token operator">=</span> email
  <span class="token punctuation">}</span>

  <span class="token function">fullName</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">return</span> <span class="token template-string"><span class="token template-punctuation string">`</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">${</span><span class="token keyword">this</span><span class="token punctuation">.</span>firstName<span class="token interpolation-punctuation punctuation">}</span></span><span class="token string"> </span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">${</span><span class="token keyword">this</span><span class="token punctuation">.</span>lastName<span class="token interpolation-punctuation punctuation">}</span></span><span class="token template-punctuation string">`</span></span>
  <span class="token punctuation">}</span>
<span class="token punctuation">}</span>

<span class="token keyword">const</span> user1 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">User</span><span class="token punctuation">(</span><span class="token punctuation">{</span>
  <span class="token literal-property property">firstName</span><span class="token operator">:</span> <span class="token string">'John'</span><span class="token punctuation">,</span>
  <span class="token literal-property property">lastName</span><span class="token operator">:</span> <span class="token string">'Doe'</span><span class="token punctuation">,</span>
  <span class="token literal-property property">email</span><span class="token operator">:</span> <span class="token string">'john@doe.com'</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span>

<span class="token keyword">const</span> user2 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">User</span><span class="token punctuation">(</span><span class="token punctuation">{</span>
  <span class="token literal-property property">firstName</span><span class="token operator">:</span> <span class="token string">'Jane'</span><span class="token punctuation">,</span>
  <span class="token literal-property property">lastName</span><span class="token operator">:</span> <span class="token string">'Doe'</span><span class="token punctuation">,</span>
  <span class="token literal-property property">email</span><span class="token operator">:</span> <span class="token string">'jane@doe.com'</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span>
</code></pre></div><h2>参考</h2>
<ul>
<li><a href="https://medium.com/javascript-scene/javascript-factory-functions-with-es6-4d224591a8b1" target="_blank" rel="noopener noreferrer">JavaScript Factory Functions with ES6+</a> - Eric Elliott</li>
</ul>
]]></content>
    <author>
      <name>patterns</name>
    </author>
    <category term="reading"/>
    <contributor>
      <name>patterns</name>
    </contributor>
    <published>2024-02-04T00:00:00.000Z</published>
    <rights>Copyright by patterns</rights>
  </entry>
  <entry>
    <title type="text">HighCharts 客户端导出图片</title>
    <id>https://dribble-njr.github.io/blog/blog/frontend/practice/007-offline-export-in-highcharts.html</id>
    <link href="https://dribble-njr.github.io/blog/blog/frontend/practice/007-offline-export-in-highcharts.html"/>
    <updated>2024-01-24T06:35:37.000Z</updated>
    <summary type="html"><![CDATA[<p>客户端导出指的是不需要提交数据到导出服务器，直接在浏览器上可以将图表导出为常见图片文件或 PDF 文档。以下情况非常适合使用客户端导出：</p>
<ul>
<li>不希望将图表数据或图表配置发送到我们的导出服务器</li>
<li>希望省去自己配置导出服务器</li>
<li>不需要在低版本 IE （IE9 及以下）浏览器上使用导出功能</li>
</ul>
<h2>客户端导出</h2>
<p>客户端导出功能模块使用现代浏览器技术来完成相关的功能，因此某些功能在低版本的浏览器上是无法正常使用的，对于不支持的浏览器，我们默认会回退到提交数据到导出服务器，可以通过 <a href="https://api.highcharts.com/highcharts/exporting.fallbackToExportServer" target="_blank" rel="noopener noreferrer">exporting.fallbackToExportServer</a> 来关闭行为，关于客户端导出在不同浏览器中的兼容详情请参考下方的表格。</p>]]></summary>
    <content type="html"><![CDATA[<p>客户端导出指的是不需要提交数据到导出服务器，直接在浏览器上可以将图表导出为常见图片文件或 PDF 文档。以下情况非常适合使用客户端导出：</p>
<ul>
<li>不希望将图表数据或图表配置发送到我们的导出服务器</li>
<li>希望省去自己配置导出服务器</li>
<li>不需要在低版本 IE （IE9 及以下）浏览器上使用导出功能</li>
</ul>
<h2>客户端导出</h2>
<p>客户端导出功能模块使用现代浏览器技术来完成相关的功能，因此某些功能在低版本的浏览器上是无法正常使用的，对于不支持的浏览器，我们默认会回退到提交数据到导出服务器，可以通过 <a href="https://api.highcharts.com/highcharts/exporting.fallbackToExportServer" target="_blank" rel="noopener noreferrer">exporting.fallbackToExportServer</a> 来关闭行为，关于客户端导出在不同浏览器中的兼容详情请参考下方的表格。</p>
<p>IE 浏览器导出 PNG 格式图片或包含图片的图表时需要额外的 <a href="https://github.com/canvg/canvg" target="_blank" rel="noopener noreferrer">canvg</a> 库；所有浏览器导出 PDF 文件都需要 <a href="https://github.com/yWorks/jsPDF" target="_blank" rel="noopener noreferrer">jsPDF</a> 及 <a href="https://github.com/yWorks/svg2pdf.js" target="_blank" rel="noopener noreferrer">svg2PDF</a> 库，默认情况下，这些文件会根据需求从我们的服务器上加载，可以通过 <a href="https://api.highcharts.com/highcharts/exporting.libURL" target="_blank" rel="noopener noreferrer">exporting.libURL</a> 配置来指定加载这些文件的地址。如果页面中已经加载过这些文件，Highcharts 将不会再次加载。</p>
<p>PDF 不支持导出图像，会退回到导出服务器。</p>
<p>使用客户端导出很简单，只需要引入图表导出功能相关的文件即可，需要引入的文件如下所示：</p>
<div class="language-html" data-ext="html" data-title="html"><pre class="language-html"><code><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span> <span class="token attr-name">src</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>http://cdn.hcharts.cn/highcharts/highcharts.js<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span><span class="token script"></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">&gt;</span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span> <span class="token attr-name">src</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>http://cdn.hcharts.cn/highcharts/modules/exporting.js<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span><span class="token script"></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">&gt;</span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span> <span class="token attr-name">src</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>http://cdn.hcharts.cn/highcharts/modules/offline-exporting.js<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span><span class="token script"></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">&gt;</span></span>
</code></pre></div><p><a href="https://jsfiddle.net/gh/get/library/pure/highcharts/highcharts/tree/master/samples/highcharts/exporting/offline-download-demo/" target="_blank" rel="noopener noreferrer">客户端导出官方 demo</a></p>
<h2>React</h2>
<p>如果需要使用 React，需要使用模块导入，同时在使用之前对导出功能进行挂载。</p>
<div class="language-javascript" data-ext="js" data-title="js"><pre class="language-javascript"><code><span class="token keyword">import</span> <span class="token operator">*</span> <span class="token keyword">as</span> Highcharts <span class="token keyword">from</span> <span class="token string">'highcharts'</span>
<span class="token keyword">import</span> HighchartsReact <span class="token keyword">from</span> <span class="token string">'highcharts-react-official'</span>
<span class="token keyword">import</span> HcExporting <span class="token keyword">from</span> <span class="token string">'highcharts/modules/exporting'</span>
<span class="token keyword">import</span> OfflineExporting <span class="token keyword">from</span> <span class="token string">'highcharts/modules/offline-exporting'</span>

<span class="token function">HcExporting</span><span class="token punctuation">(</span>Highcharts<span class="token punctuation">)</span>
<span class="token function">OfflineExporting</span><span class="token punctuation">(</span>Highcharts<span class="token punctuation">)</span>
</code></pre></div><div class="hint-container tip">
<p class="hint-container-title">提示</p>
<p><code>highcharts-react-official</code> 提供了对 React 的支持，可以使用 <code>ref</code> 获取生成的 <code>chart</code> 示例。</p>
<p><code>HcExporting(Highcharts)</code> 和 <code>OfflineExporting(Highcharts)</code> 会分别将 <code>exportChart()</code> 和 <code>exportChartLocal()</code> 两个方法挂载到实例对象中。</p>
</div>
<p>如果使用 <code>HighCharts</code> 自带的操作按钮进行导出，那么不需要手动调用导出方法。</p>
<p>如果需要自定义导出按钮，则需要使用 <code>exportChartLocal()</code> 方法。</p>
<div class="language-jsx" data-ext="jsx" data-title="jsx"><pre class="language-jsx"><code><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span><span class="token class-name">ChartOperationBar</span></span>
  <span class="token attr-name">chart</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>{chartState}<span class="token punctuation">"</span></span>
  <span class="token attr-name">leftInfoChildren</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>{props.leftInfoChildren}<span class="token punctuation">"</span></span>
  <span class="token attr-name">rightInfoChildren</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>{props.rightInfoChildren}<span class="token punctuation">"</span></span>
  <span class="token attr-name">exportChartTitle</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>{props.exportChartTitle}<span class="token punctuation">"</span></span>
<span class="token punctuation">/&gt;</span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span><span class="token class-name">HighchartsReact</span></span> <span class="token attr-name">ref</span><span class="token script language-javascript"><span class="token script-punctuation punctuation">=</span><span class="token punctuation">{</span>chartRef<span class="token punctuation">}</span></span> <span class="token attr-name">highcharts</span><span class="token script language-javascript"><span class="token script-punctuation punctuation">=</span><span class="token punctuation">{</span>Highcharts<span class="token punctuation">}</span></span> <span class="token attr-name">options</span><span class="token script language-javascript"><span class="token script-punctuation punctuation">=</span><span class="token punctuation">{</span>options<span class="token punctuation">}</span></span>
<span class="token attr-name">callback</span><span class="token script language-javascript"><span class="token script-punctuation punctuation">=</span><span class="token punctuation">{</span><span class="token punctuation">(</span><span class="token parameter"><span class="token literal-property property">chart</span><span class="token operator">:</span> Chart</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token function">setChartState</span><span class="token punctuation">(</span>chart<span class="token punctuation">)</span><span class="token punctuation">}</span></span> <span class="token punctuation">/&gt;</span></span>
</code></pre></div><p>上面这个代码使用 <code>callback</code> 在 <code>highcharts</code> 实例化后将实例设置为 <code>state</code>，保证自定义操作组件能够获取到实例对象，在该组件中使用 <code>exportChartLocal()</code> 方法即可实现客户端导出。</p>
<div class="hint-container warning">
<p class="hint-container-title">注意</p>
<ol>
<li>如果简单地传递 <code>chartRef.current.chart</code>，子组件不会重新渲染导致获取到 <code>chart</code> 实例为 <code>undefined</code>。</li>
<li>必须使用 <code>exportChartLocal()</code> 方法，若使用 <code>exportChart()</code> 方法仍然会使用服务器导出。</li>
</ol>
</div>
]]></content>
    <category term="practice"/>
    <published>2024-01-23T00:00:00.000Z</published>
  </entry>
  <entry>
    <title type="text">关系数据库设计理论</title>
    <id>https://dribble-njr.github.io/blog/blog/backend/database/basic/003-db-design.html</id>
    <link href="https://dribble-njr.github.io/blog/blog/backend/database/basic/003-db-design.html"/>
    <updated>2024-01-23T14:35:46.000Z</updated>
    <summary type="html"><![CDATA[<p>关系数据库有一个成熟的理论——依赖。它涉及到如何构建一个良好的关系型数据库模式，以及当一个模式存在缺陷时应该如何改进。</p>
<h2>函数依赖</h2>
<h3>定义</h3>
<p><strong>函数依赖</strong>：设 <code>R</code> 是一个关系模式，<code>X</code> 和 <code>Y</code> 是 <code>R</code> 的属性集，如果对于 <code>R</code> 的任意两个元组 <code>t1</code> 和 <code>t2</code>，如果 <code>t1</code> 和 <code>t2</code> 在 <code>X</code> 上的分量相等，则 <code>t1</code> 和 <code>t2</code> 在 <code>Y</code> 上的分量也相等，那么我们说 <code>Y</code> 函数依赖于 <code>X</code>，记作 <code>X -&gt; Y</code>。</p>]]></summary>
    <content type="html"><![CDATA[<p>关系数据库有一个成熟的理论——依赖。它涉及到如何构建一个良好的关系型数据库模式，以及当一个模式存在缺陷时应该如何改进。</p>
<h2>函数依赖</h2>
<h3>定义</h3>
<p><strong>函数依赖</strong>：设 <code>R</code> 是一个关系模式，<code>X</code> 和 <code>Y</code> 是 <code>R</code> 的属性集，如果对于 <code>R</code> 的任意两个元组 <code>t1</code> 和 <code>t2</code>，如果 <code>t1</code> 和 <code>t2</code> 在 <code>X</code> 上的分量相等，则 <code>t1</code> 和 <code>t2</code> 在 <code>Y</code> 上的分量也相等，那么我们说 <code>Y</code> 函数依赖于 <code>X</code>，记作 <code>X -&gt; Y</code>。</p>
<p>以关系 <code>Movies1</code> 为例。</p>
<p>|     title     | year | length | genre | studioName |   starName    |<br>
| :</p>
]]></content>
    <category term="database"/>
    <published>2024-01-17T00:00:00.000Z</published>
  </entry>
  <entry>
    <title type="text">关系数据模型</title>
    <id>https://dribble-njr.github.io/blog/blog/backend/database/basic/002-relation-model.html</id>
    <link href="https://dribble-njr.github.io/blog/blog/backend/database/basic/002-relation-model.html"/>
    <updated>2024-01-23T14:35:46.000Z</updated>
    <summary type="html"><![CDATA[<p>本文介绍最重要的数据模型之一：「二维表」，或者称为「关系」。</p>
<h2>数据模型概述</h2>
<h3>什么是数据模型</h3>
<p>数据模型是用于描述数据或信息的标记，一般由三部分组成：</p>
<ul>
<li>数据结构：物理数据模型，也称概念模型；</li>
<li>数据操作：查询、修改；</li>
<li>数据约束。</li>
</ul>
<h3>一些重要的数据模型</h3>
<p>现今，数据库系统中有两种比较重要的数据模型：</p>
<ul>
<li>关系数据模型，包括对象关系模型的拓展；</li>
<li>半结构化数据模型，包括 XML 相关的标准。</li>
</ul>]]></summary>
    <content type="html"><![CDATA[<p>本文介绍最重要的数据模型之一：「二维表」，或者称为「关系」。</p>
<h2>数据模型概述</h2>
<h3>什么是数据模型</h3>
<p>数据模型是用于描述数据或信息的标记，一般由三部分组成：</p>
<ul>
<li>数据结构：物理数据模型，也称概念模型；</li>
<li>数据操作：查询、修改；</li>
<li>数据约束。</li>
</ul>
<h3>一些重要的数据模型</h3>
<p>现今，数据库系统中有两种比较重要的数据模型：</p>
<ul>
<li>关系数据模型，包括对象关系模型的拓展；</li>
<li>半结构化数据模型，包括 XML 相关的标准。</li>
</ul>
<h4>关系模型</h4>
<p>关系模型是一种基于「二维表」的数据模型，由 E.F.Codd 于 1970 年提出。</p>
<p>以电影关系模型为例，这张表中会有大量的数据行，一部电影对应一行数据。</p>
<p>|          title           | year | length | genre |<br>
| :</p>
]]></content>
    <category term="database"/>
    <published>2024-01-16T00:00:00.000Z</published>
  </entry>
  <entry>
    <title type="text">数据库基础</title>
    <id>https://dribble-njr.github.io/blog/blog/backend/database/basic/001-hello-database.html</id>
    <link href="https://dribble-njr.github.io/blog/blog/backend/database/basic/001-hello-database.html"/>
    <updated>2024-01-15T15:40:10.000Z</updated>
    <summary type="html"><![CDATA[<h2>数据库系统</h2>
<p>数据库：由「数据库管理系统（database management system, DBMS）」管理的数据的集合。</p>
<p>具有以下功能：</p>
<ol>
<li>使用特殊的「数据定义语言」定义数据库，并说明数据的逻辑结构；</li>
<li>使用合适的「查询语言」为用户提供查询和更新数据的能力；</li>
<li>支持超大数据量；</li>
<li>具有持久性；</li>
<li>不允许一个用户的操作影响另一个用户（独立性）、不允许对数据的不完整操作（原子性）。</li>
</ol>
<p>目前一般是关系型数据库和非关系型数据库。</p>
<div class="hint-container tip">
<p class="hint-container-title">提示</p>
<p>数据组织成表的形式呈现给用户，这种形式称为关系。</p>
</div>]]></summary>
    <content type="html"><![CDATA[<h2>数据库系统</h2>
<p>数据库：由「数据库管理系统（database management system, DBMS）」管理的数据的集合。</p>
<p>具有以下功能：</p>
<ol>
<li>使用特殊的「数据定义语言」定义数据库，并说明数据的逻辑结构；</li>
<li>使用合适的「查询语言」为用户提供查询和更新数据的能力；</li>
<li>支持超大数据量；</li>
<li>具有持久性；</li>
<li>不允许一个用户的操作影响另一个用户（独立性）、不允许对数据的不完整操作（原子性）。</li>
</ol>
<p>目前一般是关系型数据库和非关系型数据库。</p>
<div class="hint-container tip">
<p class="hint-container-title">提示</p>
<p>数据组织成表的形式呈现给用户，这种形式称为关系。</p>
</div>
<p>数据库问题的复杂性在于：「信息集成」，即如何把包含多个相关数据库中的信息连接在一起成为一整个数据库。</p>
<p>目前解决该问题的方法一般是：</p>
<ul>
<li>「数据仓库」：通过合适的转换技术，将来自多个遗留数据库的信息周期性的复制到中央数据库；</li>
<li>「协调器」或「中间件」：支持各类数据库数据的整合模型，实现整合模型和实际数据库模型间的信息转换。</li>
</ul>
<div class="hint-container tip">
<p class="hint-container-title">提示</p>
<p>一般可以使用 Node 实现中间件。</p>
</div>
]]></content>
    <category term="database"/>
    <published>2024-01-15T00:00:00.000Z</published>
  </entry>
  <entry>
    <title type="text">Docker 安装 MySQL</title>
    <id>https://dribble-njr.github.io/blog/blog/backend/database/mysql/001-install-mysql.html</id>
    <link href="https://dribble-njr.github.io/blog/blog/backend/database/mysql/001-install-mysql.html"/>
    <updated>2024-01-14T11:13:24.000Z</updated>
    <summary type="html"><![CDATA[<p>使用 Docker 安装 MySQL。</p>
<h2>安装</h2>
<p>从 <a href="https://hub.docker.com/_/mysql/" target="_blank" rel="noopener noreferrer">docker-hub</a> 镜像源中找到想要安装的版本号。</p>
<p>这里直接安装最新版本。</p>
<div class="language-bash" data-ext="sh" data-title="sh"><pre class="language-bash"><code><span class="token function">docker</span> pull mysql
</code></pre></div>]]></summary>
    <content type="html"><![CDATA[<p>使用 Docker 安装 MySQL。</p>
<h2>安装</h2>
<p>从 <a href="https://hub.docker.com/_/mysql/" target="_blank" rel="noopener noreferrer">docker-hub</a> 镜像源中找到想要安装的版本号。</p>
<p>这里直接安装最新版本。</p>
<div class="language-bash" data-ext="sh" data-title="sh"><pre class="language-bash"><code><span class="token function">docker</span> pull mysql
</code></pre></div><p>等待一段时间安装完成后，启动 MySQL 容器：</p>
<div class="language-bash" data-ext="sh" data-title="sh"><pre class="language-bash"><code><span class="token function">docker</span> run <span class="token parameter variable">-d</span> <span class="token parameter variable">--name</span> mysql-container <span class="token parameter variable">-e</span> <span class="token assign-left variable">MYSQL_ROOT_PASSWORD</span><span class="token operator">=</span>my-secret-pw <span class="token parameter variable">-p</span> <span class="token number">3306</span>:3306 mysql
</code></pre></div><p>这个命令的参数解释如下：</p>
<ul>
<li><code>-d</code>: 后台运行容器。</li>
<li><code>--name mysql-container</code>: 给容器起一个名字。</li>
<li><code>-e MYSQL_ROOT_PASSWORD=my-secret-pw</code>: 设置 MySQL root 用户的密码。</li>
<li><code>-p 3306:3306</code>: 将容器的 MySQL 服务端口（默认为 3306）映射到主机的 3306 端口。</li>
</ul>
<p>启动容器后进入 MySQL 容器的命令行界面：</p>
<div class="language-bash" data-ext="sh" data-title="sh"><pre class="language-bash"><code><span class="token function">docker</span> <span class="token builtin class-name">exec</span> <span class="token parameter variable">-it</span> mysql-container <span class="token function">bash</span>
</code></pre></div><p>输入密码即可进入 MySQL 命令行界面。</p>
<h2>设置 MySQL</h2>
<p>进入到命令行界面后，设置一些基本的配置。</p>
<div class="hint-container warning">
<p class="hint-container-title">注意</p>
<p>MySQL 命令以 <code>;</code> 表示一行结束。</p>
</div>
<ol>
<li>登陆 MySQL</li>
</ol>
<div class="language-bash" data-ext="sh" data-title="sh"><pre class="language-bash"><code>mysql <span class="token parameter variable">-u</span> root <span class="token parameter variable">-p</span>
</code></pre></div><ol start="2">
<li>创建数据库</li>
</ol>
<div class="language-bash" data-ext="sh" data-title="sh"><pre class="language-bash"><code>create database your_data_base_name<span class="token punctuation">;</span>
</code></pre></div><ol start="3">
<li>创建用户</li>
</ol>
<div class="language-bash" data-ext="sh" data-title="sh"><pre class="language-bash"><code>CREATE <span class="token environment constant">USER</span> <span class="token string">'your_username'</span>@<span class="token string">'localhost'</span> IDENTIFIED BY <span class="token string">'your_password'</span><span class="token punctuation">;</span>
</code></pre></div><ol start="4">
<li>设置权限</li>
</ol>
<div class="language-bash" data-ext="sh" data-title="sh"><pre class="language-bash"><code>GRANT ALL PRIVILEGES ON your_database_name.* TO <span class="token string">'your_username'</span>@<span class="token string">'localhost'</span><span class="token punctuation">;</span>
</code></pre></div><ol start="5">
<li>刷新权限</li>
</ol>
<div class="language-bash" data-ext="sh" data-title="sh"><pre class="language-bash"><code>FLUSH PRIVILEGES<span class="token punctuation">;</span>
</code></pre></div><div class="hint-container warning">
<p class="hint-container-title">注意</p>
<p>必要步骤，否则权限会不生效。</p>
</div>
<p>做完基本的配置之后，就可以使用下面命令退出命令行界面：</p>
<div class="language-bash" data-ext="sh" data-title="sh"><pre class="language-bash"><code><span class="token builtin class-name">exit</span><span class="token punctuation">;</span>
</code></pre></div><h2>服务器开放端口</h2>
<p>参考 。</p>
<p>接下来就可以使用 Navicat 连接数据库了。</p>
]]></content>
    <category term="database"/>
    <published>2024-01-14T00:00:00.000Z</published>
  </entry>
  <entry>
    <title type="text">SVG 实现签名动画效果</title>
    <id>https://dribble-njr.github.io/blog/blog/frontend/practice/006-animation-svg.html</id>
    <link href="https://dribble-njr.github.io/blog/blog/frontend/practice/006-animation-svg.html"/>
    <updated>2024-01-13T16:14:27.000Z</updated>
    <summary type="html"><![CDATA[<p>在阅读 antfu 大佬的 <a href="https://antfu.me/posts/animated-svg-logo" target="_blank" rel="noopener noreferrer">Animated SVG Logo</a> 时，发现了一个很有意思的动画效果，最终实现的效果如下。</p>

<p>其中原理可以参考下面两篇文章：</p>
<ul>
<li><a href="https://jakearchibald.com/2013/animated-line-drawing-svg/" target="_blank" rel="noopener noreferrer">Animated line drawing in SVG</a></li>
<li><a href="https://css-tricks.com/svg-line-animation-works/" target="_blank" rel="noopener noreferrer">How SVG Line Animation Works</a></li>
</ul>]]></summary>
    <content type="html"><![CDATA[<p>在阅读 antfu 大佬的 <a href="https://antfu.me/posts/animated-svg-logo" target="_blank" rel="noopener noreferrer">Animated SVG Logo</a> 时，发现了一个很有意思的动画效果，最终实现的效果如下。</p>

<p>其中原理可以参考下面两篇文章：</p>
<ul>
<li><a href="https://jakearchibald.com/2013/animated-line-drawing-svg/" target="_blank" rel="noopener noreferrer">Animated line drawing in SVG</a></li>
<li><a href="https://css-tricks.com/svg-line-animation-works/" target="_blank" rel="noopener noreferrer">How SVG Line Animation Works</a></li>
</ul>
<div class="hint-container tip">
<p class="hint-container-title">提示</p>
<p>下面以内马尔签名为例，介绍一下如何实现这个效果。</p>
</div>
<h2>签名文件处理</h2>
<p>谷歌上搜索内马尔签名，找到 <a href="https://zh.wikipedia.org/wiki/File:Neymar_da_Silva_Santos_J%C3%BAnior_signature.svg" target="_blank" rel="noopener noreferrer">原始 SVG 文件</a>。</p>
<figure><img src="https://raw.githubusercontent.com/dribble-njr/typora-njr/master/img/20240113225839.png" alt="内马尔签名" tabindex="0" loading="lazy"><figcaption>内马尔签名</figcaption></figure>
<div class="hint-container warning">
<p class="hint-container-title">注意</p>
<p>源文件为 fill 填充，而只有 stroke 才能实现此动画效果，所以需要使用 Adobe Illustration 或 Figma 或 Motiff 处理。</p>
<p>先将填充取消，并进行描边处理，最后使用钢笔工具在填充中间增加路径。</p>
</div>
<p>使用 AI 软件处理后，得到下面文件，再导出为 SVG 格式。由于技术不过关，少了很多细节处理，但是不影响效果。</p>
<figure><img src="https://raw.githubusercontent.com/dribble-njr/typora-njr/master/img/20240113230507.png" alt="处理后的 stroke 文件" tabindex="0" loading="lazy"><figcaption>处理后的 stroke 文件</figcaption></figure>
<h2>实现动画</h2>
<p>得到 stroke 文件后，就可以使用 <code>stroke-dasharray</code> 和 <code>stroke-dashoffset</code> 属性实现动画效果。</p>
<p>由于这里的有四条路径，因此需要分别设置四个动画。</p>
<p>这里先获得四条路径的总长度。</p>
<div class="language-javascript" data-ext="js" data-title="js"><pre class="language-javascript"><code><span class="token keyword">const</span> path1 <span class="token operator">=</span> document<span class="token punctuation">.</span><span class="token function">getElementById</span><span class="token punctuation">(</span><span class="token string">'path1'</span><span class="token punctuation">)</span>
<span class="token keyword">const</span> path2 <span class="token operator">=</span> document<span class="token punctuation">.</span><span class="token function">getElementById</span><span class="token punctuation">(</span><span class="token string">'path2'</span><span class="token punctuation">)</span>
<span class="token keyword">const</span> path3 <span class="token operator">=</span> document<span class="token punctuation">.</span><span class="token function">getElementById</span><span class="token punctuation">(</span><span class="token string">'path3'</span><span class="token punctuation">)</span>
<span class="token keyword">const</span> path4 <span class="token operator">=</span> document<span class="token punctuation">.</span><span class="token function">getElementById</span><span class="token punctuation">(</span><span class="token string">'path4'</span><span class="token punctuation">)</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>path1<span class="token punctuation">.</span><span class="token function">getTotalLength</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>path2<span class="token punctuation">.</span><span class="token function">getTotalLength</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>path3<span class="token punctuation">.</span><span class="token function">getTotalLength</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>path4<span class="token punctuation">.</span><span class="token function">getTotalLength</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
</code></pre></div><p>获取完长度后，因为需要依次出现每个路径，所以需要设置动画延迟时间，这样就能保证每个路径依次出现，最终就能得到上述的效果了。</p>
<div class="language-css" data-ext="css" data-title="css"><pre class="language-css"><code><span class="token selector">:root</span> <span class="token punctuation">{</span>
  <span class="token property">--dash-array-1</span><span class="token punctuation">:</span> 1722px<span class="token punctuation">;</span>
  <span class="token property">--dash-array-2</span><span class="token punctuation">:</span> 633px<span class="token punctuation">;</span>
  <span class="token property">--dash-array-3</span><span class="token punctuation">:</span> 436px<span class="token punctuation">;</span>
  <span class="token property">--dash-array-4</span><span class="token punctuation">:</span> 1386px<span class="token punctuation">;</span>
<span class="token punctuation">}</span>

<span class="token atrule"><span class="token rule">@media</span> <span class="token punctuation">(</span>prefers-reduced-motion<span class="token punctuation">)</span></span> <span class="token punctuation">{</span>
  <span class="token selector">path</span> <span class="token punctuation">{</span>
    <span class="token property">animation</span><span class="token punctuation">:</span> none <span class="token important">!important</span><span class="token punctuation">;</span>
    <span class="token property">stroke-dasharray</span><span class="token punctuation">:</span> unset <span class="token important">!important</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span>
<span class="token punctuation">}</span>

<span class="token atrule"><span class="token rule">@keyframes</span> draw</span> <span class="token punctuation">{</span>
  <span class="token selector">0%</span> <span class="token punctuation">{</span>
    <span class="token property">stroke-dashoffset</span><span class="token punctuation">:</span> <span class="token function">var</span><span class="token punctuation">(</span>--dash-array<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token property">opacity</span><span class="token punctuation">:</span> 0<span class="token punctuation">;</span>
  <span class="token punctuation">}</span>
  <span class="token selector">100%</span> <span class="token punctuation">{</span>
    <span class="token property">stroke-dashoffset</span><span class="token punctuation">:</span> 0<span class="token punctuation">;</span>
    <span class="token property">opacity</span><span class="token punctuation">:</span> 1<span class="token punctuation">;</span>
  <span class="token punctuation">}</span>
<span class="token punctuation">}</span>

<span class="token selector">path:nth-child(1)</span> <span class="token punctuation">{</span>
  <span class="token property">--dash-array</span><span class="token punctuation">:</span> <span class="token function">var</span><span class="token punctuation">(</span>--dash-array-1<span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token property">animation</span><span class="token punctuation">:</span> draw 1s ease forwards 0s<span class="token punctuation">;</span>
<span class="token punctuation">}</span>

<span class="token selector">path:nth-child(2)</span> <span class="token punctuation">{</span>
  <span class="token property">--dash-array</span><span class="token punctuation">:</span> <span class="token function">var</span><span class="token punctuation">(</span>--dash-array-2<span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token property">animation</span><span class="token punctuation">:</span> draw 0.7s ease forwards 1s<span class="token punctuation">;</span>
<span class="token punctuation">}</span>

<span class="token selector">path:nth-child(3)</span> <span class="token punctuation">{</span>
  <span class="token property">--dash-array</span><span class="token punctuation">:</span> <span class="token function">var</span><span class="token punctuation">(</span>--dash-array-3<span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token property">animation</span><span class="token punctuation">:</span> draw 0.5s ease forwards 2s<span class="token punctuation">;</span>
<span class="token punctuation">}</span>

<span class="token selector">path:nth-child(4)</span> <span class="token punctuation">{</span>
  <span class="token property">--dash-array</span><span class="token punctuation">:</span> <span class="token function">var</span><span class="token punctuation">(</span>--dash-array-4<span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token property">animation</span><span class="token punctuation">:</span> draw 1s ease forwards 3s<span class="token punctuation">;</span>
<span class="token punctuation">}</span>

<span class="token selector">path</span> <span class="token punctuation">{</span>
  <span class="token property">stroke-dashoffset</span><span class="token punctuation">:</span> 1px<span class="token punctuation">;</span>
  <span class="token property">stroke-dasharray</span><span class="token punctuation">:</span> <span class="token function">var</span><span class="token punctuation">(</span>--dash-array<span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token property">transform-origin</span><span class="token punctuation">:</span> center<span class="token punctuation">;</span>
  <span class="token property">stroke</span><span class="token punctuation">:</span> #303030<span class="token punctuation">;</span>
  <span class="token property">opacity</span><span class="token punctuation">:</span> 0<span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre></div><h2>适配 vuepress</h2>
<p>这里使用的是 <code>vuepress-theme-hope</code> 主题，参考 <a href="https://theme-hope.vuejs.press/zh/guide/advanced/replace.html" target="_blank" rel="noopener noreferrer">替换主题组件</a> 中通过导航栏组件别名替换了默认的导航栏组件。</p>
<div class="language-javascript" data-ext="js" data-title="js"><pre class="language-javascript"><code><span class="token literal-property property">alias</span><span class="token operator">:</span> <span class="token punctuation">{</span>
  <span class="token string-property property">'@theme-hope/modules/navbar/components/NavbarBrand'</span><span class="token operator">:</span> path<span class="token punctuation">.</span><span class="token function">resolve</span><span class="token punctuation">(</span>
    __dirname<span class="token punctuation">,</span>
    <span class="token string">'./components/NavLogo.vue'</span>
  <span class="token punctuation">)</span>
<span class="token punctuation">}</span>
</code></pre></div><h2>适配深色主题</h2>
<p><code>vuepress</code> 并未提供是否为深色主题的接口，需要监听 <code>data-theme</code> 属性变化，来判断是否为深色主题。</p>
<div class="language-javascript" data-ext="js" data-title="js"><pre class="language-javascript"><code><span class="token keyword">import</span> <span class="token punctuation">{</span> onUnmounted<span class="token punctuation">,</span> onMounted<span class="token punctuation">,</span> ref <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">'vue'</span>

<span class="token keyword">const</span> isDarkMode <span class="token operator">=</span> <span class="token function">ref</span><span class="token punctuation">(</span><span class="token boolean">false</span><span class="token punctuation">)</span>

<span class="token function">onMounted</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
  <span class="token keyword">const</span> html <span class="token operator">=</span> document<span class="token punctuation">.</span>documentElement

  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>html<span class="token punctuation">,</span> <span class="token string">'==='</span><span class="token punctuation">)</span>

  isDarkMode<span class="token punctuation">.</span>value <span class="token operator">=</span> html<span class="token punctuation">.</span>dataset<span class="token punctuation">.</span>theme <span class="token operator">===</span> <span class="token string">'dark'</span>

  <span class="token comment">// watch theme change</span>
  <span class="token keyword">const</span> observer <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">MutationObserver</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
    isDarkMode<span class="token punctuation">.</span>value <span class="token operator">=</span> html<span class="token punctuation">.</span>dataset<span class="token punctuation">.</span>theme <span class="token operator">===</span> <span class="token string">'dark'</span>
    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>isDarkMode<span class="token punctuation">.</span>value<span class="token punctuation">,</span> '</code></pre></div>]]></content>
    <category term="practice"/>
    <published>2024-01-13T00:00:00.000Z</published>
  </entry>
  <entry>
    <title type="text">centos 安装 docker</title>
    <id>https://dribble-njr.github.io/blog/blog/backend/linux/practice/005-install-docker.html</id>
    <link href="https://dribble-njr.github.io/blog/blog/backend/linux/practice/005-install-docker.html"/>
    <updated>2024-01-13T18:13:25.000Z</updated>
    <summary type="html"><![CDATA[<div class="hint-container tip">
<p class="hint-container-title">提示</p>
<p>需要保证 centos 版本：</p>
<ul>
<li>centos 7</li>
<li>centos 8</li>
<li>centos 9</li>
</ul>
</div>
<h2>卸载旧版本</h2>
<div class="hint-container warning">
<p class="hint-container-title">注意</p>
<p>必须先完成这一步，否则会出现不可预见的错误。</p>
</div>
<p>运行下列命令：</p>]]></summary>
    <content type="html"><![CDATA[<div class="hint-container tip">
<p class="hint-container-title">提示</p>
<p>需要保证 centos 版本：</p>
<ul>
<li>centos 7</li>
<li>centos 8</li>
<li>centos 9</li>
</ul>
</div>
<h2>卸载旧版本</h2>
<div class="hint-container warning">
<p class="hint-container-title">注意</p>
<p>必须先完成这一步，否则会出现不可预见的错误。</p>
</div>
<p>运行下列命令：</p>
<div class="language-bash" data-ext="sh" data-title="sh"><pre class="language-bash"><code><span class="token function">sudo</span> yum remove <span class="token function">docker</span> <span class="token punctuation">\</span>
                  docker-client <span class="token punctuation">\</span>
                  docker-client-latest <span class="token punctuation">\</span>
                  docker-common <span class="token punctuation">\</span>
                  docker-latest <span class="token punctuation">\</span>
                  docker-latest-logrotate <span class="token punctuation">\</span>
                  docker-logrotate <span class="token punctuation">\</span>
                  docker-engine
</code></pre></div><p>出现成功提示后即可。</p>
<h2>使用 rpm repository 安装</h2>
<h3>设置镜像</h3>
<p>安装 <code>yum-utils</code> 软件包（提供 <code>yum-config-manager</code> 实用工具）并设置软件源。</p>
<div class="language-bash" data-ext="sh" data-title="sh"><pre class="language-bash"><code><span class="token function">sudo</span> yum <span class="token function">install</span> <span class="token parameter variable">-y</span> yum-utils
<span class="token function">sudo</span> yum-config-manager --add-repo https://download.docker.com/linux/centos/docker-ce.repo
</code></pre></div><h3>安装 docker engin</h3>
<ol>
<li>安装最新版：</li>
</ol>

<ol start="2">
<li>启动 docker</li>
</ol>
<div class="language-bash" data-ext="sh" data-title="sh"><pre class="language-bash"><code><span class="token function">sudo</span> systemctl start <span class="token function">docker</span>
</code></pre></div><ol start="3">
<li>运行 <code>hello-world</code> 映像，验证 Docker Engine 安装是否成功。</li>
</ol>
<div class="language-bash" data-ext="sh" data-title="sh"><pre class="language-bash"><code><span class="token function">sudo</span> <span class="token function">docker</span> run hello-world
</code></pre></div><p>这条命令会下载一个测试镜像，并在一个容器中运行。当容器运行时，它会打印一条确认信息并退出。</p>
<div class="hint-container tip">
<p class="hint-container-title">提示</p>
<p>可以不去执行，只要安装过程不报错就表明成功。</p>
</div>
]]></content>
    <category term="linux"/>
    <published>2024-01-12T00:00:00.000Z</published>
  </entry>
  <entry>
    <title type="text">yeoman 基础使用</title>
    <id>https://dribble-njr.github.io/blog/blog/frontend/engineering/basic/005-yeoman.html</id>
    <link href="https://dribble-njr.github.io/blog/blog/frontend/engineering/basic/005-yeoman.html"/>
    <updated>2024-01-09T13:35:18.000Z</updated>
    <summary type="html"><![CDATA[<p>::: waring</p>
<p><code>yo@5.0.0</code> 引入了一个破坏性的更新，会导致 <a href="https://github.com/yeoman/generator-generator/issues/258" target="_blank" rel="noopener noreferrer">instantiatedGenerator.run is not a function</a>，需要降级到 <code>@4.x</code>。</p>
<p>降级后仍有报错，可能是 <code>generator-node</code> 的问题，垃圾项目没人维护。</p>]]></summary>
    <content type="html"><![CDATA[<p>::: waring</p>
<p><code>yo@5.0.0</code> 引入了一个破坏性的更新，会导致 <a href="https://github.com/yeoman/generator-generator/issues/258" target="_blank" rel="noopener noreferrer">instantiatedGenerator.run is not a function</a>，需要降级到 <code>@4.x</code>。</p>
<p>降级后仍有报错，可能是 <code>generator-node</code> 的问题，垃圾项目没人维护。</p>
<p>:::</p>
<p>Yeoman 是一个通用的脚手架系统，允许创建任何类型的应用程序。它可以快速启动新项目，并简化现有项目的维护工作。</p>
<p>Yeoman 与语言无关。它可以生成任何语言（Web、Java、Python、C# 等）的项目。</p>
<p>Yeoman 本身不做任何决定。所有决定都由生成器做出，而生成器基本上就是 Yeoman 环境中的插件。有很多公开可用的生成器，创建一个新的生成器来匹配任何工作流程也很容易。Yeoman 始终是满足脚手架需求的正确选择。</p>
<p>以下是一些常见的使用案例：</p>
<ul>
<li>快速创建新项目</li>
<li>创建项目的新部分，如带有单元测试的新控制器</li>
<li>创建模块或软件包</li>
<li>引导新服务</li>
<li>执行标准、最佳实践和风格指南</li>
<li>通过让用户使用示例应用程序来推广新项目</li>
<li>...</li>
</ul>
<h2>开始</h2>
<p><code>yo</code> 是一款 Yeoman 命令行实用程序，允许使用脚手架模板（简称为生成器）创建项目。使用 npm 安装 <code>yo</code> 和生成器：</p>
<div class="language-bash" data-ext="sh" data-title="sh"><pre class="language-bash"><code><span class="token function">npm</span> <span class="token function">install</span> <span class="token parameter variable">-g</span> yo
</code></pre></div><p>然后可以安装一些生成器：</p>
<div class="hint-container info">
<p class="hint-container-title">相关信息</p>
<p>可以在 <a href="https://yeoman.io/generators/" target="_blank" rel="noopener noreferrer">生成器</a> 中搜索想要的生成器。</p>
</div>
<div class="language-bash" data-ext="sh" data-title="sh"><pre class="language-bash"><code><span class="token function">npm</span> <span class="token function">install</span> <span class="token parameter variable">-g</span> generator-node
</code></pre></div><h2>基本脚手架</h2>
<p>搭建基本脚手架，只需要去除生成器前缀 <code>generator-</code>：</p>
<div class="language-bash" data-ext="sh" data-title="sh"><pre class="language-bash"><code>yo <span class="token function">node</span>
</code></pre></div><p>大多数生成器会提出一系列问题来定制新项目。要查看哪些选项可用，请使用 <code>help</code> 命令：</p>
<div class="language-bash" data-ext="sh" data-title="sh"><pre class="language-bash"><code>yo <span class="token function">node</span> <span class="token parameter variable">--help</span>
</code></pre></div><p>很多生成器都依赖于构建系统（如 Grunt 或 Gulp）和软件包管理器（如 npm 和 Bower）。请务必访问生成器的网站，了解运行和维护新应用程序的相关信息。运行以下命令即可轻松访问生成器的主页：</p>
<div class="language-bash" data-ext="sh" data-title="sh"><pre class="language-bash"><code><span class="token function">npm</span> home generator-node
</code></pre></div><p>为复杂框架搭建脚手架的生成器可能会提供额外的生成器，为项目的较小部分搭建脚手架。这些生成器通常被称为子生成器，访问方式为 <code>generator:sub-generator</code>。</p>
<p>以 <code>generator-node</code> 为例。一旦生成了完整的 node 应用程序，就可以添加其他功能。要在项目中添加新控制器，请运行控制器子生成器：</p>
<div class="language-bash" data-ext="sh" data-title="sh"><pre class="language-bash"><code>yo node:cli
</code></pre></div><h2>其他 yo 命令</h2>
<p>除了上一节介绍的基础知识，<code>yo</code> 还是一个完全交互式的工具。只需在终端键入 <code>yo</code>，就能看到一系列选项，用于管理与生成器有关的一切：运行、更新、安装、帮助和其他实用程序。</p>
<p><code>yo</code> 还提供以下命令。</p>
<ul>
<li><code>yo --help</code> 访问完整的帮助界面</li>
<li><code>yo --generators</code> 列出所有已安装的生成器</li>
<li><code>yo --version</code> 获取版本</li>
</ul>
<h2>故障排除</h2>
<p>大多数问题都可以通过运行：</p>
<div class="language-bash" data-ext="sh" data-title="sh"><pre class="language-bash"><code>yo doctor
</code></pre></div><p><code>doctor</code> 命令将诊断并提供解决最常见问题的步骤。</p>
]]></content>
    <category term="工程化"/>
    <published>2024-01-09T00:00:00.000Z</published>
  </entry>
  <entry>
    <title type="text">服务器设置 ssh 密钥登录</title>
    <id>https://dribble-njr.github.io/blog/blog/backend/linux/practice/001-set-the-ssh.html</id>
    <link href="https://dribble-njr.github.io/blog/blog/backend/linux/practice/001-set-the-ssh.html"/>
    <updated>2024-01-09T04:30:54.000Z</updated>
    <summary type="html"><![CDATA[<div class="hint-container tip">
<p class="hint-container-title">提示</p>
<p>使用密码登录服务器并不安全，因此我们需要设置密钥登录。</p>
</div>
<h2>创建密钥对</h2>
<p>登录阿里云控制台 -&gt; 云服务 ECS -&gt; 网络与安全 -&gt; 密钥对 -&gt; 创建密钥对。</p>
<figure><img src="https://raw.githubusercontent.com/dribble-njr/typora-njr/master/img/step1-create-ssh.png" alt="step1-create-ssh" tabindex="0" loading="lazy"><figcaption>step1-create-ssh</figcaption></figure>]]></summary>
    <content type="html"><![CDATA[<div class="hint-container tip">
<p class="hint-container-title">提示</p>
<p>使用密码登录服务器并不安全，因此我们需要设置密钥登录。</p>
</div>
<h2>创建密钥对</h2>
<p>登录阿里云控制台 -&gt; 云服务 ECS -&gt; 网络与安全 -&gt; 密钥对 -&gt; 创建密钥对。</p>
<figure><img src="https://raw.githubusercontent.com/dribble-njr/typora-njr/master/img/step1-create-ssh.png" alt="step1-create-ssh" tabindex="0" loading="lazy"><figcaption>step1-create-ssh</figcaption></figure>
<p>创建成功之后，浏览器会自动下载一个 <code>.pem</code> 私钥文件，记住这个文件的位置，之后要用。</p>
<h2>绑定密钥对</h2>
<p>选中刚才创建的密钥对，点击右侧<strong>绑定密钥对</strong>，将密钥对绑定到实例。</p>
<figure><img src="https://raw.githubusercontent.com/dribble-njr/typora-njr/master/img/step2-bind-ssh.png" alt="step2-bind-ssh" tabindex="0" loading="lazy"><figcaption>step2-bind-ssh</figcaption></figure>
<h2>添加安全组规则</h2>
<p>云服务 ECS -&gt; 网络与安全 -&gt; 安全组 -&gt; 入方向 -&gt; 手动添加。</p>
<figure><img src="https://raw.githubusercontent.com/dribble-njr/typora-njr/master/img/step3-add-port.png" alt="step3-add-port" tabindex="0" loading="lazy"><figcaption>step3-add-port</figcaption></figure>
<p>执行完后重启实例。</p>
<h2>密钥验证并禁用密码登录</h2>
<ol>
<li>
<p>安装 MobaXterm</p>
</li>
<li>
<p>在 MobaXterm 下输入命令（<a href="https://help.aliyun.com/document_detail/51798.html#title-7je-5ba-sm2" target="_blank" rel="noopener noreferrer">参考阿里云官网文档</a>）</p>
<div class="language-bash" data-ext="sh" data-title="sh"><pre class="language-bash"><code><span class="token function">chmod</span> <span class="token number">400</span> <span class="token punctuation">[</span>.pem私钥文件在本地机上的存储路径<span class="token punctuation">]</span>
</code></pre></div><div class="language-bash" data-ext="sh" data-title="sh"><pre class="language-bash"><code><span class="token function">ssh</span> <span class="token parameter variable">-i</span> <span class="token punctuation">[</span>.pem私钥文件在本地机上的存储路径<span class="token punctuation">]</span> root@<span class="token punctuation">[</span>公网IP地址<span class="token punctuation">]</span>
</code></pre></div></li>
<li>
<p>输入以下命令修改 config 文件</p>
<div class="language-bash" data-ext="sh" data-title="sh"><pre class="language-bash"><code><span class="token function">vi</span> /etc/ssh/sshd_config
</code></pre></div></li>
<li>
<p>按 <code>i</code> 进入编辑模式</p>
<div class="language-bash" data-ext="sh" data-title="sh"><pre class="language-bash"><code><span class="token comment">#禁用密码验证</span>
PasswordAuthentication no
<span class="token comment">#启用密钥验证</span>
PubkeyAuthentication <span class="token function">yes</span>
</code></pre></div></li>
<li>
<p>重启 ssh 服务</p>
<div class="language-bash" data-ext="sh" data-title="sh"><pre class="language-bash"><code><span class="token function">service</span> sshd restart
</code></pre></div></li>
</ol>
<p>接下来在阿里云控制台使用 Workbench 远程连接，可以发现密码登录已经被禁用了，只能使用密钥登录。</p>
<figure><img src="https://raw.githubusercontent.com/dribble-njr/typora-njr/master/img/step4-pw-fail.png" alt="step4-pw-fail" tabindex="0" loading="lazy"><figcaption>step4-pw-fail</figcaption></figure>
]]></content>
    <category term="linux"/>
    <published>2021-05-12T00:00:00.000Z</published>
  </entry>
  <entry>
    <title type="text">搭建 git 私服</title>
    <id>https://dribble-njr.github.io/blog/blog/backend/linux/practice/002-build-git-server.html</id>
    <link href="https://dribble-njr.github.io/blog/blog/backend/linux/practice/002-build-git-server.html"/>
    <updated>2024-01-09T04:30:54.000Z</updated>
    <summary type="html"><![CDATA[<div class="hint-container tip">
<p class="hint-container-title">提示</p>
<p><strong>git 私服作用：</strong></p>
<ul>
<li>自己电脑和公司（或者实验室）电脑随时同步资料</li>
<li>GitHub、Gitee 私有仓库都是限流的，文件一旦多了，或者有图片文件，<code>git pull</code> 的时候半天拉不下来</li>
<li>保存一些隐私文件</li>
</ul>
</div>
<h2>开始搭建</h2>
<ul>
<li>服务器：centos7.9</li>
<li>本地电脑: Windows10</li>
</ul>]]></summary>
    <content type="html"><![CDATA[<div class="hint-container tip">
<p class="hint-container-title">提示</p>
<p><strong>git 私服作用：</strong></p>
<ul>
<li>自己电脑和公司（或者实验室）电脑随时同步资料</li>
<li>GitHub、Gitee 私有仓库都是限流的，文件一旦多了，或者有图片文件，<code>git pull</code> 的时候半天拉不下来</li>
<li>保存一些隐私文件</li>
</ul>
</div>
<h2>开始搭建</h2>
<ul>
<li>服务器：centos7.9</li>
<li>本地电脑: Windows10</li>
</ul>
<p>如果服务器没装 git 可以使用以下命令安装：</p>
<div class="language-bash" data-ext="sh" data-title="sh"><pre class="language-bash"><code>yum <span class="token function">install</span> <span class="token function">git</span>
</code></pre></div><h2>创建 git 用户</h2>
<p>创建一个 Git 的 Linux 账户，这个账户只做 Git 私服的操作，之后就要设置 Linux Git 账户的密码，但由于我之前已经 ，因此不用设置密码。</p>
<div class="language-bash" data-ext="sh" data-title="sh"><pre class="language-bash"><code>adduser <span class="token function">git</span>
</code></pre></div><p><strong>后面所有的操作都在 git 用户下进行：</strong></p>
<div class="language-bash" data-ext="sh" data-title="sh"><pre class="language-bash"><code><span class="token punctuation">[</span>root@instance-5fcyjde7 ~<span class="token punctuation">]</span>su - <span class="token function">git</span>
</code></pre></div><p>看一下自己所在的目录，是不是在 git 目录下面：</p>
<div class="language-bash" data-ext="sh" data-title="sh"><pre class="language-bash"><code><span class="token punctuation">[</span>git@instance-5fcyjde7 ~<span class="token punctuation">]</span>$ <span class="token builtin class-name">pwd</span>
/home/git
</code></pre></div><h2>服务器端密钥管理</h2>
<p>创建 <code>.ssh</code> 目录，如果 <code>.ssh</code> 已经存在了，可以忽略这一项。方便每次操作 Git 仓库的时候不用再去输入密码。</p>
<div class="language-bash" data-ext="sh" data-title="sh"><pre class="language-bash"><code><span class="token builtin class-name">cd</span> ~/
<span class="token function">mkdir</span> .ssh
</code></pre></div><p>进入 <code>.ssh</code> 文件下，创建一个 <code>authorized_keys</code> 文件，并给 <code>authorized_keys</code> 文件设置权限。这个文件用来存放客户端的公钥。</p>
<div class="language-bash" data-ext="sh" data-title="sh"><pre class="language-bash"><code><span class="token builtin class-name">cd</span> ~/.ssh
<span class="token function">touch</span> authorized_keys
<span class="token function">chmod</span> <span class="token number">700</span> /home/git/.ssh
<span class="token function">chmod</span> <span class="token number">600</span> /home/git/.ssh/authorized_keys
</code></pre></div><p>接下来要把客户端的公钥放在 Git 服务器上，我们再回到客户端，创建一个公钥。</p>
<p>在我们自己的电脑上，有公钥和私钥。两个文件分别是：<code>id_rsa</code> 和 <code>id_rsa.pub</code>。</p>
<p>如果是 Windows 系统公钥私钥的目录在 <code>C:\Users\用户名.ssh</code> 下。</p>
<p>如果是 Mac 或者 Linux， 公钥和私钥的目录这里 <code>cd ~/.ssh/</code>， 如果发现自己的电脑上没有公钥私钥，那就自己创建一个。</p>
<p>创建密钥的命令：</p>
<div class="language-bash" data-ext="sh" data-title="sh"><pre class="language-bash"><code>ssh-keygen <span class="token parameter variable">-t</span> rsa
</code></pre></div><p>创建密钥的过程中，一路点击回车就可以了，不需要填任何东西。把刚刚生成的 <code>id_rsa.pub</code>，拷贝到 Git 服务器的 <code>/home/git/.ssh/</code> 目录。</p>
<p>在 Git 服务器上，将公钥添加到 <code>authorized_keys</code> 文件中：</p>
<div class="language-bash" data-ext="sh" data-title="sh"><pre class="language-bash"><code><span class="token builtin class-name">cd</span> /home/git/.ssh/
<span class="token function">cat</span> id_rsa.pub <span class="token operator">&gt;&gt;</span> authorized_keys
</code></pre></div><p>在客户直接登录 Git 服务器，验证是否配置成功：</p>
<div class="language-bash" data-ext="sh" data-title="sh"><pre class="language-bash"><code><span class="token function">ssh</span> git@git 服务器 <span class="token function">ip</span>
<span class="token comment"># 例如：</span>
<span class="token function">ssh</span> git@127.0.0.1
</code></pre></div><p>如果可以免密登录，那就说明服务器端密钥配置成功了。</p>
<p>在这里我还出现了一个错误：</p>
<div class="language-bash" data-ext="sh" data-title="sh"><pre class="language-bash"><code>@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@
@    WARNING: REMOTE HOST IDENTIFICATION HAS CHANGED<span class="token operator">!</span>     @
@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@
IT IS POSSIBLE THAT SOMEONE IS DOING SOMETHING NASTY<span class="token operator">!</span>
Someone could be eavesdropping on you right now <span class="token punctuation">(</span>man-in-the-middle attack<span class="token punctuation">)</span><span class="token operator">!</span>
It is also possible that a <span class="token function">host</span> key has just been changed.
The fingerprint <span class="token keyword">for</span> the RSA key sent by the remote <span class="token function">host</span> is
<span class="token number">51</span>:82:00:1c:7e:6f:ac:ac:de:f1:53:08:1c:7d:55:68.
Please contact your system administrator.
Add correct <span class="token function">host</span> key <span class="token keyword">in</span> /Users/isaacalves/.ssh/known_hosts to get rid of this message.
Offending RSA key <span class="token keyword">in</span> /Users/isaacalves/.ssh/known_hosts:12
RSA <span class="token function">host</span> key <span class="token keyword">for</span> <span class="token number">104.131</span>.16.158 has changed and you have requested strict checking.
Host key verification failed.
</code></pre></div><p>出现这个错误的原因是因为我更新了 <code>ssh key</code>，使用以下命令删除无效的 key 即可：</p>
<div class="language-bash" data-ext="sh" data-title="sh"><pre class="language-bash"><code>ssh-keygen <span class="token parameter variable">-R</span> <span class="token string">"服务器 ip"</span>
</code></pre></div><h2>服务器端部署 Git 仓库</h2>
<p>接下来在服务器上部署 git 仓库。</p>
<p>登录到 Git 服务器端，切换为 Git 账户。如果是 root 账户切换成 Git 账户：</p>
<div class="language-bash" data-ext="sh" data-title="sh"><pre class="language-bash"><code><span class="token function">su</span> - <span class="token function">git</span>
</code></pre></div><p>如果是其他账户切换为 Git 账户：</p>
<div class="language-bash" data-ext="sh" data-title="sh"><pre class="language-bash"><code><span class="token function">sudo</span> <span class="token function">su</span> - <span class="token function">git</span>
</code></pre></div><p>进入 git 目录下：</p>
<div class="language-bash" data-ext="sh" data-title="sh"><pre class="language-bash"><code><span class="token builtin class-name">cd</span> ~/git
</code></pre></div><p>创建一个文件夹名为 <code>world.git</code>，<code>.git</code> 后缀表明这是一个 git 仓库而不是别的什么文件。</p>
<div class="language-bash" data-ext="sh" data-title="sh"><pre class="language-bash"><code><span class="token punctuation">[</span>git@localhost git<span class="token punctuation">]</span><span class="token comment"># mkdir world.git</span>
<span class="token punctuation">[</span>git@localhost git<span class="token punctuation">]</span><span class="token comment"># cd word.git</span>
</code></pre></div><p>初始化 word 仓库：</p>
<div class="language-bash" data-ext="sh" data-title="sh"><pre class="language-bash"><code><span class="token function">git</span> init <span class="token parameter variable">--bare</span>
</code></pre></div><p>如果想创建多个仓库，就在 <strong>git</strong> 用户下的 <code>~/git</code> 目录创建多个文件夹并<strong>初始化</strong>就可以了。</p>
<p>现在服务端的 Git 仓库就部署完了，接下来就能像平时使用 github 一样使用这个 Git 私服了。</p>
<h2>客户端连接远程仓库</h2>
<p>在自己的电脑上创建一个文件夹也叫做 <code>world</code>。</p>
<div class="hint-container tip">
<p class="hint-container-title">提示</p>
<p>其实这里命名是随意的，但是我们为了和 Git 服务端的仓库名称保持同步。这样更直观我们操作的是哪一个仓库。</p>
</div>
<div class="language-bash" data-ext="sh" data-title="sh"><pre class="language-bash"><code><span class="token function">mkdir</span> world
<span class="token builtin class-name">cd</span> world
</code></pre></div><p>进入 <code>world</code> 文件，并初始化操作：</p>
<div class="language-bash" data-ext="sh" data-title="sh"><pre class="language-bash"><code><span class="token builtin class-name">cd</span> world
<span class="token function">git</span> init
</code></pre></div><p>在 <code>world</code> 目录上创建一个测试文件，并且将其添加到 Git 私服中：</p>
<div class="language-bash" data-ext="sh" data-title="sh"><pre class="language-bash"><code><span class="token function">touch</span> <span class="token builtin class-name">test</span>
<span class="token function">git</span> <span class="token function">add</span> <span class="token builtin class-name">test</span>
<span class="token function">git</span> commit <span class="token parameter variable">-m</span> <span class="token string">"test git server"</span>
</code></pre></div><p>将本地仓库和远端仓库同步：</p>
<div class="language-bash" data-ext="sh" data-title="sh"><pre class="language-bash"><code><span class="token function">git</span> remote <span class="token function">add</span> origin git@服务器 ip:world.git
<span class="token function">git</span> push <span class="token parameter variable">-u</span> origin master
</code></pre></div><p>此时这个 <code>test</code> 测试文件就已经提交到我们的 Git 远端私服上了。</p>
<h2>参考链接</h2>
<ul>
<li><a href="https://mp.weixin.qq.com/s/8m5zK29sX0D9NM_YB8KDNQ" target="_blank" rel="noopener noreferrer">手把手来搭建 Git 私服！</a></li>
<li><a href="https://www.digitalocean.com/community/questions/warning-remote-host-identification-has-changed" target="_blank" rel="noopener noreferrer">WARNING: REMOTE HOST IDENTIFICATION HAS CHANGED</a></li>
</ul>
]]></content>
    <category term="linux"/>
    <published>2021-05-12T00:00:00.000Z</published>
  </entry>
  <entry>
    <title type="text">配置宝塔面板</title>
    <id>https://dribble-njr.github.io/blog/blog/backend/linux/practice/003-configure-bt.html</id>
    <link href="https://dribble-njr.github.io/blog/blog/backend/linux/practice/003-configure-bt.html"/>
    <updated>2024-01-09T04:30:54.000Z</updated>
    <summary type="html"><![CDATA[<div class="hint-container tip">
<p class="hint-container-title">提示</p>
<p>服务器系统：centos 7.9。</p>
<p>其他系统可以参照 <a href="https://www.bt.cn/bbs/thread-19376-1-1.html" target="_blank" rel="noopener noreferrer">官网</a> 进行搭建。</p>
<p>为了方便一键配置部署环境，因此选择宝塔面板。</p>
</div>
<h2>安装宝塔面板</h2>
<div class="language-bash" data-ext="sh" data-title="sh"><pre class="language-bash"><code>yum <span class="token function">install</span> <span class="token parameter variable">-y</span> <span class="token function">wget</span> <span class="token operator">&amp;&amp;</span> <span class="token function">wget</span> <span class="token parameter variable">-O</span> install.sh http://download.bt.cn/install/install_6.0.sh <span class="token operator">&amp;&amp;</span> <span class="token function">sh</span> install.sh
</code></pre></div>]]></summary>
    <content type="html"><![CDATA[<div class="hint-container tip">
<p class="hint-container-title">提示</p>
<p>服务器系统：centos 7.9。</p>
<p>其他系统可以参照 <a href="https://www.bt.cn/bbs/thread-19376-1-1.html" target="_blank" rel="noopener noreferrer">官网</a> 进行搭建。</p>
<p>为了方便一键配置部署环境，因此选择宝塔面板。</p>
</div>
<h2>安装宝塔面板</h2>
<div class="language-bash" data-ext="sh" data-title="sh"><pre class="language-bash"><code>yum <span class="token function">install</span> <span class="token parameter variable">-y</span> <span class="token function">wget</span> <span class="token operator">&amp;&amp;</span> <span class="token function">wget</span> <span class="token parameter variable">-O</span> install.sh http://download.bt.cn/install/install_6.0.sh <span class="token operator">&amp;&amp;</span> <span class="token function">sh</span> install.sh
</code></pre></div><p>大概过两分钟即可安装成功，复制外网面板地址到浏览器打开，输入下面的 <code>username</code> 和 <code>password</code>。进去之后会弹出 <code>推荐安装套件</code>，因为只要部署 <code>vuepress</code>， 因此这里安装 <code>nginx</code> 就好。选择编译安装，更加稳定。</p>
<figure><img src="https://raw.githubusercontent.com/dribble-njr/typora-njr/master/img/step1-install-bt.png" alt="step1-install-bt" tabindex="0" loading="lazy"><figcaption>step1-install-bt</figcaption></figure>
<figure><img src="https://raw.githubusercontent.com/dribble-njr/typora-njr/master/img/step2-install-nginx.png" alt="step2-install-nginx" tabindex="0" loading="lazy"><figcaption>step2-install-nginx</figcaption></figure>
<p>如果之后忘记用户名和密码，可以通过以下命令查找：</p>
<div class="language-bash" data-ext="sh" data-title="sh"><pre class="language-bash"><code><span class="token punctuation">[</span>root@xxxx ~<span class="token punctuation">]</span><span class="token comment"># bt</span>
<span class="token punctuation">[</span>root@xxxx ~<span class="token punctuation">]</span><span class="token comment"># 14</span>
</code></pre></div><h2>参考链接</h2>
<ul>
<li><a href="https://www.bt.cn/bbs/thread-19376-1-1.html" target="_blank" rel="noopener noreferrer">宝塔 Linux 面板安装教程</a></li>
<li><a href="https://www.bilibili.com/video/BV12T4y1N7T9?from=search&amp;seid=2220018938681661072&amp;spm_id_from=333.337.0.0" target="_blank" rel="noopener noreferrer">阿里云服务器 ECS 新手搭建网站视频教程（详细版）</a></li>
</ul>
]]></content>
    <category term="linux"/>
    <published>2021-05-12T00:00:00.000Z</published>
  </entry>
  <entry>
    <title type="text">自动部署 Vuepress 到服务器</title>
    <id>https://dribble-njr.github.io/blog/blog/backend/linux/practice/004-automated-deployment.html</id>
    <link href="https://dribble-njr.github.io/blog/blog/backend/linux/practice/004-automated-deployment.html"/>
    <updated>2024-01-09T04:30:54.000Z</updated>
    <summary type="html"><![CDATA[<div class="hint-container tip">
<p class="hint-container-title">提示</p>
<p>服务器：centos 7.9</p>
<p>本地电脑：Windows 10</p>
</div>
<h2>服务器端</h2>
<h3>配置 nginx</h3>
<p>登录宝塔面板，可以参考 。点击左侧网站 -&gt; 添加站点。</p>
<figure><img src="https://raw.githubusercontent.com/dribble-njr/typora-njr/master/img/step1-add-site.png" alt="step1-add-site" tabindex="0" loading="lazy"><figcaption>step1-add-site</figcaption></figure>]]></summary>
    <content type="html"><![CDATA[<div class="hint-container tip">
<p class="hint-container-title">提示</p>
<p>服务器：centos 7.9</p>
<p>本地电脑：Windows 10</p>
</div>
<h2>服务器端</h2>
<h3>配置 nginx</h3>
<p>登录宝塔面板，可以参考 。点击左侧网站 -&gt; 添加站点。</p>
<figure><img src="https://raw.githubusercontent.com/dribble-njr/typora-njr/master/img/step1-add-site.png" alt="step1-add-site" tabindex="0" loading="lazy"><figcaption>step1-add-site</figcaption></figure>
<p>新增之后，点击设置 -&gt; 配置文件。这三项按自己的情况配置，在后面  中会将 dist 文件推送到 <code>root</code> 配置项设置的文件夹下。</p>
<figure><img src="https://raw.githubusercontent.com/dribble-njr/typora-njr/master/img/step2-nginx-conf.png" alt="step2-nginx-conf" tabindex="0" loading="lazy"><figcaption>step2-nginx-conf</figcaption></figure>
<p>先测试下 nginx 有没有配置成功，本地打包文件：</p>
<div class="language-bash" data-ext="sh" data-title="sh"><pre class="language-bash"><code><span class="token function">yarn</span> build
</code></pre></div><p>然后将生成的 <code>dist</code> 文件里的内容复制到刚才设置的项目根目录下。</p>
<p>接着输入 <code>http://xxx.xxx.xxx.xxx:端口号</code>，就能访问成功了。</p>
<div class="hint-container tip">
<p class="hint-container-title">提示</p>
<p>地址得用 http 协议，因为我们还没有配置 ssl 证书。</p>
</div>
<h3>配置 git 仓库</h3>
<p>在  中已经搭建好了 git 私服，因此只需要初始化 <code>vuepress.git</code> 仓库即可。</p>
<div class="language-bash" data-ext="sh" data-title="sh"><pre class="language-bash"><code><span class="token builtin class-name">cd</span> /home/git
<span class="token function">mkdir</span> vuepress.git
<span class="token builtin class-name">cd</span> vuepress.git
<span class="token function">git</span> init <span class="token parameter variable">--bare</span> vuepress.git
</code></pre></div><h3>配置 hooks</h3>
<p>先切换到 root 用户（<code>ctrl + d</code>），在 home 文件夹下创建一个临时存放 dist 文件夹的地方。</p>
<div class="hint-container tip">
<p class="hint-container-title">提示</p>
<p>我这里选择存放到 home 文件夹下，但是 git 用户是没有权限的，因此切换到 root 用户，也可以存放到其他文件夹。</p>
</div>
<div class="language-bash" data-ext="sh" data-title="sh"><pre class="language-bash"><code><span class="token builtin class-name">cd</span> /home
<span class="token function">mkdir</span> tmp
<span class="token builtin class-name">cd</span> tmp
<span class="token function">mkdir</span> vuepress
</code></pre></div><p>接着将文件的所有权换成 git：</p>
<div class="language-bash" data-ext="sh" data-title="sh"><pre class="language-bash"><code><span class="token function">sudo</span> <span class="token function">chown</span> git:git <span class="token parameter variable">-R</span> vuepress
</code></pre></div><p>然后，有一个关键的地方，要将 <code>/www/wwwroot</code> 的所有权换成 git：</p>
<div class="language-bash" data-ext="sh" data-title="sh"><pre class="language-bash"><code><span class="token function">sudo</span> <span class="token function">chown</span> git:git /www/wwwroot
</code></pre></div><p>做好这些准备之后，就可以开始配置 <code>hooks</code> 了。</p>
<div class="language-bash" data-ext="sh" data-title="sh"><pre class="language-bash"><code><span class="token builtin class-name">cd</span> /home/git/vuepress.git/hooks
<span class="token comment"># 通过 copy 新建 post-update 文件</span>
<span class="token function">cp</span> post-update.sample post-update
<span class="token function">vim</span> post-update
</code></pre></div><p>接着将下面代码复制进去：</p>
<div class="language-bash" data-ext="sh" data-title="sh"><pre class="language-bash"><code><span class="token builtin class-name">echo</span> <span class="token string">"auto deploy start ==================================="</span>
<span class="token builtin class-name">unset</span> GIT_DIR

<span class="token comment"># 项目文件夹</span>
<span class="token assign-left variable">PUBLIC_WWW</span><span class="token operator">=</span>/www/wwwroot/vuepress
<span class="token comment"># git 仓库文件夹</span>
<span class="token assign-left variable">GIT_REPO</span><span class="token operator">=</span>/home/git/vuepress.git
<span class="token comment"># 临时文件夹</span>
<span class="token assign-left variable">TMP_GIT_CLONE</span><span class="token operator">=</span>/home/tmp/vuepress

<span class="token comment"># 移除临时文件夹</span>
<span class="token function">rm</span> <span class="token parameter variable">-rf</span> <span class="token variable">${TMP_GIT_CLONE}</span>
<span class="token comment"># 克隆 git 仓库到临时文件夹</span>
<span class="token function">git</span> clone <span class="token variable">$GIT_REPO</span> <span class="token variable">$TMP_GIT_CLONE</span>
<span class="token comment"># 移除项目文件夹</span>
<span class="token comment"># 宝塔为了安全，为自动在项目文件夹下新增 .user.ini 文件</span>
<span class="token comment"># 需要先关闭这个文件的功能才能删除项目文件夹</span>
<span class="token builtin class-name">cd</span> <span class="token variable">${PUBLIC_WWW}</span>
chattr <span class="token parameter variable">-i</span> .user.ini
<span class="token function">rm</span> <span class="token parameter variable">-rf</span> <span class="token variable">${PUBLIC_WWW}</span>
<span class="token comment"># 将临时文件夹复制到项目文件夹</span>
<span class="token function">cp</span> <span class="token parameter variable">-rf</span> <span class="token variable">${TMP_GIT_CLONE}</span> <span class="token variable">${PUBLIC_WWW}</span>

<span class="token builtin class-name">echo</span> <span class="token string">"auto deploy end ===================================="</span>
</code></pre></div><p>现在服务器端的准备工作已经完成了，接下来看看本地电脑的配置。</p>
<h2>本地电脑</h2>
<p>在本地项目根目录下新建 <code>deploy.sh</code> 脚本文件，内容如下：</p>
<div class="language-bash" data-ext="sh" data-title="sh"><pre class="language-bash"><code><span class="token shebang important">#!/usr/bin/env sh</span>

<span class="token comment"># 确保脚本抛出遇到的错误</span>
<span class="token builtin class-name">set</span> <span class="token parameter variable">-e</span>

<span class="token comment"># 生成静态文件</span>
<span class="token function">yarn</span> build

<span class="token comment"># 进入生成的文件夹</span>
<span class="token builtin class-name">cd</span> docs/.vuepress/dist

<span class="token comment"># 初始化 git 仓库，并提交修改</span>
<span class="token function">git</span> init
<span class="token function">git</span> <span class="token function">add</span> <span class="token parameter variable">-A</span>
<span class="token function">git</span> commit <span class="token parameter variable">-m</span> <span class="token string">'deploy'</span>

<span class="token comment"># 发布到 git 私服， -f 强制覆盖</span>
<span class="token function">git</span> remote <span class="token function">add</span> origin git@119.23.65.118:/home/git/vuepress.git
<span class="token function">git</span> push <span class="token parameter variable">-f</span> git@119.23.65.118:/home/git/vuepress.git master

<span class="token builtin class-name">cd</span> -
</code></pre></div><div class="hint-container tip">
<p class="hint-container-title">提示</p>
<p>了解更多 git 命令，可以查询<a href="https://git-scm.com/docs" target="_blank" rel="noopener noreferrer">官方文档</a>。</p>
</div>
<h2>测试</h2>
<p>vscode 终端中输入 <code>sh depoly.sh</code>，报错：</p>
<div class="language-bash" data-ext="sh" data-title="sh"><pre class="language-bash"><code><span class="token function">sh</span> <span class="token builtin class-name">:</span> 无法将“sh”项识别为 cmdlet、函数、脚本文件或可运行程序的名称。
请检查名称的拼写，如果包括路径，请确保路径正确，然后再试一次。
</code></pre></div><p>了解到 windows 上可以使用 git bash 执行 shell 脚本，但我可不想每次执行的时候都打开 git bash，当然得找如何在 vscode 中执行 shell 脚本的办法。</p>
<ol>
<li>首先得在 vscode 中安装 code runner，之前一直用它来调试力扣上的题，已经安装过了。</li>
<li>安装 git bash，这个不用说，安装 git 的时候就已经有了</li>
<li>配置 bash 环境，找到 bash.exe 的安装目录，将它的位置添加到系统的环境变量中。</li>
<li>配置 code runner：文件 -&gt; 首选项 -&gt; 设置 -&gt; 搜索 code runner</li>
<li>打开终端，输入 <code>bash</code> 切换到 bash 环境，点击右上角的三角形即可运行。</li>
</ol>
<figure><img src="https://raw.githubusercontent.com/dribble-njr/typora-njr/master/img/step3-code-runner.png" alt="step3-code-runner" tabindex="0" loading="lazy"><figcaption>step3-code-runner</figcaption></figure>
<p>现在随便更新点内容，并执行 <code>deploy.sh</code> 脚本：</p>
<figure><img src="https://raw.githubusercontent.com/dribble-njr/typora-njr/master/img/step4-complete.png" alt="step4-complete" tabindex="0" loading="lazy"><figcaption>step4-complete</figcaption></figure>
<p>再次访问 <code>http://xxx.xxx.xxx.xxx:端口号</code> 发现已经更新了。</p>
<h2>参考链接</h2>
<ul>
<li><a href="http://chanwingwah.info/article/604eb2273c8ec67668f6fd41" target="_blank" rel="noopener noreferrer">只需三步， 部署 Vuepress 并实现本地一行命令更新部署到服务器</a></li>
<li><a href="https://www.imqianduan.com/git-svn/335.html" target="_blank" rel="noopener noreferrer">使用 git hooks(post-receive)实现简单的远程自动部署</a></li>
<li><a href="https://hjxlog.com/posts/20191130a1.html#7-%E9%85%8D%E7%BD%AENginx" target="_blank" rel="noopener noreferrer">将 Hexo 部署到阿里云轻量服务器（保姆级教程）</a></li>
<li><a href="https://www.cnblogs.com/yongdaimi/p/15247771.html" target="_blank" rel="noopener noreferrer">VSCode: Windows 下配置 VSCode 运行 shell</a></li>
</ul>
]]></content>
    <category term="linux"/>
    <published>2021-05-12T00:00:00.000Z</published>
  </entry>
  <entry>
    <title type="text">图片批注</title>
    <id>https://dribble-njr.github.io/blog/blog/frontend/practice/002-annotation.html</id>
    <link href="https://dribble-njr.github.io/blog/blog/frontend/practice/002-annotation.html"/>
    <updated>2024-07-10T03:00:38.000Z</updated>
    <summary type="html"><![CDATA[<div class="hint-container info">
<p class="hint-container-title">相关信息</p>
<p>demo: <a href="https://codesandbox.io/p/sandbox/image-annotation-pht676?file=%2Fsrc%2FApp.js%3A210%2C56" target="_blank" rel="noopener noreferrer">https://codesandbox.io/p/sandbox/image-annotation-pht676?file=%2Fsrc%2FApp.js%3A210%2C56</a></p>
</div>]]></summary>
    <content type="html"><![CDATA[<div class="hint-container info">
<p class="hint-container-title">相关信息</p>
<p>demo: <a href="https://codesandbox.io/p/sandbox/image-annotation-pht676?file=%2Fsrc%2FApp.js%3A210%2C56" target="_blank" rel="noopener noreferrer">https://codesandbox.io/p/sandbox/image-annotation-pht676?file=%2Fsrc%2FApp.js%3A210%2C56</a></p>
</div>
<p>实现图片批注有两种方案，一种是通过 <code>SVG</code> 绘制，一种是通过 <code>Canvas</code> 绘制。以下是两者对比：</p>
<p>| 特点       | Canvas                           | SVG                                 |<br>
|</p>
]]></content>
    <category term="practice"/>
    <published>2023-12-28T00:00:00.000Z</published>
  </entry>
  <entry>
    <title type="text">常见文件上传场景</title>
    <id>https://dribble-njr.github.io/blog/blog/frontend/practice/003-file-upload.html</id>
    <link href="https://dribble-njr.github.io/blog/blog/frontend/practice/003-file-upload.html"/>
    <updated>2024-01-07T10:18:51.000Z</updated>
    <summary type="html"><![CDATA[<p>文件上传是前端开发中常见的需求，不管业务如何复杂，最关键的步骤在于如何获取文件数据，这里介绍几种常见的文件上传场景。</p>
<ul>
<li>选择上传</li>
<li>拖拽上传</li>
<li>粘贴上传</li>
</ul>
<h2>选择上传</h2>
<h3>单文件</h3>
<p>通过 <code>input</code> 标签的 <code>type</code> 属性设置为 <code>file</code>，然后监听 <code>change</code> 事件，获取文件数据。</p>

<h3>多文件</h3>
<p>通过 <code>input</code> 标签的 <code>multiple</code> 属性设置为 <code>true</code>，然后监听 <code>change</code> 事件，获取文件数据。</p>]]></summary>
    <content type="html"><![CDATA[<p>文件上传是前端开发中常见的需求，不管业务如何复杂，最关键的步骤在于如何获取文件数据，这里介绍几种常见的文件上传场景。</p>
<ul>
<li>选择上传</li>
<li>拖拽上传</li>
<li>粘贴上传</li>
</ul>
<h2>选择上传</h2>
<h3>单文件</h3>
<p>通过 <code>input</code> 标签的 <code>type</code> 属性设置为 <code>file</code>，然后监听 <code>change</code> 事件，获取文件数据。</p>

<h3>多文件</h3>
<p>通过 <code>input</code> 标签的 <code>multiple</code> 属性设置为 <code>true</code>，然后监听 <code>change</code> 事件，获取文件数据。</p>

<h3>目录上传</h3>
<p>通过 <code>input</code> 标签的 <code>webkitdirectory</code> 属性设置为 <code>true</code>，然后监听 <code>change</code> 事件，获取文件数据。</p>

<h2>拖拽上传</h2>
<p>选择上传获取文件数据比较简单，下面来看最复杂的文件拖拽上传。</p>
<p>使用 <a href="https://developer.mozilla.org/zh-CN/docs/Web/API/HTML_Drag_and_Drop_API" target="_blank" rel="noopener noreferrer">HTML Drag and Drop API</a> 实现拖拽上传，主要涉及到以下几个事件：</p>
<ul>
<li><code>dragenter</code>：拖拽元素进入目标元素时触发；</li>
<li><code>dragover</code>：拖拽元素在目标元素上移动时触发（每 100 毫秒触发一次）；</li>
<li><code>dragleave</code>：拖拽元素离开目标元素时触发；</li>
<li><code>drop</code>：拖拽元素在目标元素上释放时触发。</li>
</ul>
<h3>实现拖拽区域交互</h3>
<p>首先实现拖拽区域的交互，当拖拽元素进入目标元素时，目标元素的边框变色。</p>
<p>仅需要设置一个 <code>drag-enter</code> 类，当拖拽元素进入目标元素时，添加该类，离开时移除该类。</p>

<h3>DataTransfer</h3>
<p><code>DataTransfer</code> 对象用于保存拖动并放下过程中的数据。当拖拽元素在目标元素上释放时，需要监听 <code>onDrop</code> 事件，获取 <code>event.dataTransfer.items</code>。</p>
<p><a href="https://developer.mozilla.org/zh-CN/docs/Web/API/DataTransfer" target="_blank" rel="noopener noreferrer"><code>DataTransfer</code></a> 接口定义了一些方法和属性：</p>
<div class="language-typescript" data-ext="ts" data-title="ts"><pre class="language-typescript"><code><span class="token keyword">interface</span> <span class="token class-name">DataTransfer</span> <span class="token punctuation">{</span>
  <span class="token doc-comment comment">/**
   * 获取当前选定的拖放操作类型或者设置的为一个新的类型。值必须为 none, copy, link 或 move。
   *
   * [MDN Reference](https://developer.mozilla.org/docs/Web/API/DataTransfer/dropEffect)
   */</span>
  dropEffect<span class="token operator">:</span> <span class="token string">'none'</span> <span class="token operator">|</span> <span class="token string">'copy'</span> <span class="token operator">|</span> <span class="token string">'link'</span> <span class="token operator">|</span> <span class="token string">'move'</span>
  <span class="token doc-comment comment">/**
   * 提供所有可用的操作类型。必须是 none, copy, copyLink, copyMove, link, linkMove, move, all or uninitialized 之一。
   *
   * [MDN Reference](https://developer.mozilla.org/docs/Web/API/DataTransfer/effectAllowed)
   */</span>
  effectAllowed<span class="token operator">:</span>
    <span class="token operator">|</span> <span class="token string">'none'</span>
    <span class="token operator">|</span> <span class="token string">'copy'</span>
    <span class="token operator">|</span> <span class="token string">'copyLink'</span>
    <span class="token operator">|</span> <span class="token string">'copyMove'</span>
    <span class="token operator">|</span> <span class="token string">'link'</span>
    <span class="token operator">|</span> <span class="token string">'linkMove'</span>
    <span class="token operator">|</span> <span class="token string">'move'</span>
    <span class="token operator">|</span> <span class="token string">'all'</span>
    <span class="token operator">|</span> <span class="token string">'uninitialized'</span>
  <span class="token doc-comment comment">/**
   * 包含数据传输中可用的所有本地文件的列表。如果拖动操作不涉及拖动文件，则此属性为空列表。
   *
   * [MDN Reference](https://developer.mozilla.org/docs/Web/API/DataTransfer/files)
   */</span>
  <span class="token keyword">readonly</span> files<span class="token operator">:</span> FileList
  <span class="token doc-comment comment">/**
   * 提供一个包含所有拖动数据列表的 DataTransferItemList 对象。
   *
   * [MDN Reference](https://developer.mozilla.org/docs/Web/API/DataTransfer/items)
   */</span>
  <span class="token keyword">readonly</span> items<span class="token operator">:</span> DataTransferItemList
  <span class="token doc-comment comment">/**
   * 一个提供 dragstart 事件中设置的格式的 strings 数组。
   *
   * [MDN Reference](https://developer.mozilla.org/docs/Web/API/DataTransfer/types)
   */</span>
  <span class="token keyword">readonly</span> types<span class="token operator">:</span> ReadonlyArray<span class="token operator">&lt;</span><span class="token builtin">string</span><span class="token operator">&gt;</span>
  <span class="token doc-comment comment">/**
   * 删除与给定类型关联的数据。类型参数是可选的。如果类型为空或未指定，则删除与所有类型关联的数据。如果指定类型的数据不存在，或者 data transfer 中不包含任何数据，则该方法不会产生任何效果。
   *
   * [MDN Reference](https://developer.mozilla.org/docs/Web/API/DataTransfer/clearData)
   */</span>
  <span class="token function">clearData</span><span class="token punctuation">(</span>format<span class="token operator">?</span><span class="token operator">:</span> <span class="token builtin">string</span><span class="token punctuation">)</span><span class="token operator">:</span> <span class="token keyword">void</span>
  <span class="token doc-comment comment">/**
   * 检索给定类型的数据，如果该类型的数据不存在或 data transfer 不包含数据，则返回空字符串。
   *
   * [MDN Reference](https://developer.mozilla.org/docs/Web/API/DataTransfer/getData)
   */</span>
  <span class="token function">getData</span><span class="token punctuation">(</span>format<span class="token operator">:</span> <span class="token builtin">string</span><span class="token punctuation">)</span><span class="token operator">:</span> <span class="token builtin">string</span>
  <span class="token doc-comment comment">/**
   * 设置给定类型的数据。如果该类型的数据不存在，则将其添加到末尾，以便类型列表中的最后一项将是新的格式。如果该类型的数据已经存在，则在相同位置替换现有数据。
   *
   * [MDN Reference](https://developer.mozilla.org/docs/Web/API/DataTransfer/setData)
   */</span>
  <span class="token function">setData</span><span class="token punctuation">(</span>format<span class="token operator">:</span> <span class="token builtin">string</span><span class="token punctuation">,</span> data<span class="token operator">:</span> <span class="token builtin">string</span><span class="token punctuation">)</span><span class="token operator">:</span> <span class="token keyword">void</span>
  <span class="token doc-comment comment">/**
   * 用于设置自定义的拖动图像。
   *
   * [MDN Reference](https://developer.mozilla.org/docs/Web/API/DataTransfer/setDragImage)
   */</span>
  <span class="token function">setDragImage</span><span class="token punctuation">(</span>image<span class="token operator">:</span> Element<span class="token punctuation">,</span> x<span class="token operator">:</span> <span class="token builtin">number</span><span class="token punctuation">,</span> y<span class="token operator">:</span> <span class="token builtin">number</span><span class="token punctuation">)</span><span class="token operator">:</span> <span class="token keyword">void</span>
<span class="token punctuation">}</span>
</code></pre></div><div class="hint-container warning">
<p class="hint-container-title">注意</p>
<p><code>DataTransfer.files</code> 属性只能返回文件列表，因此当拖动文件夹时，只能查看一个文件夹信息。</p>
<p>因此如果拖拽文件夹，需要使用 <code>dataTransfer.items</code>，该属性包含一个 <code>DataTransferItem</code> 数组。</p>
</div>
<div class="language-diff" data-ext="diff" data-title="diff"><pre class="language-diff"><code><span class="token unchanged"><span class="token prefix unchanged"> </span><span class="token line"> const handleDrop = (e) =&gt; {
</span><span class="token prefix unchanged"> </span><span class="token line">   e.preventDefault()
</span><span class="token prefix unchanged"> </span><span class="token line">   setDragEnter(false)
</span></span><span class="token inserted-sign inserted"><span class="token prefix inserted">+</span><span class="token line">   getFileData(e.dataTransfer.items)
</span></span><span class="token unchanged"><span class="token prefix unchanged"> </span><span class="token line"> }
</span></span></code></pre></div><h3>获取文件路径</h3>
<p><code>DataTransferItemList</code> 数组中包含 <code>DataTransferItem</code> 元素，拖拽几个文件或文件夹则会包含多少个 <code>DataTransferItem</code> 对象。</p>
<p><a href="https://developer.mozilla.org/zh-CN/docs/Web/API/DataTransferItem" target="_blank" rel="noopener noreferrer"><code>DataTransferItem</code></a> 接口定义了一些属性和方法：</p>
<div class="language-typescript" data-ext="ts" data-title="ts"><pre class="language-typescript"><code><span class="token keyword">interface</span> <span class="token class-name">DataTransferItem</span> <span class="token punctuation">{</span>
  <span class="token doc-comment comment">/**
   * 拖拽项的种类，string 或是 file。
   *
   * [MDN Reference](https://developer.mozilla.org/docs/Web/API/DataTransferItem/kind)
   */</span>
  <span class="token keyword">readonly</span> kind<span class="token operator">:</span> <span class="token builtin">string</span>
  <span class="token doc-comment comment">/**
   * 拖拽项的类型，一般是一个 MIME 类型。
   *
   * [MDN Reference](https://developer.mozilla.org/docs/Web/API/DataTransferItem/type)
   */</span>
  <span class="token keyword">readonly</span> type<span class="token operator">:</span> <span class="token builtin">string</span>
  <span class="token doc-comment comment">/**
   * 返回一个关联拖拽项的 File 对象（当拖拽项不是一个文件时返回 null）。
   *
   * [MDN Reference](https://developer.mozilla.org/docs/Web/API/DataTransferItem/getAsFile)
   */</span>
  <span class="token function">getAsFile</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">:</span> File <span class="token operator">|</span> <span class="token keyword">null</span>
  <span class="token doc-comment comment">/**
   * 使用拖拽项的字符串作为参数执行指定回调函数。
   *
   * [MDN Reference](https://developer.mozilla.org/docs/Web/API/DataTransferItem/getAsString)
   */</span>
  <span class="token function">getAsString</span><span class="token punctuation">(</span>callback<span class="token operator">:</span> FunctionStringCallback <span class="token operator">|</span> <span class="token keyword">null</span><span class="token punctuation">)</span><span class="token operator">:</span> <span class="token keyword">void</span>
  <span class="token doc-comment comment">/**
   * 返回一个基于 FileSystemEntry (en-US) 的对象来表示文件系统中选中的项目。通常是返回一个FileSystemFileEntry 或是 FileSystemDirectoryEntry 对象。
   *
   * [MDN Reference](https://developer.mozilla.org/docs/Web/API/DataTransferItem/webkitGetAsEntry) */</span>
  <span class="token function">webkitGetAsEntry</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">:</span> FileSystemEntry <span class="token operator">|</span> <span class="token keyword">null</span>
<span class="token punctuation">}</span>
</code></pre></div><p>由于拖拽对象可能是文件也可能是文件夹，因此需要通过该对象上的 <a href="https://developer.mozilla.org/docs/Web/API/DataTransferItem/webkitGetAsEntry" target="_blank" rel="noopener noreferrer"><code>webkitGetAsEntry()</code></a> 方法，获取 <a href="https://developer.mozilla.org/en-US/docs/Web/API/FileSystemEntry" target="_blank" rel="noopener noreferrer"><code>FileSystemEnry</code></a> 对象，该对象可能是 <a href="https://developer.mozilla.org/zh-CN/docs/Web/API/FileSystemFileEntry" target="_blank" rel="noopener noreferrer"><code>FileSystemFileEntry</code></a> 和 <a href="https://developer.mozilla.org/zh-CN/docs/Web/API/FileSystemDirectoryEntry" target="_blank" rel="noopener noreferrer"><code>FileSystemDirectoryEntry</code></a>。</p>
<div class="language-javascript" data-ext="js" data-title="js"><pre class="language-javascript"><code><span class="token keyword">const</span> <span class="token function-variable function">getFileData</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token parameter">items</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
  <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>items<span class="token punctuation">)</span> <span class="token keyword">return</span>

  <span class="token comment">// 文件或目录路径列表</span>
  <span class="token keyword">const</span> fileEntryList <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span>

  <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">const</span> item <span class="token keyword">of</span> items<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">const</span> entry <span class="token operator">=</span> item<span class="token punctuation">.</span><span class="token function">webkitGetAsEntry</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span>entry<span class="token punctuation">)</span> <span class="token punctuation">{</span>
      fileEntryList<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span>entry<span class="token punctuation">)</span>
    <span class="token punctuation">}</span>
  <span class="token punctuation">}</span>

  <span class="token comment">// 这里上次一个文件夹，三个文件</span>
  <span class="token comment">// [DirectoryEntry, FileEntry, FileEntry, FileEntry]</span>
  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>fileEntryList<span class="token punctuation">)</span>
<span class="token punctuation">}</span>
</code></pre></div><h3>递归获取文件</h3>
<p>当获取到所有 <code>FileSystemEntry</code> 对象后，即可递归获取文件。</p>
<div class="language-javascript" data-ext="js" data-title="js"><pre class="language-javascript"><code><span class="token keyword">const</span> files <span class="token operator">=</span> <span class="token keyword">await</span> <span class="token function">tranverseFileTree</span><span class="token punctuation">(</span>fileEntryList<span class="token punctuation">)</span>
</code></pre></div><p>在 <code>traverseFileTree</code> 函数中，需要解析 <code>Entry</code> 获取文件对象：</p>
<ul>
<li>当对象是一个文件时，使用 <code>file()</code> 函数获取 <code>File</code> 对象；</li>
<li>当对象是一个文件夹时，使用 <code>createReader()</code> 函数创建一个阅读器，可以读取目录中的所有文件。</li>
</ul>
<div class="hint-container warning">
<p class="hint-container-title">注意</p>
<p>这两个函数都是异步执行，因此需要使用 <code>promise</code>，保证能获取到文件对象。</p>
</div>
<div class="language-javascript" data-ext="js" data-title="js"><pre class="language-javascript"><code><span class="token keyword">const</span> <span class="token function-variable function">traverseFileTree</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token parameter">fileEntryList</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
  <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">Promise</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token parameter">resolve</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
    <span class="token keyword">const</span> promises <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span>

    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">const</span> entry <span class="token keyword">of</span> fileEntryList<span class="token punctuation">)</span> <span class="token punctuation">{</span>
      <span class="token keyword">if</span> <span class="token punctuation">(</span>entry<span class="token punctuation">.</span>isFile<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token comment">// 文件，使用 file() 函数获取文件对象</span>
        promises<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span>
          <span class="token keyword">new</span> <span class="token class-name">Promise</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token parameter">resolve</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
            entry<span class="token punctuation">.</span><span class="token function">file</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token parameter">file</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
              <span class="token function">resolve</span><span class="token punctuation">(</span><span class="token punctuation">[</span>file<span class="token punctuation">]</span><span class="token punctuation">)</span>
            <span class="token punctuation">}</span><span class="token punctuation">)</span>
          <span class="token punctuation">}</span><span class="token punctuation">)</span>
        <span class="token punctuation">)</span>
      <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>entry<span class="token punctuation">.</span>isDirectory<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token comment">// 文件夹，使用 createReader() 函数获取目录所有文件 entry</span>
        <span class="token comment">// 然后再递归调用 traverseFileTree 函数</span>
        <span class="token keyword">const</span> dirReader <span class="token operator">=</span> entry<span class="token punctuation">.</span><span class="token function">createReader</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
        promises<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span>
          <span class="token keyword">new</span> <span class="token class-name">Promise</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token parameter">resolve</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
            dirReader<span class="token punctuation">.</span><span class="token function">readEntries</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token parameter">entries</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
              <span class="token function">resolve</span><span class="token punctuation">(</span><span class="token function">traverseFileTree</span><span class="token punctuation">(</span>entries<span class="token punctuation">)</span><span class="token punctuation">)</span>
            <span class="token punctuation">}</span><span class="token punctuation">)</span>
          <span class="token punctuation">}</span><span class="token punctuation">)</span>
        <span class="token punctuation">)</span>
      <span class="token punctuation">}</span>
    <span class="token punctuation">}</span>

    Promise<span class="token punctuation">.</span><span class="token function">all</span><span class="token punctuation">(</span>promises<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">then</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token parameter">fileList</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
      <span class="token function">resolve</span><span class="token punctuation">(</span>fileList<span class="token punctuation">.</span><span class="token function">flat</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
    <span class="token punctuation">}</span><span class="token punctuation">)</span>
  <span class="token punctuation">}</span><span class="token punctuation">)</span>
<span class="token punctuation">}</span>
</code></pre></div>
<div class="hint-container warning">
<p class="hint-container-title">注意</p>
<p>以为拖拽上传就到此结束了吗？当然没有，还有一个 edge case 需要处理。</p>
</div>
<h4>拖拽文件数量超过 100 处理</h4>
<p>当文件夹中文件数量超过 100 个时，<code>readEntries</code> 方法只会返回 100 个文件，因此需要递归调用 <code>readEntries</code> 方法，直到返回空数组。</p>
<div class="language-javascript" data-ext="js" data-title="js"><pre class="language-javascript"><code><span class="token comment">// dirReader.readEntries 每次只能读取 100 个文件，所以需要递归读取全部文件</span>
<span class="token keyword">const</span> <span class="token function-variable function">readAllEntries</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token parameter">dirReader<span class="token punctuation">,</span> items <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span></span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
  <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">Promise</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token parameter">resolve</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
    dirReader<span class="token punctuation">.</span><span class="token function">readEntries</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token parameter">entries</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
      <span class="token keyword">if</span> <span class="token punctuation">(</span>entries<span class="token punctuation">.</span>length<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token comment">// 如果还有文件，将其添加到 items 列表中并继续读取</span>
        items<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span><span class="token operator">...</span>entries<span class="token punctuation">)</span>
        <span class="token function">resolve</span><span class="token punctuation">(</span><span class="token function">readAllEntries</span><span class="token punctuation">(</span>dirReader<span class="token punctuation">,</span> items<span class="token punctuation">)</span><span class="token punctuation">)</span>
      <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>
        <span class="token comment">// 如果没有更多文件，则完成读取，并返回获取到的全部文件</span>
        <span class="token function">resolve</span><span class="token punctuation">(</span>items<span class="token punctuation">)</span>
      <span class="token punctuation">}</span>
    <span class="token punctuation">}</span><span class="token punctuation">)</span>
  <span class="token punctuation">}</span><span class="token punctuation">)</span>
<span class="token punctuation">}</span>

<span class="token keyword">const</span> dirReader <span class="token operator">=</span> entry<span class="token punctuation">.</span><span class="token function">createReader</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
promises<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span>
  <span class="token function">readAllEntries</span><span class="token punctuation">(</span>dirReader<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">then</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token parameter">entries</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
    <span class="token keyword">return</span> <span class="token function">traverseFileTree</span><span class="token punctuation">(</span>entries<span class="token punctuation">)</span>
  <span class="token punctuation">}</span><span class="token punctuation">)</span>
<span class="token punctuation">)</span>
</code></pre></div>
<div class="hint-container warning">
<p class="hint-container-title">注意</p>
<p>你以为又结束了吗？此时产品跑过来和你说需要保留文件目录结构，但是上面已经说过，<code>DataTransfer.items</code> 属性只能返回文件列表，因此需要自己实现文件路径信息。</p>
</div>
<h4>保留文件目录结构</h4>
<p>思考一下如何保留文件目录结构，只需要保留文件目录信息即可，剩下的事情就交给后端进行解析。</p>
<p>看一下拖拽上传后的获取的 <code>File</code> 对象，其中的 <code>webkitRelativePath</code> 竟然是一个空值：</p>
<div class="language-javascript" data-ext="js" data-title="js"><pre class="language-javascript"><code><span class="token punctuation">{</span>
  <span class="token literal-property property">lastModified</span><span class="token operator">:</span> <span class="token number">1691144702000</span><span class="token punctuation">,</span>
  <span class="token literal-property property">lastModifiedDate</span><span class="token operator">:</span> Fri Aug <span class="token number">04</span> <span class="token number">2023</span> <span class="token number">18</span><span class="token operator">:</span><span class="token number">25</span><span class="token operator">:</span><span class="token number">02</span> <span class="token constant">GMT</span><span class="token operator">+</span><span class="token number">0800</span> <span class="token punctuation">(</span>中国标准时间<span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">,</span>
  <span class="token literal-property property">name</span><span class="token operator">:</span><span class="token string">"2083_00008.png"</span><span class="token punctuation">,</span>
  <span class="token literal-property property">size</span><span class="token operator">:</span> <span class="token number">118241</span><span class="token punctuation">,</span>
  <span class="token literal-property property">type</span><span class="token operator">:</span> <span class="token string">"image/png"</span><span class="token punctuation">,</span>
  <span class="token literal-property property">webkitRelativePath</span><span class="token operator">:</span> <span class="token string">""</span><span class="token punctuation">,</span>
  <span class="token punctuation">[</span><span class="token punctuation">[</span>Prototype<span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token operator">:</span> File
<span class="token punctuation">}</span>
</code></pre></div><div class="hint-container warning">
<p class="hint-container-title">注意</p>
<p><a href="https://developer.mozilla.org/zh-CN/docs/Web/API/File/webkitRelativePath" target="_blank" rel="noopener noreferrer"><code>webkitRelativePath</code></a> 属性记录了文件的路径，但是该属性只有在使用 <code>input</code> 上传时才会有值，因此需要自己实现该属性。</p>
</div>
<p>那么如何实现该属性，<a href="https://developer.mozilla.org/en-US/docs/Web/API/FileSystemEntry" target="_blank" rel="noopener noreferrer">FileSystemEntry</a> 对象上会有一个 <code>name</code> 属性，记录了路径的名字。</p>
<p>因此只需要在 <code>traverseFileTree</code> 函数中，将文件路径信息保存到 <code>File</code> 对象上的 <code>webkitRelativePath</code> 中即可。</p>
<p>下面看完整实现：</p>

<div class="hint-container warning">
<p class="hint-container-title">注意</p>
<p>到此，拖拽上传就已经全部实现完，但是由于使用的都是最新标准，如果使用 ts 可能会有类型报错：</p>
<div class="language-bash" data-ext="sh" data-title="sh"><pre class="language-bash"><code>error TS2304: Cannot <span class="token function">find</span> name <span class="token string">'FileSystemEntry'</span>
</code></pre></div><p>因此需要自定义类型：</p>
<div class="language-typescript" data-ext="ts" data-title="ts"><pre class="language-typescript"><code><span class="token keyword">export</span> <span class="token keyword">interface</span> <span class="token class-name">IFileSystemEntry</span> <span class="token punctuation">{</span>
  isFile<span class="token operator">:</span> <span class="token builtin">boolean</span>
  isDirectory<span class="token operator">:</span> <span class="token builtin">boolean</span>
  file<span class="token operator">?</span><span class="token operator">:</span> <span class="token punctuation">(</span><span class="token function-variable function">callback</span><span class="token operator">:</span> <span class="token punctuation">(</span>file<span class="token operator">:</span> File<span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token keyword">void</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token keyword">void</span>
  createReader<span class="token operator">?</span><span class="token operator">:</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token builtin">any</span> <span class="token comment">// 为了方便使用 any，也可以创建具体类型</span>
<span class="token punctuation">}</span>
</code></pre></div></div>
<h2>粘贴上传</h2>
<p>经历过拖拽上传的痛苦折磨后，实现粘贴上传相信也不在话下了。</p>
<p>只需要监听 <code>paste</code> 事件，<code>clipboardData</code> 中包含了粘贴的文件数据。</p>

<div class="hint-container warning">
<p class="hint-container-title">注意</p>
<p>粘贴上传一般不会有特别复杂的场景，一般是粘贴一个图片或者文件，因此这里没考虑文件夹上传等场景。</p>
</div>
]]></content>
    <category term="practice"/>
    <published>2023-12-28T00:00:00.000Z</published>
  </entry>
  <entry>
    <title type="text">全局上传组件</title>
    <id>https://dribble-njr.github.io/blog/blog/frontend/practice/004-global-upload.html</id>
    <link href="https://dribble-njr.github.io/blog/blog/frontend/practice/004-global-upload.html"/>
    <updated>2024-01-07T10:18:51.000Z</updated>
    <summary type="html"><![CDATA[<p>上传需要涉及到各个页面，因此需要实现一个全局上传组件，同时支持拖拽上传。</p>
<p>根据产品 PRD，整理出如下几个重点部分：</p>
<ol>
<li>管理全局的上传任务状态</li>
<li>文件上传需要绑定每次上传任务的回调</li>
<li>拖拽内容区域上传</li>
<li>上传文件时进度以文件夹为单位进行展示</li>
</ol>
<h2>管理全局的上传任务状态</h2>
<p>第一个问题可以使用 Context 或着 Redux 解决，在这里由于没有涉及到其他更复杂的状态管理，因此使用更轻量的 Context。</p>
<p>每当添加上传任务，都可以通过 Context 提供的方法更新状态，同时所有引用了此状态的组件（如全局上传抽屉）都会被重新渲染以显示最新的状态。</p>]]></summary>
    <content type="html"><![CDATA[<p>上传需要涉及到各个页面，因此需要实现一个全局上传组件，同时支持拖拽上传。</p>
<p>根据产品 PRD，整理出如下几个重点部分：</p>
<ol>
<li>管理全局的上传任务状态</li>
<li>文件上传需要绑定每次上传任务的回调</li>
<li>拖拽内容区域上传</li>
<li>上传文件时进度以文件夹为单位进行展示</li>
</ol>
<h2>管理全局的上传任务状态</h2>
<p>第一个问题可以使用 Context 或着 Redux 解决，在这里由于没有涉及到其他更复杂的状态管理，因此使用更轻量的 Context。</p>
<p>每当添加上传任务，都可以通过 Context 提供的方法更新状态，同时所有引用了此状态的组件（如全局上传抽屉）都会被重新渲染以显示最新的状态。</p>
<p>在切换页面时需要保留全局上传组件的状态。 因此应将其定义在一个比页面组件生命周期更长的地方，页面切换时，只是 <code>Router</code> 的子组件（即页面组件）在发生变化，而 <code>Router</code> 和它的父组件 <code>App</code> 并未发生变化，也就不会触发重新渲染。</p>
<div class="language-tsx" data-ext="tsx" data-title="tsx"><pre class="language-tsx"><code><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span><span class="token class-name">UploadContextProvider</span></span><span class="token punctuation">&gt;</span></span><span class="token plain-text">
  </span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span><span class="token class-name">AppRouting</span></span> <span class="token punctuation">/&gt;</span></span><span class="token plain-text">
  </span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span><span class="token class-name">GlobalUploadDrawer</span></span> <span class="token punctuation">/&gt;</span></span><span class="token plain-text">
</span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span><span class="token class-name">UploadContextProvider</span></span><span class="token punctuation">&gt;</span></span>
</code></pre></div><p>这样，在全局上传组件被创建后，就会一直存在，即使页面发生切换。同时，由于它包裹在 <code>UploadContextProvider</code> 下面，能够随时读取和更新全局的上传状态。</p>
<h2>绑定对应回调</h2>
<p>在上传任务的处理中，最初将上传任务交给 <code>UploadContext</code> 处理：</p>
<div class="language-tsx" data-ext="tsx" data-title="tsx"><pre class="language-tsx"><code><span class="token keyword">interface</span> <span class="token class-name">UploadCallbackType</span> <span class="token punctuation">{</span>
  onStartCallback<span class="token operator">?</span><span class="token operator">:</span> <span class="token punctuation">(</span>data<span class="token operator">:</span> ZdtUploaderOutput<span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token keyword">void</span>
  onProgressCallback<span class="token operator">?</span><span class="token operator">:</span> <span class="token punctuation">(</span>data<span class="token operator">:</span> ZdtUploaderOutput<span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token keyword">void</span>
  onSuccessCallback<span class="token operator">?</span><span class="token operator">:</span> <span class="token punctuation">(</span>data<span class="token operator">:</span> ZdtUploaderOutput<span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token keyword">void</span>
  onFailCallback<span class="token operator">?</span><span class="token operator">:</span> <span class="token punctuation">(</span>data<span class="token operator">:</span> ZdtUploaderOutput<span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token keyword">void</span>
<span class="token punctuation">}</span>

<span class="token keyword">interface</span> <span class="token class-name">UploadContextType</span> <span class="token punctuation">{</span>
  uploadFiles<span class="token operator">:</span> UploadFile<span class="token punctuation">[</span><span class="token punctuation">]</span>
  <span class="token function-variable function">handleUpload</span><span class="token operator">:</span> <span class="token punctuation">(</span>files<span class="token operator">:</span> File<span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">,</span> callback<span class="token operator">:</span> UploadCallbackType<span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token keyword">void</span>
  <span class="token function-variable function">handleCancel</span><span class="token operator">:</span> <span class="token punctuation">(</span>file<span class="token operator">:</span> File<span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token keyword">void</span>
<span class="token punctuation">}</span>

<span class="token keyword">export</span> <span class="token keyword">const</span> UploadContext <span class="token operator">=</span> <span class="token generic-function"><span class="token function">createContext</span><span class="token generic class-name"><span class="token operator">&lt;</span>UploadContextType<span class="token operator">&gt;</span></span></span><span class="token punctuation">(</span><span class="token punctuation">{</span>
  uploadFiles<span class="token operator">:</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">,</span>
  <span class="token function-variable function">handleUpload</span><span class="token operator">:</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">,</span>
  <span class="token function-variable function">handleCancel</span><span class="token operator">:</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span><span class="token punctuation">}</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span>

<span class="token keyword">interface</span> <span class="token class-name">UploadContextProviderProps</span> <span class="token punctuation">{</span><span class="token punctuation">}</span>

<span class="token keyword">export</span> <span class="token keyword">const</span> UploadContextProvider<span class="token operator">:</span> <span class="token constant">FC</span><span class="token operator">&lt;</span>UploadContextProviderProps<span class="token operator">&gt;</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token punctuation">{</span>
  children
<span class="token punctuation">}</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
  <span class="token keyword">const</span> <span class="token punctuation">[</span>uploadFiles<span class="token punctuation">,</span> setUploadFiles<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token generic-function"><span class="token function">useState</span><span class="token generic class-name"><span class="token operator">&lt;</span>UploadFile<span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token operator">&gt;</span></span></span><span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">)</span>

  <span class="token comment">// 这里需要生成十个 ref</span>
  <span class="token keyword">const</span> uploaderRef <span class="token operator">=</span> <span class="token generic-function"><span class="token function">useRef</span><span class="token generic class-name"><span class="token operator">&lt;</span>ZdtUploaderRef<span class="token operator">&gt;</span></span></span><span class="token punctuation">(</span><span class="token keyword">null</span><span class="token punctuation">)</span>

  <span class="token keyword">const</span> uploadTaskRef <span class="token operator">=</span>
    <span class="token generic-function"><span class="token function">useRef</span><span class="token generic class-name"><span class="token operator">&lt;</span>Map<span class="token operator">&lt;</span>ZdtUploaderOutput <span class="token operator">|</span> <span class="token keyword">null</span><span class="token punctuation">,</span> UploadCallbackType<span class="token operator">&gt;&gt;</span></span></span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token comment">// 上传任务队列</span>

  <span class="token keyword">const</span> <span class="token function-variable function">handleUpload</span> <span class="token operator">=</span> <span class="token punctuation">(</span>files<span class="token operator">:</span> File<span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">,</span> callback<span class="token operator">:</span> UploadCallbackType<span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
    <span class="token keyword">const</span> taskId <span class="token operator">=</span> <span class="token template-string"><span class="token template-punctuation string">`</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">${</span>Date<span class="token punctuation">.</span><span class="token function">now</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token interpolation-punctuation punctuation">}</span></span><span class="token template-punctuation string">`</span></span>
    uploadTaskRef<span class="token punctuation">.</span>current<span class="token punctuation">[</span>taskId<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token punctuation">{</span>
      data<span class="token operator">:</span> <span class="token keyword">null</span><span class="token punctuation">,</span> <span class="token comment">// 上传任务开始之前的文件数据我们先设置为null</span>
      callback
    <span class="token punctuation">}</span>

    uploaderRef<span class="token punctuation">.</span>current<span class="token operator">?.</span><span class="token function">upload</span><span class="token punctuation">(</span>files<span class="token punctuation">)</span>
  <span class="token punctuation">}</span>

  <span class="token keyword">const</span> <span class="token function-variable function">handleCancel</span> <span class="token operator">=</span> <span class="token punctuation">(</span>file<span class="token operator">:</span> File<span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
    <span class="token comment">// 这里添加取消文件上传的逻辑</span>
  <span class="token punctuation">}</span>

  <span class="token keyword">const</span> <span class="token function-variable function">uploadBatchFilesStart</span> <span class="token operator">=</span> <span class="token punctuation">(</span>data<span class="token operator">:</span> ZdtUploaderOutput<span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span><span class="token punctuation">}</span>

  <span class="token keyword">const</span> <span class="token function-variable function">onUploadProgress</span> <span class="token operator">=</span> <span class="token punctuation">(</span>data<span class="token operator">:</span> ZdtUploaderOutput<span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span><span class="token punctuation">}</span>

  <span class="token keyword">const</span> <span class="token function-variable function">uploadBatchFilesSuccess</span> <span class="token operator">=</span> <span class="token punctuation">(</span>data<span class="token operator">:</span> ZdtUploaderOutput<span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span><span class="token punctuation">}</span>

  <span class="token keyword">const</span> <span class="token function-variable function">uploadBatchFilesFailed</span> <span class="token operator">=</span> <span class="token punctuation">(</span>data<span class="token operator">:</span> ZdtUploaderOutput<span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span><span class="token punctuation">}</span>

  <span class="token keyword">return</span> <span class="token punctuation">(</span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span><span class="token class-name">UploadContext.Provider</span></span>
      <span class="token attr-name">value</span><span class="token script language-javascript"><span class="token script-punctuation punctuation">=</span><span class="token punctuation">{</span><span class="token punctuation">{</span>
        uploadFiles<span class="token punctuation">,</span>
        handleUpload<span class="token punctuation">,</span>
        handleCancel
      <span class="token punctuation">}</span><span class="token punctuation">}</span></span>
    <span class="token punctuation">&gt;</span></span><span class="token plain-text">
      </span><span class="token punctuation">{</span>children<span class="token punctuation">}</span><span class="token plain-text">
      // 这里生成十个组件
      </span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span><span class="token class-name">ZdtUploaderBtn</span></span>
        <span class="token attr-name">ref</span><span class="token script language-javascript"><span class="token script-punctuation punctuation">=</span><span class="token punctuation">{</span>uploaderRef<span class="token punctuation">}</span></span>
        <span class="token attr-name">showProgress</span><span class="token script language-javascript"><span class="token script-punctuation punctuation">=</span><span class="token punctuation">{</span><span class="token boolean">false</span><span class="token punctuation">}</span></span>
        <span class="token attr-name">multiple</span>
        <span class="token attr-name">onUploadSuccess</span><span class="token script language-javascript"><span class="token script-punctuation punctuation">=</span><span class="token punctuation">{</span>uploadBatchFilesSuccess<span class="token punctuation">}</span></span>
        <span class="token attr-name">onUploadFailed</span><span class="token script language-javascript"><span class="token script-punctuation punctuation">=</span><span class="token punctuation">{</span>uploadBatchFilesFailed<span class="token punctuation">}</span></span>
        <span class="token attr-name">onUploadStart</span><span class="token script language-javascript"><span class="token script-punctuation punctuation">=</span><span class="token punctuation">{</span>uploadBatchFilesStart<span class="token punctuation">}</span></span>
        <span class="token attr-name">onUploadProgress</span><span class="token script language-javascript"><span class="token script-punctuation punctuation">=</span><span class="token punctuation">{</span>onUploadProgress<span class="token punctuation">}</span></span>
      <span class="token punctuation">/&gt;</span></span><span class="token plain-text">
    </span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span><span class="token class-name">UploadContext.Provider</span></span><span class="token punctuation">&gt;</span></span>
  <span class="token punctuation">)</span>
<span class="token punctuation">}</span>
</code></pre></div><p>但是经过仔细思考后，这种方案将 <code>ZdtUploaderBtn</code> 直接定义好，很自定义其他属性。</p>
<p>因此，上传组件应该由页面自己决定，而 <code>upload-context</code> 只负责管理上传文件的状态，只需提供 <code>createUploader</code> 方法供页面调用，这样就能避免复杂的属性绑定。</p>
<p>子页面传入 <code>ZdtUploaderBtnProps</code>，可以很方便地自定义上传组件属性。</p>
<p>这样，子页面每次调用 createUploader，<strong>页面上都会创建一个由该子页面定义的上传组件</strong>，同时每个上传任务的文件由 Map 存储起来，这样在触发回调更新上传文件时，可以保证一一对应。</p>
<div class="language-tsx" data-ext="tsx" data-title="tsx"><pre class="language-tsx"><code><span class="token keyword">interface</span> <span class="token class-name">UploadContextType</span> <span class="token punctuation">{</span>
  uploadFilesMap<span class="token operator">:</span> Map<span class="token operator">&lt;</span><span class="token builtin">number</span><span class="token punctuation">,</span> UploadFile<span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token operator">&gt;</span> <span class="token comment">// 上传文件对象</span>
  <span class="token function-variable function">createUploader</span><span class="token operator">:</span> <span class="token punctuation">(</span>
    props<span class="token operator">:</span> ZdtUploaderBtnProps<span class="token punctuation">,</span>
    files<span class="token operator">?</span><span class="token operator">:</span> File<span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">,</span>
    groupLayer<span class="token operator">?</span><span class="token operator">:</span> <span class="token builtin">number</span>
  <span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token keyword">void</span> <span class="token comment">// 初始化 uploader</span>
<span class="token punctuation">}</span>

<span class="token keyword">export</span> <span class="token keyword">const</span> UploadContext <span class="token operator">=</span> <span class="token generic-function"><span class="token function">createContext</span><span class="token generic class-name"><span class="token operator">&lt;</span>UploadContextType<span class="token operator">&gt;</span></span></span><span class="token punctuation">(</span><span class="token punctuation">{</span>
  uploadFilesMap<span class="token operator">:</span> <span class="token keyword">new</span> <span class="token class-name">Map</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span>
  <span class="token function-variable function">createUploader</span><span class="token operator">:</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span><span class="token punctuation">}</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span>

<span class="token keyword">export</span> <span class="token keyword">const</span> UploadContextProvider<span class="token operator">:</span> <span class="token function-variable function">FC</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token punctuation">{</span> children <span class="token punctuation">}</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
  <span class="token keyword">const</span> <span class="token punctuation">[</span>uploadFilesMap<span class="token punctuation">,</span> setUploadFilesMap<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token generic-function"><span class="token function">useState</span><span class="token generic class-name"><span class="token operator">&lt;</span>
    Map<span class="token operator">&lt;</span><span class="token builtin">number</span><span class="token punctuation">,</span> UploadFile<span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token operator">&gt;</span>
  <span class="token operator">&gt;</span></span></span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">Map</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>

  <span class="token keyword">const</span> <span class="token function-variable function">updateFileMap</span> <span class="token operator">=</span> <span class="token punctuation">(</span>data<span class="token operator">:</span> ZdtUploaderOutput<span class="token punctuation">,</span> index<span class="token operator">:</span> <span class="token builtin">number</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
    <span class="token function">setUploadFilesMap</span><span class="token punctuation">(</span><span class="token punctuation">(</span>oldFilesMap<span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
      <span class="token keyword">const</span> newFilesMap <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Map</span><span class="token punctuation">(</span>oldFilesMap<span class="token punctuation">)</span>
      newFilesMap<span class="token punctuation">.</span><span class="token function">set</span><span class="token punctuation">(</span>index<span class="token punctuation">,</span> data<span class="token punctuation">.</span>nzFiles<span class="token operator">!</span><span class="token punctuation">)</span>
      <span class="token keyword">return</span> newFilesMap
    <span class="token punctuation">}</span><span class="token punctuation">)</span>
  <span class="token punctuation">}</span>

  <span class="token comment">// 由外部设置 uploader</span>
  <span class="token keyword">const</span> <span class="token punctuation">[</span>uploaders<span class="token punctuation">,</span> setUploaders<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token generic-function"><span class="token function">useState</span><span class="token generic class-name"><span class="token operator">&lt;</span>ReactNode<span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token operator">&gt;</span></span></span><span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">)</span>
  <span class="token keyword">const</span> uploaderRef <span class="token operator">=</span> <span class="token generic-function"><span class="token function">useRef</span><span class="token generic class-name"><span class="token operator">&lt;</span>ZdtUploaderRef<span class="token operator">&gt;</span></span></span><span class="token punctuation">(</span><span class="token keyword">null</span><span class="token punctuation">)</span>

  <span class="token comment">/**
   * 自定义 ZdtUploaderBtn
   * @param props ZdtUploaderBtnProps
   */</span>
  <span class="token keyword">const</span> <span class="token function-variable function">createUploader</span> <span class="token operator">=</span> <span class="token punctuation">(</span>props<span class="token operator">:</span> ZdtUploaderBtnProps<span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
    <span class="token keyword">const</span> element <span class="token operator">=</span> <span class="token punctuation">(</span>
      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span><span class="token class-name">ZdtUploaderBtn</span></span>
        <span class="token attr-name">ref</span><span class="token script language-javascript"><span class="token script-punctuation punctuation">=</span><span class="token punctuation">{</span>uploaderRef<span class="token punctuation">}</span></span>
        <span class="token attr-name">key</span><span class="token script language-javascript"><span class="token script-punctuation punctuation">=</span><span class="token punctuation">{</span>Date<span class="token punctuation">.</span><span class="token function">now</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">}</span></span>
        <span class="token attr-name">subDirectory</span><span class="token script language-javascript"><span class="token script-punctuation punctuation">=</span><span class="token punctuation">{</span><span class="token string">''</span> <span class="token operator">+</span> <span class="token function">generateUniqString</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">'/'</span><span class="token punctuation">}</span></span>
        <span class="token attr-name">showProgress</span><span class="token script language-javascript"><span class="token script-punctuation punctuation">=</span><span class="token punctuation">{</span><span class="token boolean">false</span><span class="token punctuation">}</span></span>
        <span class="token attr-name">multiple</span>
        <span class="token attr-name">onUploadStart</span><span class="token script language-javascript"><span class="token script-punctuation punctuation">=</span><span class="token punctuation">{</span><span class="token punctuation">(</span>data<span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
          <span class="token function">updateFileMap</span><span class="token punctuation">(</span>data<span class="token punctuation">,</span> uploaders<span class="token punctuation">.</span>length<span class="token punctuation">)</span>
          props<span class="token punctuation">.</span>onUploadStart<span class="token operator">?.</span><span class="token punctuation">(</span>data<span class="token punctuation">)</span>
        <span class="token punctuation">}</span><span class="token punctuation">}</span></span>
        <span class="token attr-name">onUploadProgress</span><span class="token script language-javascript"><span class="token script-punctuation punctuation">=</span><span class="token punctuation">{</span><span class="token punctuation">(</span>data<span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
          <span class="token function">updateFileMap</span><span class="token punctuation">(</span>data<span class="token punctuation">,</span> uploaders<span class="token punctuation">.</span>length<span class="token punctuation">)</span>
          props<span class="token punctuation">.</span>onUploadProgress<span class="token operator">?.</span><span class="token punctuation">(</span>data<span class="token punctuation">)</span>
        <span class="token punctuation">}</span><span class="token punctuation">}</span></span>
        <span class="token attr-name">onUploadSuccess</span><span class="token script language-javascript"><span class="token script-punctuation punctuation">=</span><span class="token punctuation">{</span><span class="token punctuation">(</span>data<span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
          <span class="token function">updateFileMap</span><span class="token punctuation">(</span>data<span class="token punctuation">,</span> uploaders<span class="token punctuation">.</span>length<span class="token punctuation">)</span>
          props<span class="token punctuation">.</span>onUploadSuccess<span class="token operator">?.</span><span class="token punctuation">(</span>data<span class="token punctuation">)</span>
        <span class="token punctuation">}</span><span class="token punctuation">}</span></span>
        <span class="token attr-name">onUploadFailed</span><span class="token script language-javascript"><span class="token script-punctuation punctuation">=</span><span class="token punctuation">{</span><span class="token punctuation">(</span>data<span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
          <span class="token function">updateFileMap</span><span class="token punctuation">(</span>data<span class="token punctuation">,</span> uploaders<span class="token punctuation">.</span>length<span class="token punctuation">)</span>
          props<span class="token punctuation">.</span>onUploadFailed<span class="token operator">?.</span><span class="token punctuation">(</span>data<span class="token punctuation">)</span>
        <span class="token punctuation">}</span><span class="token punctuation">}</span></span>
        <span class="token spread"><span class="token punctuation">{</span><span class="token operator">...</span>props<span class="token punctuation">}</span></span>
      <span class="token punctuation">/&gt;</span></span>
    <span class="token punctuation">)</span>

    <span class="token function">setUploaders</span><span class="token punctuation">(</span><span class="token punctuation">(</span>olduploaders<span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">[</span><span class="token operator">...</span>olduploaders<span class="token punctuation">,</span> element<span class="token punctuation">]</span><span class="token punctuation">)</span>

    <span class="token comment">// 保证组件 ref 成功绑定</span>
    <span class="token function">setTimeout</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
      uploaderRef<span class="token punctuation">.</span>current<span class="token operator">?.</span><span class="token function">select</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
    <span class="token punctuation">}</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">)</span>
  <span class="token punctuation">}</span>

  <span class="token keyword">return</span> <span class="token punctuation">(</span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span><span class="token class-name">UploadContext.Provider</span></span>
      <span class="token attr-name">value</span><span class="token script language-javascript"><span class="token script-punctuation punctuation">=</span><span class="token punctuation">{</span><span class="token punctuation">{</span>
        uploadFilesMap<span class="token punctuation">,</span>
        createUploader
      <span class="token punctuation">}</span><span class="token punctuation">}</span></span>
    <span class="token punctuation">&gt;</span></span><span class="token plain-text">
      </span><span class="token punctuation">{</span>children<span class="token punctuation">}</span><span class="token plain-text">
      </span><span class="token punctuation">{</span>uploaders<span class="token punctuation">}</span><span class="token plain-text">
    </span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span><span class="token class-name">UploadContext.Provider</span></span><span class="token punctuation">&gt;</span></span>
  <span class="token punctuation">)</span>
<span class="token punctuation">}</span>
</code></pre></div><figure><img src="https://raw.githubusercontent.com/dribble-njr/typora-njr/master/img/image-20231127194832077.png" alt="整体架构" tabindex="0" loading="lazy"><figcaption>整体架构</figcaption></figure>
<h2>支持内容区域拖拽上传</h2>
<p>由于内容区域拖拽上传也需要接入全局上传抽屉，而 <code>upload-context</code> 提供的 <code>createUploader</code> 方法，内部原理是调用 <code>uploaderRef.select()</code> 唤起文件选择器进行上传，无法实现拖拽上传。</p>
<p>因此需要修改 <code>createUploader</code> 方法，支持获取文件后直接上传：</p>
<div class="language-tsx" data-ext="tsx" data-title="tsx"><pre class="language-tsx"><code><span class="token comment">// 拖拽上传需要监听 onDrop 事件传入 files 数组</span>
<span class="token keyword">const</span> <span class="token function-variable function">createUploader</span> <span class="token operator">=</span> <span class="token punctuation">(</span>props<span class="token operator">:</span> ZdtUploaderBtnProps<span class="token punctuation">,</span> files<span class="token operator">?</span><span class="token operator">:</span> File<span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
  <span class="token keyword">const</span> element <span class="token operator">=</span> <span class="token punctuation">(</span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span><span class="token class-name">ZdtUploaderBtn</span></span>
      <span class="token attr-name">...</span>
    <span class="token punctuation">/&gt;</span></span>
  <span class="token punctuation">)</span><span class="token punctuation">;</span>

  <span class="token function">setUploaders</span><span class="token punctuation">(</span><span class="token punctuation">(</span>olduploaders<span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">[</span><span class="token operator">...</span>olduploaders<span class="token punctuation">,</span> element<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

  <span class="token keyword">if</span> <span class="token punctuation">(</span>files<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    uploaderRef<span class="token punctuation">.</span>current<span class="token operator">?.</span><span class="token function">upload</span><span class="token punctuation">(</span>files<span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>
    <span class="token function">setTimeout</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
      uploaderRef<span class="token punctuation">.</span>current<span class="token operator">?.</span><span class="token function">select</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span>
<span class="token punctuation">}</span><span class="token punctuation">;</span>
</code></pre></div><p>接下来需要自定义一个 <code>global-drag-uploader</code> 组件，监听 <code>onDrop</code> 事件获取拖拽的所有文件夹，并调用 <code>createUploader</code> 方法。</p>
<p>在该方法中，需要实现 <code>directory</code> 和 <code>accept</code> 属性校验方法。</p>
<p>因此，最终代码如下：</p>
<div class="language-tsx" data-ext="tsx" data-title="tsx"><pre class="language-tsx"><code><span class="token keyword">import</span> <span class="token keyword">type</span> <span class="token punctuation">{</span> <span class="token constant">FC</span> <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">'react'</span>
<span class="token keyword">import</span> <span class="token punctuation">{</span> useContext<span class="token punctuation">,</span> useState <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">'react'</span>
<span class="token keyword">import</span> validateAccept <span class="token keyword">from</span> <span class="token string">'attr-accept'</span>

<span class="token keyword">import</span> <span class="token punctuation">{</span> ZdtUploaderBtnProps<span class="token punctuation">,</span> shortToast <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">'@yuanfudao/zdt-react'</span>

<span class="token keyword">import</span> <span class="token punctuation">{</span> UploadContext <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">'../../context/upload-context'</span>
<span class="token keyword">import</span> styles <span class="token keyword">from</span> <span class="token string">'./global-drag-uploader.module.scss'</span>

<span class="token keyword">export</span> <span class="token keyword">interface</span> <span class="token class-name">IFileSystemEntry</span> <span class="token punctuation">{</span>
  isFile<span class="token operator">:</span> <span class="token builtin">boolean</span>
  isDirectory<span class="token operator">:</span> <span class="token builtin">boolean</span>
  file<span class="token operator">?</span><span class="token operator">:</span> <span class="token punctuation">(</span><span class="token function-variable function">callback</span><span class="token operator">:</span> <span class="token punctuation">(</span>file<span class="token operator">:</span> File<span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token keyword">void</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token keyword">void</span>
  createReader<span class="token operator">?</span><span class="token operator">:</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token builtin">any</span> <span class="token comment">// 或创建具体类型，例如： { readEntries: (callback: (entries: MyFileSystemEntry[]) =&gt; void) =&gt; void };</span>
<span class="token punctuation">}</span>

<span class="token keyword">interface</span> <span class="token class-name">GlobalDragUploader</span> <span class="token punctuation">{</span>
  uploaderProps<span class="token operator">:</span> ZdtUploaderBtnProps
<span class="token punctuation">}</span>

<span class="token keyword">export</span> <span class="token keyword">const</span> GlobalDragUploader<span class="token operator">:</span> <span class="token constant">FC</span><span class="token operator">&lt;</span>GlobalDragUploader<span class="token operator">&gt;</span> <span class="token operator">=</span> <span class="token punctuation">(</span>props<span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
  <span class="token keyword">const</span> <span class="token punctuation">{</span> directory<span class="token punctuation">,</span> accept <span class="token punctuation">}</span> <span class="token operator">=</span> props<span class="token punctuation">.</span>uploaderProps
  <span class="token keyword">const</span> <span class="token punctuation">{</span> children <span class="token punctuation">}</span> <span class="token operator">=</span> props

  <span class="token keyword">const</span> <span class="token punctuation">[</span>isDragOver<span class="token punctuation">,</span> setIsDragOver<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token generic-function"><span class="token function">useState</span><span class="token generic class-name"><span class="token operator">&lt;</span><span class="token builtin">boolean</span><span class="token operator">&gt;</span></span></span><span class="token punctuation">(</span><span class="token boolean">false</span><span class="token punctuation">)</span>

  <span class="token keyword">const</span> <span class="token punctuation">{</span> createUploader <span class="token punctuation">}</span> <span class="token operator">=</span> <span class="token function">useContext</span><span class="token punctuation">(</span>UploadContext<span class="token punctuation">)</span>

  <span class="token keyword">async</span> <span class="token keyword">function</span> <span class="token function">traverseFileTree</span><span class="token punctuation">(</span>
    fileEntryList<span class="token operator">:</span> <span class="token builtin">any</span><span class="token punctuation">,</span>
    relativePath <span class="token operator">=</span> <span class="token string">''</span>
  <span class="token punctuation">)</span><span class="token operator">:</span> <span class="token builtin">Promise</span><span class="token operator">&lt;</span>File<span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token operator">&gt;</span> <span class="token punctuation">{</span>
    <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name"><span class="token builtin">Promise</span></span><span class="token punctuation">(</span><span class="token punctuation">(</span>resolve<span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
      <span class="token keyword">const</span> promises<span class="token operator">:</span> <span class="token builtin">Promise</span><span class="token operator">&lt;</span>File<span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token operator">&gt;</span><span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span>

      <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">const</span> entry <span class="token keyword">of</span> fileEntryList<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">const</span> entryRelativePath <span class="token operator">=</span> relativePath <span class="token operator">+</span> <span class="token punctuation">(</span>entry<span class="token punctuation">.</span>name <span class="token keyword">as</span> <span class="token builtin">string</span><span class="token punctuation">)</span>
        <span class="token keyword">if</span> <span class="token punctuation">(</span>entry<span class="token punctuation">.</span>isFile<span class="token punctuation">)</span> <span class="token punctuation">{</span>
          promises<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span>
            <span class="token keyword">new</span> <span class="token class-name"><span class="token builtin">Promise</span></span><span class="token punctuation">(</span><span class="token punctuation">(</span>resolve<span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
              entry<span class="token punctuation">.</span><span class="token function">file</span><span class="token punctuation">(</span><span class="token punctuation">(</span>file<span class="token operator">:</span> File<span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
                Object<span class="token punctuation">.</span><span class="token function">defineProperty</span><span class="token punctuation">(</span>file<span class="token punctuation">,</span> <span class="token string">'webkitRelativePath'</span><span class="token punctuation">,</span> <span class="token punctuation">{</span>
                  value<span class="token operator">:</span> entryRelativePath<span class="token punctuation">,</span>
                  writable<span class="token operator">:</span> <span class="token boolean">false</span>
                <span class="token punctuation">}</span><span class="token punctuation">)</span>
                <span class="token function">resolve</span><span class="token punctuation">(</span><span class="token punctuation">[</span>file<span class="token punctuation">]</span><span class="token punctuation">)</span>
              <span class="token punctuation">}</span><span class="token punctuation">)</span>
            <span class="token punctuation">}</span><span class="token punctuation">)</span>
          <span class="token punctuation">)</span>
        <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>entry<span class="token punctuation">.</span>isDirectory<span class="token punctuation">)</span> <span class="token punctuation">{</span>
          <span class="token comment">// dirReader.readEntries 每次只能读取 100 个文件，所以需要递归读取全部文件</span>
          <span class="token keyword">const</span> readAllEntries <span class="token operator">=</span> <span class="token keyword">async</span> <span class="token punctuation">(</span>
            dirReader<span class="token operator">:</span> <span class="token builtin">any</span><span class="token punctuation">,</span>
            items<span class="token operator">:</span> <span class="token builtin">any</span><span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span>
          <span class="token punctuation">)</span><span class="token operator">:</span> <span class="token builtin">Promise</span><span class="token operator">&lt;</span><span class="token builtin">any</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token operator">&gt;</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
            <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name"><span class="token builtin">Promise</span></span><span class="token punctuation">(</span><span class="token punctuation">(</span>resolve<span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
              dirReader<span class="token punctuation">.</span><span class="token function">readEntries</span><span class="token punctuation">(</span><span class="token keyword">async</span> <span class="token punctuation">(</span>entries<span class="token operator">:</span> <span class="token builtin">any</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
                <span class="token keyword">if</span> <span class="token punctuation">(</span>entries<span class="token punctuation">.</span>length<span class="token punctuation">)</span> <span class="token punctuation">{</span>
                  <span class="token comment">// 如果还有文件，将其添加到 items 列表中并继续读取</span>
                  items<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span><span class="token operator">...</span>entries<span class="token punctuation">)</span>
                  <span class="token function">resolve</span><span class="token punctuation">(</span><span class="token keyword">await</span> <span class="token function">readAllEntries</span><span class="token punctuation">(</span>dirReader<span class="token punctuation">,</span> items<span class="token punctuation">)</span><span class="token punctuation">)</span>
                <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>
                  <span class="token comment">// 如果没有更多文件，则完成读取，并返回获取到的全部文件</span>
                  <span class="token function">resolve</span><span class="token punctuation">(</span>items<span class="token punctuation">)</span>
                <span class="token punctuation">}</span>
              <span class="token punctuation">}</span><span class="token punctuation">)</span>
            <span class="token punctuation">}</span><span class="token punctuation">)</span>
          <span class="token punctuation">}</span>

          <span class="token keyword">const</span> dirReader <span class="token operator">=</span> entry<span class="token punctuation">.</span><span class="token function">createReader</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
          promises<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span>
            <span class="token function">readAllEntries</span><span class="token punctuation">(</span>dirReader<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">then</span><span class="token punctuation">(</span><span class="token keyword">async</span> <span class="token punctuation">(</span>entries<span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
              <span class="token keyword">return</span> <span class="token function">traverseFileTree</span><span class="token punctuation">(</span>entries<span class="token punctuation">,</span> entryRelativePath <span class="token operator">+</span> <span class="token string">'/'</span><span class="token punctuation">)</span>
            <span class="token punctuation">}</span><span class="token punctuation">)</span>
          <span class="token punctuation">)</span>
        <span class="token punctuation">}</span>
      <span class="token punctuation">}</span>

      <span class="token builtin">Promise</span><span class="token punctuation">.</span><span class="token function">all</span><span class="token punctuation">(</span>promises<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">then</span><span class="token punctuation">(</span><span class="token punctuation">(</span>fileList<span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
        <span class="token function">resolve</span><span class="token punctuation">(</span>fileList<span class="token punctuation">.</span><span class="token function">flat</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
      <span class="token punctuation">}</span><span class="token punctuation">)</span>
    <span class="token punctuation">}</span><span class="token punctuation">)</span>
  <span class="token punctuation">}</span>

  <span class="token keyword">async</span> <span class="token keyword">function</span> <span class="token function">onDrop</span><span class="token punctuation">(</span>event<span class="token operator">:</span> React<span class="token punctuation">.</span>DragEvent<span class="token operator">&lt;</span>HTMLDivElement<span class="token operator">&gt;</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token function">setIsDragOver</span><span class="token punctuation">(</span><span class="token boolean">false</span><span class="token punctuation">)</span>
    event<span class="token punctuation">.</span><span class="token function">preventDefault</span><span class="token punctuation">(</span><span class="token punctuation">)</span>

    <span class="token comment">// 获取文件</span>
    <span class="token keyword">const</span> items <span class="token operator">=</span> event<span class="token punctuation">.</span>dataTransfer<span class="token operator">?.</span>items
    <span class="token keyword">const</span> fileEntryList<span class="token operator">:</span> IFileSystemEntry<span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span>

    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>items<span class="token punctuation">)</span> <span class="token keyword">return</span>

    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">const</span> item <span class="token keyword">of</span> items<span class="token punctuation">)</span> <span class="token punctuation">{</span>
      <span class="token keyword">const</span> entry <span class="token operator">=</span> item<span class="token punctuation">.</span><span class="token function">webkitGetAsEntry</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
      <span class="token keyword">if</span> <span class="token punctuation">(</span>directory <span class="token operator">&amp;&amp;</span> <span class="token operator">!</span>entry<span class="token operator">?.</span>isDirectory<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        shortToast<span class="token punctuation">.</span><span class="token function">error</span><span class="token punctuation">(</span><span class="token punctuation">{</span>
          message<span class="token operator">:</span> <span class="token string">'上传类型错误'</span><span class="token punctuation">,</span>
          description<span class="token operator">:</span> <span class="token template-string"><span class="token template-punctuation string">`</span><span class="token string">请上传文件夹</span><span class="token template-punctuation string">`</span></span>
        <span class="token punctuation">}</span><span class="token punctuation">)</span>
        <span class="token keyword">return</span>
      <span class="token punctuation">}</span>
      <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>directory <span class="token operator">&amp;&amp;</span> <span class="token operator">!</span>entry<span class="token operator">?.</span>isFile<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        shortToast<span class="token punctuation">.</span><span class="token function">error</span><span class="token punctuation">(</span><span class="token punctuation">{</span> message<span class="token operator">:</span> <span class="token string">'上传类型错误'</span><span class="token punctuation">,</span> description<span class="token operator">:</span> <span class="token template-string"><span class="token template-punctuation string">`</span><span class="token string">请上传文件</span><span class="token template-punctuation string">`</span></span> <span class="token punctuation">}</span><span class="token punctuation">)</span>
        <span class="token keyword">return</span>
      <span class="token punctuation">}</span>
      <span class="token keyword">if</span> <span class="token punctuation">(</span>entry<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        fileEntryList<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span>entry<span class="token punctuation">)</span>
      <span class="token punctuation">}</span>
    <span class="token punctuation">}</span>

    <span class="token keyword">const</span> files <span class="token operator">=</span> <span class="token keyword">await</span> <span class="token function">traverseFileTree</span><span class="token punctuation">(</span>fileEntryList<span class="token punctuation">)</span>

    <span class="token comment">// // 这里要对拖拽上传图片做一个后缀和accept匹配的校验</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span>files<span class="token punctuation">.</span><span class="token function">some</span><span class="token punctuation">(</span><span class="token punctuation">(</span>file<span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token operator">!</span><span class="token function">validateAccept</span><span class="token punctuation">(</span>file<span class="token punctuation">,</span> accept <span class="token operator">??</span> <span class="token string">''</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
      shortToast<span class="token punctuation">.</span><span class="token function">error</span><span class="token punctuation">(</span><span class="token punctuation">{</span>
        message<span class="token operator">:</span> <span class="token string">'上传格式错误'</span><span class="token punctuation">,</span>
        description<span class="token operator">:</span> <span class="token template-string"><span class="token template-punctuation string">`</span><span class="token string">请上传</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">${</span>accept<span class="token interpolation-punctuation punctuation">}</span></span><span class="token string">格式文件</span><span class="token template-punctuation string">`</span></span>
      <span class="token punctuation">}</span><span class="token punctuation">)</span>
    <span class="token punctuation">}</span>

    <span class="token comment">// 过滤 .DS_Store</span>
    <span class="token keyword">const</span> fileList <span class="token operator">=</span> files<span class="token punctuation">.</span><span class="token function">filter</span><span class="token punctuation">(</span><span class="token punctuation">(</span>file<span class="token punctuation">)</span> <span class="token operator">=&gt;</span> file<span class="token punctuation">.</span>name <span class="token operator">!==</span> <span class="token string">'.DS_Store'</span><span class="token punctuation">)</span>

    <span class="token comment">// 上传</span>
    <span class="token function">createUploader</span><span class="token punctuation">(</span>props<span class="token punctuation">.</span>uploaderProps<span class="token punctuation">,</span> fileList<span class="token punctuation">)</span>
    <span class="token comment">// refUploader.current?.upload(multiple ? fileList : fileList[0] ? [fileList[0]] : []);</span>
  <span class="token punctuation">}</span>

  <span class="token keyword">return</span> <span class="token punctuation">(</span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span>
      <span class="token attr-name">className</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>relative<span class="token punctuation">"</span></span>
      <span class="token attr-name">onDragOver</span><span class="token script language-javascript"><span class="token script-punctuation punctuation">=</span><span class="token punctuation">{</span><span class="token punctuation">(</span>e<span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
        e<span class="token punctuation">.</span><span class="token function">preventDefault</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
        <span class="token function">setIsDragOver</span><span class="token punctuation">(</span><span class="token boolean">true</span><span class="token punctuation">)</span>
      <span class="token punctuation">}</span><span class="token punctuation">}</span></span>
    <span class="token punctuation">&gt;</span></span><span class="token plain-text">
      </span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span>
        <span class="token attr-name">className</span><span class="token script language-javascript"><span class="token script-punctuation punctuation">=</span><span class="token punctuation">{</span>styles<span class="token punctuation">[</span><span class="token string">'drag-cover'</span><span class="token punctuation">]</span><span class="token punctuation">}</span></span>
        <span class="token attr-name">style</span><span class="token script language-javascript"><span class="token script-punctuation punctuation">=</span><span class="token punctuation">{</span><span class="token punctuation">{</span> display<span class="token operator">:</span> isDragOver <span class="token operator">?</span> <span class="token string">'block'</span> <span class="token operator">:</span> <span class="token string">'none'</span> <span class="token punctuation">}</span><span class="token punctuation">}</span></span>
        <span class="token attr-name">onDrop</span><span class="token script language-javascript"><span class="token script-punctuation punctuation">=</span><span class="token punctuation">{</span>onDrop<span class="token punctuation">}</span></span>
        <span class="token attr-name">onDragEnter</span><span class="token script language-javascript"><span class="token script-punctuation punctuation">=</span><span class="token punctuation">{</span><span class="token punctuation">(</span>e<span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
          e<span class="token punctuation">.</span><span class="token function">preventDefault</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
          <span class="token function">setIsDragOver</span><span class="token punctuation">(</span><span class="token boolean">true</span><span class="token punctuation">)</span>
        <span class="token punctuation">}</span><span class="token punctuation">}</span></span>
        <span class="token attr-name">onDragLeave</span><span class="token script language-javascript"><span class="token script-punctuation punctuation">=</span><span class="token punctuation">{</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
          <span class="token function">setIsDragOver</span><span class="token punctuation">(</span><span class="token boolean">false</span><span class="token punctuation">)</span>
        <span class="token punctuation">}</span><span class="token punctuation">}</span></span>
      <span class="token punctuation">/&gt;</span></span><span class="token plain-text">
      </span><span class="token punctuation">{</span>children<span class="token punctuation">}</span><span class="token plain-text">
    </span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">&gt;</span></span>
  <span class="token punctuation">)</span>
<span class="token punctuation">}</span>

GlobalDragUploader<span class="token punctuation">.</span>defaultProps <span class="token operator">=</span> <span class="token punctuation">{</span>
  uploaderProps<span class="token operator">:</span> <span class="token punctuation">{</span>
    directory<span class="token operator">:</span> <span class="token boolean">false</span><span class="token punctuation">,</span>
    multiple<span class="token operator">:</span> <span class="token boolean">true</span>
  <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre></div><div class="hint-container info">
<p class="hint-container-title">相关信息</p>
<p>拖拽上传详细实现过程见 </p>
</div>
<h2>全局上传支持以文件夹为单位展示进度</h2>
<p>需要以文件夹层级为单位展示进度，最开始直接平铺 <code>uploadFilesMap</code> 方案无法实现。</p>
<p>然而由于使用全局上传，上传抽屉写在 <code>App.tsx</code> 中，因此很难支持传入 <code>props</code> 自定义以何种层级展示文件上传进度，只能以第一级为单位展示文件进度。</p>
<p>所以 <code>upload-context</code> 中还需要提供 <code>groupLayersMap</code>，支持页面自定义展示层级。</p>
<div class="language-diff" data-ext="diff" data-title="diff"><pre class="language-diff"><code><span class="token deleted-sign deleted"><span class="token prefix deleted">-</span><span class="token line"> const createUploader = (props: ZdtUploaderBtnProps, files?: File[]) =&gt; {
</span></span><span class="token inserted-sign inserted"><span class="token prefix inserted">+</span><span class="token line"> const createUploader = (props: ZdtUploaderBtnProps, files?: File[], groupLayer?: number) =&gt; {
</span></span><span class="token unchanged"><span class="token prefix unchanged"> </span><span class="token line"> const element = (
</span><span class="token prefix unchanged"> </span><span class="token line">   &lt;ZdtUploaderBtn
</span><span class="token prefix unchanged"> </span><span class="token line">     ref={uploaderRef}
</span><span class="token prefix unchanged"> </span><span class="token line">     key={Date.now()}
</span><span class="token prefix unchanged"> </span><span class="token line">     subDirectory={'' + generateUniqString() + '/'}
</span><span class="token prefix unchanged"> </span><span class="token line">     showProgress={false}
</span><span class="token prefix unchanged"> </span><span class="token line">     multiple
</span><span class="token prefix unchanged"> </span><span class="token line">     onUploadStart={(data) =&gt; {
</span><span class="token prefix unchanged"> </span><span class="token line">       updateFileMap(data, uploaders.length);
</span></span>
<span class="token inserted-sign inserted"><span class="token prefix inserted">+</span><span class="token line">       // 设置展示层级，默认展示根路径
</span><span class="token prefix inserted">+</span><span class="token line">       setGroupLayersMap((oldGroupLayersMap) =&gt; {
</span><span class="token prefix inserted">+</span><span class="token line">         const newGroupLayersMap = new Map(oldGroupLayersMap);
</span><span class="token prefix inserted">+</span><span class="token line">         newGroupLayersMap.set(uploaders.length, groupLayer ?? 1);
</span><span class="token prefix inserted">+</span><span class="token line">         return newGroupLayersMap;
</span><span class="token prefix inserted">+</span><span class="token line">       });
</span></span>
<span class="token unchanged"><span class="token prefix unchanged"> </span><span class="token line">       props.onUploadStart?.(data);
</span><span class="token prefix unchanged"> </span><span class="token line">     }}
</span><span class="token prefix unchanged"> </span><span class="token line">     ...
</span></span></code></pre></div><p>修改全局上传抽屉组件：</p>
<div class="language-diff" data-ext="diff" data-title="diff"><pre class="language-diff"><code><span class="token unchanged"><span class="token prefix unchanged"> </span><span class="token line"> export const GlobalUploadDrawer: FC = () =&gt; {
</span></span><span class="token deleted-sign deleted"><span class="token prefix deleted">-</span><span class="token line">   const uploadFiles = flatten(Array.from(uploadFilesMap.values())).reverse();
</span></span><span class="token inserted-sign inserted"><span class="token prefix inserted">+</span><span class="token line">   const groupedUploadFiles = groupByFolder(uploadFilesMap, groupLayersMap);
</span></span></code></pre></div><p><code>UploadFilesMap</code> 中仅包含平铺后的文件信息，无法直接识别上传的文件属于文件夹还是文件，所以需要利用 <code>webkitRelativePath</code> 判断，若为空则为文件，若不为空则属于文件夹。</p>
<p>同时，分组逻辑应为 <code>taskId + '-' + groupLayersMap.get(taskId).join('/')</code> 保证每个任务下的文件夹独立。</p>
<div class="language-tsx" data-ext="tsx" data-title="tsx"><pre class="language-tsx"><code><span class="token keyword">const</span> <span class="token function-variable function">groupByFolder</span> <span class="token operator">=</span> <span class="token punctuation">(</span>
  uploadFilesMap<span class="token operator">:</span> Map<span class="token operator">&lt;</span><span class="token builtin">number</span><span class="token punctuation">,</span> UploadFile<span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token operator">&gt;</span><span class="token punctuation">,</span>
  groupLayersMap<span class="token operator">:</span> Map<span class="token operator">&lt;</span><span class="token builtin">number</span><span class="token punctuation">,</span> <span class="token builtin">number</span><span class="token operator">&gt;</span>
<span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
  <span class="token keyword">const</span> folders<span class="token operator">:</span> Record<span class="token operator">&lt;</span>
    <span class="token builtin">string</span><span class="token punctuation">,</span>
    <span class="token punctuation">{</span> total<span class="token operator">:</span> <span class="token builtin">number</span><span class="token punctuation">;</span> percent<span class="token operator">:</span> <span class="token builtin">number</span><span class="token punctuation">;</span> uid<span class="token operator">:</span> <span class="token builtin">string</span><span class="token punctuation">;</span> name<span class="token operator">:</span> <span class="token builtin">string</span> <span class="token punctuation">}</span>
  <span class="token operator">&gt;</span> <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token punctuation">}</span>

  uploadFilesMap<span class="token punctuation">.</span><span class="token function">forEach</span><span class="token punctuation">(</span><span class="token punctuation">(</span>uploadFiles<span class="token punctuation">,</span> taskId<span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
    uploadFiles<span class="token punctuation">.</span><span class="token function">forEach</span><span class="token punctuation">(</span><span class="token punctuation">(</span>file<span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
      <span class="token comment">// 判断文件属于文件夹内还是文件</span>
      <span class="token comment">// @ts-expect-error</span>
      <span class="token keyword">const</span> relativePath <span class="token operator">=</span> file<span class="token punctuation">.</span>originFileObj<span class="token operator">!</span><span class="token punctuation">.</span>webkitRelativePath
      <span class="token keyword">const</span> pathParts <span class="token operator">=</span> relativePath <span class="token operator">?</span> relativePath<span class="token punctuation">.</span><span class="token function">split</span><span class="token punctuation">(</span><span class="token string">'/'</span><span class="token punctuation">)</span> <span class="token operator">:</span> <span class="token punctuation">[</span>file<span class="token punctuation">.</span>name<span class="token punctuation">]</span>

      <span class="token keyword">const</span> folder <span class="token operator">=</span>
        taskId <span class="token operator">+</span> <span class="token string">'-'</span> <span class="token operator">+</span> pathParts<span class="token punctuation">.</span><span class="token function">slice</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span> groupLayersMap<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span>taskId<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">join</span><span class="token punctuation">(</span><span class="token string">'/'</span><span class="token punctuation">)</span>
      <span class="token keyword">const</span> name <span class="token operator">=</span> pathParts<span class="token punctuation">.</span><span class="token function">slice</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span> groupLayersMap<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span>taskId<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">join</span><span class="token punctuation">(</span><span class="token string">''</span><span class="token punctuation">)</span>

      <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>folders<span class="token punctuation">[</span>folder<span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        folders<span class="token punctuation">[</span>folder<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token punctuation">{</span> total<span class="token operator">:</span> <span class="token number">0</span><span class="token punctuation">,</span> percent<span class="token operator">:</span> <span class="token number">0</span><span class="token punctuation">,</span> uid<span class="token operator">:</span> folder<span class="token punctuation">,</span> name <span class="token punctuation">}</span>
      <span class="token punctuation">}</span>

      folders<span class="token punctuation">[</span>folder<span class="token punctuation">]</span><span class="token operator">!</span><span class="token punctuation">.</span>total<span class="token operator">++</span>
      folders<span class="token punctuation">[</span>folder<span class="token punctuation">]</span><span class="token operator">!</span><span class="token punctuation">.</span>percent <span class="token operator">+=</span> file<span class="token punctuation">.</span>percent<span class="token operator">!</span>
    <span class="token punctuation">}</span><span class="token punctuation">)</span>
  <span class="token punctuation">}</span><span class="token punctuation">)</span>

  <span class="token comment">// reverse 保证最新的任务在最上方</span>
  <span class="token keyword">return</span> Object<span class="token punctuation">.</span><span class="token function">keys</span><span class="token punctuation">(</span>folders<span class="token punctuation">)</span>
    <span class="token punctuation">.</span><span class="token function">reverse</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
    <span class="token punctuation">.</span><span class="token function">map</span><span class="token punctuation">(</span><span class="token punctuation">(</span>folder<span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
      <span class="token keyword">return</span> <span class="token punctuation">{</span>
        name<span class="token operator">:</span> folders<span class="token punctuation">[</span>folder<span class="token punctuation">]</span><span class="token operator">?.</span>name<span class="token punctuation">,</span>
        percent<span class="token operator">:</span> folders<span class="token punctuation">[</span>folder<span class="token punctuation">]</span><span class="token operator">!</span><span class="token punctuation">.</span>percent <span class="token operator">/</span> folders<span class="token punctuation">[</span>folder<span class="token punctuation">]</span><span class="token operator">!</span><span class="token punctuation">.</span>total<span class="token punctuation">,</span>
        uid<span class="token operator">:</span> folders<span class="token punctuation">[</span>folder<span class="token punctuation">]</span><span class="token operator">?.</span>uid
      <span class="token punctuation">}</span>
    <span class="token punctuation">}</span><span class="token punctuation">)</span>
<span class="token punctuation">}</span>
</code></pre></div>]]></content>
    <category term="practice"/>
    <published>2023-11-22T00:00:00.000Z</published>
  </entry>
  <entry>
    <title type="text">移动端适配方案 postcss-px-to-viewport</title>
    <id>https://dribble-njr.github.io/blog/blog/frontend/practice/005-postcss-px-to-viewport.html</id>
    <link href="https://dribble-njr.github.io/blog/blog/frontend/practice/005-postcss-px-to-viewport.html"/>
    <updated>2024-01-07T10:18:51.000Z</updated>
    <summary type="html"><![CDATA[<p>由于 <code>px</code> 是固定单位，所以在不同设备上显示的大小是固定的，而不同设备又有不同大小，为了适配不同设备的单位大小，需要将 <code>px</code> 转换为视口单位。</p>
<p>确定方案之后，那么思考如何将 <code>px</code> 转为视口单位呢，一个一个算？不太可能，因为你事先并不知道用户手中的设备是什么大小，这样换算得到的结果并不能满足所有用户的需求，因此需要一个更为适用的方法。</p>
<p>这就需要用到一个插件：<code>postcss-px-to-viewport</code>。</p>
<h2>安装</h2>
<div class="language-text" data-ext="text" data-title="text"><pre class="language-text"><code>npm install postcss-px-to-viewport --save-dev
</code></pre></div>]]></summary>
    <content type="html"><![CDATA[<p>由于 <code>px</code> 是固定单位，所以在不同设备上显示的大小是固定的，而不同设备又有不同大小，为了适配不同设备的单位大小，需要将 <code>px</code> 转换为视口单位。</p>
<p>确定方案之后，那么思考如何将 <code>px</code> 转为视口单位呢，一个一个算？不太可能，因为你事先并不知道用户手中的设备是什么大小，这样换算得到的结果并不能满足所有用户的需求，因此需要一个更为适用的方法。</p>
<p>这就需要用到一个插件：<code>postcss-px-to-viewport</code>。</p>
<h2>安装</h2>
<div class="language-text" data-ext="text" data-title="text"><pre class="language-text"><code>npm install postcss-px-to-viewport --save-dev
</code></pre></div><h2>参数配置</h2>
<p>新建 <code>postcss.config.js</code>，默认配置如下：</p>
<div class="language-javascript" data-ext="js" data-title="js"><pre class="language-javascript"><code>module<span class="token punctuation">.</span>exports <span class="token operator">=</span> <span class="token punctuation">{</span>
  <span class="token literal-property property">plugins</span><span class="token operator">:</span> <span class="token punctuation">{</span>
    <span class="token string-property property">'postcss-px-to-viewport'</span><span class="token operator">:</span> <span class="token punctuation">{</span>
      <span class="token literal-property property">unitToConvert</span><span class="token operator">:</span> <span class="token string">'px'</span><span class="token punctuation">,</span> <span class="token comment">// 需要转换的单位</span>
      <span class="token literal-property property">viewportWidth</span><span class="token operator">:</span> <span class="token number">320</span><span class="token punctuation">,</span> <span class="token comment">// 设计稿的视口宽度</span>
      <span class="token literal-property property">unitPrecision</span><span class="token operator">:</span> <span class="token number">5</span><span class="token punctuation">,</span> <span class="token comment">// 单位转换后保留的精度</span>
      <span class="token literal-property property">propList</span><span class="token operator">:</span> <span class="token punctuation">[</span><span class="token string">'*'</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token comment">// 能转换的vw属性列表</span>
      <span class="token literal-property property">viewportUnit</span><span class="token operator">:</span> <span class="token string">'vw'</span><span class="token punctuation">,</span> <span class="token comment">// 希望使用的视口单位</span>
      <span class="token literal-property property">fontViewportUnit</span><span class="token operator">:</span> <span class="token string">'vw'</span><span class="token punctuation">,</span> <span class="token comment">// 字体使用的视口单位</span>
      <span class="token literal-property property">selectorBlackList</span><span class="token operator">:</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token comment">// 需要忽略的css选择器</span>
      <span class="token literal-property property">minPixelValue</span><span class="token operator">:</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token comment">// 设置最小的转换数值，如果为1，只有大于1的值才会被转换</span>
      <span class="token literal-property property">mediaQuery</span><span class="token operator">:</span> <span class="token boolean">false</span><span class="token punctuation">,</span> <span class="token comment">// 媒体查询中是否需要转换单位</span>
      <span class="token literal-property property">replace</span><span class="token operator">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span> <span class="token comment">// 是否直接更换属性值</span>
      <span class="token literal-property property">exclude</span><span class="token operator">:</span> <span class="token keyword">undefined</span><span class="token punctuation">,</span> <span class="token comment">// 忽略一些文件比如 node_modules</span>
      <span class="token literal-property property">include</span><span class="token operator">:</span> <span class="token keyword">undefined</span><span class="token punctuation">,</span> <span class="token comment">// 如果设置了 include，则仅转换匹配的文件</span>
      <span class="token literal-property property">landscape</span><span class="token operator">:</span> <span class="token boolean">false</span><span class="token punctuation">,</span> <span class="token comment">// 是否添加根据 landscapeWidth 生成的媒体查询条件 @media (orientation: landscape)</span>
      <span class="token literal-property property">landscapeUnit</span><span class="token operator">:</span> <span class="token string">'vw'</span><span class="token punctuation">,</span> <span class="token comment">// 横屏时使用的单位</span>
      <span class="token literal-property property">landscapeWidth</span><span class="token operator">:</span> <span class="token number">568</span> <span class="token comment">// 横屏时使用的视口宽度</span>
    <span class="token punctuation">}</span>
  <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre></div><p>详细配置见 <a href="https://github.com/evrone/postcss-px-to-viewport" target="_blank" rel="noopener noreferrer">postcss-px-to-viewport</a>。</p>
<p>当全部设置完成后，重新运行项目，查看 css 属性，即可发现所有 <code>px</code> 单位全部变成了 <code>vw</code> 单位。</p>
<p>切换不同的设备时，大小会随之发生变化。</p>
]]></content>
    <category term="practice"/>
    <published>2022-03-23T00:00:00.000Z</published>
  </entry>
  <entry>
    <title type="text">实践</title>
    <id>https://dribble-njr.github.io/blog/blog/frontend/practice/</id>
    <link href="https://dribble-njr.github.io/blog/blog/frontend/practice/"/>
    <updated>2024-01-13T16:33:26.000Z</updated>
    <summary type="html"><![CDATA[
<p>这里是关于前端实践的文章。</p>
]]></summary>
    <content type="html"><![CDATA[
<p>这里是关于前端实践的文章。</p>
]]></content>
    <published>2024-01-07T10:18:51.000Z</published>
  </entry>
  <entry>
    <title type="text">BFC 块级格式化上下文</title>
    <id>https://dribble-njr.github.io/blog/blog/frontend/basic/css/013-BFC.html</id>
    <link href="https://dribble-njr.github.io/blog/blog/frontend/basic/css/013-BFC.html"/>
    <updated>2024-01-07T13:07:06.000Z</updated>
    <summary type="html"><![CDATA[<h2>什么是 BFC</h2>
<p>块级格式化上下文（Block Formatting Context，BFC），其实是块级盒子的布局过程发生的区域，在这个区域内会有特定的布局规则。实际上他相当于一个 <strong>结界</strong>：如果一个元素具有 BFC，那么内部子元素无法影响外部的元素。</p>
<h2>触发 BFC</h2>
<p>触发 BFC 的 CSS 属性：</p>
<ul>
<li><code>&lt;html&gt;</code> 根元素</li>
<li>浮动元素：<code>float: left | right</code></li>
<li><code>overflow</code> 值不为 <code>visible</code>、<code>clip</code> 的块元素：<code>overflow: hidden | scroll | auto</code></li>
<li>绝对定位元素：<code>position: absolute | fixed</code></li>
<li><code>display: inline-block | table-cell | flex | table-caption | inline-flex</code></li>
</ul>]]></summary>
    <content type="html"><![CDATA[<h2>什么是 BFC</h2>
<p>块级格式化上下文（Block Formatting Context，BFC），其实是块级盒子的布局过程发生的区域，在这个区域内会有特定的布局规则。实际上他相当于一个 <strong>结界</strong>：如果一个元素具有 BFC，那么内部子元素无法影响外部的元素。</p>
<h2>触发 BFC</h2>
<p>触发 BFC 的 CSS 属性：</p>
<ul>
<li><code>&lt;html&gt;</code> 根元素</li>
<li>浮动元素：<code>float: left | right</code></li>
<li><code>overflow</code> 值不为 <code>visible</code>、<code>clip</code> 的块元素：<code>overflow: hidden | scroll | auto</code></li>
<li>绝对定位元素：<code>position: absolute | fixed</code></li>
<li><code>display: inline-block | table-cell | flex | table-caption | inline-flex</code></li>
</ul>
<h2>BFC 的布局规则</h2>
<p><strong>BFC 相当于一个独立块级容器，容器内的元素不会影响外部元素</strong>，具体规则如下：</p>
<ul>
<li>BFC 内的子元素以正常流排列；</li>
<li>BFC 内的 <strong>子元素</strong> 垂直方向的外边距会发生重叠，但是可以利用 BFC 包裹元素消除外边距重叠（如果不能消除外边距重叠问题，则会影响外部元素布局）；</li>
<li>BFC 元素计算高度时，浮动元素也参与计算。因此可以用来清除浮动（如果不能清除，子元素浮动则父元素高度塌陷，会影响后面元素的布局）。</li>
</ul>
<p>后面两条规则都是由于 BFC 的 <strong>结界</strong> 特性，常用来解决外边距重叠、浮动高度塌陷的问题。</p>
<p>所以 BFC 的核心规则就是：<strong>容器内的元素不会影响外部元素</strong>。</p>
<p>下面一一举例验证这些规则。</p>
<h3>BFC 内的子元素以正常流排列</h3>
<p><code>&lt;html&gt;</code> 根元素是最大的 BFC，它内部元素的布局是以正常流排列的，因此非常容易验证。</p>
<h3>margin 重叠</h3>
<h4>子元素的外边距会发生重叠</h4>
<p>很简单，<code>&lt;html&gt;</code> 根元素就是最大的 BFC，在里面布局当然会发生外边距重叠。块的上外边距（margin-top）和下外边距 （margin-bottom）会合并为单个边距，其大小为两个外边距中的最大值。</p>

<p>在这个例子中，为了看清两个子元素的外边距折叠问题，给父元素设置为宽 <code>120px</code>，边框 <code>1px</code> 黑色，第一个盒子设置了 <code>10px</code> 的 <code>margin-bottom</code>，第二个盒子设置为 <code>20px</code> 的 <code>margin-top</code>，两个盒子垂直外边距的值会取其中的最大值 <code>20px</code>。</p>
<h4>BFC 消除外边距折叠</h4>
<p>如果要消除这个影响，那么将第二个盒子包裹一个 wrapper，并将这个容器触发为 BFC，那么这个 wrapper 内的子元素则不会影响外部元素，当然也就消除了外边距折叠。</p>

<p>可以看到，在触发 BFC 后，两个盒子垂直方向外边距为 <code>30px</code>。</p>
<h3>浮动</h3>
<h4>浮动高度塌陷</h4>
<p>当我们使用 <code>float</code> 布局时，会使元素脱离文档流，造成高度塌陷。</p>

<p>可以看到，由于给子元素设置了浮动，会造成父盒子高度塌陷。</p>
<h4>BFC 清除浮动</h4>
<p>如果要解决这个问题，可以给容器触发 BFC，则可以消除浮动的影响，就无需使用 <code>clear: both</code> 属性去清除浮动了。</p>

<h2>两栏布局</h2>
<p>如果想使用浮动实现两栏布局，可以看到，由于浮动的影响，会形成文字环绕的效果。</p>

<p>如果给右边盒子触发 BFC，那么就可以得到想要的效果了。</p>

<h2>常见触发方式的优缺点</h2>
<ul>
<li><code>float: left | right</code>：浮动元素能够形成 BFC，但是浮动元素本身具有破坏性，无法用来实现自动填满容器的自适应布局。</li>
<li><code>position: absolute | fixed</code>：脱离文档流，一般用来和相对定位配合做布局，不太适合触发 BFC。</li>
<li><code>overflow: hidden</code>：本身还是一个普通的元素，并没有脱离文档流，兼容性也不错，<strong>推荐使用</strong>。</li>
</ul>
]]></content>
    <category term="CSS"/>
    <published>2022-07-18T00:00:00.000Z</published>
  </entry>
  <entry>
    <title type="text">模块化</title>
    <id>https://dribble-njr.github.io/blog/blog/frontend/engineering/basic/001-modularization.html</id>
    <link href="https://dribble-njr.github.io/blog/blog/frontend/engineering/basic/001-modularization.html"/>
    <updated>2024-01-07T08:28:24.000Z</updated>
    <summary type="html"><![CDATA[<p>早期 JavaScript 仅仅作为一个脚本语言，所需的代码通常不会很大。然而随着前端和 JavaScript 的发展，逐渐暴露出两个问题：</p>
<ul>
<li>全局污染：不同文件中的函数会相互污染；</li>
<li>依赖混乱：各文件中的函数依赖非常混乱。</li>
</ul>
<p>模块化就是为了解决上述问题，最终目的是为了将程序拆分为可按需导入的单独模块。在模块中编写属于自己的逻辑代码，拥有自己的作用域，能够导出希望暴露的变量、函数、对象等，并能通过某种方式，导入其他模块中的变量、函数或对象等。</p>
<p>JavaScript 本身直到 ES2015 才推出了自己的模块化方案 —— ES Module。在此之前，为了让 JavaScript 支持模块化，社区中涌现了不同的模块化规范：AMD、CMD、CommonJS 等。</p>]]></summary>
    <content type="html"><![CDATA[<p>早期 JavaScript 仅仅作为一个脚本语言，所需的代码通常不会很大。然而随着前端和 JavaScript 的发展，逐渐暴露出两个问题：</p>
<ul>
<li>全局污染：不同文件中的函数会相互污染；</li>
<li>依赖混乱：各文件中的函数依赖非常混乱。</li>
</ul>
<p>模块化就是为了解决上述问题，最终目的是为了将程序拆分为可按需导入的单独模块。在模块中编写属于自己的逻辑代码，拥有自己的作用域，能够导出希望暴露的变量、函数、对象等，并能通过某种方式，导入其他模块中的变量、函数或对象等。</p>
<p>JavaScript 本身直到 ES2015 才推出了自己的模块化方案 —— ES Module。在此之前，为了让 JavaScript 支持模块化，社区中涌现了不同的模块化规范：AMD、CMD、CommonJS 等。</p>
<h2>早期模块化方案</h2>
<h3>Window</h3>
<p>在最开始的前端时期，JavaScript 文件之间的通信通常会依靠 window 对象。</p>
<p><strong>utils.js</strong></p>
<div class="language-javascript" data-ext="js" data-title="js"><pre class="language-javascript"><code><span class="token keyword">var</span> utils <span class="token operator">=</span> <span class="token punctuation">{</span>
  <span class="token function">format</span><span class="token punctuation">(</span><span class="token parameter">time</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>time<span class="token punctuation">)</span>
  <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre></div><p><strong>time.js</strong></p>
<div class="language-javascript" data-ext="js" data-title="js"><pre class="language-javascript"><code><span class="token keyword">var</span> curTime <span class="token operator">=</span> <span class="token string">'2022-08-10 15:05'</span>
<span class="token keyword">var</span> time <span class="token operator">=</span> <span class="token punctuation">{</span>
  <span class="token literal-property property">curTime</span><span class="token operator">:</span> curTime
<span class="token punctuation">}</span>
</code></pre></div><p><strong>index.js</strong></p>
<div class="language-javascript" data-ext="js" data-title="js"><pre class="language-javascript"><code>window<span class="token punctuation">.</span>utils<span class="token punctuation">.</span><span class="token function">format</span><span class="token punctuation">(</span>window<span class="token punctuation">.</span>time<span class="token punctuation">.</span>curTime<span class="token punctuation">)</span> <span class="token comment">// '2022-08-10 15:05'</span>
</code></pre></div><p><strong>index.html</strong></p>
<div class="language-html" data-ext="html" data-title="html"><pre class="language-html"><code><span class="token doctype"><span class="token punctuation">&lt;!</span><span class="token doctype-tag">DOCTYPE</span> <span class="token name">html</span><span class="token punctuation">&gt;</span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>html</span> <span class="token attr-name">lang</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>en<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span>
  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>head</span><span class="token punctuation">&gt;</span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>meta</span> <span class="token attr-name">charset</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>UTF-8<span class="token punctuation">"</span></span> <span class="token punctuation">/&gt;</span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>meta</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>viewport<span class="token punctuation">"</span></span> <span class="token attr-name">content</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>width=device-width, initial-scale=1.0<span class="token punctuation">"</span></span> <span class="token punctuation">/&gt;</span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>title</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>title</span><span class="token punctuation">&gt;</span></span>
  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>head</span><span class="token punctuation">&gt;</span></span>
  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>body</span><span class="token punctuation">&gt;</span></span>
    <span class="token comment">&lt;!-- 必须保证顺序正确 --&gt;</span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span> <span class="token attr-name">src</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>./time.js<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span><span class="token script"></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">&gt;</span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span> <span class="token attr-name">src</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>./utils.js<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span><span class="token script"></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">&gt;</span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span> <span class="token attr-name">src</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>./index.js<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span><span class="token script"></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">&gt;</span></span>
  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>body</span><span class="token punctuation">&gt;</span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>html</span><span class="token punctuation">&gt;</span></span>
</code></pre></div><p>然而这会带来命名冲突的问题，并且声明的全局变量会占用内存无法回收，代码可读性差。因此出现了立即调用表达式（IIFE）。</p>
<h2>IIFE</h2>
<p>使用立即调用表达式（Immediately Invoked Function Expression, IIFE）改造上述代码：</p>
<p><strong>utils.js</strong></p>
<div class="language-javascript" data-ext="js" data-title="js"><pre class="language-javascript"><code><span class="token keyword">var</span> moduleUtils <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token keyword">var</span> <span class="token function-variable function">format</span> <span class="token operator">=</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token parameter">time</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>time<span class="token punctuation">)</span>
  <span class="token punctuation">}</span>

  <span class="token keyword">return</span> <span class="token punctuation">{</span>
    format
  <span class="token punctuation">}</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
</code></pre></div><p><strong>time.js</strong></p>
<div class="language-javascript" data-ext="js" data-title="js"><pre class="language-javascript"><code><span class="token keyword">var</span> moduleTime <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token keyword">var</span> curTime <span class="token operator">=</span> <span class="token string">'2022-08-10 15:05'</span>

  <span class="token keyword">return</span> <span class="token punctuation">{</span>
    curTime
  <span class="token punctuation">}</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
</code></pre></div><p><strong>index.js</strong></p>
<div class="language-javascript" data-ext="js" data-title="js"><pre class="language-javascript"><code>window<span class="token punctuation">.</span>moduleUtils<span class="token punctuation">.</span><span class="token function">format</span><span class="token punctuation">(</span>window<span class="token punctuation">.</span>moduleTime<span class="token punctuation">.</span>curTime<span class="token punctuation">)</span>
</code></pre></div><p>现在因为函数具有作用域，就可以解决命名冲突的问题，然而这再次带来了新的问题：</p>
<ul>
<li>代码混乱不堪，每个文件的代码都需要包裹在一个立即调用函数表达式中编写；</li>
<li>在没有合适的规范的情况下，每个公司或个人都会出现任意命名导致模块名称相同的情况。</li>
</ul>
<p>因此需要用规范编写模块化代码，这个规范需要包括两个核心功能：<strong>模块本身可以导出暴露的属性，又可以导入需要的属性。</strong></p>
<h2>CommonJS</h2>
<p>CommonJS 是一个 JavaScript 规范，最初提出来是在浏览器以外的地方使用，并且当时被命名为 ServerJS，后来为了体现它的广泛性，修改为 CommonJS，平时我们也会简称为 CJS。</p>
<p>NodeJS 对 CommonJS 进行了支持和实现：</p>
<ul>
<li>在 Node 中每个 js 文件都是一个单独的模块；</li>
<li>这个模块包括 CommonJS 规范的核心变量：<code>exports</code> <code>module.exports</code> <code>require</code>。</li>
</ul>
<p>下面在 node 环境中执行以下代码。</p>
<p><strong>utils.js</strong></p>
<div class="language-javascript" data-ext="js" data-title="js"><pre class="language-javascript"><code><span class="token keyword">const</span> <span class="token function-variable function">format</span> <span class="token operator">=</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token parameter">time</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>time<span class="token punctuation">)</span>
<span class="token punctuation">}</span>

module<span class="token punctuation">.</span>exports <span class="token operator">=</span> <span class="token punctuation">{</span>
  format
<span class="token punctuation">}</span>
</code></pre></div><p><strong>time.js</strong></p>
<div class="language-javascript" data-ext="js" data-title="js"><pre class="language-javascript"><code><span class="token keyword">const</span> curTime <span class="token operator">=</span> <span class="token string">'2022-08-10 15:05'</span>

exports<span class="token punctuation">.</span>curTime <span class="token operator">=</span> curTime
</code></pre></div><p><strong>index.js</strong></p>
<div class="language-javascript" data-ext="js" data-title="js"><pre class="language-javascript"><code><span class="token keyword">const</span> <span class="token punctuation">{</span> curTime <span class="token punctuation">}</span> <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">'./time.js'</span><span class="token punctuation">)</span>
<span class="token keyword">const</span> <span class="token punctuation">{</span> format <span class="token punctuation">}</span> <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">'./utils'</span><span class="token punctuation">)</span>

<span class="token function">format</span><span class="token punctuation">(</span>curTime<span class="token punctuation">)</span> <span class="token comment">// "2022-08-10 15:05"</span>
</code></pre></div><h3><code>exports</code> 和 <code>module.exports</code></h3>
<p>可以看到，node 中实用 <code>exports</code> 和 <code>module.exports</code> 实现模块导出，使用 <code>require()</code> 实现模块导入。</p>
<p>那么为什么要有两个导出方式？</p>
<p>因为 CommonJS 规范中只定义了 <code>exports</code>，但是它存在一些问题，因此 node 使用 <code>module.exports = exports</code> 间接代替了 <code>exports</code>，他们两个指向同一个内存地址的对象。<code>require()</code> 会返回 <code>module.exports</code> 指向的对象。</p>
<p>可以在 index.js 中打印 <code>module</code> 对象：</p>
<div class="language-javascript" data-ext="js" data-title="js"><pre class="language-javascript"><code>Module <span class="token punctuation">{</span>
  <span class="token literal-property property">id</span><span class="token operator">:</span> <span class="token string">'.'</span><span class="token punctuation">,</span>                    <span class="token comment">// 模块 id</span>
  <span class="token literal-property property">path</span><span class="token operator">:</span> <span class="token string">'/* ... */'</span><span class="token punctuation">,</span>          <span class="token comment">// 文件路径</span>
  <span class="token literal-property property">exports</span><span class="token operator">:</span> <span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">,</span>                <span class="token comment">// 模块导出对象</span>
  <span class="token literal-property property">filename</span><span class="token operator">:</span> <span class="token string">'/* ... */'</span><span class="token punctuation">,</span>      <span class="token comment">// 文件名</span>
  <span class="token literal-property property">loaded</span><span class="token operator">:</span> <span class="token boolean">false</span><span class="token punctuation">,</span>              <span class="token comment">// 模块是否加载完成</span>
  <span class="token literal-property property">children</span><span class="token operator">:</span> <span class="token punctuation">[</span>
    Module <span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">,</span> <span class="token comment">// 模块 utils</span>
    Module <span class="token punctuation">{</span><span class="token punctuation">}</span>  <span class="token comment">// 模块 time</span>
  <span class="token punctuation">]</span><span class="token punctuation">,</span>
  <span class="token literal-property property">paths</span><span class="token operator">:</span> <span class="token punctuation">[</span> <span class="token comment">/* ... */</span> <span class="token punctuation">]</span>        <span class="token comment">// 搜索路径</span>
<span class="token punctuation">}</span>
</code></pre></div><h3>require</h3>
<p><code>require()</code> 引入模块需要经历三个步骤：</p>
<ol>
<li>路径分析</li>
<li>文件定位</li>
<li>编译执行</li>
</ol>
<h4>核心模块和文件模块</h4>
<p>而在 Node 中，模块分为核心模块和文件模块：</p>
<ul>
<li>核心模块：在 Node 源代码的编译过程中，编译成了二进制执行文件。在 Node 进程启动时，核心模块就直接加载进了内存中，因此核心模块引入时，不需要进行文件定位和编译执行，并且在路径分析时会优先判断，因此它的加载速度是最快的。</li>
<li>文件模块：在运行时动态加载，需要完整的路径分析、文件定位、编译执行过程，速度比核心模块慢。</li>
</ul>
<h4>优先从缓存中加载</h4>
<p>Node 会对引入过的模块进行缓存，以减少二次引入时的开销，对任何模块都会采取缓存优先的策略，<strong>缓存是第一优先级</strong>。</p>
<p>从缓存加载的优化策略使得二次引入时不需要路径分析、文件定位和编译执行的过程，提高了加载模块的效率。</p>
<h4>路径分析</h4>
<p>在判断缓存后，需要对模块进行路径分析和文件定位，<code>require(X)</code> 接收一个<strong>模块标识符</strong>，不同标识符有不同查找规则。</p>
<p><strong>情况一：X 是一个核心模块，如 path、http</strong></p>
<p><strong>核心模块</strong>会直接返回模块，并且停止查找。</p>
<p>试图加载一个与核心模块标识符相同的自定义模块是不会成功的，如果自己编写了一个 <code>http</code> 用户模块，想要加载成功，则必须选择一个不同的标识符或者换用路径方式。</p>
<p><strong>情况二：X 以 ./ 或 ../ 或 / （路径形式）开头</strong></p>
<p>以路径开始的标识符，会被当成<strong>文件模块</strong>，在分析路径时，<code>require(X)</code> 方法会将路径转换为真实路径，并以真实路径作为索引，将编译执行的过程中放到缓存中。由于文件模块给 Node 指明了确切的文件位置，因此在查找过程中可以节约大量时间，<strong>文件模块的加载速度慢于核心模块</strong>。</p>
<p><strong>情况三：直接是一个 X（没有路径），并且 X 不是一个核心模块</strong></p>
<p>这种情况下，X 是一个<strong>自定义模块</strong>，那么 Node 会从<strong>模块路径</strong> <code>moudle.paths</code> 中查找。</p>
<blockquote>
<p>模块路径：Node 在定位文件模块的具体文件时指定的查找策略，为多个路径组成的数组。</p>
</blockquote>
<p>在 Linux 下，打印这个可能输出：</p>
<div class="language-javascript" data-ext="js" data-title="js"><pre class="language-javascript"><code><span class="token punctuation">;</span><span class="token punctuation">[</span>
  <span class="token string">'/home/jackson/research/node_modules'</span><span class="token punctuation">,</span>
  <span class="token string">'/home/jackson/node_modules'</span><span class="token punctuation">,</span>
  <span class="token string">'/home/node_modules'</span><span class="token punctuation">,</span>
  <span class="token string">'/node_modules'</span>
<span class="token punctuation">]</span>
</code></pre></div><p>Windows 下，可能会输出：</p>
<div class="language-javascript" data-ext="js" data-title="js"><pre class="language-javascript"><code><span class="token punctuation">;</span><span class="token punctuation">[</span><span class="token string">'c:\\nodejs\\node_modules'</span><span class="token punctuation">,</span> <span class="token string">'c:\\node_modules'</span><span class="token punctuation">]</span>
</code></pre></div><p>模块路径的生成规则如下：</p>
<ul>
<li>当前文件目录下的 <code>node_modules</code> 目录</li>
<li>父目录下的 <code>node_modules</code> 目录</li>
<li>父目录的父目录下的 <code>node_modules</code> 目录</li>
<li>沿路径向上逐级递归，直到根目录下的 <code>node_modules</code> 目录</li>
</ul>
<p>在加载过程中，Node 会逐个尝试模块路径中的路径，直到找到目标模块，因此速度在三个情况中最慢。</p>
<h4>文件定位</h4>
<p>文件定位主要包括文件扩展名分析、目录和包的处理。</p>
<p><strong>文件扩展名分析</strong></p>
<p><code>require(X)</code> 在分析标识符的过程中，会出现标识符不包含文件扩展名的情况。</p>
<ol>
<li>如果有文件扩展名，按照后缀名的格式查找对应的文件</li>
<li>如果没有文件扩展名，会按照如下顺序尝试：</li>
</ol>
<ul>
<li>直接查找文件 X</li>
<li>查找 <code>X.js</code> 文件</li>
<li>查找 <code>X.json</code> 文件</li>
<li>查找 <code>X.node</code> 文件</li>
</ul>
<p>在尝试的过程中，需要调用 <code>fs</code> 模块同步阻塞式地判断文件是否存在，所以会引起性能问题，因此，最好带上文件扩展名，会加快模块加载速度。</p>
<p><strong>目录分析和包</strong></p>
<p>在分析标识符的过程中，通过分析文件扩展名可能并没有得到对应文件，但却得到一个目录，此时 Node 会将目录当作一个包来处理。</p>
<ol>
<li>首先在当前目录下查找 <code>package.json</code> 文件，通过 <code>JSON.parse()</code> 解析出包描述对象，从中取出 <code>main</code> 属性指定的文件名进行定位，如果文件名缺少扩展名，则会进行文件扩展名分析</li>
<li>如果 <code>main</code> 属性指定的文件名错误，或者没有 <code>package.json</code> 文件，那么会一次查找目录下面的 <code>index</code> 文件</li>
</ol>
<ul>
<li>查找 <code>X/index.js</code> 文件</li>
<li>查找 <code>X/index.json</code> 文件</li>
<li>查找 <code>X/index.node</code> 文件</li>
</ul>
<ol start="3">
<li>如果目录分析的过程中没有成功定位，则自定义模块进入下一个模块路径中进行搜索；如果所有路径都遍历完毕，仍然没有找到目标文件，那么报错：<code>not found</code></li>
</ol>
<h3>模块编译</h3>
<p>Node 中对于模块的定义如下：</p>
<div class="language-javascript" data-ext="js" data-title="js"><pre class="language-javascript"><code><span class="token keyword">function</span> <span class="token function">Module</span><span class="token punctuation">(</span><span class="token parameter">id<span class="token punctuation">,</span> parent</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token keyword">this</span><span class="token punctuation">.</span>id <span class="token operator">=</span> id
  <span class="token keyword">this</span><span class="token punctuation">.</span>exports <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token punctuation">}</span>
  <span class="token keyword">this</span><span class="token punctuation">.</span>parent <span class="token operator">=</span> parent
  <span class="token keyword">if</span> <span class="token punctuation">(</span>parent <span class="token operator">&amp;&amp;</span> parent<span class="token punctuation">.</span>children<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    parent<span class="token punctuation">.</span>children<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">)</span>
  <span class="token punctuation">}</span>

  <span class="token keyword">this</span><span class="token punctuation">.</span>filename <span class="token operator">=</span> <span class="token keyword">null</span>
  <span class="token keyword">this</span><span class="token punctuation">.</span>loaded <span class="token operator">=</span> <span class="token boolean">false</span>
  <span class="token keyword">this</span><span class="token punctuation">.</span>children <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span>
  <span class="token comment">// ...</span>
<span class="token punctuation">}</span>
</code></pre></div><p>当定位到目标文件时，Node 会新建一个模块对象，然后根据路径载入并编译，对于不同的文件扩展名，它的载入方法也不同：</p>
<ul>
<li><code>.js</code> 文件：通过 <code>fs</code> 模块同步读取文件后编译执行；</li>
<li><code>.node</code> 文件：这是用 <code>C/C++</code> 编写的扩展文件，通过 <code>dlopen()</code> 方法加载最后编译生成的文件；</li>
<li><code>.json</code> 文件：通过 <code>fs</code> 模块同步读取文件后，用 <code>JSON.parse()</code> 解析返回结果；</li>
<li>其余扩展名文件：都被当作 <code>.js</code> 文件载入。</li>
</ul>
<p>模块在第一次被引入时，模块中的代码会被执行一次；模块被多次引入，会缓存（<code>module.loaded</code> 设置为 <code>true</code>），最终只运行一次；如果有循环引入，会采用深度优先搜索加载模块。</p>
<p>每一个编译成功的模块都会讲其文件路径作为索引缓存在 <code>Module._cache</code> 对象上，以提高二次引入的性能。</p>
<h3>其他</h3>
<p>每个模块都存在 <code>require</code>、<code>exports</code>、<code>module</code> 等其它变量，这些变量从何而来？这是因为 Node 对获取的 JavaScript 文件内容进行了头尾包装。</p>
<div class="language-javascript" data-ext="js" data-title="js"><pre class="language-javascript"><code><span class="token punctuation">;</span><span class="token punctuation">(</span><span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token parameter">exports<span class="token punctuation">,</span> require<span class="token punctuation">,</span> module<span class="token punctuation">,</span> __filename<span class="token punctuation">,</span> __dirname</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token keyword">var</span> Math <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">'math'</span><span class="token punctuation">)</span>
  exports<span class="token punctuation">.</span><span class="token function-variable function">area</span> <span class="token operator">=</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token parameter">raduis</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">return</span> Math<span class="token punctuation">.</span><span class="token constant">PI</span> <span class="token operator">*</span> radius <span class="token operator">*</span> radius
  <span class="token punctuation">}</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span>
</code></pre></div><p>这样每个模块文件都用函数进行了作用域隔离，包装之后的代码会通过 <code>vm</code> 原生模块的 <code>runInThisContext()</code> 方法执行（类似 <code>eval</code>，只是有明确作用域，不会污染全局），返回一个具体的 <code>function</code> 对象。最后,将当前模块的 <code>exports</code> 属性、<code>require()</code> 方法、<code>module</code> 以及在文件定位中得到的完整文件路径和文件目录作为参数传递给这个 <code>function</code> 执行。</p>
<p>那么为什么存在 <code>exports</code> 的情况下，还存在 <code>module.exports</code>？</p>
<p>先来看看包装之后的文件：</p>
<div class="language-javascript" data-ext="js" data-title="js"><pre class="language-javascript"><code><span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token parameter">exports<span class="token punctuation">,</span> require<span class="token punctuation">,</span> module<span class="token punctuation">,</span> __filename<span class="token punctuation">,</span> __dirname</span><span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token punctuation">}</span>
</code></pre></div><p><code>exports</code> 是通过形参的方式传入，<strong>直接赋值形参会改变形参的引用</strong>，但并不能改变作用域外的值，因此在使用 <code>exports</code> 的时候不推荐直接赋值一个对象，而是通过赋值属性的方式导出变量。而如果想要达到 <code>require</code> 直接引入一个类的效果，应该赋值给 <code>module.exports</code> 对象，这种方案不会改变形参的引用。</p>
<h3>缺点</h3>
<p>CommonJS 加载模块是同步的：同步意味着只有等到对应的模块加载完毕，当前模块中的内容才能被运行。</p>
<p>这也是通常用作服务器模块化规范的原因，因为服务器加载的 js 文件都是本地文件，加载速度非常快。</p>
<p>如果将它应用于浏览器呢？浏览器加载 js 文件需要先从服务器将文件下载下来，之后在加载运行，会阻塞后续代码的执行。</p>
<p>所以早期在浏览器中，我们通常不使用 CommonJS 规范，而通常会采用 AMD 或 CMD 规范。</p>
<h2>AMD/CMD</h2>
<p>AMD 和 CMD 是用于浏览器端的模块化规范。</p>
<p>但是目前一方面现代的浏览器已经支持 ES Modules，另一方面借助于 webpack 等工具可以实现对 CommonJS 或者 ES Module 代码的转换。AMD 和 CMD 已经使用非常少了，所以这里我们进行简单的演练。</p>
<h3>AMD</h3>
<p>异步模块定义（Asynchronous Module Definition，AMD）采用异步加载模块，因此可以在浏览器中使用。比较常用的库是 <code>require.js</code>。</p>
<blockquote>
<p>先有 RequireJS，后有 AMD 规范，随着 RequireJS 的推广和普及，AMD 规范才被创建出来。</p>
</blockquote>
<div class="language-bash" data-ext="sh" data-title="sh"><pre class="language-bash"><code>AMD
├── index.html
├── index.js
├── lib
│   └── require.js
└── modules
    ├── time.js
    └── .js
</code></pre></div><p><strong>index.html</strong></p>
<div class="language-html" data-ext="html" data-title="html"><pre class="language-html"><code><span class="token doctype"><span class="token punctuation">&lt;!</span><span class="token doctype-tag">DOCTYPE</span> <span class="token name">html</span><span class="token punctuation">&gt;</span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>html</span> <span class="token attr-name">lang</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>en<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span>
  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>head</span><span class="token punctuation">&gt;</span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>meta</span> <span class="token attr-name">charset</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>UTF-8<span class="token punctuation">"</span></span> <span class="token punctuation">/&gt;</span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>meta</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>viewport<span class="token punctuation">"</span></span> <span class="token attr-name">content</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>width=device-width, initial-scale=1.0<span class="token punctuation">"</span></span> <span class="token punctuation">/&gt;</span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>title</span><span class="token punctuation">&gt;</span></span>Document<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>title</span><span class="token punctuation">&gt;</span></span>
  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>head</span><span class="token punctuation">&gt;</span></span>
  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>body</span><span class="token punctuation">&gt;</span></span>
    <span class="token comment">&lt;!-- 注意 data-main --&gt;</span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span> <span class="token attr-name">src</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>./lib/require.js<span class="token punctuation">"</span></span> <span class="token attr-name">data-main</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>./index.js<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span><span class="token script"></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">&gt;</span></span>
  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>body</span><span class="token punctuation">&gt;</span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>html</span><span class="token punctuation">&gt;</span></span>
</code></pre></div><p><strong>index.js</strong></p>
<div class="language-javascript" data-ext="js" data-title="js"><pre class="language-javascript"><code><span class="token punctuation">;</span><span class="token punctuation">(</span><span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token comment">// 配置</span>
  require<span class="token punctuation">.</span><span class="token function">config</span><span class="token punctuation">(</span><span class="token punctuation">{</span>
    <span class="token literal-property property">baseUrl</span><span class="token operator">:</span> <span class="token string">''</span><span class="token punctuation">,</span>
    <span class="token comment">// 模块映射关系</span>
    <span class="token literal-property property">paths</span><span class="token operator">:</span> <span class="token punctuation">{</span>
      <span class="token literal-property property">time</span><span class="token operator">:</span> <span class="token string">'./modules/time'</span><span class="token punctuation">,</span>
      <span class="token literal-property property">utils</span><span class="token operator">:</span> <span class="token string">'./modules/utils'</span>
    <span class="token punctuation">}</span>
  <span class="token punctuation">}</span><span class="token punctuation">)</span>

  <span class="token function">require</span><span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token string">'utils'</span><span class="token punctuation">,</span> <span class="token string">'time'</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token parameter">utils<span class="token punctuation">,</span> time</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token comment">// 逻辑代码</span>
    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>utils<span class="token punctuation">.</span>format<span class="token punctuation">)</span> <span class="token comment">// Function</span>
    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>time<span class="token punctuation">.</span>curTime<span class="token punctuation">)</span> <span class="token comment">// 2022-08-10 15:05</span>
  <span class="token punctuation">}</span><span class="token punctuation">)</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
</code></pre></div><p><strong>time.js</strong></p>
<div class="language-javascript" data-ext="js" data-title="js"><pre class="language-javascript"><code><span class="token comment">// 定义模块</span>
<span class="token function">define</span><span class="token punctuation">(</span><span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token keyword">const</span> curTime <span class="token operator">=</span> <span class="token string">'2022-08-10 15:05'</span>

  <span class="token comment">// 暴露属性</span>
  <span class="token keyword">return</span> <span class="token punctuation">{</span>
    curTime
  <span class="token punctuation">}</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span>
</code></pre></div><p><strong>utils.js</strong></p>
<div class="language-javascript" data-ext="js" data-title="js"><pre class="language-javascript"><code><span class="token comment">// 定义模块，引入需要的模块</span>
<span class="token function">define</span><span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token string">'time'</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token parameter">time</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token keyword">const</span> <span class="token function-variable function">format</span> <span class="token operator">=</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token parameter">time</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>time<span class="token punctuation">)</span>
  <span class="token punctuation">}</span>

  <span class="token function">format</span><span class="token punctuation">(</span>time<span class="token punctuation">.</span>curTime<span class="token punctuation">)</span> <span class="token comment">// 2022-08-10 15:05</span>

  <span class="token comment">// 暴露属性</span>
  <span class="token keyword">return</span> <span class="token punctuation">{</span>
    format
  <span class="token punctuation">}</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span>
</code></pre></div><h3>CMD</h3>
<p>通用模块定义（Common Module Definition，CMD）采用异步加载模块，并且吸收 CommonJS 的优点，比较常用的库是 <code>SeaJS</code>。</p>
<div class="language-bash" data-ext="sh" data-title="sh"><pre class="language-bash"><code>CMD
├── index.html
├── index.js
├── lib
│   └── sea.js
└── modules
    ├── time.js
    └── .js
</code></pre></div><p><strong>index.html</strong></p>
<div class="language-html" data-ext="html" data-title="html"><pre class="language-html"><code><span class="token doctype"><span class="token punctuation">&lt;!</span><span class="token doctype-tag">DOCTYPE</span> <span class="token name">html</span><span class="token punctuation">&gt;</span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>html</span> <span class="token attr-name">lang</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>en<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span>
  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>head</span><span class="token punctuation">&gt;</span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>meta</span> <span class="token attr-name">charset</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>UTF-8<span class="token punctuation">"</span></span> <span class="token punctuation">/&gt;</span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>meta</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>viewport<span class="token punctuation">"</span></span> <span class="token attr-name">content</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>width=device-width, initial-scale=1.0<span class="token punctuation">"</span></span> <span class="token punctuation">/&gt;</span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>title</span><span class="token punctuation">&gt;</span></span>Document<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>title</span><span class="token punctuation">&gt;</span></span>
  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>head</span><span class="token punctuation">&gt;</span></span>
  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>body</span><span class="token punctuation">&gt;</span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span> <span class="token attr-name">src</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>./lib/sea.js<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span><span class="token script"></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">&gt;</span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span><span class="token punctuation">&gt;</span></span><span class="token script"><span class="token language-javascript">
      seajs<span class="token punctuation">.</span><span class="token function">use</span><span class="token punctuation">(</span><span class="token string">'./index.js'</span><span class="token punctuation">)</span>
    </span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">&gt;</span></span>
  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>body</span><span class="token punctuation">&gt;</span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>html</span><span class="token punctuation">&gt;</span></span>
</code></pre></div><p><strong>index.js</strong></p>
<div class="language-javascript" data-ext="js" data-title="js"><pre class="language-javascript"><code><span class="token function">define</span><span class="token punctuation">(</span><span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token parameter">require<span class="token punctuation">,</span> exports<span class="token punctuation">,</span> module</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token keyword">const</span> <span class="token punctuation">{</span> curTime <span class="token punctuation">}</span> <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">'./modules/foo'</span><span class="token punctuation">)</span>
  <span class="token keyword">const</span> <span class="token punctuation">{</span> format <span class="token punctuation">}</span> <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">'./modules/utils'</span><span class="token punctuation">)</span>

  <span class="token function">format</span><span class="token punctuation">(</span>curTime<span class="token punctuation">)</span> <span class="token comment">// 2022-08-10 15:05</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span>
</code></pre></div><p><strong>time.js</strong></p>
<div class="language-javascript" data-ext="js" data-title="js"><pre class="language-javascript"><code><span class="token function">define</span><span class="token punctuation">(</span><span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token parameter">require<span class="token punctuation">,</span> exports<span class="token punctuation">,</span> module</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token keyword">const</span> curTime <span class="token operator">=</span> <span class="token string">'2022-08-10 15:05'</span>

  module<span class="token punctuation">.</span>exports <span class="token operator">=</span> <span class="token punctuation">{</span>
    curTime
  <span class="token punctuation">}</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span>
</code></pre></div><p><strong>utils.js</strong></p>
<div class="language-javascript" data-ext="js" data-title="js"><pre class="language-javascript"><code><span class="token function">define</span><span class="token punctuation">(</span><span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token parameter">require<span class="token punctuation">,</span> exports<span class="token punctuation">,</span> module</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token keyword">const</span> <span class="token function-variable function">format</span> <span class="token operator">=</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token parameter">time</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>time<span class="token punctuation">)</span>
  <span class="token punctuation">}</span>

  module<span class="token punctuation">.</span>exports <span class="token operator">=</span> <span class="token punctuation">{</span>
    format
  <span class="token punctuation">}</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span>
</code></pre></div><h2>ESM</h2>
<p>ES2015 后浏览器实现的模块化方案，长远来看，未来无论是基于 JS 的 WEB 端，还是基于 node 的服务器端或桌面应用，模块规范都会统一使用 ES6 module。</p>
<h3>兼容性</h3>
<p>并不是所有浏览器都对 ESM 实现完全支持，需要用到 webpack 等工具实现代码转换。</p>
<p>可见 <a href="https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Guide/Modules#%E6%B5%8F%E8%A7%88%E5%99%A8%E6%94%AF%E6%8C%81" target="_blank" rel="noopener noreferrer">浏览器支持</a>。</p>
<h3>导出</h3>
<h4>方式一：分别导出</h4>
<div class="language-javascript" data-ext="js" data-title="js"><pre class="language-javascript"><code><span class="token keyword">export</span> <span class="token keyword">const</span> curTime <span class="token operator">=</span> <span class="token string">'2022-08-10 15:05'</span>
<span class="token keyword">export</span> <span class="token keyword">const</span> <span class="token function-variable function">format</span> <span class="token operator">=</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token parameter">time</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>time<span class="token punctuation">)</span>
<span class="token punctuation">}</span>
</code></pre></div><h4>方式二：统一导出</h4>
<div class="language-javascript" data-ext="js" data-title="js"><pre class="language-javascript"><code><span class="token keyword">const</span> curTime <span class="token operator">=</span> <span class="token string">'2022-08-10 15:05'</span>
<span class="token keyword">const</span> <span class="token function-variable function">format</span> <span class="token operator">=</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token parameter">time</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>time<span class="token punctuation">)</span>
<span class="token punctuation">}</span>

<span class="token keyword">export</span> <span class="token punctuation">{</span> curTime<span class="token punctuation">,</span> format <span class="token punctuation">}</span>
</code></pre></div><h4>方式三：别名导出</h4>
<div class="language-javascript" data-ext="js" data-title="js"><pre class="language-javascript"><code><span class="token keyword">export</span> <span class="token punctuation">{</span> curTime <span class="token keyword">as</span> time<span class="token punctuation">,</span> format <span class="token punctuation">}</span>
</code></pre></div><p>注意这里 <code>{}</code> 并非对象。</p>
<h4>方式四：默认导出</h4>
<p>一个模块中只能有一个默认导出。</p>
<div class="language-javascript" data-ext="js" data-title="js"><pre class="language-javascript"><code><span class="token keyword">export</span> <span class="token keyword">default</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token parameter">time</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'format'</span><span class="token punctuation">,</span> time<span class="token punctuation">)</span>
<span class="token punctuation">}</span>
</code></pre></div><h3>导入</h3>
<h4>方式一：统一导入</h4>
<div class="language-javascript" data-ext="js" data-title="js"><pre class="language-javascript"><code><span class="token keyword">import</span> <span class="token punctuation">{</span> curTime<span class="token punctuation">,</span> format <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">'./module.js'</span>
</code></pre></div><h4>方式二：整体导入</h4>
<div class="language-javascript" data-ext="js" data-title="js"><pre class="language-javascript"><code><span class="token keyword">import</span> <span class="token operator">*</span> <span class="token keyword">as</span> module <span class="token keyword">from</span> <span class="token string">'./module.js'</span>
module<span class="token punctuation">.</span><span class="token function">format</span><span class="token punctuation">(</span>module<span class="token punctuation">.</span>time<span class="token punctuation">)</span>
</code></pre></div><h4>方式三：别名导入</h4>
<div class="language-javascript" data-ext="js" data-title="js"><pre class="language-javascript"><code><span class="token keyword">import</span> <span class="token punctuation">{</span> curTime <span class="token keyword">as</span> time<span class="token punctuation">,</span> format <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">'./module.js'</span>
</code></pre></div><h4>方式四：默认导出的导入</h4>
<div class="language-javascript" data-ext="js" data-title="js"><pre class="language-javascript"><code><span class="token keyword">import</span> format <span class="token keyword">from</span> <span class="token string">'./module.js'</span>
</code></pre></div><h3><code>import()</code></h3>
<p>上述的导入都是用 import 关键字实现模块实现，<code>import()</code> 函数可以实现动态导入模块。</p>
<div class="language-javascript" data-ext="js" data-title="js"><pre class="language-javascript"><code><span class="token keyword">let</span> flag <span class="token operator">=</span> <span class="token boolean">true</span>
<span class="token keyword">if</span> <span class="token punctuation">(</span>flag<span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token keyword">import</span><span class="token punctuation">(</span><span class="token string">'./foo.js'</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">then</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token parameter">foo</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
    <span class="token comment">// 逻辑代码</span>
  <span class="token punctuation">}</span><span class="token punctuation">)</span>
<span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>
  <span class="token keyword">import</span><span class="token punctuation">(</span><span class="token string">'./bar.js'</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">then</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token parameter">bar</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
    <span class="token comment">// 逻辑代码</span>
  <span class="token punctuation">}</span><span class="token punctuation">)</span>
<span class="token punctuation">}</span>
</code></pre></div><h3>ESM VS CommonJS</h3>
<p>CommonJS 模块加载 js 文件的过程是 <strong>运行时</strong> 加载的，并且是同步的：</p>
<ul>
<li>运行时加载意味着是 js 引擎在执行 js 代码的过程中加载模块；</li>
<li>同步的就意味着一个文件没有加载结束之前，后面的代码都不会执行。</li>
</ul>
<p>ES Module 加载 js 文件的过程是 <strong>编译（解析）时</strong> 加载的，并且是异步的：</p>
<ul>
<li>编译时（解析）时加载，意味着 <code>import</code> 关键字不能和运行时相关的内容放在一起使用；</li>
<li>异步的意味着：JS 引擎在遇到 import 时会去获取这个 js 文件，但是这个获取的过程是异步的，并不会阻塞主线程继续执行。</li>
</ul>
<p>CommonJS 通过 <code>module.exports</code> 导出的是一个对象，导出和导入指向的是同一块内存空间，两边修改会同时影响导出对象。</p>
<p>ES Module 通过 <code>export</code> 导出的是变量本身的引用：JS 引擎会创建<strong>模块环境记录</strong>，会和导出的变量进行绑定。所以在导出的模块中修改变化，导入的地方可以通过模块环境记录获取最新的值；但是在导入的地方不允许修改变量（直接报错），因为导入它时相当于给一个常量赋值。</p>
<blockquote>
<p>如果 ESM 导出的是一个对象，那么导入的模块也能修改对象中的属性，因为他指向内存空间。</p>
</blockquote>
<h2>总结</h2>
<p>本文主要介绍了模块化发展的历程，介绍各种规范如 CommonJS、AMD、CMD、ESM 的使用和对比。</p>
]]></content>
    <category term="工程化"/>
    <published>2022-08-10T00:00:00.000Z</published>
  </entry>
  <entry>
    <title type="text">包管理工具</title>
    <id>https://dribble-njr.github.io/blog/blog/frontend/engineering/basic/002-package-manager.html</id>
    <link href="https://dribble-njr.github.io/blog/blog/frontend/engineering/basic/002-package-manager.html"/>
    <updated>2024-02-07T05:30:24.000Z</updated>
    <summary type="html"><![CDATA[<h2>npm</h2>
<p><a href="https://docs.npmjs.com/resolving-eacces-permissions-errors-when-installing-packages-globally" target="_blank" rel="noopener noreferrer">https://docs.npmjs.com/resolving-eacces-permissions-errors-when-installing-packages-globally</a></p>
]]></summary>
    <content type="html"><![CDATA[<h2>npm</h2>
<p><a href="https://docs.npmjs.com/resolving-eacces-permissions-errors-when-installing-packages-globally" target="_blank" rel="noopener noreferrer">https://docs.npmjs.com/resolving-eacces-permissions-errors-when-installing-packages-globally</a></p>
]]></content>
    <category term="工程化"/>
    <published>2023-12-23T00:00:00.000Z</published>
  </entry>
  <entry>
    <title type="text">工具链</title>
    <id>https://dribble-njr.github.io/blog/blog/frontend/engineering/basic/003-tool.html</id>
    <link href="https://dribble-njr.github.io/blog/blog/frontend/engineering/basic/003-tool.html"/>
    <updated>2024-01-07T08:28:24.000Z</updated>
    <summary type="html"><![CDATA[<h2>JavaScript</h2>
<p>问题：</p>
<ul>
<li>API 兼容，polyfill: core.js</li>
<li>语法增强（compiler），syntax transformer(regenerator)，jsx，tsc...</li>
</ul>
<p>babel 代码编译工具</p>
<ul>
<li>@babel/core</li>
<li>@babel/preset-env</li>
</ul>
<p>source code -- ast</p>
<p>swc(rust) 对标 babel</p>
<p><a href="https://github.com/estree/estree" target="_blank" rel="noopener noreferrer">https://github.com/estree/estree</a></p>]]></summary>
    <content type="html"><![CDATA[<h2>JavaScript</h2>
<p>问题：</p>
<ul>
<li>API 兼容，polyfill: core.js</li>
<li>语法增强（compiler），syntax transformer(regenerator)，jsx，tsc...</li>
</ul>
<p>babel 代码编译工具</p>
<ul>
<li>@babel/core</li>
<li>@babel/preset-env</li>
</ul>
<p>source code -- ast</p>
<p>swc(rust) 对标 babel</p>
<p><a href="https://github.com/estree/estree" target="_blank" rel="noopener noreferrer">https://github.com/estree/estree</a></p>
<p><a href="https://github.com/bramblex/jsjs" target="_blank" rel="noopener noreferrer">https://github.com/bramblex/jsjs</a></p>
<h2>CSS</h2>
<p>问题：</p>
<ul>
<li>语法缺失（循环、判断、拼接）</li>
<li>功能缺失（颜色函数、数学函数、自定义函数）</li>
</ul>
<p>sass/less/stylus --&gt; 预处理器 --&gt; css --&gt; postcss（后处理器） --&gt; polyfill、代码压缩、剪枝</p>
<p><a href="https://postcss.org/" target="_blank" rel="noopener noreferrer">https://postcss.org/</a></p>
<figure><img src="https://raw.githubusercontent.com/dribble-njr/typora-njr/master/img/20231223162446.png" alt="20231223162446" tabindex="0" loading="lazy"><figcaption>20231223162446</figcaption></figure>
<h2>构建工具</h2>
<p>以 webpack 为例。</p>
<ol>
<li>入口：通过入口分析依赖关系；</li>
<li>开发服务器：webpack serve --&gt; webpack dev server --&gt; express --&gt; 源码变更 --&gt; 浏览器刷新（强制刷新、HMR）websocket</li>
<li>文件指纹（hash），涉及到缓存，类似 </li>
<li>sourcemap</li>
<li>...</li>
</ol>
<h2>脚手架</h2>
<p>提供界面与交互、提供工程模版</p>
<ul>
<li>cra：深度定制，配置需要 eject 或使用 react-rewired 和 customize-cra</li>
<li>vue-cli：支持配置覆盖，折中方案</li>
<li>...</li>
</ul>
]]></content>
    <category term="工程化"/>
    <published>2023-12-23T00:00:00.000Z</published>
  </entry>
  <entry>
    <title type="text">项目规范</title>
    <id>https://dribble-njr.github.io/blog/blog/frontend/engineering/basic/004-project-standards.html</id>
    <link href="https://dribble-njr.github.io/blog/blog/frontend/engineering/basic/004-project-standards.html"/>
    <updated>2024-01-15T15:15:41.000Z</updated>
    <summary type="html"><![CDATA[<h2>代码规范</h2>
<h3>editorconfig</h3>
<p>EditorConfig 有助于跨不同编辑器和 IDE 为处理同一项目的多个开发人员维护一致的编码风格。</p>
<p>VSCode 需要安装 <code>EditorConfig for VS Code</code> 插件。</p>
<p><strong><code>.editorconfig</code></strong></p>
<div class="language-bash" data-ext="sh" data-title="sh"><pre class="language-bash"><code><span class="token comment"># http://editorconfig.org</span>

root <span class="token operator">=</span> <span class="token boolean">true</span>

<span class="token punctuation">[</span>*<span class="token punctuation">]</span> <span class="token comment"># 表示所有文件适用</span>
charset <span class="token operator">=</span> utf-8 <span class="token comment"># 设置文件字符集为 utf-8</span>
indent_style <span class="token operator">=</span> space <span class="token comment"># 缩进风格（tab | space）</span>
indent_size <span class="token operator">=</span> <span class="token number">2</span> <span class="token comment"># 缩进大小</span>
end_of_line <span class="token operator">=</span> lf <span class="token comment"># 控制换行类型(lf | cr | crlf)</span>
trim_trailing_whitespace <span class="token operator">=</span> <span class="token boolean">true</span> <span class="token comment"># 去除行首的任意空白字符</span>
insert_final_newline <span class="token operator">=</span> <span class="token boolean">true</span> <span class="token comment"># 始终在文件末尾插入一个新行</span>

<span class="token punctuation">[</span>*.md<span class="token punctuation">]</span> <span class="token comment"># 表示仅 md 文件适用以下规则</span>
max_line_length <span class="token operator">=</span> off
trim_trailing_whitespace <span class="token operator">=</span> <span class="token boolean">false</span>
</code></pre></div>]]></summary>
    <content type="html"><![CDATA[<h2>代码规范</h2>
<h3>editorconfig</h3>
<p>EditorConfig 有助于跨不同编辑器和 IDE 为处理同一项目的多个开发人员维护一致的编码风格。</p>
<p>VSCode 需要安装 <code>EditorConfig for VS Code</code> 插件。</p>
<p><strong><code>.editorconfig</code></strong></p>
<div class="language-bash" data-ext="sh" data-title="sh"><pre class="language-bash"><code><span class="token comment"># http://editorconfig.org</span>

root <span class="token operator">=</span> <span class="token boolean">true</span>

<span class="token punctuation">[</span>*<span class="token punctuation">]</span> <span class="token comment"># 表示所有文件适用</span>
charset <span class="token operator">=</span> utf-8 <span class="token comment"># 设置文件字符集为 utf-8</span>
indent_style <span class="token operator">=</span> space <span class="token comment"># 缩进风格（tab | space）</span>
indent_size <span class="token operator">=</span> <span class="token number">2</span> <span class="token comment"># 缩进大小</span>
end_of_line <span class="token operator">=</span> lf <span class="token comment"># 控制换行类型(lf | cr | crlf)</span>
trim_trailing_whitespace <span class="token operator">=</span> <span class="token boolean">true</span> <span class="token comment"># 去除行首的任意空白字符</span>
insert_final_newline <span class="token operator">=</span> <span class="token boolean">true</span> <span class="token comment"># 始终在文件末尾插入一个新行</span>

<span class="token punctuation">[</span>*.md<span class="token punctuation">]</span> <span class="token comment"># 表示仅 md 文件适用以下规则</span>
max_line_length <span class="token operator">=</span> off
trim_trailing_whitespace <span class="token operator">=</span> <span class="token boolean">false</span>
</code></pre></div><h3>ESLint</h3>
<p>ESLint 是一个 Javascript Linter，帮助我们规范代码质量，提高团队开发效率。</p>
<p>安装 <code>eslint</code> 并新建配置文件 <code>.eslintrc.js</code>。</p>
<div class="language-bash" data-ext="sh" data-title="sh"><pre class="language-bash"><code><span class="token function">pnpm</span> <span class="token function">add</span> eslint <span class="token parameter variable">-D</span>
</code></pre></div><div class="language-javascript" data-ext="js" data-title="js"><pre class="language-javascript"><code>module<span class="token punctuation">.</span>exports <span class="token operator">=</span> <span class="token punctuation">{</span>
  <span class="token literal-property property">env</span><span class="token operator">:</span> <span class="token punctuation">{</span>
    <span class="token literal-property property">browser</span><span class="token operator">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span>
    <span class="token literal-property property">es2021</span><span class="token operator">:</span> <span class="token boolean">true</span>
  <span class="token punctuation">}</span><span class="token punctuation">,</span>
  <span class="token keyword">extends</span><span class="token operator">:</span> <span class="token punctuation">[</span>
    <span class="token string">'eslint:recommended'</span><span class="token punctuation">,</span>
    <span class="token string">'plugin:react/recommended'</span><span class="token punctuation">,</span>
    <span class="token string">'plugin:@typescript-eslint/recommended'</span>
  <span class="token punctuation">]</span><span class="token punctuation">,</span>
  <span class="token literal-property property">parserOptions</span><span class="token operator">:</span> <span class="token punctuation">{</span>
    <span class="token literal-property property">ecmaVersion</span><span class="token operator">:</span> <span class="token string">'latest'</span><span class="token punctuation">,</span>
    <span class="token literal-property property">sourceType</span><span class="token operator">:</span> <span class="token string">'module'</span>
  <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre></div><p>如果想要在项目中安装 <code>jest</code>，则需要在配置文件中的 <code>env</code> 加上下面这一行：</p>
<div class="language-diff" data-ext="diff" data-title="diff"><pre class="language-diff"><code><span class="token unchanged"><span class="token prefix unchanged"> </span><span class="token line"> env: {
</span><span class="token prefix unchanged"> </span><span class="token line">   browser: true,
</span><span class="token prefix unchanged"> </span><span class="token line">   es2021: true,
</span></span><span class="token inserted-sign inserted"><span class="token prefix inserted">+</span><span class="token line">   jest: true
</span></span><span class="token unchanged"><span class="token prefix unchanged"> </span><span class="token line"> },
</span></span></code></pre></div><p>如果想和 <code>prettier</code> 一起使用则需要在 <code>extends</code> 中加入：</p>
<div class="language-diff" data-ext="diff" data-title="diff"><pre class="language-diff"><code><span class="token unchanged"><span class="token prefix unchanged"> </span><span class="token line"> extends: [
</span><span class="token prefix unchanged"> </span><span class="token line">   'eslint:recommended',
</span><span class="token prefix unchanged"> </span><span class="token line">   'plugin:react/recommended',
</span><span class="token prefix unchanged"> </span><span class="token line">   'plugin:@typescript-eslint/recommended',
</span></span><span class="token inserted-sign inserted"><span class="token prefix inserted">+</span><span class="token line">   "prettier"
</span></span><span class="token unchanged"><span class="token prefix unchanged"> </span><span class="token line"> ],
</span></span></code></pre></div><p>还需要在项目中安装与 <code>TypeScript</code> 相关的插件：</p>
<div class="language-bash" data-ext="sh" data-title="sh"><pre class="language-bash"><code><span class="token function">pnpm</span> <span class="token function">add</span> <span class="token parameter variable">-D</span> eslint-plugin-import @typescript-eslint/parser eslint-import-resolver-typescript
</code></pre></div><p>最后在 <code>.eslintrc.js</code> 中添加 <code>settings</code>：</p>
<div class="language-javascript" data-ext="js" data-title="js"><pre class="language-javascript"><code><span class="token punctuation">{</span>
	<span class="token literal-property property">settings</span><span class="token operator">:</span> <span class="token punctuation">{</span>
    <span class="token string-property property">"import/resolver"</span><span class="token operator">:</span> <span class="token punctuation">{</span>
      <span class="token string-property property">"typescript"</span><span class="token operator">:</span> <span class="token punctuation">{</span><span class="token punctuation">}</span>
    <span class="token punctuation">}</span>
  <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre></div><h3>prettier</h3>
<p><code>prettier</code> 是代码格式化工具，和 <code>eslint</code> 不同的是，它只关注代码格式，而不关注语法问题。</p>
<p>首先安装 <code>prettier</code> 及相关依赖插件：</p>
<div class="language-bash" data-ext="sh" data-title="sh"><pre class="language-bash"><code><span class="token function">pnpm</span> <span class="token function">add</span> prettier eslint-config-prettier eslint-plugin-prettier eslint-plugin-react-hooks <span class="token parameter variable">-D</span>
</code></pre></div><p>为了使用刚才安装的插件，需要对 <code>.eslintrc.js</code> 中的 <code>plugins</code> 进行修改：</p>
<div class="language-diff" data-ext="diff" data-title="diff"><pre class="language-diff"><code><span class="token deleted-sign deleted"><span class="token prefix deleted">-</span><span class="token line"> plugins: ["react", "@typescript-eslint"]
</span></span><span class="token inserted-sign inserted"><span class="token prefix inserted">+</span><span class="token line"> plugins: ["react", "react-hooks", "@typescript-eslint", "prettier"]
</span></span></code></pre></div><p><code>prettier</code> 基本的配置文件如下：</p>
<p><strong><code>.prettierrc</code></strong></p>
<div class="language-json" data-ext="json" data-title="json"><pre class="language-json"><code><span class="token punctuation">{</span>
  <span class="token property">"useTabs"</span><span class="token operator">:</span> <span class="token boolean">false</span><span class="token punctuation">,</span>
  <span class="token property">"tabWidth"</span><span class="token operator">:</span> <span class="token number">2</span><span class="token punctuation">,</span>
  <span class="token property">"printWidth"</span><span class="token operator">:</span> <span class="token number">80</span><span class="token punctuation">,</span>
  <span class="token property">"singleQuote"</span><span class="token operator">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span>
  <span class="token property">"trailingComma"</span><span class="token operator">:</span> <span class="token string">"none"</span><span class="token punctuation">,</span>
  <span class="token property">"semi"</span><span class="token operator">:</span> <span class="token boolean">false</span>
<span class="token punctuation">}</span>
</code></pre></div><p><strong><code>.prettierignore</code></strong></p>
<div class="language-text" data-ext="text" data-title="text"><pre class="language-text"><code>/dist/*
.local
.output.js
/node_modules/**

**/*.svg
**/*.sh

/public/*
</code></pre></div><p>最后可以在 <code>package.json</code> 中配置 <code>scripts</code>：</p>
<div class="language-json" data-ext="json" data-title="json"><pre class="language-json"><code><span class="token punctuation">{</span>
  <span class="token property">"scripts"</span><span class="token operator">:</span> <span class="token punctuation">{</span>
    <span class="token property">"lint"</span><span class="token operator">:</span> <span class="token string">"eslint src/**/*.{js,jsx,ts,tsx,json}"</span><span class="token punctuation">,</span>
    <span class="token property">"lint:fix"</span><span class="token operator">:</span> <span class="token string">"eslint --fix 'src/**/*.{js,jsx,ts,tsx,json}'"</span><span class="token punctuation">,</span>
    <span class="token property">"format"</span><span class="token operator">:</span> <span class="token string">"prettier --write 'src/**/*.{js,jsx,ts,tsx,css,md,json}' --config ./.prettierrc"</span>
  <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre></div><h3>StyleLint</h3>
<p><code>Stylelint</code> 是一个强大、先进的 CSS 代码检查器（linter），可以帮助你规避 CSS 代码中的错误并保持一致的编码风格。</p>
<blockquote>
<p><a href="https://stylelint.io/" target="_blank" rel="noopener noreferrer">https://stylelint.io/</a></p>
</blockquote>
<p>安装依赖</p>
<div class="language-bash" data-ext="sh" data-title="sh"><pre class="language-bash"><code><span class="token comment"># 如果项目中使用 scss</span>
<span class="token function">pnpm</span> <span class="token function">add</span> stylelint stylelint-config-standard-scss <span class="token parameter variable">-D</span>
<span class="token function">pnpm</span> <span class="token function">add</span> postcss-scss <span class="token parameter variable">-D</span>
</code></pre></div><p>配置文件 <code>.stylelintrc.js</code>：</p>
<div class="language-javascript" data-ext="js" data-title="js"><pre class="language-javascript"><code>module<span class="token punctuation">.</span>exports <span class="token operator">=</span> <span class="token punctuation">{</span>
  <span class="token keyword">extends</span><span class="token operator">:</span> <span class="token string">'stylelint-config-standard-scss'</span><span class="token punctuation">,</span>
  <span class="token comment">// rule覆盖（根据自己喜好来配置）</span>
  <span class="token literal-property property">rules</span><span class="token operator">:</span> <span class="token punctuation">{</span>
    <span class="token string-property property">'string-quotes'</span><span class="token operator">:</span> <span class="token string">'single'</span><span class="token punctuation">,</span>
    <span class="token string-property property">'property-no-vendor-prefix'</span><span class="token operator">:</span> <span class="token keyword">null</span><span class="token punctuation">,</span>
    <span class="token string-property property">'declaration-colon-newline-after'</span><span class="token operator">:</span> <span class="token keyword">null</span><span class="token punctuation">,</span>
    <span class="token string-property property">'value-list-comma-newline-after'</span><span class="token operator">:</span> <span class="token keyword">null</span><span class="token punctuation">,</span>
    <span class="token string-property property">'custom-property-pattern'</span><span class="token operator">:</span> <span class="token keyword">null</span><span class="token punctuation">,</span>
    <span class="token string-property property">'color-hex-length'</span><span class="token operator">:</span> <span class="token string">'short'</span><span class="token punctuation">,</span>
    <span class="token string-property property">'color-function-notation'</span><span class="token operator">:</span> <span class="token keyword">null</span><span class="token punctuation">,</span>
    <span class="token string-property property">'alpha-value-notation'</span><span class="token operator">:</span> <span class="token keyword">null</span><span class="token punctuation">,</span>
    <span class="token string-property property">'value-no-vendor-prefix'</span><span class="token operator">:</span> <span class="token keyword">null</span><span class="token punctuation">,</span>
    <span class="token string-property property">'selector-class-pattern'</span><span class="token operator">:</span> <span class="token keyword">null</span><span class="token punctuation">,</span>
    <span class="token string-property property">'function-url-quotes'</span><span class="token operator">:</span> <span class="token keyword">null</span><span class="token punctuation">,</span>
    <span class="token string-property property">'no-missing-end-of-source-newline'</span><span class="token operator">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span>
    <span class="token string-property property">'no-descending-specificity'</span><span class="token operator">:</span> <span class="token keyword">null</span><span class="token punctuation">,</span>
    <span class="token string-property property">'font-family-no-missing-generic-family-keyword'</span><span class="token operator">:</span> <span class="token keyword">null</span>
  <span class="token punctuation">}</span><span class="token punctuation">,</span>
  <span class="token literal-property property">overrides</span><span class="token operator">:</span> <span class="token punctuation">[</span>
    <span class="token comment">// 若项目中存在scss文件，添加以下配置</span>
    <span class="token punctuation">{</span>
      <span class="token literal-property property">files</span><span class="token operator">:</span> <span class="token string">'**/*.scss'</span><span class="token punctuation">,</span>
      <span class="token literal-property property">customSyntax</span><span class="token operator">:</span> <span class="token string">'postcss-scss'</span>
    <span class="token punctuation">}</span>
  <span class="token punctuation">]</span>
<span class="token punctuation">}</span>
</code></pre></div><p><code>.stylelintignore</code> 忽略校验目录文件：</p>
<div class="language-bash" data-ext="sh" data-title="sh"><pre class="language-bash"><code>/dist/*
/public/*
public/*
node_modules
</code></pre></div><h2>Git 规范</h2>
<p><code>Git</code> 规范包括：</p>
<ul>
<li><code>pre-commit</code>：判断提交的代码是否符合规范</li>
<li><code>commit-message</code>：判断 <code>commit</code> 信息是否符合规范</li>
</ul>
<h3>husky</h3>
<p><code>husky</code> 可以管理 <code>git</code> 中的 <code>hooks</code>，初始化应该执行如下命令：</p>
<div class="language-bash" data-ext="sh" data-title="sh"><pre class="language-bash"><code><span class="token function">pnpm</span> dlx husky-init <span class="token operator">&amp;&amp;</span> <span class="token function">pnpm</span> <span class="token function">install</span> <span class="token comment"># pnpm</span>
</code></pre></div><div class="hint-container tip">
<p class="hint-container-title">提示</p>
<p>它将设置 <code>husky</code>，修改 <code>package.json</code> 并创建一个你可以编辑的预提交钩子样本。默认情况下，它将在你提交时运行 <code>npm test</code>。</p>
</div>
<p>然后修改 <code>pre-commit</code>：</p>
<div class="language-diff" data-ext="diff" data-title="diff"><pre class="language-diff"><code><span class="token deleted-sign deleted"><span class="token prefix deleted">-</span><span class="token line"> npm test
</span></span><span class="token inserted-sign inserted"><span class="token prefix inserted">+</span><span class="token line"> npm run lint
</span></span></code></pre></div><p>这样在每次 <code>git commit</code> 之前，都会首先进行 <code>lint</code> 检查，通过之后才能提交代码。</p>
<h3>lint-staged</h3>
<p>然而思考几个问题：</p>
<ol>
<li>我们只修改了个别的文件，没有必要检测所有的文件代码格式</li>
<li>它只能给我们提示出对应的错误，我们还需要手动的进行代码修改</li>
<li>修改后需要手动 <code>git add .</code></li>
</ol>
<p>这时可以使用 <code>lint-staged</code> 解决这个问题，它只会检查在暂存区的代码。</p>
<p>安装：</p>
<div class="language-bash" data-ext="sh" data-title="sh"><pre class="language-bash"><code><span class="token function">pnpm</span> <span class="token function">add</span> lint-staged <span class="token parameter variable">-D</span>
</code></pre></div><p>修改 <code>.husky</code> 中的 <code>pre-commit</code>：</p>
<div class="language-diff" data-ext="diff" data-title="diff"><pre class="language-diff"><code><span class="token deleted-sign deleted"><span class="token prefix deleted">-</span><span class="token line"> npm test
</span></span><span class="token inserted-sign inserted"><span class="token prefix inserted">+</span><span class="token line"> npx --no-install lint-staged
</span></span></code></pre></div><div class="hint-container tip">
<p class="hint-container-title">提示</p>
<p><code>--no-install</code> 强制使用本地模块，不下载远程模块，如果本地不存在该模块，就会报错。</p>
</div>
<p>在 <code>package.json</code> 中配置：</p>
<blockquote>
<p>参考资料</p>
<p><a href="https://github.com/ant-design/ant-design/blob/master/package.json" target="_blank" rel="noopener noreferrer">https://github.com/ant-design/ant-design/blob/master/package.json</a> &gt; <a href="https://www.npmjs.com/package/lint-staged" target="_blank" rel="noopener noreferrer">https://www.npmjs.com/package/lint-staged</a> &gt; <a href="https://juejin.cn/post/7136009620979449893#heading-5" target="_blank" rel="noopener noreferrer">https://juejin.cn/post/7136009620979449893#heading-5</a></p>
</blockquote>
<div class="language-json" data-ext="json" data-title="json"><pre class="language-json"><code><span class="token property">"lint-staged"</span><span class="token operator">:</span> <span class="token punctuation">{</span>
  <span class="token property">"*.{json,md}"</span><span class="token operator">:</span> <span class="token string">"prettier --ignore-unknown --write"</span><span class="token punctuation">,</span>
  <span class="token property">"*.{js,jsx,ts,tsx}"</span><span class="token operator">:</span> <span class="token punctuation">[</span>
    <span class="token string">"eslint --fix"</span><span class="token punctuation">,</span>
    <span class="token string">"prettier --write"</span>
  <span class="token punctuation">]</span><span class="token punctuation">,</span>
  <span class="token property">"{!(package)*.json,*.code-snippets,.!(browserslist)*rc}"</span><span class="token operator">:</span> <span class="token punctuation">[</span>
    <span class="token string">"prettier --write--parser json"</span>
  <span class="token punctuation">]</span><span class="token punctuation">,</span>
  <span class="token property">"package.json"</span><span class="token operator">:</span> <span class="token punctuation">[</span>
    <span class="token string">"prettier --write"</span>
  <span class="token punctuation">]</span><span class="token punctuation">,</span>
  <span class="token property">"*.{scss,less,styl,html}"</span><span class="token operator">:</span> <span class="token punctuation">[</span>
    <span class="token string">"stylelint --fix"</span><span class="token punctuation">,</span>
    <span class="token string">"prettier --write"</span>
  <span class="token punctuation">]</span>
<span class="token punctuation">}</span>
</code></pre></div><h3>commitizen</h3>
<p>在安装完上面两个依赖后，就已经能在 <code>pre-commit</code> 钩子判断<strong>暂存区代码</strong>是否符合规范，并且使用 <code>prettier</code> 修复它。</p>
<p>第二个问题是我们需要在 <code>commit-message</code> 中判断 <code>commit</code> 信息是否符合规范。可以使用 <code>commitizen</code>，它是一个撰写符合 <code>Commit Message</code> 标准的一款工具。通过它可以实现交互式撰写规范的 <code>Commit Message</code>。</p>
<blockquote>
<p><a href="http://commitizen.github.io/cz-cli/" target="_blank" rel="noopener noreferrer">http://commitizen.github.io/cz-cli/</a></p>
</blockquote>
<div class="language-bash" data-ext="sh" data-title="sh"><pre class="language-bash"><code><span class="token function">pnpm</span> <span class="token function">add</span> commitizen <span class="token parameter variable">-D</span>
</code></pre></div><p>安装完成后，一般我们都采用符合 Angular 的 <code>Commit message</code> 格式的提交规范，运行以下命令生成符合 Angular 提交规范格式的 <code>Commit message</code>：</p>
<div class="language-bash" data-ext="sh" data-title="sh"><pre class="language-bash"><code>npx --no-install commitizen init cz-conventional-changelog <span class="token parameter variable">--pnpm</span> --save-dev --save-exact
</code></pre></div><p><code>package.json</code> 中会自动生成以下配置：</p>
<div class="language-json" data-ext="json" data-title="json"><pre class="language-json"><code><span class="token property">"config"</span><span class="token operator">:</span> <span class="token punctuation">{</span>
  <span class="token property">"commitizen"</span><span class="token operator">:</span> <span class="token punctuation">{</span>
    <span class="token property">"path"</span><span class="token operator">:</span> <span class="token string">"./node_modules/cz-conventional-changelog"</span>
  <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre></div><p>然后在 <code>package.json</code> 中的 <code>scripts</code> 添加命令：</p>
<div class="language-json" data-ext="json" data-title="json"><pre class="language-json"><code><span class="token property">"scripts"</span><span class="token operator">:</span> <span class="token punctuation">{</span>
	<span class="token property">"commit"</span><span class="token operator">:</span> <span class="token string">"git-cz"</span>
<span class="token punctuation">}</span>
</code></pre></div><h3>commitlint</h3>
<p>虽然使用了 <code>commitizen</code> 交互式撰写规范的 <code>Commit Message</code>，但由于它不是强制使用，我们仍然可以通过 <code>git commit</code> 提交信息，因此不管是使用 <code>git commit</code> 或 <code>git cz</code>，我们都需要对 <code>commit message</code> 进行校验，不允许规范的情况下不能进行 <code>commit</code> 操作。</p>
<blockquote>
<p><a href="https://commitlint.js.org/#/guides-local-setup" target="_blank" rel="noopener noreferrer">https://commitlint.js.org/#/guides-local-setup</a></p>
</blockquote>
<p>首先安装相关依赖并且生成相关配置：</p>
<div class="language-bash" data-ext="sh" data-title="sh"><pre class="language-bash"><code><span class="token comment"># Install and configure if needed</span>
<span class="token function">npm</span> <span class="token function">install</span> --save-dev @commitlint/<span class="token punctuation">{</span>cli,config-conventional<span class="token punctuation">}</span>
<span class="token comment"># For Windows:</span>
<span class="token function">pnpm</span> <span class="token function">add</span> @commitlint/config-conventional @commitlint/cli <span class="token parameter variable">-D</span>

<span class="token comment"># Configure commitlint to use conventional config</span>
<span class="token builtin class-name">echo</span> <span class="token string">"module.exports = { ignores: [(commit) =&gt; commit.includes('init')], extends: ['@commitlint/config-conventional'] };"</span> <span class="token operator">&gt;</span> commitlint.config.js
</code></pre></div><p>在 <code>hushy</code> 中自动生成 <code>hook</code>：</p>
<div class="language-bash" data-ext="sh" data-title="sh"><pre class="language-bash"><code>npx husky <span class="token function">add</span> .husky/commit-msg <span class="token string">"npx --no-install commitlint --edit <span class="token variable">$1</span>"</span>
</code></pre></div><p>除了 <code>cli</code> 和 <code>config-conventional</code> 外，<code>commitlint</code> 还提供了其他的工具包：</p>
<ul>
<li><code>@commitlint/cli</code>: 这是 <code>commitlint</code> 的命令行接口，用于在命令行中执行 <code>commitlint</code>。</li>
<li><code>@commitlint/config-conventional</code>: 这是 <code>commitlint</code> 的一个常规配置，它提供了一组常规的 <code>commit</code> 规则，这些规则来源于 <code>Angular</code> 团队的提交规范。</li>
<li><code>@commitlint/cz-commitlint</code>: 这个包是 <code>commitizen</code> 与 <code>commitlint</code> 的适配器，用于在命令行中启动交互式的 <code>commit</code> 提示器，来协助开发者完成符合规范的提交信息。</li>
<li><code>@commitlint/format</code>: 这个包提供了一种格式化 <code>commitlint</code> 返回的结果的方式，可以自定义输出结果的样式。</li>
<li><code>@commitlint/prompt-cli</code>: 这个包提供了一个命令行的交互式提示器，用于在命令行中启动交互式的 <code>commit</code> 提示器，来协助开发者完成符合规范的提交信息。</li>
</ul>
<div class="hint-container tip">
<p class="hint-container-title">`commitizen` 和 `@commitlint/cz-commitlint` 的区别</p>
<p><code>commitizen</code> 和 <code>@commitlint/cz-commitlint</code> 的功能并不完全一样，但它们可以协同工作来帮助实现更好地 <code>git commit</code> 信息。</p>
<p><code>commitizen</code> 是一个帮助创建符合规范的 <code>git commit</code> 的工具。它在运行 <code>git cz</code> 时会提供一个命令行的交互式界面来引导你创建 <code>commit</code>，使 <code>commit message</code> 更为标准化。</p>
<p><code>@commitlint/cz-commitlint</code> 是一个为 <code>commitizen</code> 提供的 <code>@commitlint</code> 适配器。它让 <code>commitizen</code> 可以使用 <code>@commitlint</code> 的 <code>config</code> 配置（如 <code>@commitlint/config-conventional</code>）作为 <code>commit</code> 提示的规则。</p>
<p>所以，可以这么理解：<code>commitizen</code> 提供了一种方式来创建 <code>commit</code>，而 <code>@commitlint/cz-commitlint</code> 则是允许 <code>commitizen</code> 使用 <code>commitlint</code> 的规则进行 <code>commit</code> 信息的创建。</p>
<p>这样，当使用 <code>commitizen</code> 进行 <code>commit</code> 时，就会遵守 <code>commitlint</code> 的规则，如果不遵守，<code>commit</code> 就会被阻止，除非修改为符合规则的信息。这可以保证项目中的 <code>git commit</code> 样式的一致性。</p>
<p>总结：<code>commitizen</code> 负责引导创建 <code>commit</code>，而 <code>@commitlint/cz-commitlint</code> 则负责设定创建 <code>commit</code> 的规则。</p>
</div>
<div class="hint-container tip">
<p class="hint-container-title">`commitizen` 和 `@commitlint/prompt-cli` 的区别</p>
<p><code>@commitlint/prompt-cli</code> 和 <code>commitizen</code> 的功能类似，它们都提供命令行的交互式界面来引导创建符合规范的 <code>commit message</code>。</p>
<p>区别主要在于：</p>
<ul>
<li><code>@commitlint/prompt-cli</code> 是 <code>commitlint</code> 的一部分，用于捕获 <code>commit message</code> 进行校验。</li>
<li><code>commitizen</code> 是一个独立的第三方库，它没有自己的校验规范，但可以非常好的与 <code>commitlint</code> 以及其他规范配合使用。</li>
</ul>
<p>总的来说，这两者可以一起使用或分开使用，选择使用哪一个主要取决于希望从哪个工具中获取需要的特性或者个人的使用习惯。</p>
</div>
<h3>CHANGELOG</h3>
<p>CHANGELOG 记录项目所有的 <code>commit</code> 信息并归类版本，可以快速跳转到该条 <code>commit</code> 记录，方便知道项目哪个版本做了哪些功能有哪些 bug 等信息。也方便排查 bug，对于提交记录一目了然，不用一个一个去翻去查。</p>
<blockquote>
<p><a href="https://juejin.cn/post/7136009620979449893" target="_blank" rel="noopener noreferrer">https://juejin.cn/post/7136009620979449893</a></p>
</blockquote>
<p>首先安装 <code>standard-version</code>：</p>
<div class="language-bash" data-ext="sh" data-title="sh"><pre class="language-bash"><code><span class="token function">pnpm</span> <span class="token function">add</span> standard-version <span class="token parameter variable">-D</span>
</code></pre></div><p>然后在 <code>package.json</code> 的 <code>scripts</code> 中添加命令：</p>
<div class="language-json" data-ext="json" data-title="json"><pre class="language-json"><code><span class="token property">"scripts"</span><span class="token operator">:</span> <span class="token punctuation">{</span>
	<span class="token property">"standard-version"</span><span class="token operator">:</span> <span class="token string">"standard-version"</span>
<span class="token punctuation">}</span>
</code></pre></div><p>当 <code>commit type</code> 是 <code>feat</code> 和 <code>fix</code> 的时候执行 <code>npm run standard-version</code>，它会自增版本号。</p>
<p><code>standard-version</code> 提供自定义配置不同类型对应显示文案，在根目录新建 <code>.versionrc.js</code> 文件：</p>
<div class="language-javascript" data-ext="js" data-title="js"><pre class="language-javascript"><code>module<span class="token punctuation">.</span>exports <span class="token operator">=</span> <span class="token punctuation">{</span>
  <span class="token literal-property property">types</span><span class="token operator">:</span> <span class="token punctuation">[</span>
    <span class="token punctuation">{</span> <span class="token literal-property property">type</span><span class="token operator">:</span> <span class="token string">'feat'</span><span class="token punctuation">,</span> <span class="token literal-property property">section</span><span class="token operator">:</span> <span class="token string">'✨ Features | 新功能'</span> <span class="token punctuation">}</span><span class="token punctuation">,</span>
    <span class="token punctuation">{</span> <span class="token literal-property property">type</span><span class="token operator">:</span> <span class="token string">'fix'</span><span class="token punctuation">,</span> <span class="token literal-property property">section</span><span class="token operator">:</span> <span class="token string">'🐛 Bug Fixes | Bug 修复'</span> <span class="token punctuation">}</span><span class="token punctuation">,</span>
    <span class="token punctuation">{</span> <span class="token literal-property property">type</span><span class="token operator">:</span> <span class="token string">'init'</span><span class="token punctuation">,</span> <span class="token literal-property property">section</span><span class="token operator">:</span> <span class="token string">'🎉 Init | 初始化'</span> <span class="token punctuation">}</span><span class="token punctuation">,</span>
    <span class="token punctuation">{</span> <span class="token literal-property property">type</span><span class="token operator">:</span> <span class="token string">'docs'</span><span class="token punctuation">,</span> <span class="token literal-property property">section</span><span class="token operator">:</span> <span class="token string">'✏️ Documentation | 文档'</span> <span class="token punctuation">}</span><span class="token punctuation">,</span>
    <span class="token punctuation">{</span> <span class="token literal-property property">type</span><span class="token operator">:</span> <span class="token string">'style'</span><span class="token punctuation">,</span> <span class="token literal-property property">section</span><span class="token operator">:</span> <span class="token string">'💄 Styles | 风格'</span> <span class="token punctuation">}</span><span class="token punctuation">,</span>
    <span class="token punctuation">{</span> <span class="token literal-property property">type</span><span class="token operator">:</span> <span class="token string">'refactor'</span><span class="token punctuation">,</span> <span class="token literal-property property">section</span><span class="token operator">:</span> <span class="token string">'♻️ Code Refactoring | 代码重构'</span> <span class="token punctuation">}</span><span class="token punctuation">,</span>
    <span class="token punctuation">{</span> <span class="token literal-property property">type</span><span class="token operator">:</span> <span class="token string">'perf'</span><span class="token punctuation">,</span> <span class="token literal-property property">section</span><span class="token operator">:</span> <span class="token string">'⚡ Performance Improvements | 性能优化'</span> <span class="token punctuation">}</span><span class="token punctuation">,</span>
    <span class="token punctuation">{</span> <span class="token literal-property property">type</span><span class="token operator">:</span> <span class="token string">'test'</span><span class="token punctuation">,</span> <span class="token literal-property property">section</span><span class="token operator">:</span> <span class="token string">'✅ Tests | 测试'</span> <span class="token punctuation">}</span><span class="token punctuation">,</span>
    <span class="token punctuation">{</span> <span class="token literal-property property">type</span><span class="token operator">:</span> <span class="token string">'revert'</span><span class="token punctuation">,</span> <span class="token literal-property property">section</span><span class="token operator">:</span> <span class="token string">'⏪ Revert | 回退'</span> <span class="token punctuation">}</span><span class="token punctuation">,</span>
    <span class="token punctuation">{</span> <span class="token literal-property property">type</span><span class="token operator">:</span> <span class="token string">'build'</span><span class="token punctuation">,</span> <span class="token literal-property property">section</span><span class="token operator">:</span> <span class="token string">'📦‍ Build System | 打包构建'</span> <span class="token punctuation">}</span><span class="token punctuation">,</span>
    <span class="token punctuation">{</span> <span class="token literal-property property">type</span><span class="token operator">:</span> <span class="token string">'chore'</span><span class="token punctuation">,</span> <span class="token literal-property property">section</span><span class="token operator">:</span> <span class="token string">'🚀 Chore | 构建/工程依赖/工具'</span> <span class="token punctuation">}</span><span class="token punctuation">,</span>
    <span class="token punctuation">{</span> <span class="token literal-property property">type</span><span class="token operator">:</span> <span class="token string">'ci'</span><span class="token punctuation">,</span> <span class="token literal-property property">section</span><span class="token operator">:</span> <span class="token string">'👷 Continuous Integration | CI 配置'</span> <span class="token punctuation">}</span>
  <span class="token punctuation">]</span>
<span class="token punctuation">}</span>
</code></pre></div>]]></content>
    <category term="工程化"/>
    <published>2023-11-21T00:00:00.000Z</published>
  </entry>
  <entry>
    <title type="text">Qwik</title>
    <id>https://dribble-njr.github.io/blog/blog/frontend/engineering/ssr/005-qwik.html</id>
    <link href="https://dribble-njr.github.io/blog/blog/frontend/engineering/ssr/005-qwik.html"/>
    <updated>2024-01-07T08:28:24.000Z</updated>
    <summary type="html"><![CDATA[<h2>Web Apps 历史</h2>
<p>在了解 Qwik 之前，有必要了解 Web 应用程序的历史。</p>
<h3>第一代</h3>
<p>第一代应用程序采用 MPA 技术，是在服务器上通过 PHP 等技术完成的。</p>
<p>服务器会渲染一系列包含 HTML 和 JavaScript 的文档，客户端使用 jQuery 在模板中添加交互。</p>
<p>这种方法的问题在于必须处理两种语言，一种在服务器端（如 PHP），另一种在客户端（JavaScript），这可能会导致在 PHP 中编写的元素与其在 JavaScript 中的行为之间产生混淆，从而导致多次编写一个功能。</p>
<p>这就是这种方法难以扩展的原因。</p>]]></summary>
    <content type="html"><![CDATA[<h2>Web Apps 历史</h2>
<p>在了解 Qwik 之前，有必要了解 Web 应用程序的历史。</p>
<h3>第一代</h3>
<p>第一代应用程序采用 MPA 技术，是在服务器上通过 PHP 等技术完成的。</p>
<p>服务器会渲染一系列包含 HTML 和 JavaScript 的文档，客户端使用 jQuery 在模板中添加交互。</p>
<p>这种方法的问题在于必须处理两种语言，一种在服务器端（如 PHP），另一种在客户端（JavaScript），这可能会导致在 PHP 中编写的元素与其在 JavaScript 中的行为之间产生混淆，从而导致多次编写一个功能。</p>
<p>这就是这种方法难以扩展的原因。</p>
<h3>第二代</h3>
<p>第二代应用程序就是 SPA，即 AngularJS、Angular、React、Vue.js 等现代框架，这些框架都基于 MVC 架构。</p>
<p>SPA 只在客户端向服务器发起请求更新状态，但是在首次加载时，浏览器会下载所有 JavaScript 代码。</p>
<p>SPA 在首次加载时会是一个空白页，需要很长时间才能加载，而且如果想开发大型应用程序，它不具备可扩展性。</p>
<figure><img src="https://raw.githubusercontent.com/dribble-njr/typora-njr/master/img/63e3d6905bacd65c5da3920b_Client Rendering-min.jpg" alt="client renderin - Adservio" tabindex="0" loading="lazy"><figcaption>client renderin - Adservio</figcaption></figure>
<h3>SSR</h3>
<p>处于第二代和第三代的技术就是服务端渲染，比如 Next.js 或 Svelte。</p>
<p>在 SSR 中，仍然构建 SPA 应用程序，然而步骤略有不同：</p>
<ol>
<li>
<p>服务端拼接 HTML</p>
<p>用户请求某个页面时，服务端会拼接好一个页面的 HTML 结构返回给客户端。</p>
</li>
<li>
<p>客户端对 HTML 进行预渲染</p>
<p>HTML 结构加载显示，但是 JavaScript 代码还未加载，此时页面还不能进行交互。</p>
</li>
<li>
<p>进行 hydration（水合）处理</p>
<p>通过 JavaScript 代码的执行，动态地为当前页面上的 DOM 绑定事件。</p>
</li>
</ol>
<blockquote>
<p>HTML 相当于一个干货海参，JavaScript 代码理解为水，hydration 过程就是用水把海参泡发，即达到页面可正常交互的状态。</p>
</blockquote>
<p>SSR 确实将首屏加载速度变快，但仍有一些缺点：</p>
<ol>
<li>在水合之前，此时页面仍然不可交互，所以 tti（页面可交互时间）并没有太多优化。</li>
<li>下载的 JavaScript 代码仍然是比较全量的代码。</li>
<li>比较耗费服务器资源，维护成本也较高。</li>
</ol>
<figure><img src="https://raw.githubusercontent.com/dribble-njr/typora-njr/master/img/63e3d6905bacd612ada3920c_Server Rendering-min (1).jpg" alt="server renderin - Adservio " tabindex="0" loading="lazy"><figcaption>server renderin - Adservio </figcaption></figure>
<p>为了减少加载 JavaScript 代码所需的时间，Astro 框架出现了。</p>
<p>Astro 有一个名为「部分水合」的概念，因此在页面可见之前，它不会对页面进行水合。</p>
<p>例如，如果联系表单位于页面底部，而我们位于页面顶部，那么联系表单将不可见，这样就不需要加载表单所需的 JavaScript。</p>
<p>只有当页面向下滚动到有联系表单的部分时，才会进行水合，将表单中的组件与所需的 JavaScript 水合。</p>
<h2>Qwik 介绍</h2>
<p>Qwik 可以理解为一个语法接近 React 的前端 SSR 框架，但是相比于 Astro，它的优化更加彻底：<strong>「0 水合」和「0 JavaScript」</strong>。</p>
<p>例如，如果我们在页面底部有一个联系表单，Angular、React 或 Vue 会在首次加载时加载所需的 JavaScript，Astro 会在我们向下滚动时加载，而 Qwik 只有在点击表单的发送按钮时才会加载，它不是在页面出现表单时加载 JavaScript，<strong>而是在与表单交互时加载</strong>。</p>
<p>Qwik 的核心理念：to do it faster by doing nothing。</p>
<h3>Resumability</h3>
<p>现代的框架都在尝试优化水合作用，Qwik 的独特之处在于 <strong>可恢复性</strong> (no eager JS execution and no hydration)。</p>
<figure><img src="https://raw.githubusercontent.com/dribble-njr/typora-njr/master/img/63e3d6905bacd6233ba391e2_Hydration - Ready-min.jpg" alt="resumability in qwik framework" tabindex="0" loading="lazy"><figcaption>resumability in qwik framework</figcaption></figure>
<p>如果有一个庞大的应用程序，那么加载水合将会耗费大量时间，即使使用部分水合技术，也会面临挑战。而使用可恢复性的 Qwik 技术，只加载 HTML，则不会耗费大量时间。</p>
<h2>思考</h2>
<p>从概念上看，Qwik 确实会大幅提升庞大应用程序的性能，能提供最快的首次渲染和交互性能。然而，作为一个新技术，尽管它有潜力成为未来广泛使用的框架之一，仍然需要时间和社区支持。</p>
<h2>参考资料</h2>
<ol>
<li><a href="https://www.adservio.fr/post/a-brief-history-of-web-apps-why-qwik-is-innovative" target="_blank" rel="noopener noreferrer">A Brief History of Web Apps – Why Qwik is Innovative</a></li>
<li><a href="https://www.adservio.fr/post/qwik-the-post-modern-framework" target="_blank" rel="noopener noreferrer">Qwik – The Post-Modern Framework</a></li>
<li><a href="https://segmentfault.com/a/1190000042250628" target="_blank" rel="noopener noreferrer">Qwik.js框架是如何追求极致性能的?!</a></li>
</ol>
]]></content>
    <category term="工程化"/>
    <published>2024-01-03T00:00:00.000Z</published>
  </entry>
  <entry>
    <title type="text">React Server Component</title>
    <id>https://dribble-njr.github.io/blog/blog/frontend/engineering/ssr/006-react-server-component.html</id>
    <link href="https://dribble-njr.github.io/blog/blog/frontend/engineering/ssr/006-react-server-component.html"/>
    <updated>2024-01-07T08:28:24.000Z</updated>
    <summary type="html"><![CDATA[<p>React Server Component 是一种新的组件类型，它允许 React 应用在后端服务器上运行部分组件逻辑。传统的客户端渲染将渲染和处理放在前端。服务器组件的引入，旨在优化应用性能，减小传输给客户端的数据量，提高加载速度，提升用户体验。</p>
<p>服务器和客户端组件允许开发人员构建跨越服务器和客户端的应用程序，将客户端应用程序的丰富交互性与传统服务器渲染的更高性能结合起来。</p>
<h2>Why Server Components</h2>
<p>注意看下面的例子：</p>
<div class="language-jsx" data-ext="jsx" data-title="jsx"><pre class="language-jsx"><code><span class="token keyword">const</span> <span class="token function-variable function">App</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
  <span class="token keyword">return</span> <span class="token punctuation">(</span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span><span class="token class-name">Wrapper</span></span><span class="token punctuation">&gt;</span></span><span class="token plain-text">
      </span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span><span class="token class-name">ComponentA</span></span> <span class="token punctuation">/&gt;</span></span><span class="token plain-text">
      </span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span><span class="token class-name">ComponentB</span></span> <span class="token punctuation">/&gt;</span></span><span class="token plain-text">
    </span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span><span class="token class-name">Wrapper</span></span><span class="token punctuation">&gt;</span></span>
  <span class="token punctuation">)</span>
<span class="token punctuation">}</span>
</code></pre></div>]]></summary>
    <content type="html"><![CDATA[<p>React Server Component 是一种新的组件类型，它允许 React 应用在后端服务器上运行部分组件逻辑。传统的客户端渲染将渲染和处理放在前端。服务器组件的引入，旨在优化应用性能，减小传输给客户端的数据量，提高加载速度，提升用户体验。</p>
<p>服务器和客户端组件允许开发人员构建跨越服务器和客户端的应用程序，将客户端应用程序的丰富交互性与传统服务器渲染的更高性能结合起来。</p>
<h2>Why Server Components</h2>
<p>注意看下面的例子：</p>
<div class="language-jsx" data-ext="jsx" data-title="jsx"><pre class="language-jsx"><code><span class="token keyword">const</span> <span class="token function-variable function">App</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
  <span class="token keyword">return</span> <span class="token punctuation">(</span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span><span class="token class-name">Wrapper</span></span><span class="token punctuation">&gt;</span></span><span class="token plain-text">
      </span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span><span class="token class-name">ComponentA</span></span> <span class="token punctuation">/&gt;</span></span><span class="token plain-text">
      </span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span><span class="token class-name">ComponentB</span></span> <span class="token punctuation">/&gt;</span></span><span class="token plain-text">
    </span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span><span class="token class-name">Wrapper</span></span><span class="token punctuation">&gt;</span></span>
  <span class="token punctuation">)</span>
<span class="token punctuation">}</span>
</code></pre></div><p>组件 A 和组件 B 以 <code>children</code> prop 传入 <code>wrapper</code>。每个组件都负责获取自己的数据，任何组件都不会处理自身操作不需要的数据。</p>
<div class="language-jsx" data-ext="jsx" data-title="jsx"><pre class="language-jsx"><code><span class="token keyword">const</span> <span class="token function-variable function">Wrapper</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token parameter"><span class="token punctuation">{</span> children <span class="token punctuation">}</span></span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
  <span class="token keyword">const</span> <span class="token punctuation">[</span>wrapperData<span class="token punctuation">,</span> setWrapperData<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token function">useState</span><span class="token punctuation">(</span><span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">)</span>

  <span class="token function">useEffect</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
    <span class="token comment">// API call to get data for Wrapper component to function</span>
    <span class="token function">getWrapperData</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">then</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token parameter">res</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
      <span class="token function">setWrapperData</span><span class="token punctuation">(</span>res<span class="token punctuation">.</span>data<span class="token punctuation">)</span>
    <span class="token punctuation">}</span><span class="token punctuation">)</span>
  <span class="token punctuation">}</span><span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">)</span>

  <span class="token comment">// Only after API response is received, we start rendering</span>
  <span class="token comment">// ComponentA and ComponentB (children props)</span>
  <span class="token keyword">return</span> <span class="token punctuation">(</span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span></span><span class="token punctuation">&gt;</span></span><span class="token plain-text">
      </span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>h1</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">{</span>wrapperData<span class="token punctuation">.</span>name<span class="token punctuation">}</span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>h1</span><span class="token punctuation">&gt;</span></span><span class="token plain-text">
      </span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span></span><span class="token punctuation">&gt;</span></span><span class="token punctuation">{</span>wrapperData<span class="token punctuation">.</span>name <span class="token operator">&amp;&amp;</span> children<span class="token punctuation">}</span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span></span><span class="token punctuation">&gt;</span></span><span class="token plain-text">
    </span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span></span><span class="token punctuation">&gt;</span></span>
  <span class="token punctuation">)</span>
<span class="token punctuation">}</span>

<span class="token comment">/*</span></code></pre></div>]]></content>
    <category term="工程化"/>
    <published>2024-01-03T00:00:00.000Z</published>
  </entry>
</feed>