import{_ as t,r as p,o,c,a as n,b as i,d as s,e as a}from"./app-8NqMt_R7.js";const l={},r=n("p",null,[n("code",null,"express.js"),s(" 文件定义了 Express 应用的主入口。它的核心功能是创建一个新的 Express 应用实例，并暴露相关的原型和构造函数，使应用能够处理 HTTP 请求并管理中间件（"),n("code",null,"middleware"),s("）。")],-1),u=n("h2",{id:"模块依赖",tabindex:"-1"},[n("a",{class:"header-anchor",href:"#模块依赖"},[n("span",null,"模块依赖")])],-1),d=n("p",null,"引入了一些依赖模块：",-1),k=n("li",null,[n("code",null,"bodyParser"),s(": 用于解析请求体（body）。")],-1),v=n("li",null,[n("code",null,"EventEmitter"),s(": Node.js 的事件模块，使 "),n("code",null,"app"),s(" 具有事件处理能力。")],-1),m={href:"https://www.npmjs.com/package/merge-descriptors",target:"_blank",rel:"noopener noreferrer"},b=n("code",null,"merge-descriptors",-1),g=a("<li><code>proto</code>: 从 <strong>application.js</strong> 引入的核心应用逻辑。</li><li><code>Route</code> 和 <code>Router</code>: 处理路由的模块。</li><li><code>req</code> 和 <code>res</code>: 扩展了 <code>request</code> 和 <code>response</code> 对象。</li>",3),h=a(`<div class="language-javascript line-numbers-mode" data-ext="js" data-title="js"><pre class="language-javascript"><code><span class="token keyword">var</span> bodyParser <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">&#39;body-parser&#39;</span><span class="token punctuation">)</span>
<span class="token keyword">var</span> EventEmitter <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">&#39;events&#39;</span><span class="token punctuation">)</span><span class="token punctuation">.</span>EventEmitter
<span class="token keyword">var</span> mixin <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">&#39;merge-descriptors&#39;</span><span class="token punctuation">)</span>
<span class="token keyword">var</span> proto <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">&#39;./application&#39;</span><span class="token punctuation">)</span>
<span class="token keyword">var</span> Route <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">&#39;./router/route&#39;</span><span class="token punctuation">)</span>
<span class="token keyword">var</span> Router <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">&#39;./router&#39;</span><span class="token punctuation">)</span>
<span class="token keyword">var</span> req <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">&#39;./request&#39;</span><span class="token punctuation">)</span>
<span class="token keyword">var</span> res <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">&#39;./response&#39;</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="createapplication" tabindex="-1"><a class="header-anchor" href="#createapplication"><span><code>createApplication()</code></span></a></h2><p>暴露了一个 <code>createApplication()</code> 函数，用于创建一个新的 Express 应用。</p><p>该函数主要创建了一个应用程序对象，该 <code>app</code> 对象首先混入了 <code>EventEmitter</code> 和 <code>proto</code>（<strong>application.js</strong> 导出的对象），并分别将 <code>request</code> 属性和 <code>response</code> 属性初始化成了 <code>req</code>（<strong>request.js</strong> 导出的对象）实例和 <code>res</code>（<strong>response.js</strong> 导出的对象）实例。</p><div class="language-javascript line-numbers-mode" data-ext="js" data-title="js"><pre class="language-javascript"><code>exports <span class="token operator">=</span> module<span class="token punctuation">.</span>exports <span class="token operator">=</span> createApplication

<span class="token keyword">function</span> <span class="token function">createApplication</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token keyword">var</span> <span class="token function-variable function">app</span> <span class="token operator">=</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token parameter">req<span class="token punctuation">,</span> res<span class="token punctuation">,</span> next</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    app<span class="token punctuation">.</span><span class="token function">handle</span><span class="token punctuation">(</span>req<span class="token punctuation">,</span> res<span class="token punctuation">,</span> next<span class="token punctuation">)</span>
  <span class="token punctuation">}</span>

  <span class="token function">mixin</span><span class="token punctuation">(</span>app<span class="token punctuation">,</span> <span class="token class-name">EventEmitter</span><span class="token punctuation">.</span>prototype<span class="token punctuation">,</span> <span class="token boolean">false</span><span class="token punctuation">)</span>
  <span class="token function">mixin</span><span class="token punctuation">(</span>app<span class="token punctuation">,</span> proto<span class="token punctuation">,</span> <span class="token boolean">false</span><span class="token punctuation">)</span>

  <span class="token comment">// expose the prototype that will get set on requests</span>
  app<span class="token punctuation">.</span>request <span class="token operator">=</span> Object<span class="token punctuation">.</span><span class="token function">create</span><span class="token punctuation">(</span>req<span class="token punctuation">,</span> <span class="token punctuation">{</span>
    <span class="token literal-property property">app</span><span class="token operator">:</span> <span class="token punctuation">{</span> <span class="token literal-property property">configurable</span><span class="token operator">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span> <span class="token literal-property property">enumerable</span><span class="token operator">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span> <span class="token literal-property property">writable</span><span class="token operator">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span> <span class="token literal-property property">value</span><span class="token operator">:</span> app <span class="token punctuation">}</span>
  <span class="token punctuation">}</span><span class="token punctuation">)</span>

  <span class="token comment">// expose the prototype that will get set on responses</span>
  app<span class="token punctuation">.</span>response <span class="token operator">=</span> Object<span class="token punctuation">.</span><span class="token function">create</span><span class="token punctuation">(</span>res<span class="token punctuation">,</span> <span class="token punctuation">{</span>
    <span class="token literal-property property">app</span><span class="token operator">:</span> <span class="token punctuation">{</span> <span class="token literal-property property">configurable</span><span class="token operator">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span> <span class="token literal-property property">enumerable</span><span class="token operator">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span> <span class="token literal-property property">writable</span><span class="token operator">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span> <span class="token literal-property property">value</span><span class="token operator">:</span> app <span class="token punctuation">}</span>
  <span class="token punctuation">}</span><span class="token punctuation">)</span>

  app<span class="token punctuation">.</span><span class="token function">init</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
  <span class="token keyword">return</span> app
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>具体功能如下：</p><ul><li><code>app</code> 函数: 这是一个处理请求的函数，当请求到达时，<code>app.handle(req, res, next)</code> 会被调用来处理请求。</li><li><code>mixin(app, EventEmitter.prototype, false)</code>: 将 <code>EventEmitter</code> 的原型方法混入 <code>app</code>，使得 <code>app</code> 具备事件处理能力，<code>false</code> 代表不覆盖原对象属性。</li><li><code>mixin(app, proto, false)</code>: 将 <code>application.js</code> 中定义的核心功能混入 <code>app</code>。</li><li><code>app.request</code> 和 <code>app.response</code>: 创建 <code>req</code> 和 <code>res</code> 的原型对象，并绑定 <code>app</code>。</li><li><code>app.init()</code>: 初始化应用。</li></ul><h2 id="暴露的接口" tabindex="-1"><a class="header-anchor" href="#暴露的接口"><span>暴露的接口</span></a></h2><p>暴露的接口如下：</p><div class="language-javascript line-numbers-mode" data-ext="js" data-title="js"><pre class="language-javascript"><code>exports<span class="token punctuation">.</span>application <span class="token operator">=</span> proto
exports<span class="token punctuation">.</span>request <span class="token operator">=</span> req
exports<span class="token punctuation">.</span>response <span class="token operator">=</span> res

exports<span class="token punctuation">.</span>Route <span class="token operator">=</span> Route
exports<span class="token punctuation">.</span>Router <span class="token operator">=</span> Router

exports<span class="token punctuation">.</span>json <span class="token operator">=</span> bodyParser<span class="token punctuation">.</span>json
exports<span class="token punctuation">.</span>query <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">&#39;./middleware/query&#39;</span><span class="token punctuation">)</span>
exports<span class="token punctuation">.</span>raw <span class="token operator">=</span> bodyParser<span class="token punctuation">.</span>raw
exports<span class="token punctuation">.</span>static <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">&#39;serve-static&#39;</span><span class="token punctuation">)</span>
exports<span class="token punctuation">.</span>text <span class="token operator">=</span> bodyParser<span class="token punctuation">.</span>text
exports<span class="token punctuation">.</span>urlencoded <span class="token operator">=</span> bodyParser<span class="token punctuation">.</span>urlencoded
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ul><li><code>application</code>, <code>request</code>, <code>response</code>: 分别暴露了应用的原型和请求、响应对象的原型，供外部使用或扩展。</li><li><code>Route</code>, <code>Router</code>: 暴露了路由相关的构造函数。</li><li><code>json</code>, <code>query</code>, <code>raw</code>, <code>static</code>, <code>text</code>, <code>urlencoded</code>: 这些是常用的 middleware，用于处理请求的各种内容。</li></ul><h2 id="移除的中间件" tabindex="-1"><a class="header-anchor" href="#移除的中间件"><span>移除的中间件</span></a></h2><p>Express 在较新的版本中移除了许多默认包含的中间件，用户需要手动安装这些中间件。如果用户尝试访问这些被移除的中间件，会抛出错误提示，并引导用户去手动安装。</p><div class="language-javascript line-numbers-mode" data-ext="js" data-title="js"><pre class="language-javascript"><code><span class="token keyword">var</span> removedMiddlewares <span class="token operator">=</span> <span class="token punctuation">[</span>
  <span class="token string">&#39;bodyParser&#39;</span><span class="token punctuation">,</span>
  <span class="token string">&#39;compress&#39;</span><span class="token punctuation">,</span>
  <span class="token string">&#39;cookieSession&#39;</span><span class="token punctuation">,</span>
  <span class="token string">&#39;session&#39;</span><span class="token punctuation">,</span>
  <span class="token string">&#39;logger&#39;</span><span class="token punctuation">,</span>
  <span class="token string">&#39;cookieParser&#39;</span><span class="token punctuation">,</span>
  <span class="token string">&#39;favicon&#39;</span><span class="token punctuation">,</span>
  <span class="token string">&#39;responseTime&#39;</span><span class="token punctuation">,</span>
  <span class="token string">&#39;errorHandler&#39;</span><span class="token punctuation">,</span>
  <span class="token string">&#39;timeout&#39;</span><span class="token punctuation">,</span>
  <span class="token string">&#39;methodOverride&#39;</span><span class="token punctuation">,</span>
  <span class="token string">&#39;vhost&#39;</span><span class="token punctuation">,</span>
  <span class="token string">&#39;csrf&#39;</span><span class="token punctuation">,</span>
  <span class="token string">&#39;directory&#39;</span><span class="token punctuation">,</span>
  <span class="token string">&#39;limit&#39;</span><span class="token punctuation">,</span>
  <span class="token string">&#39;multipart&#39;</span><span class="token punctuation">,</span>
  <span class="token string">&#39;staticCache&#39;</span>
<span class="token punctuation">]</span>

removedMiddlewares<span class="token punctuation">.</span><span class="token function">forEach</span><span class="token punctuation">(</span><span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token parameter">name</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  Object<span class="token punctuation">.</span><span class="token function">defineProperty</span><span class="token punctuation">(</span>exports<span class="token punctuation">,</span> name<span class="token punctuation">,</span> <span class="token punctuation">{</span>
    <span class="token function-variable function">get</span><span class="token operator">:</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
      <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">Error</span><span class="token punctuation">(</span>
        <span class="token string">&#39;Most middleware (like &#39;</span> <span class="token operator">+</span>
          name <span class="token operator">+</span>
          <span class="token string">&#39;) is no longer bundled with Express and must be installed separately. Please see https://github.com/senchalabs/connect#middleware.&#39;</span>
      <span class="token punctuation">)</span>
    <span class="token punctuation">}</span><span class="token punctuation">,</span>
    <span class="token literal-property property">configurable</span><span class="token operator">:</span> <span class="token boolean">true</span>
  <span class="token punctuation">}</span><span class="token punctuation">)</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="总结" tabindex="-1"><a class="header-anchor" href="#总结"><span>总结</span></a></h2><p><strong>express.js</strong> 文件的核心功能是创建并返回一个 Express 应用实例，并提供了一些内置的中间件和路由工具。移除的中间件部分提醒开发者需要手动安装以前版本中内置的中间件。</p>`,16);function y(x,f){const e=p("ExternalLinkIcon");return o(),c("div",null,[r,u,d,n("ul",null,[k,v,n("li",null,[n("a",m,[b,i(e)]),s(": 一个合并对象属性的模块，用于将多个对象的属性混入到一个对象中。")]),g]),h])}const w=t(l,[["render",y],["__file","02-express.js.html.vue"]]),_=JSON.parse('{"path":"/backend/node/express/02-express.js.html","title":"express.js","lang":"zh-CN","frontmatter":{"title":"express.js","date":"2024-08-23T00:00:00.000Z","icon":"architecture","category":["node"],"tag":["express"],"description":"express.js 文件定义了 Express 应用的主入口。它的核心功能是创建一个新的 Express 应用实例，并暴露相关的原型和构造函数，使应用能够处理 HTTP 请求并管理中间件（middleware）。 模块依赖 引入了一些依赖模块： bodyParser: 用于解析请求体（body）。 EventEmitter: Node.js 的事件模...","head":[["meta",{"property":"og:url","content":"https://dribble-njr.github.io/blog/blog/backend/node/express/02-express.js.html"}],["meta",{"property":"og:title","content":"express.js"}],["meta",{"property":"og:description","content":"express.js 文件定义了 Express 应用的主入口。它的核心功能是创建一个新的 Express 应用实例，并暴露相关的原型和构造函数，使应用能够处理 HTTP 请求并管理中间件（middleware）。 模块依赖 引入了一些依赖模块： bodyParser: 用于解析请求体（body）。 EventEmitter: Node.js 的事件模..."}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"og:updated_time","content":"2024-08-26T06:52:18.000Z"}],["meta",{"property":"article:author","content":"njr"}],["meta",{"property":"article:tag","content":"express"}],["meta",{"property":"article:published_time","content":"2024-08-23T00:00:00.000Z"}],["meta",{"property":"article:modified_time","content":"2024-08-26T06:52:18.000Z"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"express.js\\",\\"image\\":[\\"\\"],\\"datePublished\\":\\"2024-08-23T00:00:00.000Z\\",\\"dateModified\\":\\"2024-08-26T06:52:18.000Z\\",\\"author\\":[{\\"@type\\":\\"Person\\",\\"name\\":\\"njr\\",\\"url\\":\\"https://github.com/dribble-njr/blog\\",\\"email\\":\\"wzw15292257101@163.com\\"}]}"]]},"headers":[{"level":2,"title":"1 模块依赖","slug":"模块依赖","link":"#模块依赖","children":[]},{"level":2,"title":"2 createApplication()","slug":"createapplication","link":"#createapplication","children":[]},{"level":2,"title":"3 暴露的接口","slug":"暴露的接口","link":"#暴露的接口","children":[]},{"level":2,"title":"4 移除的中间件","slug":"移除的中间件","link":"#移除的中间件","children":[]},{"level":2,"title":"5 总结","slug":"总结","link":"#总结","children":[]}],"git":{"createdTime":1724655138000,"updatedTime":1724655138000,"contributors":[{"name":"dribble-njr","email":"wzw15292257101@163.com","commits":1}]},"readingTime":{"minutes":2.65,"words":794},"filePathRelative":"backend/node/express/02-express.js.md","localizedDate":"2024年8月23日","excerpt":"","autoDesc":true}');export{w as comp,_ as data};
