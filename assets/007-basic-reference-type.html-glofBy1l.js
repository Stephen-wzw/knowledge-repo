import{_ as t,r as c,o,c as p,a,d as e,b as l,e as n}from"./app-AT_ngeGo.js";const d={},r=n(`<p>引用值（或者对象）是某个特定 <strong>引用类型</strong> 的实例。</p><p>新对象通过使用 <code>new</code> 操作符后跟一个构造函数（constructor）来创建。构造函数就是用来创建新对象的函数，比如下面这行代码：</p><div class="language-javascript line-numbers-mode" data-ext="js" data-title="js"><pre class="language-javascript"><code><span class="token keyword">let</span> now <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Date</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>这行代码创建了引用类型 <code>Date</code> 的一个新实例，并将它保存在变量 <code>now</code> 中。<code>Date()</code> 在这里就是构造函数，它负责创建一个只有默认属性和方法的简单对象。</p><p>ECMAScript 提供了很多像 <code>Date</code> 这样的原生引用类型，帮助开发者实现常见的任务。</p><h2 id="date" tabindex="-1"><a class="header-anchor" href="#date"><span><code>Date</code></span></a></h2><p><code>Date</code> 类型将日期保存为自协调世界时（UTC，Universal Time Coordinated）时间 1970 年 1 月 1 日午夜（零时）至今所经过的毫秒数。</p><p>要创建日期对象，就使用 <code>new</code> 操作符来调用 <code>Date</code> 构造函数：</p><div class="language-javascript line-numbers-mode" data-ext="js" data-title="js"><pre class="language-javascript"><code><span class="token keyword">let</span> now <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Date</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>在不给 <code>Date</code> 构造函数传参数的情况下，创建的对象将保存当前日期和时间。要基于其他日期和时间创建日期对象，必须传入其毫秒表示（UNIX 纪元 1970 年 1 月 1 日午夜之后的毫秒数）。</p><p>为了得到这个时间，可以使用两个辅助函数：</p><ul><li><code>Date.parse()</code></li><li><code>Date.UTC()</code></li></ul><h3 id="date-parse-和-date-utc" tabindex="-1"><a class="header-anchor" href="#date-parse-和-date-utc"><span><code>Date.parse()</code> 和 <code>Date.UTC()</code></span></a></h3><h4 id="date-parse" tabindex="-1"><a class="header-anchor" href="#date-parse"><span><code>Date.parse()</code></span></a></h4><p><code>Date.parse()</code> 方法接收一个表示日期的字符串参数，尝试将这个字符串转换为表示该日期的毫秒数（本地时间）。</p><p>支持下列日期格式：</p><ul><li>「月/日/年」，如 <code>&quot;5/23/2019&quot;</code>；</li><li>「月名 日, 年」，如 <code>&quot;May 23, 2019&quot;</code>；</li><li>「周几 月名 日 年 时:分:秒 时区」，如 <code>&quot;Tue May 23 2019 00:00:00 GMT-0700&quot;</code>；</li><li>ISO 8601 扩展格式「YYYY-MM-DDTHH:mm:ss.sssZ」，如 <code>&quot;2019-05-23T00:00:00&quot;</code>（只适用于兼容 ES5 的实现）。</li></ul><p>如果传给 <code>Date.parse()</code> 的字符串并不表示日期，则该方法会返回 <code>NaN</code>。</p><p>如果直接把表示日期的字符串传给 <code>Date</code> 构造函数，那么 <code>Date</code> 会在后台调用 <code>Date.parse()</code>。</p><div class="language-javascript line-numbers-mode" data-ext="js" data-title="js"><pre class="language-javascript"><code><span class="token keyword">let</span> someDate1 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Date</span><span class="token punctuation">(</span><span class="token string">&#39;May 23, 2019&#39;</span><span class="token punctuation">)</span>
<span class="token keyword">let</span> someDate2 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Date</span><span class="token punctuation">(</span>Date<span class="token punctuation">.</span><span class="token function">parse</span><span class="token punctuation">(</span><span class="token string">&#39;May 23, 2019&#39;</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><p>这两行代码得到的日期对象相同。</p><h4 id="date-utc" tabindex="-1"><a class="header-anchor" href="#date-utc"><span><code>Date.UTC()</code></span></a></h4><p><code>Date.UTC()</code> 方法也返回日期的毫秒表示（UTC 时间），参数是「年、零起点月数（1 月是 0，2 月是 1，以此类推）、日（1 ~ 31）、时（0 ~ 23）、分、秒和毫秒」。</p><p>这些参数中，只有前两个（年和月）是必需的。如果不提供日，那么默认为 1 日。其他参数的默认值都是 0。</p><div class="language-javascript line-numbers-mode" data-ext="js" data-title="js"><pre class="language-javascript"><code><span class="token comment">// GMT 时间 2000 年 1 月 1 日零点</span>
<span class="token keyword">let</span> y2k <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Date</span><span class="token punctuation">(</span>Date<span class="token punctuation">.</span><span class="token constant">UTC</span><span class="token punctuation">(</span><span class="token number">2000</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token comment">// 2000-01-01T00:00:00.000Z</span>
<span class="token comment">// GMT 时间 2005 年 5 月 5 日下午 5 点 55 分 55 秒</span>
<span class="token keyword">let</span> allFives <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Date</span><span class="token punctuation">(</span>Date<span class="token punctuation">.</span><span class="token constant">UTC</span><span class="token punctuation">(</span><span class="token number">2005</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">,</span> <span class="token number">17</span><span class="token punctuation">,</span> <span class="token number">55</span><span class="token punctuation">,</span> <span class="token number">55</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token comment">// 2005-05-05T17:55:55.000Z</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>与 <code>Date.parse()</code> 一样，<code>Date.UTC()</code> 也会被 <code>Date</code> 构造函数隐式调用，但有一个区别：这种情况下创建的是本地日期，不是 <code>GMT</code> 日期。</p><div class="language-javascript line-numbers-mode" data-ext="js" data-title="js"><pre class="language-javascript"><code><span class="token comment">// 本地时间（北京）为：UTC + 8，因此会相差 8 * 60 * 60 * 1000 = 28800000</span>
<span class="token keyword">let</span> time <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Date</span><span class="token punctuation">(</span>Date<span class="token punctuation">.</span><span class="token constant">UTC</span><span class="token punctuation">(</span><span class="token number">2000</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">-</span> <span class="token keyword">new</span> <span class="token class-name">Date</span><span class="token punctuation">(</span><span class="token number">2000</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token comment">// 28800000</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div>`,27),i={class:"hint-container tip"},u=a("p",{class:"hint-container-title"},"JS 中的时间",-1),k={href:"https://juejin.cn/post/7063118893115670536",target:"_blank",rel:"noopener noreferrer"},m=n('<h4 id="对比" tabindex="-1"><a class="header-anchor" href="#对比"><span>对比</span></a></h4><p><code>Date.UTC()</code> 日期指的是在没有时区偏差的情况下(将日期转换为 GMT 时间)的日期值。</p><p><code>Date.parse()</code> 方法是基于本地时区建立的，而 <code>Date.UTC()</code> 方法是基于无时区偏差建立的。</p><p>所以如果我们对两个方法传入相同的时间，我们会发现 <code>Date.UTC()</code> 方法得到的毫秒数相对于 <code>Date.parse()</code> 方法得到的毫秒数会多八个小时的毫秒数(这里的本地时区指的是北京时间)。</p>',4);function v(h,b){const s=c("ExternalLinkIcon");return o(),p("div",null,[r,a("div",i,[u,a("p",null,[e("不同时间概念，详见 "),a("a",k,[e("GMT、UTC、时区、JavaScript Date 总结"),l(s)]),e("。")])]),m])}const g=t(d,[["render",v],["__file","007-basic-reference-type.html.vue"]]),y=JSON.parse('{"path":"/frontend/basic/javascript/007-basic-reference-type.html","title":"基本引用类型","lang":"zh-CN","frontmatter":{"title":"基本引用类型","date":"2024-04-17T00:00:00.000Z","icon":"reference","category":["JavaScript"],"tag":["language advanced"],"description":"引用值（或者对象）是某个特定 引用类型 的实例。 新对象通过使用 new 操作符后跟一个构造函数（constructor）来创建。构造函数就是用来创建新对象的函数，比如下面这行代码： 这行代码创建了引用类型 Date 的一个新实例，并将它保存在变量 now 中。Date() 在这里就是构造函数，它负责创建一个只有默认属性和方法的简单对象。 ECMASc...","head":[["meta",{"property":"og:url","content":"https://dribble-njr.github.io/blog/blog/frontend/basic/javascript/007-basic-reference-type.html"}],["meta",{"property":"og:title","content":"基本引用类型"}],["meta",{"property":"og:description","content":"引用值（或者对象）是某个特定 引用类型 的实例。 新对象通过使用 new 操作符后跟一个构造函数（constructor）来创建。构造函数就是用来创建新对象的函数，比如下面这行代码： 这行代码创建了引用类型 Date 的一个新实例，并将它保存在变量 now 中。Date() 在这里就是构造函数，它负责创建一个只有默认属性和方法的简单对象。 ECMASc..."}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"og:updated_time","content":"2024-04-18T13:07:12.000Z"}],["meta",{"property":"article:author","content":"njr"}],["meta",{"property":"article:tag","content":"language advanced"}],["meta",{"property":"article:published_time","content":"2024-04-17T00:00:00.000Z"}],["meta",{"property":"article:modified_time","content":"2024-04-18T13:07:12.000Z"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"基本引用类型\\",\\"image\\":[\\"\\"],\\"datePublished\\":\\"2024-04-17T00:00:00.000Z\\",\\"dateModified\\":\\"2024-04-18T13:07:12.000Z\\",\\"author\\":[{\\"@type\\":\\"Person\\",\\"name\\":\\"njr\\",\\"url\\":\\"https://github.com/dribble-njr/blog\\",\\"email\\":\\"wzw15292257101@163.com\\"}]}"]]},"headers":[{"level":2,"title":"1 Date","slug":"date","link":"#date","children":[{"level":3,"title":"1.1 Date.parse() 和 Date.UTC()","slug":"date-parse-和-date-utc","link":"#date-parse-和-date-utc","children":[{"level":4,"title":"1.1.1 Date.parse()","slug":"date-parse","link":"#date-parse","children":[]},{"level":4,"title":"1.1.2 Date.UTC()","slug":"date-utc","link":"#date-utc","children":[]},{"level":4,"title":"1.1.3 对比","slug":"对比","link":"#对比","children":[]}]}]}],"git":{"createdTime":1713445632000,"updatedTime":1713445632000,"contributors":[{"name":"dribble-njr","email":"wzw15292257101@163.com","commits":1}]},"readingTime":{"minutes":3.05,"words":914},"filePathRelative":"frontend/basic/javascript/007-basic-reference-type.md","localizedDate":"2024年4月17日","excerpt":"","autoDesc":true}');export{g as comp,y as data};
