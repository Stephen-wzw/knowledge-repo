const e=JSON.parse('{"key":"v-8dd92da4","path":"/frontend/browser/004-memory-management.html","title":"JavaScript 内存管理","lang":"zh-CN","frontmatter":{"title":"JavaScript 内存管理","date":"2022-01-13T00:00:00.000Z","category":["浏览器"],"tag":["垃圾回收"],"description":"像 C、C++ 等编程语言都需要手动管理内存，在创建变量时需要申请（malloc()），不需要用了之后在释放内存空间（free()）。而 JavaScript、Java、Python 等都是自动管理内存，在创建变量时自动分配内存，而在不使用后自动释放，释放的过程称为垃圾回收。 虽然不同语言管理内存的方式不同，但是内存声明周期是基本一致的： 1. 分配你...","head":[["meta",{"property":"og:url","content":"https://dribble-njr.github.io/blog/frontend/browser/004-memory-management.html"}],["meta",{"property":"og:title","content":"JavaScript 内存管理"}],["meta",{"property":"og:description","content":"像 C、C++ 等编程语言都需要手动管理内存，在创建变量时需要申请（malloc()），不需要用了之后在释放内存空间（free()）。而 JavaScript、Java、Python 等都是自动管理内存，在创建变量时自动分配内存，而在不使用后自动释放，释放的过程称为垃圾回收。 虽然不同语言管理内存的方式不同，但是内存声明周期是基本一致的： 1. 分配你..."}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"og:updated_time","content":"2023-03-25T10:47:40.000Z"}],["meta",{"property":"article:author","content":"njr"}],["meta",{"property":"article:tag","content":"垃圾回收"}],["meta",{"property":"article:published_time","content":"2022-01-13T00:00:00.000Z"}],["meta",{"property":"article:modified_time","content":"2023-03-25T10:47:40.000Z"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"JavaScript 内存管理\\",\\"image\\":[\\"\\"],\\"datePublished\\":\\"2022-01-13T00:00:00.000Z\\",\\"dateModified\\":\\"2023-03-25T10:47:40.000Z\\",\\"author\\":[{\\"@type\\":\\"Person\\",\\"name\\":\\"njr\\",\\"url\\":\\"https://github.com/dribble-njr/blog\\",\\"email\\":\\"wzw15292257101@163.com\\"}]}"]]},"headers":[{"level":2,"title":"分配内存空间","slug":"分配内存空间","link":"#分配内存空间","children":[]},{"level":2,"title":"常见的垃圾回收算法","slug":"常见的垃圾回收算法","link":"#常见的垃圾回收算法","children":[{"level":3,"title":"引用计数算法","slug":"引用计数算法","link":"#引用计数算法","children":[]},{"level":3,"title":"标记清除算法","slug":"标记清除算法","link":"#标记清除算法","children":[]}]},{"level":2,"title":"V8 垃圾回收机制","slug":"v8-垃圾回收机制","link":"#v8-垃圾回收机制","children":[{"level":3,"title":"V8 内存限制","slug":"v8-内存限制","link":"#v8-内存限制","children":[]},{"level":3,"title":"分代堆布局","slug":"分代堆布局","link":"#分代堆布局","children":[]},{"level":3,"title":"副垃圾回收器——清道夫（Scavenge）","slug":"副垃圾回收器——清道夫-scavenge","link":"#副垃圾回收器——清道夫-scavenge","children":[]},{"level":3,"title":"主垃圾回收器 —— 全量标记和整理（Full Mark-Compact）","slug":"主垃圾回收器-——-全量标记和整理-full-mark-compact","link":"#主垃圾回收器-——-全量标记和整理-full-mark-compact","children":[]}]},{"level":2,"title":"Orinoco","slug":"orinoco","link":"#orinoco","children":[{"level":3,"title":"并行垃圾回收（Parallel）","slug":"并行垃圾回收-parallel","link":"#并行垃圾回收-parallel","children":[]},{"level":3,"title":"增量垃圾回收（Incremental）","slug":"增量垃圾回收-incremental","link":"#增量垃圾回收-incremental","children":[]},{"level":3,"title":"并发垃圾回收（Concurrent）","slug":"并发垃圾回收-concurrent","link":"#并发垃圾回收-concurrent","children":[]}]},{"level":2,"title":"总结","slug":"总结","link":"#总结","children":[]},{"level":2,"title":"参考链接","slug":"参考链接","link":"#参考链接","children":[]}],"git":{"createdTime":1677733227000,"updatedTime":1679741260000,"contributors":[{"name":"Stephen-wzw","email":"wzw15292257101@163.com","commits":3},{"name":"dribble-njr","email":"wzw15292257101@163.com","commits":1}]},"readingTime":{"minutes":10.79,"words":3236},"filePathRelative":"frontend/browser/004-memory-management.md","localizedDate":"2022年1月13日","excerpt":"","autoDesc":true}');export{e as data};
