import{_ as t,r as n,o,c as p,a as e,b as a,e as i,f as s}from"./app-5iLbWUwk.js";const d={},c=s('<h2 id="web-apps-历史" tabindex="-1"><a class="header-anchor" href="#web-apps-历史" aria-hidden="true">#</a> Web Apps 历史</h2><p>在了解 Qwik 之前，有必要了解 Web 应用程序的历史。</p><h3 id="第一代" tabindex="-1"><a class="header-anchor" href="#第一代" aria-hidden="true">#</a> 第一代</h3><p>第一代应用程序采用 MPA 技术，是在服务器上通过 PHP 等技术完成的。</p><p>服务器会渲染一系列包含 HTML 和 JavaScript 的文档，客户端使用 jQuery 在模板中添加交互。</p><p>这种方法的问题在于必须处理两种语言，一种在服务器端（如 PHP），另一种在客户端（JavaScript），这可能会导致在 PHP 中编写的元素与其在 JavaScript 中的行为之间产生混淆，从而导致多次编写一个功能。</p><p>这就是这种方法难以扩展的原因。</p><h3 id="第二代" tabindex="-1"><a class="header-anchor" href="#第二代" aria-hidden="true">#</a> 第二代</h3><p>第二代应用程序就是 SPA，即 AngularJS、Angular、React、Vue.js 等现代框架，这些框架都基于 MVC 架构。</p><p>SPA 只在客户端向服务器发起请求更新状态，但是在首次加载时，浏览器会下载所有 JavaScript 代码。</p><p>SPA 在首次加载时会是一个空白页，需要很长时间才能加载，而且如果想开发大型应用程序，它不具备可扩展性。</p><figure><img src="https://raw.githubusercontent.com/dribble-njr/typora-njr/master/img/63e3d6905bacd65c5da3920b_Client Rendering-min.jpg" alt="client renderin - Adservio" tabindex="0" loading="lazy"><figcaption>client renderin - Adservio</figcaption></figure><h3 id="ssr" tabindex="-1"><a class="header-anchor" href="#ssr" aria-hidden="true">#</a> SSR</h3><p>处于第二代和第三代的技术就是服务端渲染，比如 Next.js 或 Svelte。</p><p>在 SSR 中，仍然构建 SPA 应用程序，然而步骤略有不同：</p><ol><li><p>服务端拼接 HTML</p><p>用户请求某个页面时，服务端会拼接好一个页面的 HTML 结构返回给客户端。</p></li><li><p>客户端对 HTML 进行预渲染</p><p>HTML 结构加载显示，但是 JavaScript 代码还未加载，此时页面还不能进行交互。</p></li><li><p>进行 hydration（水合）处理</p><p>通过 JavaScript 代码的执行，动态地为当前页面上的 DOM 绑定事件。</p></li></ol><blockquote><p>HTML 相当于一个干货海参，JavaScript 代码理解为水，hydration 过程就是用水把海参泡发，即达到页面可正常交互的状态。</p></blockquote><p>SSR 确实将首屏加载速度变快，但仍有一些缺点：</p><ol><li>在水合之前，此时页面仍然不可交互，所以 tti（页面可交互时间）并没有太多优化。</li><li>下载的 JavaScript 代码仍然是比较全量的代码。</li><li>比较耗费服务器资源，维护成本也较高。</li></ol><figure><img src="https://raw.githubusercontent.com/dribble-njr/typora-njr/master/img/63e3d6905bacd612ada3920c_Server Rendering-min (1).jpg" alt="server renderin - Adservio " tabindex="0" loading="lazy"><figcaption>server renderin - Adservio </figcaption></figure><p>为了减少加载 JavaScript 代码所需的时间，Astro 框架出现了。</p><p>Astro 有一个名为「部分水合」的概念，因此在页面可见之前，它不会对页面进行水合。</p><p>例如，如果联系表单位于页面底部，而我们位于页面顶部，那么联系表单将不可见，这样就不需要加载表单所需的 JavaScript。</p><p>只有当页面向下滚动到有联系表单的部分时，才会进行水合，将表单中的组件与所需的 JavaScript 水合。</p><h2 id="qwik-介绍" tabindex="-1"><a class="header-anchor" href="#qwik-介绍" aria-hidden="true">#</a> Qwik 介绍</h2><p>Qwik 可以理解为一个语法接近 React 的前端 SSR 框架，但是相比于 Astro，它的优化更加彻底：<strong>「0 水合」和「0 JavaScript」</strong>。</p><p>例如，如果我们在页面底部有一个联系表单，Angular、React 或 Vue 会在首次加载时加载所需的 JavaScript，Astro 会在我们向下滚动时加载，而 Qwik 只有在点击表单的发送按钮时才会加载，它不是在页面出现表单时加载 JavaScript，<strong>而是在与表单交互时加载</strong>。</p><p>Qwik 的核心理念：to do it faster by doing nothing。</p><h3 id="resumability" tabindex="-1"><a class="header-anchor" href="#resumability" aria-hidden="true">#</a> Resumability</h3><p>现代的框架都在尝试优化水合作用，Qwik 的独特之处在于 <strong>可恢复性</strong> (no eager JS execution and no hydration)。</p><figure><img src="https://raw.githubusercontent.com/dribble-njr/typora-njr/master/img/63e3d6905bacd6233ba391e2_Hydration - Ready-min.jpg" alt="resumability in qwik framework" tabindex="0" loading="lazy"><figcaption>resumability in qwik framework</figcaption></figure><p>如果有一个庞大的应用程序，那么加载水合将会耗费大量时间，即使使用部分水合技术，也会面临挑战。而使用可恢复性的 Qwik 技术，只加载 HTML，则不会耗费大量时间。</p><h2 id="思考" tabindex="-1"><a class="header-anchor" href="#思考" aria-hidden="true">#</a> 思考</h2><p>从概念上看，Qwik 确实会大幅提升庞大应用程序的性能，能提供最快的首次渲染和交互性能。然而，作为一个新技术，尽管它有潜力成为未来广泛使用的框架之一，仍然需要时间和社区支持。</p><h2 id="参考资料" tabindex="-1"><a class="header-anchor" href="#参考资料" aria-hidden="true">#</a> 参考资料</h2>',35),l={href:"https://www.adservio.fr/post/a-brief-history-of-web-apps-why-qwik-is-innovative",target:"_blank",rel:"noopener noreferrer"},h={href:"https://www.adservio.fr/post/qwik-the-post-modern-framework",target:"_blank",rel:"noopener noreferrer"},f={href:"https://segmentfault.com/a/1190000042250628",target:"_blank",rel:"noopener noreferrer"};function g(b,u){const r=n("ExternalLinkIcon");return o(),p("div",null,[c,e("ol",null,[e("li",null,[e("a",l,[a("A Brief History of Web Apps – Why Qwik is Innovative"),i(r)])]),e("li",null,[e("a",h,[a("Qwik – The Post-Modern Framework"),i(r)])]),e("li",null,[e("a",f,[a("Qwik.js框架是如何追求极致性能的?!"),i(r)])])])])}const m=t(d,[["render",g],["__file","005-qwik.html.vue"]]);export{m as default};
