import{_ as n,o as s,c as a,e as t}from"./app-icA3w3jb.js";const e={},o=t(`<p>Symbol 是 ES6 新增，BigInt 是 ES10 新增数据类型。</p><h2 id="symbol" tabindex="-1"><a class="header-anchor" href="#symbol"><span>Symbol</span></a></h2><p>Symbol 表示<strong>唯一、不可变</strong>的符号，确保对象属性使用唯一标识符，不会发生属性冲突的危险。</p><h3 id="基本使用" tabindex="-1"><a class="header-anchor" href="#基本使用"><span>基本使用</span></a></h3><p>可以使用 <code>Symbol()</code> 函数初始化，调用这个函数时，可以传入一个字符串参数作为对符号的描述，但是传入相同的字符串描述返回的仍然是不同的符号。</p><div class="language-javascript line-numbers-mode" data-ext="js" data-title="js"><pre class="language-javascript"><code><span class="token keyword">let</span> symbol1 <span class="token operator">=</span> <span class="token function">Symbol</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
<span class="token keyword">let</span> symbol2 <span class="token operator">=</span> <span class="token function">Symbol</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>symbol1 <span class="token operator">===</span> symbol2<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// false</span>

<span class="token keyword">let</span> symbol3 <span class="token operator">=</span> <span class="token function">Symbol</span><span class="token punctuation">(</span><span class="token string">&#39;foo&#39;</span><span class="token punctuation">)</span>
<span class="token keyword">let</span> symbol4 <span class="token operator">=</span> <span class="token function">Symbol</span><span class="token punctuation">(</span><span class="token string">&#39;foo&#39;</span><span class="token punctuation">)</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>symbol3 <span class="token operator">===</span> symbol4<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// false</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><code>Symbol()</code> 函数不是构造函数，因此不能进行 new 操作，这是为了避免创建符号包装对象，如果确实想使用符号包装对象，可以用 <code>Object()</code> 函数。</p><div class="language-javascript line-numbers-mode" data-ext="js" data-title="js"><pre class="language-javascript"><code><span class="token keyword">let</span> symbol <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Symbol</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token comment">// TypeError: Symbol is not a constructor</span>
<span class="token keyword">let</span> mySymbol <span class="token operator">=</span> <span class="token function">Symbol</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
<span class="token keyword">let</span> wrappedSymbol <span class="token operator">=</span> <span class="token function">Object</span><span class="token punctuation">(</span>mySymbol<span class="token punctuation">)</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token keyword">typeof</span> wrappedSymbol<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// object</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="全局符号注册表" tabindex="-1"><a class="header-anchor" href="#全局符号注册表"><span>全局符号注册表</span></a></h3><p>如果需要创建两个相同的符号，以便在运行时的不同文件共用符号实例，可以使用 <code>Symbol.for()</code> 方法。</p><p>这个方法在第一次使用字符串调用时，会检查全局运行时注册表，发现不存在对应的符号，则会生成一个新符号实例并添加到注册表中；后续调用相同的字符串时同样会检查注册表，发现存在则返回该字符串对应的符号实例。</p><div class="language-javascript line-numbers-mode" data-ext="js" data-title="js"><pre class="language-javascript"><code><span class="token keyword">let</span> fooSymbol <span class="token operator">=</span> Symbol<span class="token punctuation">.</span><span class="token function">for</span><span class="token punctuation">(</span><span class="token string">&#39;foo&#39;</span><span class="token punctuation">)</span> <span class="token comment">// 全局注册新符号</span>
<span class="token keyword">let</span> otherFooSymbol <span class="token operator">=</span> Symbol<span class="token punctuation">.</span><span class="token function">for</span><span class="token punctuation">(</span><span class="token string">&#39;foo&#39;</span><span class="token punctuation">)</span> <span class="token comment">// 重用已有符号</span>

console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>fooSymbol <span class="token operator">===</span> otherFooSymbol<span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>传递给 <code>Symbol.for()</code> 方法的任意值都会被转化为字符串：</p><div class="language-javascript line-numbers-mode" data-ext="js" data-title="js"><pre class="language-javascript"><code><span class="token keyword">let</span> emptySymbol <span class="token operator">=</span> Symbol<span class="token punctuation">.</span><span class="token function">for</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>emptySymbol<span class="token punctuation">)</span> <span class="token comment">// Symbol(undefined)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><p>还可以使用 <code>Symbol.keyFor()</code> 来查询全局注册表，这个方法接受符号，返回对应的字符串键，如果查询的不是全局符号，则会返回 <code>undefined</code>。</p><div class="language-javascript line-numbers-mode" data-ext="js" data-title="js"><pre class="language-javascript"><code><span class="token comment">// 创建全局符号</span>
<span class="token keyword">let</span> s <span class="token operator">=</span> Symbol<span class="token punctuation">.</span><span class="token function">for</span><span class="token punctuation">(</span><span class="token string">&#39;foo&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>Symbol<span class="token punctuation">.</span><span class="token function">keyFor</span><span class="token punctuation">(</span>s<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// foo</span>

<span class="token comment">// 创建普通符号</span>
<span class="token keyword">let</span> s2 <span class="token operator">=</span> <span class="token function">Symbol</span><span class="token punctuation">(</span><span class="token string">&#39;bar&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>Symbol<span class="token punctuation">.</span><span class="token function">keyFor</span><span class="token punctuation">(</span>s2<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// undefined</span>

<span class="token comment">// 如果传给 Symbol.keyFor() 的不是符号，则该方法抛出 TypeError：</span>
Symbol<span class="token punctuation">.</span><span class="token function">keyFor</span><span class="token punctuation">(</span><span class="token number">123</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// TypeError: 123 is not a symbol</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="应用场景" tabindex="-1"><a class="header-anchor" href="#应用场景"><span>应用场景</span></a></h3><p>一般用来作为对象的唯一属性名，这就包括了对象字面量属性和 <code>Object.defineProperty()</code> / <code>Object.defineProperties()</code> 定义的属性，对象字面量只能在计算属性语法中使用符号作为属性。</p><div class="language-javascript line-numbers-mode" data-ext="js" data-title="js"><pre class="language-javascript"><code><span class="token keyword">let</span> s1 <span class="token operator">=</span> <span class="token function">Symbol</span><span class="token punctuation">(</span><span class="token string">&#39;foo&#39;</span><span class="token punctuation">)</span><span class="token punctuation">,</span>
    s2 <span class="token operator">=</span> <span class="token function">Symbol</span><span class="token punctuation">(</span><span class="token string">&#39;bar&#39;</span><span class="token punctuation">)</span><span class="token punctuation">,</span>
    s3 <span class="token operator">=</span> <span class="token function">Symbol</span><span class="token punctuation">(</span><span class="token string">&#39;baz&#39;</span><span class="token punctuation">)</span><span class="token punctuation">,</span>
    s4 <span class="token operator">=</span> <span class="token function">Symbol</span><span class="token punctuation">(</span><span class="token string">&#39;qux&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token comment">// 1. 对象字面量</span>
<span class="token keyword">let</span> o <span class="token operator">=</span> <span class="token punctuation">{</span>
  <span class="token punctuation">[</span>s1<span class="token punctuation">]</span><span class="token operator">:</span> <span class="token string">&#39;foo val&#39;</span>
<span class="token punctuation">}</span><span class="token punctuation">;</span>
<span class="token comment">// 这样也可以：o[s1] = &#39;foo val&#39;;</span>

console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>o<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// {Symbol(foo): foo val}</span>

<span class="token comment">// 2. Object.defineProperty()</span>
Object<span class="token punctuation">.</span><span class="token function">defineProperty</span><span class="token punctuation">(</span>o<span class="token punctuation">,</span> s2<span class="token punctuation">,</span> <span class="token punctuation">{</span><span class="token literal-property property">value</span><span class="token operator">:</span> <span class="token string">&#39;bar val&#39;</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>o<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// {Symbol(foo): foo val, Symbol(bar): bar val}</span>

<span class="token comment">// 3. Object.defineProperties()</span>
Object<span class="token punctuation">.</span><span class="token function">defineProperties</span><span class="token punctuation">(</span>o<span class="token punctuation">,</span> <span class="token punctuation">{</span>
  <span class="token punctuation">[</span>s3<span class="token punctuation">]</span><span class="token operator">:</span> <span class="token punctuation">{</span><span class="token literal-property property">value</span><span class="token operator">:</span> <span class="token string">&#39;baz val&#39;</span><span class="token punctuation">}</span><span class="token punctuation">,</span>
  <span class="token punctuation">[</span>s4<span class="token punctuation">]</span><span class="token operator">:</span> <span class="token punctuation">{</span><span class="token literal-property property">value</span><span class="token operator">:</span> <span class="token string">&#39;qux val&#39;</span><span class="token punctuation">}</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>o<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token comment">// {Symbol(foo): foo val, Symbol(bar): bar val,</span>
<span class="token comment">// Symbol(baz): baz val, Symbol(qux): qux val}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>ES6 引入了一些内置符号，比如 <code>Symbol.interator</code> 属性，用以定义在 <code>for-of</code> 循环中的迭代行为。</p><p><code>Symbol.hasInstance</code> 属性会由 <code>instanceof</code> 操作符使用，确定一个实例的原型链上是否有当前构造函数。这个属性定义在 Function 的原型上，因此默认在所有函数和类上都可以调用。</p><h2 id="bigint" tabindex="-1"><a class="header-anchor" href="#bigint"><span>BigInt</span></a></h2><p>BigInt 是一种数字类型的数据，可以表示任意精度格式的<strong>整数</strong>，使用 BigInt 可以安全地存储和操作大整数。</p><p>BigInt 可以表示大于 <code>2^53 - 1</code> 的整数（可以用 Number 表示的最大数字），BigInt 类型的数据必须添加后缀 n，或者直接使用 <code>BigInt()</code> 函数，它和 <code>Symbol()</code> 一样，不是构造函数，因此也不能和 new 操作符一起使用。</p><div class="language-javascript line-numbers-mode" data-ext="js" data-title="js"><pre class="language-javascript"><code><span class="token keyword">const</span> theBiggestInt <span class="token operator">=</span> <span class="token number">9007199254740991n</span><span class="token punctuation">;</span>

<span class="token keyword">const</span> alsoHuge <span class="token operator">=</span> <span class="token function">BigInt</span><span class="token punctuation">(</span><span class="token number">9007199254740991</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token comment">// ↪ 9007199254740991n</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>因为 BigInt 和 Number 是两种不同的类型，因此：</p><ul><li>不能用于 <code>Math</code> 对象中的方法；</li><li>不能和任何 <code>Number</code> 实例混合运算，两者必须转换成同一种类型。在两种类型来回转换时要小心，因为 <code>BigInt</code> 变量在转换成 <code>Number</code> 变量时可能会丢失精度。</li></ul>`,27),p=[o];function c(l,i){return s(),a("div",null,p)}const r=n(e,[["render",c],["__file","0013、Symbol与BigInt.html.vue"]]),d=JSON.parse('{"path":"/frontend/basic/javascript/0013%E3%80%81Symbol%E4%B8%8EBigInt.html","title":"Symbol 和 BigInt","lang":"zh-CN","frontmatter":{"title":"Symbol 和 BigInt","date":"2022-08-23T00:00:00.000Z","category":["JavaScript"],"tag":["数据类型","Symbol","BigInt"],"description":"Symbol 是 ES6 新增，BigInt 是 ES10 新增数据类型。 Symbol Symbol 表示唯一、不可变的符号，确保对象属性使用唯一标识符，不会发生属性冲突的危险。 基本使用 可以使用 Symbol() 函数初始化，调用这个函数时，可以传入一个字符串参数作为对符号的描述，但是传入相同的字符串描述返回的仍然是不同的符号。 Symbol()...","head":[["meta",{"property":"og:url","content":"https://dribble-njr.github.io/blog/blog/frontend/basic/javascript/0013%E3%80%81Symbol%E4%B8%8EBigInt.html"}],["meta",{"property":"og:title","content":"Symbol 和 BigInt"}],["meta",{"property":"og:description","content":"Symbol 是 ES6 新增，BigInt 是 ES10 新增数据类型。 Symbol Symbol 表示唯一、不可变的符号，确保对象属性使用唯一标识符，不会发生属性冲突的危险。 基本使用 可以使用 Symbol() 函数初始化，调用这个函数时，可以传入一个字符串参数作为对符号的描述，但是传入相同的字符串描述返回的仍然是不同的符号。 Symbol()..."}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"og:updated_time","content":"2023-03-25T10:47:40.000Z"}],["meta",{"property":"article:author","content":"njr"}],["meta",{"property":"article:tag","content":"数据类型"}],["meta",{"property":"article:tag","content":"Symbol"}],["meta",{"property":"article:tag","content":"BigInt"}],["meta",{"property":"article:published_time","content":"2022-08-23T00:00:00.000Z"}],["meta",{"property":"article:modified_time","content":"2023-03-25T10:47:40.000Z"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"Symbol 和 BigInt\\",\\"image\\":[\\"\\"],\\"datePublished\\":\\"2022-08-23T00:00:00.000Z\\",\\"dateModified\\":\\"2023-03-25T10:47:40.000Z\\",\\"author\\":[{\\"@type\\":\\"Person\\",\\"name\\":\\"njr\\",\\"url\\":\\"https://github.com/dribble-njr/blog\\",\\"email\\":\\"wzw15292257101@163.com\\"}]}"]]},"headers":[{"level":2,"title":"1 Symbol","slug":"symbol","link":"#symbol","children":[{"level":3,"title":"1.1 基本使用","slug":"基本使用","link":"#基本使用","children":[]},{"level":3,"title":"1.2 全局符号注册表","slug":"全局符号注册表","link":"#全局符号注册表","children":[]},{"level":3,"title":"1.3 应用场景","slug":"应用场景","link":"#应用场景","children":[]}]},{"level":2,"title":"2 BigInt","slug":"bigint","link":"#bigint","children":[]}],"git":{"createdTime":1677733227000,"updatedTime":1679741260000,"contributors":[{"name":"Stephen-wzw","email":"wzw15292257101@163.com","commits":1},{"name":"dribble-njr","email":"wzw15292257101@163.com","commits":1}]},"readingTime":{"minutes":3.27,"words":982},"filePathRelative":"frontend/basic/javascript/0013、Symbol与BigInt.md","localizedDate":"2022年8月23日","excerpt":"","autoDesc":true}');export{r as comp,d as data};
